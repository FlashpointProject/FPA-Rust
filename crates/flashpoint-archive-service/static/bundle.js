var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all4) => {
  for (var name2 in all4)
    __defProp(target, name2, { get: all4[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.1";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component3(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component3.prototype.isReactComponent = {};
        Component3.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component3.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component3.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component3.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component3.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty3 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty3.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty3.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref2, self2, source, owner, props) {
          var element3 = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref: ref2,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element3._store = {};
            Object.defineProperty(element3._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element3, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element3, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element3.props);
              Object.freeze(element3);
            }
          }
          return element3;
        };
        function createElement3(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref2 = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref2 = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref2) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref2) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref2, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element3, config, children) {
          if (element3 === null || element3 === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element3 + ".");
          }
          var propName;
          var props = assign({}, element3.props);
          var key = element3.key;
          var ref2 = element3.ref;
          var self2 = element3._self;
          var source = element3._source;
          var owner = element3._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref2 = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element3.type && element3.type.defaultProps) {
              defaultProps = element3.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element3.type, key, ref2, self2, source, owner, props);
        }
        function isValidElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text7) {
          return text7.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element3, index2) {
          if (typeof element3 === "object" && element3 !== null && element3.key != null) {
            {
              checkKeyStringCoercion(element3.key);
            }
            return escape("" + element3.key);
          }
          return index2.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray2(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement2(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray2(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement2(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext3(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef2(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2;
                if (!render.name && !render.displayName) {
                  render.displayName = name2;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo2(type, compare2) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare2 === void 0 ? null : compare2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2;
                if (!type.name && !type.displayName) {
                  type.displayName = name2;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext3(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState6(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef3(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect4(create4, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create4, deps);
        }
        function useInsertionEffect(create4, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create4, deps);
        }
        function useLayoutEffect3(create4, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create4, deps);
        }
        function useCallback3(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo4(create4, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create4, deps);
        }
        function useImperativeHandle(ref2, create4, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref2, create4, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component4) {
          var prototype = Component4.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element3) {
          {
            var has = Function.call.bind(hasOwnProperty3);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name2 = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name2) {
              return "\n\nCheck the render method of `" + name2 + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element3, parentType) {
          if (!element3._store || element3._store.validated || element3.key != null) {
            return;
          }
          element3._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element3 && element3._owner && element3._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element3._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element3);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray2(node2)) {
            for (var i = 0; i < node2.length; i++) {
              var child = node2[i];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element3) {
          {
            var type = element3.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name2 = getComponentNameFromType(type);
              checkPropTypes(propTypes, element3.props, "prop", name2, element3);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys2 = Object.keys(fragment.props);
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray2(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element3 = createElement3.apply(this, arguments);
          if (element3 == null) {
            return element3;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element3);
          } else {
            validatePropTypes(element3);
          }
          return element3;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element3, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children2;
        exports.Component = Component3;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext3;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef2;
        exports.isValidElement = isValidElement2;
        exports.lazy = lazy;
        exports.memo = memo2;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback3;
        exports.useContext = useContext3;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect4;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect3;
        exports.useMemo = useMemo4;
        exports.useReducer = useReducer;
        exports.useRef = useRef3;
        exports.useState = useState6;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push2(heap, node2) {
          var index2 = heap.length;
          heap.push(node2);
          siftUp(heap, node2, index2);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node2, i) {
          var index2 = i;
          while (index2 > 0) {
            var parentIndex = index2 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare2(parent, node2) > 0) {
              heap[parentIndex] = node2;
              heap[index2] = parent;
              index2 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node2, i) {
          var index2 = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index2 < halfLength) {
            var leftIndex = (index2 + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare2(left, node2) < 0) {
              if (rightIndex < length && compare2(right, left) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node2;
                index2 = rightIndex;
              } else {
                heap[index2] = left;
                heap[leftIndex] = node2;
                index2 = leftIndex;
              }
            } else if (rightIndex < length && compare2(right, node2) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node2;
              index2 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare2(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push2(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push2(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push2(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React6 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment4 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty3 = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix3 = name2.toLowerCase().slice(0, 5);
                return prefix3 !== "data-" && prefix3 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name2) {
          return properties.hasOwnProperty(name2) ? properties[name2] : null;
        }
        function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name2;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            RESERVED,
            false,
            // mustUseProperty
            name2,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name2 = _ref[0], attributeName = _ref[1];
          properties[name2] = new PropertyInfoRecord(
            name2,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name2.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name2,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            BOOLEAN,
            false,
            // mustUseProperty
            name2.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            BOOLEAN,
            true,
            // mustUseProperty
            name2,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name2,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name2,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(
            name2,
            NUMERIC,
            false,
            // mustUseProperty
            name2.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(
            name2,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(
            name2,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(
            name2,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node2, name2, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node2[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name2);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node2.hasAttribute(attributeName)) {
                  var value = node2.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node2.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return node2.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node2.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node2, name2, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name2)) {
              return;
            }
            if (!node2.hasAttribute(name2)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node2.getAttribute(name2);
            {
              checkAttributeStringCoercion(expected, name2);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node2, name2, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name2);
          if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name2)) {
              var _attributeName = name2;
              if (value === null) {
                node2.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name2);
                }
                node2.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node2[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node2[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node2.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node2.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node2 = workInProgress2;
            do {
              info += describeFiber(node2);
              node2 = node2.return;
            } while (node2);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment4:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current2 = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current2 === null) {
              return null;
            }
            var owner = current2._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current2 === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current2);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current2 = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current2 = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current2;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString5(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node2) {
          return node2._valueTracker;
        }
        function detachTracker(node2) {
          node2._valueTracker = null;
        }
        function getValueFromNode(node2) {
          var value = "";
          if (!node2) {
            return value;
          }
          if (isCheckable(node2)) {
            value = node2.checked ? "true" : "false";
          } else {
            value = node2.value;
          }
          return value;
        }
        function trackValueOnNode(node2) {
          var valueField = isCheckable(node2) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node2[valueField]);
          }
          var currentValue = "" + node2[valueField];
          if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node2, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node2, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node2);
              delete node2[valueField];
            }
          };
          return tracker;
        }
        function track(node2) {
          if (getTracker(node2)) {
            return;
          }
          node2._valueTracker = trackValueOnNode(node2);
        }
        function updateValueIfChanged(node2) {
          if (!node2) {
            return false;
          }
          var tracker = getTracker(node2);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node2);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element3, props) {
          var node2 = element3;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node2._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element3, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node2 = element3;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node2._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element3, props) {
          var node2 = element3;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node2, "checked", checked, false);
          }
        }
        function updateWrapper(element3, props) {
          var node2 = element3;
          {
            var controlled = isControlled(props);
            if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element3, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node2.value != value) {
                node2.value = toString5(value);
              }
            } else if (node2.value !== toString5(value)) {
              node2.value = toString5(value);
            }
          } else if (type === "submit" || type === "reset") {
            node2.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node2, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node2.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element3, props, isHydrating2) {
          var node2 = element3;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString5(node2._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node2.value) {
                  node2.value = initialValue;
                }
              }
            }
            {
              node2.defaultValue = initialValue;
            }
          }
          var name2 = node2.name;
          if (name2 !== "") {
            node2.name = "";
          }
          {
            node2.defaultChecked = !node2.defaultChecked;
            node2.defaultChecked = !!node2._wrapperState.initialChecked;
          }
          if (name2 !== "") {
            node2.name = name2;
          }
        }
        function restoreControlledState(element3, props) {
          var node2 = element3;
          updateWrapper(node2, props);
          updateNamedCousins(node2, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name2 = props.name;
          if (props.type === "radio" && name2 != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name2, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node2, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node2.ownerDocument) !== node2
          ) {
            if (value == null) {
              node2.defaultValue = toString5(node2._wrapperState.initialValue);
            } else if (node2.defaultValue !== toString5(value)) {
              node2.defaultValue = toString5(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element3, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React6.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element3, props) {
          if (props.value != null) {
            element3.setAttribute("value", toString5(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray2(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node2, multiple, propValue, setDefaultSelected) {
          var options2 = node2.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString5(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element3, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element3, props) {
          var node2 = element3;
          {
            checkSelectPropTypes(props);
          }
          node2._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element3, props) {
          var node2 = element3;
          node2.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node2, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node2, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element3, props) {
          var node2 = element3;
          var wasMultiple = node2._wrapperState.wasMultiple;
          node2._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node2, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element3, props) {
          var node2 = element3;
          var value = props.value;
          if (value != null) {
            updateOptions(node2, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element3, props) {
          var node2 = element3;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString5(node2._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element3, props) {
          var node2 = element3;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray2(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node2._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element3, props) {
          var node2 = element3;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString5(value);
            if (newValue !== node2.value) {
              node2.value = newValue;
            }
            if (props.defaultValue == null && node2.defaultValue !== newValue) {
              node2.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node2.defaultValue = toString5(defaultValue);
          }
        }
        function postMountWrapper$3(element3, props) {
          var node2 = element3;
          var textContent = node2.textContent;
          if (textContent === node2._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node2.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element3, props) {
          updateWrapper$1(element3, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html6) {
          if (node2.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node2)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html6.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node2.firstChild) {
                node2.removeChild(node2.firstChild);
              }
              while (svgNode.firstChild) {
                node2.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node2.innerHTML = html6;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node2, text7) {
          if (text7) {
            var firstChild = node2.firstChild;
            if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text7;
              return;
            }
          }
          node2.textContent = text7;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix3, key) {
          return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix3) {
            isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name2, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name2);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name2) {
          return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string3) {
            return string3.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name2) {
            if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
              return;
            }
            warnedStyleNames[name2] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name2,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name2.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name2) {
            if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
              return;
            }
            warnedStyleNames[name2] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name2, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name2, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name2);
          };
          var warnStyleValueIsInfinity = function(name2, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name2);
          };
          warnValidStyle = function(name2, value) {
            if (name2.indexOf("-") > -1) {
              warnHyphenatedStyleName(name2);
            } else if (badVendoredStyleNamePattern.test(name2)) {
              warnBadVendoredStyleName(name2);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name2, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name2, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name2, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node2, styles) {
          var style2 = node2.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name2) {
          {
            if (hasOwnProperty3.call(warnedProperties, name2) && warnedProperties[name2]) {
              return true;
            }
            if (rARIACamel.test(name2)) {
              var ariaName = "aria-" + name2.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                warnedProperties[name2] = true;
                return true;
              }
              if (name2 !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                warnedProperties[name2] = true;
                return true;
              }
            }
            if (rARIA.test(name2)) {
              var lowerCasedName = name2.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name2] = true;
                return false;
              }
              if (name2 !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                warnedProperties[name2] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name2, value, eventRegistry) {
            if (hasOwnProperty3.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
              return true;
            }
            var lowerCasedName = name2.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name2)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name2)) {
                error("Unknown event handler property `%s`. It will be ignored.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name2)) {
              if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
              }
              warnedProperties$1[name2] = true;
              return true;
            }
            if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name2] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
              warnedProperties$1[name2] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name2);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name2) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                warnedProperties$1[name2] = true;
                return true;
              }
            } else if (!isReserved && name2 !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
              warnedProperties$1[name2] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
              }
              warnedProperties$1[name2] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
              warnedProperties$1[name2] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
              warnedProperties$1[name2] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl2 = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl2();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl2 = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name2, type, props) {
          switch (name2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name2, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name2, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name2, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node2 = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node2;
            do {
              node2 = nextNode;
              if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node2.return;
              }
              nextNode = node2.return;
            } while (nextNode);
          } else {
            while (node2.return) {
              node2 = node2.return;
            }
          }
          if (node2.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current3 = fiber.alternate;
              if (current3 !== null) {
                suspenseState = current3.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node2) {
          if (node2.tag === HostComponent || node2.tag === HostText) {
            return node2;
          }
          var child = node2.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node2) {
          if (node2.tag === HostComponent || node2.tag === HostText) {
            return node2;
          }
          var child = node2.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root6, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root6, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root6, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root6.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root6, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root6, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root6) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root6);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map4 = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index3 = 0; index3 < TotalLanes; index3++) {
              var label = getLabelForLane(lane);
              map4.set(lane, label);
              lane *= 2;
            }
            return map4;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root6, wipLanes) {
          var pendingLanes = root6.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root6.suspendedLanes;
          var pingedLanes = root6.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root6.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root6.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              nextLanes |= entanglements[index3];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root6, lanes) {
          var eventTimes = root6.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            var eventTime = eventTimes[index3];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root6, currentTime) {
          var pendingLanes = root6.pendingLanes;
          var suspendedLanes = root6.suspendedLanes;
          var pingedLanes = root6.pingedLanes;
          var expirationTimes = root6.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            var expirationTime = expirationTimes[index3];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index3] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root6.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root6) {
          return getHighestPriorityLanes(root6.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root6) {
          var everythingButOffscreen = root6.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root6, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root6, lanes) {
          return (lanes & root6.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root6, updateLane, eventTime) {
          root6.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root6.suspendedLanes = NoLanes;
            root6.pingedLanes = NoLanes;
          }
          var eventTimes = root6.eventTimes;
          var index3 = laneToIndex(updateLane);
          eventTimes[index3] = eventTime;
        }
        function markRootSuspended(root6, suspendedLanes) {
          root6.suspendedLanes |= suspendedLanes;
          root6.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root6.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            expirationTimes[index3] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root6, pingedLanes, eventTime) {
          root6.pingedLanes |= root6.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root6, remainingLanes) {
          var noLongerPendingLanes = root6.pendingLanes & ~remainingLanes;
          root6.pendingLanes = remainingLanes;
          root6.suspendedLanes = NoLanes;
          root6.pingedLanes = NoLanes;
          root6.expiredLanes &= remainingLanes;
          root6.mutableReadLanes &= remainingLanes;
          root6.entangledLanes &= remainingLanes;
          var entanglements = root6.entanglements;
          var eventTimes = root6.eventTimes;
          var expirationTimes = root6.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            entanglements[index3] = NoLanes;
            eventTimes[index3] = NoTimestamp;
            expirationTimes[index3] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root6, entangledLanes) {
          var rootEntangledLanes = root6.entangledLanes |= entangledLanes;
          var entanglements = root6.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index3] & entangledLanes
            ) {
              entanglements[index3] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root6, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root6.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root6, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root6.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index3 = laneToIndex(lanes);
            var lane = 1 << index3;
            var updaters = pendingUpdatersLaneMap[index3];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root6, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root6.pendingUpdatersLaneMap;
          var memoizedUpdaters = root6.memoizedUpdaters;
          while (lanes > 0) {
            var index3 = laneToIndex(lanes);
            var lane = 1 << index3;
            var updaters = pendingUpdatersLaneMap[index3];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root6, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root6) {
          var currentState = root6.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root6 = nearestMounted.stateNode;
                if (isRootDehydrated(root6)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map4) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map4.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root6 = nearestMounted.stateNode;
                if (isRootDehydrated(root6)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root5 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root5 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset2() {
          root5 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start2;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start2 = 0; start2 < startLength; start2++) {
            if (startValue[start2] !== endValue[start2]) {
              break;
            }
          }
          var minEnd = startLength - start2;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start2, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root5) {
            return root5.value;
          }
          return root5.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize3 = Interface[_propName];
              if (normalize3) {
                this[_propName] = normalize3(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset2();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element3 = document.createElement("div");
            element3.setAttribute(eventName, "return;");
            isSupported = typeof element3[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node2) {
          var state = node2._wrapperState;
          if (!state || !state.controlled || node2.type !== "number") {
            return;
          }
          {
            setDefaultValue(node2, "number", node2.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty3.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node2) {
          while (node2 && node2.firstChild) {
            node2 = node2.firstChild;
          }
          return node2;
        }
        function getSiblingNode(node2) {
          while (node2) {
            if (node2.nextSibling) {
              return node2.nextSibling;
            }
            node2 = node2.parentNode;
          }
        }
        function getNodeForCharacterOffset(root6, offset2) {
          var node2 = getLeafNode(root6);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node2) {
            if (node2.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node2.textContent.length;
              if (nodeStart <= offset2 && nodeEnd >= offset2) {
                return {
                  node: node2,
                  offset: offset2 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node2 = getLeafNode(getSiblingNode(node2));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start2 = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node2 = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                start2 = length + anchorOffset;
              }
              if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node2.nodeType === TEXT_NODE) {
                length += node2.nodeValue.length;
              }
              if ((next = node2.firstChild) === null) {
                break;
              }
              parentNode = node2;
              node2 = next;
            }
            while (true) {
              if (node2 === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start2 = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node2.nextSibling) !== null) {
                break;
              }
              node2 = parentNode;
              parentNode = node2.parentNode;
            }
            node2 = next;
          }
          if (start2 === -1 || end === -1) {
            return null;
          }
          return {
            start: start2,
            end
          };
        }
        function setOffsets(node2, offsets) {
          var doc = node2.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node2.textContent.length;
          var start2 = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length);
          if (!selection.extend && start2 > end) {
            var temp = end;
            end = start2;
            start2 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node2, start2);
          var endMarker = getNodeForCharacterOffset(node2, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start2 > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node2) {
          return node2 && node2.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node2) {
          return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element3 = getActiveElement();
          while (element3 instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element3)) {
              win = element3.contentWindow;
            } else {
              return element3;
            }
            element3 = getActiveElement(win.document);
          }
          return element3;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start2 = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start2;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start2;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node2) {
          if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
            return {
              start: node2.selectionStart,
              end: node2.selectionEnd
            };
          } else {
            var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node2 = targetInst;
              mainLoop: while (true) {
                if (node2 === null) {
                  return;
                }
                var nodeTag = node2.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node2.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node2.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node2 = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node2 = node2.return;
              }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name2) {
              names.push(name2);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html6) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html6;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node2) {
          node2.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement3(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node2 = domElement;
                if (props.multiple) {
                  node2.multiple = true;
                } else if (props.size) {
                  node2.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty3.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text7, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text7);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name2 = attributes[_i].name.toLowerCase();
              switch (name2) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected") ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text7, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text7;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text7) {
          {
            if (text7 === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text7, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root6 = rootContainerInstance.documentElement;
              namespace = root6 ? root6.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string3 = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string3, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string3 = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string3, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text7, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text7, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text7, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node2 = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node2.nextSibling;
            parentInstance.removeChild(node2);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data2 = nextNode.data;
              if (data2 === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node2 = nextNode;
          } while (node2);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text7) {
          textInstance.nodeValue = text7;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text7) {
          if (text7 === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node2) {
          for (; node2 != null; node2 = node2.nextSibling) {
            var nodeType = node2.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node2.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node2;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text7, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text7);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node2 = suspenseInstance.nextSibling;
          var depth = 0;
          while (node2) {
            if (node2.nodeType === COMMENT_NODE) {
              var data2 = node2.data;
              if (data2 === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node2);
                } else {
                  depth--;
                }
              } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node2 = node2.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node2 = targetInstance.previousSibling;
          var depth = 0;
          while (node2) {
            if (node2.nodeType === COMMENT_NODE) {
              var data2 = node2.data;
              if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node2;
                } else {
                  depth--;
                }
              } else if (data2 === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node2 = node2.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text7, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text7, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text7, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text7, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text7) {
          {
            warnForInsertedHydratedText(parentContainer, text7);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text7) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedText(parentNode, text7);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text7, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text7);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node2) {
          delete node2[internalInstanceKey];
          delete node2[internalPropsKey];
          delete node2[internalEventHandlersKey];
          delete node2[internalEventHandlerListenersKey];
          delete node2[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node2) {
          node2[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node2) {
          node2[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node2) {
          node2[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node2) {
          return !!node2[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node2) {
          var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node2) {
          return node2[internalPropsKey] || null;
        }
        function updateFiberProps(node2, props) {
          node2[internalPropsKey] = props;
        }
        function getEventListenerSet(node2) {
          var elementListenerSet = node2[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element3) {
          {
            var has2 = Function.call.bind(hasOwnProperty3);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index2 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index2 < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index2]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index2];
          valueStack[index2] = null;
          {
            fiberStack[index2] = null;
          }
          index2--;
        }
        function push2(cursor, value, fiber) {
          index2++;
          valueStack[index2] = cursor.current;
          {
            fiberStack[index2] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component3, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component3)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name2 = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name2);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push2(contextStackCursor, context, fiber);
            push2(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name2 = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name2);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push2(contextStackCursor, mergedContext, workInProgress2);
              push2(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push2(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node2 = fiber;
            do {
              switch (node2.tag) {
                case HostRoot:
                  return node2.stateNode.context;
                case ClassComponent: {
                  var Component3 = node2.type;
                  if (isContextProvider(Component3)) {
                    return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node2 = node2.return;
            } while (node2 !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index3) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index3 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number2) {
          return 32 - clz32(number2);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text7 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text7);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text7 = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text7);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node2 = fiber;
            while (node2 !== null) {
              if (node2.mode & StrictLegacyMode) {
                maybeStrictRoot = node2;
              }
              node2 = node2.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current3, element3) {
          var mixedRef = element3.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element3._owner && element3._self && element3._owner.stateNode !== element3._self) && // Will already throw with "Function components cannot have string refs"
              !(element3._owner && element3._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
              !(typeof element3.type === "function" && !isReactClass(element3.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
              element3._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element3._owner) {
              var owner = element3._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current3 !== null && current3.ref !== null && typeof current3.ref === "function" && current3.ref._stringRef === stringRef) {
                return current3.ref;
              }
              var ref2 = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref2._stringRef = stringRef;
              return ref2;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element3._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current3 = newFiber.alternate;
            if (current3 !== null) {
              var oldIndex = current3.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current3, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current3, element3, lanes) {
            var elementType = element3.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current3, element3.props.children, lanes, element3.key);
            }
            if (current3 !== null) {
              if (current3.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current3, element3) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current3.type) {
                var existing = useFiber(current3, element3.props);
                existing.ref = coerceRef(returnFiber, current3, element3);
                existing.return = returnFiber;
                {
                  existing._debugSource = element3._source;
                  existing._debugOwner = element3._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element3, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element3);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current3, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment4) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current3, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray2(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray2(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray2(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element3, lanes) {
            var key = element3.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element3.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment4) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element3.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element3._source;
                      existing._debugOwner = element3._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element3) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element3.props);
                    _existing.ref = coerceRef(returnFiber, child, element3);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element3._source;
                      _existing._debugOwner = element3._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element3.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element3.props.children, returnFiber.mode, lanes, element3.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element3, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element3);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray2(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current3, workInProgress2) {
          if (current3 !== null && workInProgress2.child !== current3.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push2(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node2 = parent;
          while (node2 !== null) {
            var alternate = node2.alternate;
            if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
              node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node2 === propagationRoot) {
              break;
            }
            node2 = node2.return;
          }
          {
            if (node2 !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list4 = fiber.dependencies;
            if (list4 !== null) {
              nextFiber = fiber.child;
              var dependency = list4.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list4.lanes = mergeLanes(list4.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling2 = nextFiber.sibling;
                if (sibling2 !== null) {
                  sibling2.return = nextFiber.return;
                  nextFiber = sibling2;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context) ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node2 = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node2 = parent;
            parent = parent.return;
          }
          if (node2.tag === HostRoot) {
            var root6 = node2.stateNode;
            return root6;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current3, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current3.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root6, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root6.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root6, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current3 = workInProgress2.alternate;
          if (current3 !== null) {
            var currentQueue = current3.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current3 = workInProgress2.alternate;
            if (current3 !== null) {
              var currentQueue = current3.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push2(rootInstanceStackCursor, nextRootInstance, fiber);
          push2(contextFiberStackCursor, fiber, fiber);
          push2(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push2(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push2(contextFiberStackCursor, fiber, fiber);
          push2(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push2(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node2 = row;
          while (node2 !== null) {
            if (node2.tag === SuspenseComponent) {
              var state = node2.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node2;
                }
              }
            } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node2.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node2.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node2;
              }
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === row) {
              return null;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === row) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root6, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version2 = getVersion(mutableSource._source);
          if (root6.mutableSourceEagerHydrationData == null) {
            root6.mutableSourceEagerHydrationData = [mutableSource, version2];
          } else {
            root6.mutableSourceEagerHydrationData.push(mutableSource, version2);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray2(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table2 = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table2 += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current3, workInProgress2, Component3, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current3 !== null && current3.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component3(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component3(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current3 !== null && (current3.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current3.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current3, workInProgress2, lanes) {
          workInProgress2.updateQueue = current3.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current3.lanes = removeLanes(current3.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) {
              nextCurrentHook = current3.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current3 = currentHook;
          var baseQueue = current3.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current3.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current3.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current3.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root6 = getWorkInProgressRoot();
            if (root6 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root6, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root6 = getWorkInProgressRoot();
            if (root6 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root6, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root6 !== null) {
            scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create4, destroy, deps) {
          var effect = {
            tag,
            create: create4,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create4, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create4, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create4, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, destroy, nextDeps);
        }
        function mountEffect(create4, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create4, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create4, deps);
          }
        }
        function updateEffect(create4, deps) {
          return updateEffectImpl(Passive, Passive$1, create4, deps);
        }
        function mountInsertionEffect(create4, deps) {
          return mountEffectImpl(Update, Insertion, create4, deps);
        }
        function updateInsertionEffect(create4, deps) {
          return updateEffectImpl(Update, Insertion, create4, deps);
        }
        function mountLayoutEffect(create4, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create4, deps);
        }
        function updateLayoutEffect(create4, deps) {
          return updateEffectImpl(Update, Layout, create4, deps);
        }
        function imperativeHandleEffect(create4, ref2) {
          if (typeof ref2 === "function") {
            var refCallback = ref2;
            var _inst = create4();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref2 !== null && ref2 !== void 0) {
            var refObject = ref2;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create4();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref2, create4, deps) {
          {
            if (typeof create4 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create4, ref2), effectDeps);
        }
        function updateImperativeHandle(ref2, create4, deps) {
          {
            if (typeof create4 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref2]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create4, ref2), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start2 = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start2;
          return [isPending, start2];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root6 = getWorkInProgressRoot();
          var identifierPrefix = root6.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root6 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root6 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
              entangleTransitionUpdate(root6, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root6 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root6 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
              entangleTransitionUpdate(root6, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root6, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root6.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root6, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create4, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create4, deps);
            },
            useImperativeHandle: function(ref2, create4, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref2, create4, deps);
            },
            useInsertionEffect: function(create4, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create4, deps);
            },
            useLayoutEffect: function(create4, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create4, deps);
            },
            useMemo: function(create4, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create4, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root6 = parentFiber.stateNode;
                  root6.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root6 = parentFiber.stateNode;
                  if (root6 !== null) {
                    root6.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component3, baseProps) {
          if (Component3 && Component3.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component3.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root6 = enqueueUpdate(fiber, update, lane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
              entangleTransitions(root6, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root6 = enqueueUpdate(fiber, update, lane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
              entangleTransitions(root6, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root6 = enqueueUpdate(fiber, update, lane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
              entangleTransitions(root6, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name2 = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
            }
            {
              if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name2);
              }
              if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name2);
              }
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error("%s.state: must be set to an object or null", name2);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current3, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current3, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root6, wakeable, lanes) {
          var pingCache = root6.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root6.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root6, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root6, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root6, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node2 = returnFiber;
          do {
            if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
              return node2;
            }
            node2 = node2.return;
          } while (node2 !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root6, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root6, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root6, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root6, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root6, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root6, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root6, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root6, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2) {
          if (current3 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current3, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component3.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component3)
                );
              }
            }
          }
          var render2 = Component3.render;
          var ref2 = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current3, workInProgress2, render2, nextProps, ref2, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current3, workInProgress2, render2, nextProps, ref2, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current3 !== null && !didReceiveUpdate) {
            bailoutHooks(current3, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current3, workInProgress2, Component3, nextProps, renderLanes2) {
          if (current3 === null) {
            var type = Component3.type;
            if (isSimpleFunctionComponent(type) && Component3.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component3.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current3, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component3.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component3.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component3.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current3.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare2 = Component3.compare;
            compare2 = compare2 !== null ? compare2 : shallowEqual;
            if (compare2(prevProps, nextProps) && current3.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current3, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current3 !== null) {
            var prevProps = current3.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current3.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current3.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current3, renderLanes2)) {
                workInProgress2.lanes = current3.lanes;
                return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
              } else if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current3, workInProgress2, Component3, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current3, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current3 !== null ? current3.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current3, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current3, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current3, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current3, workInProgress2) {
          var ref2 = workInProgress2.ref;
          if (current3 === null && ref2 !== null || current3 !== null && current3.ref !== ref2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current3, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component3.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component3)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current3, workInProgress2, Component3, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current3, workInProgress2, Component3, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current3 !== null && !didReceiveUpdate) {
            bailoutHooks(current3, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current3, workInProgress2, Component3, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component3.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component3)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component3)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2);
            constructClassInstance(workInProgress2, Component3, nextProps);
            mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current3 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current3, workInProgress2, Component3, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current3, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current3, workInProgress2, Component3, shouldUpdate, hasContext, renderLanes2) {
          markRef(current3, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component3, false);
            }
            return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component3.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current3 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current3, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component3, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root6 = workInProgress2.stateNode;
          if (root6.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root6.pendingContext, root6.pendingContext !== root6.context);
          } else if (root6.context) {
            pushTopLevelContextObject(workInProgress2, root6.context, false);
          }
          pushHostContainer(workInProgress2, root6.containerInfo);
        }
        function updateHostRoot(current3, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current3 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current3, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root6 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node2 = child;
              while (node2) {
                node2.flags = node2.flags & ~Placement | Hydrating;
                node2 = node2.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
            }
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current3, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current3, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current3 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current3 !== null ? current3.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current3, workInProgress2);
          reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current3, workInProgress2) {
          if (current3 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component3 = init(payload);
          workInProgress2.type = Component3;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component3);
          var resolvedProps = resolveDefaultProps(Component3, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component3);
                workInProgress2.type = Component3 = resolveFunctionForHotReloading(Component3);
              }
              child = updateFunctionComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component3 = resolveClassForHotReloading(Component3);
              }
              child = updateClassComponent(null, workInProgress2, Component3, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component3 = resolveForwardRefForHotReloading(Component3);
              }
              child = updateForwardRef(null, workInProgress2, Component3, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component3.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component3)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component3,
                resolveDefaultProps(Component3.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component3 !== null && typeof Component3 === "object" && Component3.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component3 + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component3, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component3)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component3, nextProps);
          mountClassInstance(workInProgress2, Component3, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component3, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component3, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component3.prototype && typeof Component3.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component3) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component3) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component3) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component3)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component3, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component3, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component3, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component3);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component3) {
          {
            if (Component3) {
              if (Component3.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component3.displayName || Component3.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component3.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component3) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component3.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component3) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component3.contextType === "object" && Component3.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component3) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current3, workInProgress2, renderLanes2) {
          if (current3 !== null) {
            var suspenseState = current3.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current3, renderLanes2) {
          return removeLanes(current3.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current3, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current3)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current3 === null || current3.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current3 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current3.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current3, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current3.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current3, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current3, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current3, offscreenProps) {
          return createWorkInProgress(current3, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current3, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current3.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current3.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current3.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current3, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current3,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current3.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root6 = getWorkInProgressRoot();
              if (root6 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root6, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current3, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root6, current3, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current3.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current3);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current3, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current3.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current3, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node2 = firstChild;
          while (node2 !== null) {
            if (node2.tag === SuspenseComponent) {
              var state = node2.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              }
            } else if (node2.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === workInProgress2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === workInProgress2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index3) {
          {
            var isAnArray = isArray2(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray2(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current3, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current3 !== null && (current3.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current3, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current3 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current3, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current3, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current3, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current3, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current3, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current3 !== null) {
              current3.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2) {
          if (current3 !== null) {
            workInProgress2.dependencies = current3.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current3, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current3, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current3.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current3];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current3);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current3, renderLanes2) {
          var updateLanes = current3.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root6 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component3 = workInProgress2.type;
              if (isContextProvider(Component3)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current3.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current3, workInProgress2, renderLanes2);
        }
        function beginWork(current3, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current3 !== null) {
              return remountFiber(current3, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current3 !== null) {
            var oldProps = current3.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current3.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current3, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current3, workInProgress2, renderLanes2);
              }
              if ((current3.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current3, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current3, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component3 = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component3 ? unresolvedProps : resolveDefaultProps(Component3, unresolvedProps);
              return updateFunctionComponent(current3, workInProgress2, Component3, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current3, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current3, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current3, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current3, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current3, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current3, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current3, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment4:
              return updateFragment(current3, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current3, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current3, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current3, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current3, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current3, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current3, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current3, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current3, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current3, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node2 = workInProgress2.child;
            while (node2 !== null) {
              if (node2.tag === HostComponent || node2.tag === HostText) {
                appendInitialChild(parent, node2.stateNode);
              } else if (node2.tag === HostPortal) ;
              else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          };
          updateHostContainer = function(current3, workInProgress2) {
          };
          updateHostComponent$1 = function(current3, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current3.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current3, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current3 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current3, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment4:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component3 = workInProgress2.type;
              if (isContextProvider(Component3)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current3 === null || current3.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current3 !== null) {
                    var prevState = current3.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current3, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current3 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current3, workInProgress2, type, newProps, rootContainerInstance);
                if (current3.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current3 && workInProgress2.stateNode != null) {
                var oldText = current3.memoizedProps;
                updateHostText$1(current3, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current3 === null || current3.memoizedState !== null && current3.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current3, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current3 !== null && current3.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current3 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current3, workInProgress2);
              if (current3 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current3 === null || (current3.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current3 !== null) {
                var _prevState = current3.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current3, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component3 = workInProgress2.type;
              if (isContextProvider(Component3)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root6 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current3, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root6 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current3, instance) {
          instance.props = current3.memoizedProps;
          instance.state = current3.memoizedState;
          if (current3.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current3);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current3, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current3);
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current3, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current3, instance);
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current3, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current3, nearestMountedAncestor) {
          try {
            commitAttachRef(current3);
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current3, nearestMountedAncestor) {
          var ref2 = current3.ref;
          if (ref2 !== null) {
            if (typeof ref2 === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current3.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref2(null);
                  } finally {
                    recordLayoutEffectDuration(current3);
                  }
                } else {
                  retVal = ref2(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current3, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current3));
                }
              }
            } else {
              ref2.current = null;
            }
          }
        }
        function safelyCallDestroy(current3, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current3, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root6, firstChild) {
          focusedInstanceHandle = prepareForCommit(root6.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling2 = fiber.sibling;
            if (sibling2 !== null) {
              sibling2.return = fiber.return;
              nextEffect = sibling2;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current3 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current3 !== null) {
                  var prevProps = current3.memoizedProps;
                  var prevState = current3.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root6 = finishedWork.stateNode;
                  clearContainer(root6.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create4 = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create4();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root6 = parentFiber.stateNode;
                        root6.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current3, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current3 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current3.memoizedProps : resolveDefaultProps(finishedWork.type, current3.memoizedProps);
                      var prevState = current3.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current3 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current3 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root6 = parentFiber.stateNode;
                          root6.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node2) {
          switch (node2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                } finally {
                  recordLayoutEffectDuration(node2);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node2.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node2, node2.return, instance);
              }
              safelyAttachRef(node2, node2.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node2, node2.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node2 = finishedWork;
            while (true) {
              if (node2.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node2;
                  try {
                    var instance = node2.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node2.stateNode, node2.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node2.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node2.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node2.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
              else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === finishedWork) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2 = node2.return;
              }
              if (hostSubtreeRoot === node2) {
                hostSubtreeRoot = null;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref2 = finishedWork.ref;
          if (ref2 !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref2 === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref2(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref2(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref2.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref2.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node2 = fiber;
          siblings: while (true) {
            while (node2.sibling === null) {
              if (node2.return === null || isHostParent(node2.return)) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
            while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
              if (node2.flags & Placement) {
                continue siblings;
              }
              if (node2.child === null || node2.tag === HostPortal) {
                continue siblings;
              } else {
                node2.child.return = node2;
                node2 = node2.child;
              }
            }
            if (!(node2.flags & Placement)) {
              return node2.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
          var tag = node2.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node2.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node2.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling2 = child.sibling;
              while (sibling2 !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling2, before, parent);
                sibling2 = sibling2.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node2, before, parent) {
          var tag = node2.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node2.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node2.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling2 = child.sibling;
              while (sibling2 !== null) {
                insertOrAppendPlacementNode(sibling2, before, parent);
                sibling2 = sibling2.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root6, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root6, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current3 = finishedWork.alternate;
            if (current3 !== null) {
              var prevState = current3.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root6, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root6;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root6);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root6, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root6, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root6);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root6, lanes) {
          var current3 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current3 !== null) {
                  safelyDetachRef(current3, current3.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current3 !== null) {
                  safelyDetachRef(current3, current3.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current3 !== null ? current3.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current3 !== null ? current3.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current3 !== null) {
                    var prevRootState = current3.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root6.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current3 !== null && current3.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root6, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root6, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root6, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root6, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root6;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root6, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root6, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root6, committedLanes);
                continue;
              } else {
                var current3 = fiber.alternate;
                var wasHidden = current3 !== null && current3.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root6,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root6, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root6, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root6, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current3 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root6, current3, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling2 = fiber.sibling;
            if (sibling2 !== null) {
              sibling2.return = fiber.return;
              nextEffect = sibling2;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling2 = fiber.sibling;
            if (sibling2 !== null) {
              sibling2.return = fiber.return;
              nextEffect = sibling2;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling2 = fiber.sibling;
            if (sibling2 !== null) {
              sibling2.return = fiber.return;
              nextEffect = sibling2;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root6, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root6, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root6, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root6, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root6, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root6, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling2 = fiber.sibling;
            if (sibling2 !== null) {
              sibling2.return = fiber.return;
              nextEffect = sibling2;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling2 = fiber.sibling;
            if (sibling2 !== null) {
              sibling2.return = fiber.return;
              nextEffect = sibling2;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling2 = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling2 !== null) {
              sibling2.return = returnFiber;
              nextEffect = sibling2;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current3, nearestMountedAncestor) {
          switch (current3.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current3.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
                recordPassiveEffectDuration(current3);
              } else {
                commitHookEffectListUnmount(Passive$1, current3, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root6, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root6, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root6 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root6, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root6 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root6, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root6, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root6, lane, eventTime) {
          var current3 = root6.current;
          current3.lanes = lane;
          markRootUpdated(root6, lane, eventTime);
          ensureRootIsScheduled(root6, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root6, currentTime) {
          var existingCallbackNode = root6.callbackNode;
          markStarvedLanesAsExpired(root6, currentTime);
          var nextLanes = getNextLanes(root6, root6 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root6.callbackNode = null;
            root6.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root6.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root6.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root6));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root6));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root6));
          }
          root6.callbackPriority = newCallbackPriority;
          root6.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root6, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root6.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root6.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root6, root6 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root6, lanes) && !includesExpiredLane(root6, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root6, lanes) : renderRootSync(root6, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root6);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root6, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root6, NoLanes);
              markRootSuspended$1(root6, lanes);
              ensureRootIsScheduled(root6, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root6, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root6, lanes);
              var finishedWork = root6.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root6, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root6);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root6, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root6, NoLanes);
                  markRootSuspended$1(root6, lanes);
                  ensureRootIsScheduled(root6, now());
                  throw _fatalError;
                }
              }
              root6.finishedWork = finishedWork;
              root6.finishedLanes = lanes;
              finishConcurrentRender(root6, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root6, now());
          if (root6.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root6);
          }
          return null;
        }
        function recoverFromConcurrentError(root6, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root6)) {
            var rootWorkInProgress = prepareFreshStack(root6, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root6.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root6, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root6, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root6, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root6, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root6, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root6.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root6, suspendedLanes);
                    break;
                  }
                  root6.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root6, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root6, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root6, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root6, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root6.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root6, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root6, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root6, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node2 = finishedWork;
          while (true) {
            if (node2.flags & StoreConsistency) {
              var updateQueue = node2.updateQueue;
              if (updateQueue !== null) {
                var checks2 = updateQueue.stores;
                if (checks2 !== null) {
                  for (var i = 0; i < checks2.length; i++) {
                    var check = checks2[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node2.child;
            if (node2.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node2;
              node2 = child;
              continue;
            }
            if (node2 === finishedWork) {
              return true;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === finishedWork) {
                return true;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root6, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root6, suspendedLanes);
        }
        function performSyncWorkOnRoot(root6) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root6, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root6, now());
            return null;
          }
          var exitStatus = renderRootSync(root6, lanes);
          if (root6.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root6);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root6, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root6, NoLanes);
            markRootSuspended$1(root6, lanes);
            ensureRootIsScheduled(root6, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root6.current.alternate;
          root6.finishedWork = finishedWork;
          root6.finishedLanes = lanes;
          commitRoot(root6, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root6, now());
          return null;
        }
        function flushRoot(root6, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root6, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root6, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root6, lanes) {
          root6.finishedWork = null;
          root6.finishedLanes = NoLanes;
          var timeoutHandle = root6.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root6.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current3 = interruptedWork.alternate;
              unwindInterruptedWork(current3, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root6;
          var rootWorkInProgress = createWorkInProgress(root6.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root6, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root6, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root6, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root6 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root6.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root6, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root6, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root6, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root6, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root6, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root6 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root6.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root6, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root6, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root6, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root6, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current3 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current3, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current3 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current3, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current3, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current3, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root6, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root6, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root6, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root6.finishedWork;
          var lanes = root6.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root6.finishedWork = null;
          root6.finishedLanes = NoLanes;
          if (finishedWork === root6.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root6.callbackNode = null;
          root6.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root6, remainingLanes);
          if (root6 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root6, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root6, finishedWork, lanes);
            resetAfterCommit(root6.containerInfo);
            root6.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root6, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root6.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root6;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root6.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root6.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root6.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root6, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root6.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root6.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root6.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root6 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root6;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root6 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root6.current);
          commitPassiveMountEffects(root6, root6.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root6, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root6.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root6 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root6;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root6);
          {
            var stateNode = root6.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root6 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root6 !== null) {
            markRootUpdated(root6, SyncLane, eventTime);
            ensureRootIsScheduled(root6, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root6 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root6 !== null) {
                  markRootUpdated(root6, SyncLane, eventTime);
                  ensureRootIsScheduled(root6, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root6, wakeable, pingedLanes) {
          var pingCache = root6.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root6, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root6);
          if (workInProgressRoot === root6 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root6, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root6, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root6 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root6 !== null) {
            markRootUpdated(root6, retryLane, eventTime);
            ensureRootIsScheduled(root6, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current3 = firstChild;
            var subtreeRoot = null;
            while (current3 !== null) {
              var primarySubtreeFlag = current3.subtreeFlags & fiberFlags;
              if (current3 !== subtreeRoot && current3.child !== null && primarySubtreeFlag !== NoFlags) {
                current3 = current3.child;
              } else {
                if ((current3.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current3);
                }
                if (current3.sibling !== null) {
                  current3 = current3.sibling;
                } else {
                  current3 = subtreeRoot = current3.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current2;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current3, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current3, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current3, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current3, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root6, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root6.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root6, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current2;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root6) {
          {
            if (root6.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element3) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element3.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root6, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root6.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root6, element3) {
          {
            if (root6.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element3, root6, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling2 = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling2 !== null) {
              scheduleFibersWithFamiliesRecursively(sibling2, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root6, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types2 = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root6.current, types2, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
          {
            var child = fiber.child, sibling2 = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types2.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
              }
            }
            if (sibling2 !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling2, types2, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node2 = fiber;
            while (true) {
              switch (node2.tag) {
                case HostComponent:
                  hostInstances.add(node2.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node2.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node2.stateNode.containerInfo);
                  return;
              }
              if (node2.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node2 = node2.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node2 = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node2.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node2.stateNode);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === fiber) {
                return foundHostInstances;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === fiber) {
                  return foundHostInstances;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component3) {
          if (typeof Component3 === "function") {
            return shouldConstruct$1(Component3) ? ClassComponent : FunctionComponent;
          } else if (Component3 !== void 0 && Component3 !== null) {
            var $$typeof = Component3.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current3, pendingProps) {
          var workInProgress2 = current3.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current3.tag, pendingProps, current3.key, current3.mode);
            workInProgress2.elementType = current3.elementType;
            workInProgress2.type = current3.type;
            workInProgress2.stateNode = current3.stateNode;
            {
              workInProgress2._debugSource = current3._debugSource;
              workInProgress2._debugOwner = current3._debugOwner;
              workInProgress2._debugHookTypes = current3._debugHookTypes;
            }
            workInProgress2.alternate = current3;
            current3.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current3.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current3.flags & StaticMask;
          workInProgress2.childLanes = current3.childLanes;
          workInProgress2.lanes = current3.lanes;
          workInProgress2.child = current3.child;
          workInProgress2.memoizedProps = current3.memoizedProps;
          workInProgress2.memoizedState = current3.memoizedState;
          workInProgress2.updateQueue = current3.updateQueue;
          var currentDependencies = current3.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current3.sibling;
          workInProgress2.index = current3.index;
          workInProgress2.ref = current3.ref;
          {
            workInProgress2.selfBaseDuration = current3.selfBaseDuration;
            workInProgress2.treeBaseDuration = current3.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current3._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current3.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current3.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current3.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current3 = workInProgress2.alternate;
          if (current3 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current3.childLanes;
            workInProgress2.lanes = current3.lanes;
            workInProgress2.child = current3.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current3.memoizedProps;
            workInProgress2.memoizedState = current3.memoizedState;
            workInProgress2.updateQueue = current3.updateQueue;
            workInProgress2.type = current3.type;
            var currentDependencies = current3.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current3.selfBaseDuration;
              workInProgress2.treeBaseDuration = current3.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element3, mode, lanes) {
          var owner = null;
          {
            owner = element3._owner;
          }
          var type = element3.type;
          var key = element3.key;
          var pendingProps = element3.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element3._source;
            fiber._debugOwner = element3._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment4, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content3, mode, lanes) {
          var fiber = createFiber(HostText, content3, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root6 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root6.current = uninitializedFiber;
          uninitializedFiber.stateNode = root6;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root6;
        }
        var ReactVersion = "18.3.1";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component3 = fiber.type;
            if (isContextProvider(Component3)) {
              return processChildContext(fiber, Component3, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys2 = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current2;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root6 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root6.context = getContextForSubtree(null);
          var current3 = root6.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current3);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current3, update, lane);
          scheduleInitialHydrationOnRoot(root6, lane, eventTime);
          return root6;
        }
        function updateContainer(element3, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element3);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current2 !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current2) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element: element3
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root6 = enqueueUpdate(current$1, update, lane);
          if (root6 !== null) {
            scheduleUpdateOnFiber(root6, current$1, lane, eventTime);
            entangleTransitions(root6, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root6 = fiber.stateNode;
              if (isRootDehydrated(root6)) {
                var lanes = getHighestPriorityPendingLanes(root6);
                flushRoot(root6, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root7 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root7 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root7, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root6 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root6 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root6 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root6 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root6, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path2, index3) {
            var key = path2[index3];
            var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
            if (index3 + 1 === path2.length) {
              if (isArray2(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path2) {
            return copyWithDeleteImpl(obj, path2, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
            var oldKey = oldPath[index3];
            var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
            if (index3 + 1 === oldPath.length) {
              var newKey = newPath[index3];
              updated[newKey] = updated[oldKey];
              if (isArray2(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index3 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path2, index3, value) {
            if (index3 >= path2.length) {
              return value;
            }
            var key = path2[index3];
            var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path2, value) {
            return copyWithSetImpl(obj, path2, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path2, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path2, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root6 !== null) {
                scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path2) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path2);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root6 !== null) {
                scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root6 !== null) {
                scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path2, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path2) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root6 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root6 !== null) {
              scheduleUpdateOnFiber(root6, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current2;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root6 = this._internalRoot;
          if (root6 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root6.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root6.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root6, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root6 = this._internalRoot;
          if (root6 !== null) {
            this._internalRoot = null;
            var container = root6.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root6, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot2(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root6 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root6.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root6);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root6 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root6.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root6, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root6);
        }
        function isValidContainer(node2) {
          return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node2) {
          return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root6);
                originalCallback.call(instance);
              };
            }
            var root6 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root6;
            markContainerAsRoot(root6.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root6;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root6;
          if (!maybeRoot) {
            root6 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root6 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root6);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root6, parentComponent, callback);
          }
          return getPublicRootInstance(root6);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element3, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element3, container, true, callback);
        }
        function render(element3, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element3, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element3, containerNode, false, callback);
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports.createRoot = m.createRoot;
      exports.hydrateRoot = m.hydrateRoot;
    } else {
      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React6 = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty3 = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element3) {
          {
            var has = Function.call.bind(hasOwnProperty3);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty3.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty3.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref2, self2, source, owner, props) {
          var element3 = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref: ref2,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element3._store = {};
            Object.defineProperty(element3._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element3, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element3, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element3.props);
              Object.freeze(element3);
            }
          }
          return element3;
        };
        function jsxDEV(type, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref2 = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref2 = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref2) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref2) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref2, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement2(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name2 = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name2) {
                return "\n\nCheck the render method of `" + name2 + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element3, parentType) {
          {
            if (!element3._store || element3._store.validated || element3.key != null) {
              return;
            }
            element3._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element3 && element3._owner && element3._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element3._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element3);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node2, parentType) {
          {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray2(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element3) {
          {
            var type = element3.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name2 = getComponentNameFromType(type);
              checkPropTypes(propTypes, element3.props, "prop", name2, element3);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys2 = Object.keys(fragment.props);
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        var didWarnAboutKeySpread = {};
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element3 = jsxDEV(type, props, key, source, self2);
            if (element3 == null) {
              return element3;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray2(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            {
              if (hasOwnProperty3.call(props, "key")) {
                var componentName = getComponentNameFromType(type);
                var keys2 = Object.keys(props).filter(function(k) {
                  return k !== "key";
                });
                var beforeExample = keys2.length > 0 ? "{key: someKey, " + keys2.join(": ..., ") + ": ...}" : "{key: someKey}";
                if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                  var afterExample = keys2.length > 0 ? "{" + keys2.join(": ..., ") + ": ...}" : "{}";
                  error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                  didWarnAboutKeySpread[componentName + beforeExample] = true;
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element3);
            } else {
              validatePropTypes(element3);
            }
            return element3;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx16 = jsxWithValidationDynamic;
        var jsxs11 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx16;
        exports.jsxs = jsxs11;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/acorn-jsx/xhtml.js
var require_xhtml = __commonJS({
  "node_modules/acorn-jsx/xhtml.js"(exports, module2) {
    module2.exports = {
      quot: '"',
      amp: "&",
      apos: "'",
      lt: "<",
      gt: ">",
      nbsp: "\xA0",
      iexcl: "\xA1",
      cent: "\xA2",
      pound: "\xA3",
      curren: "\xA4",
      yen: "\xA5",
      brvbar: "\xA6",
      sect: "\xA7",
      uml: "\xA8",
      copy: "\xA9",
      ordf: "\xAA",
      laquo: "\xAB",
      not: "\xAC",
      shy: "\xAD",
      reg: "\xAE",
      macr: "\xAF",
      deg: "\xB0",
      plusmn: "\xB1",
      sup2: "\xB2",
      sup3: "\xB3",
      acute: "\xB4",
      micro: "\xB5",
      para: "\xB6",
      middot: "\xB7",
      cedil: "\xB8",
      sup1: "\xB9",
      ordm: "\xBA",
      raquo: "\xBB",
      frac14: "\xBC",
      frac12: "\xBD",
      frac34: "\xBE",
      iquest: "\xBF",
      Agrave: "\xC0",
      Aacute: "\xC1",
      Acirc: "\xC2",
      Atilde: "\xC3",
      Auml: "\xC4",
      Aring: "\xC5",
      AElig: "\xC6",
      Ccedil: "\xC7",
      Egrave: "\xC8",
      Eacute: "\xC9",
      Ecirc: "\xCA",
      Euml: "\xCB",
      Igrave: "\xCC",
      Iacute: "\xCD",
      Icirc: "\xCE",
      Iuml: "\xCF",
      ETH: "\xD0",
      Ntilde: "\xD1",
      Ograve: "\xD2",
      Oacute: "\xD3",
      Ocirc: "\xD4",
      Otilde: "\xD5",
      Ouml: "\xD6",
      times: "\xD7",
      Oslash: "\xD8",
      Ugrave: "\xD9",
      Uacute: "\xDA",
      Ucirc: "\xDB",
      Uuml: "\xDC",
      Yacute: "\xDD",
      THORN: "\xDE",
      szlig: "\xDF",
      agrave: "\xE0",
      aacute: "\xE1",
      acirc: "\xE2",
      atilde: "\xE3",
      auml: "\xE4",
      aring: "\xE5",
      aelig: "\xE6",
      ccedil: "\xE7",
      egrave: "\xE8",
      eacute: "\xE9",
      ecirc: "\xEA",
      euml: "\xEB",
      igrave: "\xEC",
      iacute: "\xED",
      icirc: "\xEE",
      iuml: "\xEF",
      eth: "\xF0",
      ntilde: "\xF1",
      ograve: "\xF2",
      oacute: "\xF3",
      ocirc: "\xF4",
      otilde: "\xF5",
      ouml: "\xF6",
      divide: "\xF7",
      oslash: "\xF8",
      ugrave: "\xF9",
      uacute: "\xFA",
      ucirc: "\xFB",
      uuml: "\xFC",
      yacute: "\xFD",
      thorn: "\xFE",
      yuml: "\xFF",
      OElig: "\u0152",
      oelig: "\u0153",
      Scaron: "\u0160",
      scaron: "\u0161",
      Yuml: "\u0178",
      fnof: "\u0192",
      circ: "\u02C6",
      tilde: "\u02DC",
      Alpha: "\u0391",
      Beta: "\u0392",
      Gamma: "\u0393",
      Delta: "\u0394",
      Epsilon: "\u0395",
      Zeta: "\u0396",
      Eta: "\u0397",
      Theta: "\u0398",
      Iota: "\u0399",
      Kappa: "\u039A",
      Lambda: "\u039B",
      Mu: "\u039C",
      Nu: "\u039D",
      Xi: "\u039E",
      Omicron: "\u039F",
      Pi: "\u03A0",
      Rho: "\u03A1",
      Sigma: "\u03A3",
      Tau: "\u03A4",
      Upsilon: "\u03A5",
      Phi: "\u03A6",
      Chi: "\u03A7",
      Psi: "\u03A8",
      Omega: "\u03A9",
      alpha: "\u03B1",
      beta: "\u03B2",
      gamma: "\u03B3",
      delta: "\u03B4",
      epsilon: "\u03B5",
      zeta: "\u03B6",
      eta: "\u03B7",
      theta: "\u03B8",
      iota: "\u03B9",
      kappa: "\u03BA",
      lambda: "\u03BB",
      mu: "\u03BC",
      nu: "\u03BD",
      xi: "\u03BE",
      omicron: "\u03BF",
      pi: "\u03C0",
      rho: "\u03C1",
      sigmaf: "\u03C2",
      sigma: "\u03C3",
      tau: "\u03C4",
      upsilon: "\u03C5",
      phi: "\u03C6",
      chi: "\u03C7",
      psi: "\u03C8",
      omega: "\u03C9",
      thetasym: "\u03D1",
      upsih: "\u03D2",
      piv: "\u03D6",
      ensp: "\u2002",
      emsp: "\u2003",
      thinsp: "\u2009",
      zwnj: "\u200C",
      zwj: "\u200D",
      lrm: "\u200E",
      rlm: "\u200F",
      ndash: "\u2013",
      mdash: "\u2014",
      lsquo: "\u2018",
      rsquo: "\u2019",
      sbquo: "\u201A",
      ldquo: "\u201C",
      rdquo: "\u201D",
      bdquo: "\u201E",
      dagger: "\u2020",
      Dagger: "\u2021",
      bull: "\u2022",
      hellip: "\u2026",
      permil: "\u2030",
      prime: "\u2032",
      Prime: "\u2033",
      lsaquo: "\u2039",
      rsaquo: "\u203A",
      oline: "\u203E",
      frasl: "\u2044",
      euro: "\u20AC",
      image: "\u2111",
      weierp: "\u2118",
      real: "\u211C",
      trade: "\u2122",
      alefsym: "\u2135",
      larr: "\u2190",
      uarr: "\u2191",
      rarr: "\u2192",
      darr: "\u2193",
      harr: "\u2194",
      crarr: "\u21B5",
      lArr: "\u21D0",
      uArr: "\u21D1",
      rArr: "\u21D2",
      dArr: "\u21D3",
      hArr: "\u21D4",
      forall: "\u2200",
      part: "\u2202",
      exist: "\u2203",
      empty: "\u2205",
      nabla: "\u2207",
      isin: "\u2208",
      notin: "\u2209",
      ni: "\u220B",
      prod: "\u220F",
      sum: "\u2211",
      minus: "\u2212",
      lowast: "\u2217",
      radic: "\u221A",
      prop: "\u221D",
      infin: "\u221E",
      ang: "\u2220",
      and: "\u2227",
      or: "\u2228",
      cap: "\u2229",
      cup: "\u222A",
      "int": "\u222B",
      there4: "\u2234",
      sim: "\u223C",
      cong: "\u2245",
      asymp: "\u2248",
      ne: "\u2260",
      equiv: "\u2261",
      le: "\u2264",
      ge: "\u2265",
      sub: "\u2282",
      sup: "\u2283",
      nsub: "\u2284",
      sube: "\u2286",
      supe: "\u2287",
      oplus: "\u2295",
      otimes: "\u2297",
      perp: "\u22A5",
      sdot: "\u22C5",
      lceil: "\u2308",
      rceil: "\u2309",
      lfloor: "\u230A",
      rfloor: "\u230B",
      lang: "\u2329",
      rang: "\u232A",
      loz: "\u25CA",
      spades: "\u2660",
      clubs: "\u2663",
      hearts: "\u2665",
      diams: "\u2666"
    };
  }
});

// node_modules/acorn/dist/acorn.js
var require_acorn = __commonJS({
  "node_modules/acorn/dist/acorn.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.acorn = {}));
    })(exports, function(exports2) {
      "use strict";
      var astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      var astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
      var nonASCIIidentifierChars2 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
      var nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var reservedWords2 = {
        3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
        5: "class enum extends super const export import",
        6: "enum",
        strict: "implements interface let package private protected public static yield",
        strictBind: "eval arguments"
      };
      var ecma5AndLessKeywords2 = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
      var keywords$12 = {
        5: ecma5AndLessKeywords2,
        "5module": ecma5AndLessKeywords2 + " export import",
        6: ecma5AndLessKeywords2 + " const class extends export import super"
      };
      var keywordRelationalOperator2 = /^in(stanceof)?$/;
      var nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]");
      var nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
      function isInAstralSet2(code4, set) {
        var pos = 65536;
        for (var i2 = 0; i2 < set.length; i2 += 2) {
          pos += set[i2];
          if (pos > code4) {
            return false;
          }
          pos += set[i2 + 1];
          if (pos >= code4) {
            return true;
          }
        }
        return false;
      }
      function isIdentifierStart2(code4, astral) {
        if (code4 < 65) {
          return code4 === 36;
        }
        if (code4 < 91) {
          return true;
        }
        if (code4 < 97) {
          return code4 === 95;
        }
        if (code4 < 123) {
          return true;
        }
        if (code4 <= 65535) {
          return code4 >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code4));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet2(code4, astralIdentifierStartCodes2);
      }
      function isIdentifierChar2(code4, astral) {
        if (code4 < 48) {
          return code4 === 36;
        }
        if (code4 < 58) {
          return true;
        }
        if (code4 < 65) {
          return false;
        }
        if (code4 < 91) {
          return true;
        }
        if (code4 < 97) {
          return code4 === 95;
        }
        if (code4 < 123) {
          return true;
        }
        if (code4 <= 65535) {
          return code4 >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code4));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet2(code4, astralIdentifierStartCodes2) || isInAstralSet2(code4, astralIdentifierCodes2);
      }
      var TokenType3 = function TokenType4(label, conf) {
        if (conf === void 0) conf = {};
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop || null;
        this.updateContext = null;
      };
      function binop2(name2, prec) {
        return new TokenType3(name2, { beforeExpr: true, binop: prec });
      }
      var beforeExpr2 = { beforeExpr: true }, startsExpr2 = { startsExpr: true };
      var keywords2 = {};
      function kw2(name2, options) {
        if (options === void 0) options = {};
        options.keyword = name2;
        return keywords2[name2] = new TokenType3(name2, options);
      }
      var types$12 = {
        num: new TokenType3("num", startsExpr2),
        regexp: new TokenType3("regexp", startsExpr2),
        string: new TokenType3("string", startsExpr2),
        name: new TokenType3("name", startsExpr2),
        privateId: new TokenType3("privateId", startsExpr2),
        eof: new TokenType3("eof"),
        // Punctuation token types.
        bracketL: new TokenType3("[", { beforeExpr: true, startsExpr: true }),
        bracketR: new TokenType3("]"),
        braceL: new TokenType3("{", { beforeExpr: true, startsExpr: true }),
        braceR: new TokenType3("}"),
        parenL: new TokenType3("(", { beforeExpr: true, startsExpr: true }),
        parenR: new TokenType3(")"),
        comma: new TokenType3(",", beforeExpr2),
        semi: new TokenType3(";", beforeExpr2),
        colon: new TokenType3(":", beforeExpr2),
        dot: new TokenType3("."),
        question: new TokenType3("?", beforeExpr2),
        questionDot: new TokenType3("?."),
        arrow: new TokenType3("=>", beforeExpr2),
        template: new TokenType3("template"),
        invalidTemplate: new TokenType3("invalidTemplate"),
        ellipsis: new TokenType3("...", beforeExpr2),
        backQuote: new TokenType3("`", startsExpr2),
        dollarBraceL: new TokenType3("${", { beforeExpr: true, startsExpr: true }),
        // Operators. These carry several kinds of properties to help the
        // parser use them properly (the presence of these properties is
        // what categorizes them as operators).
        //
        // `binop`, when present, specifies that this operator is a binary
        // operator, and will refer to its precedence.
        //
        // `prefix` and `postfix` mark the operator as a prefix or postfix
        // unary operator.
        //
        // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
        // binary operators with a very low precedence, that should result
        // in AssignmentExpression nodes.
        eq: new TokenType3("=", { beforeExpr: true, isAssign: true }),
        assign: new TokenType3("_=", { beforeExpr: true, isAssign: true }),
        incDec: new TokenType3("++/--", { prefix: true, postfix: true, startsExpr: true }),
        prefix: new TokenType3("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
        logicalOR: binop2("||", 1),
        logicalAND: binop2("&&", 2),
        bitwiseOR: binop2("|", 3),
        bitwiseXOR: binop2("^", 4),
        bitwiseAND: binop2("&", 5),
        equality: binop2("==/!=/===/!==", 6),
        relational: binop2("</>/<=/>=", 7),
        bitShift: binop2("<</>>/>>>", 8),
        plusMin: new TokenType3("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
        modulo: binop2("%", 10),
        star: binop2("*", 10),
        slash: binop2("/", 10),
        starstar: new TokenType3("**", { beforeExpr: true }),
        coalesce: binop2("??", 1),
        // Keyword token types.
        _break: kw2("break"),
        _case: kw2("case", beforeExpr2),
        _catch: kw2("catch"),
        _continue: kw2("continue"),
        _debugger: kw2("debugger"),
        _default: kw2("default", beforeExpr2),
        _do: kw2("do", { isLoop: true, beforeExpr: true }),
        _else: kw2("else", beforeExpr2),
        _finally: kw2("finally"),
        _for: kw2("for", { isLoop: true }),
        _function: kw2("function", startsExpr2),
        _if: kw2("if"),
        _return: kw2("return", beforeExpr2),
        _switch: kw2("switch"),
        _throw: kw2("throw", beforeExpr2),
        _try: kw2("try"),
        _var: kw2("var"),
        _const: kw2("const"),
        _while: kw2("while", { isLoop: true }),
        _with: kw2("with"),
        _new: kw2("new", { beforeExpr: true, startsExpr: true }),
        _this: kw2("this", startsExpr2),
        _super: kw2("super", startsExpr2),
        _class: kw2("class", startsExpr2),
        _extends: kw2("extends", beforeExpr2),
        _export: kw2("export"),
        _import: kw2("import", startsExpr2),
        _null: kw2("null", startsExpr2),
        _true: kw2("true", startsExpr2),
        _false: kw2("false", startsExpr2),
        _in: kw2("in", { beforeExpr: true, binop: 7 }),
        _instanceof: kw2("instanceof", { beforeExpr: true, binop: 7 }),
        _typeof: kw2("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
        _void: kw2("void", { beforeExpr: true, prefix: true, startsExpr: true }),
        _delete: kw2("delete", { beforeExpr: true, prefix: true, startsExpr: true })
      };
      var lineBreak2 = /\r\n?|\n|\u2028|\u2029/;
      var lineBreakG2 = new RegExp(lineBreak2.source, "g");
      function isNewLine2(code4) {
        return code4 === 10 || code4 === 13 || code4 === 8232 || code4 === 8233;
      }
      function nextLineBreak2(code4, from, end) {
        if (end === void 0) end = code4.length;
        for (var i2 = from; i2 < end; i2++) {
          var next = code4.charCodeAt(i2);
          if (isNewLine2(next)) {
            return i2 < end - 1 && next === 13 && code4.charCodeAt(i2 + 1) === 10 ? i2 + 2 : i2 + 1;
          }
        }
        return -1;
      }
      var nonASCIIwhitespace2 = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var skipWhiteSpace2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var ref2 = Object.prototype;
      var hasOwnProperty3 = ref2.hasOwnProperty;
      var toString5 = ref2.toString;
      var hasOwn2 = Object.hasOwn || function(obj, propName) {
        return hasOwnProperty3.call(obj, propName);
      };
      var isArray2 = Array.isArray || function(obj) {
        return toString5.call(obj) === "[object Array]";
      };
      var regexpCache2 = /* @__PURE__ */ Object.create(null);
      function wordsRegexp2(words) {
        return regexpCache2[words] || (regexpCache2[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
      }
      function codePointToString2(code4) {
        if (code4 <= 65535) {
          return String.fromCharCode(code4);
        }
        code4 -= 65536;
        return String.fromCharCode((code4 >> 10) + 55296, (code4 & 1023) + 56320);
      }
      var loneSurrogate2 = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
      var Position3 = function Position4(line, col) {
        this.line = line;
        this.column = col;
      };
      Position3.prototype.offset = function offset2(n) {
        return new Position3(this.line, this.column + n);
      };
      var SourceLocation3 = function SourceLocation4(p, start2, end) {
        this.start = start2;
        this.end = end;
        if (p.sourceFile !== null) {
          this.source = p.sourceFile;
        }
      };
      function getLineInfo2(input, offset2) {
        for (var line = 1, cur = 0; ; ) {
          var nextBreak = nextLineBreak2(input, cur, offset2);
          if (nextBreak < 0) {
            return new Position3(line, offset2 - cur);
          }
          ++line;
          cur = nextBreak;
        }
      }
      var defaultOptions2 = {
        // `ecmaVersion` indicates the ECMAScript version to parse. Must be
        // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
        // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
        // (the latest version the library supports). This influences
        // support for strict mode, the set of reserved words, and support
        // for new syntax features.
        ecmaVersion: null,
        // `sourceType` indicates the mode the code should be parsed in.
        // Can be either `"script"` or `"module"`. This influences global
        // strict mode and parsing of `import` and `export` declarations.
        sourceType: "script",
        // `onInsertedSemicolon` can be a callback that will be called when
        // a semicolon is automatically inserted. It will be passed the
        // position of the inserted semicolon as an offset, and if
        // `locations` is enabled, it is given the location as a `{line,
        // column}` object as second argument.
        onInsertedSemicolon: null,
        // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
        // trailing commas.
        onTrailingComma: null,
        // By default, reserved words are only enforced if ecmaVersion >= 5.
        // Set `allowReserved` to a boolean value to explicitly turn this on
        // an off. When this option has the value "never", reserved words
        // and keywords can also not be used as property names.
        allowReserved: null,
        // When enabled, a return at the top level is not considered an
        // error.
        allowReturnOutsideFunction: false,
        // When enabled, import/export statements are not constrained to
        // appearing at the top of the program, and an import.meta expression
        // in a script isn't considered an error.
        allowImportExportEverywhere: false,
        // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
        // When enabled, await identifiers are allowed to appear at the top-level scope,
        // but they are still not allowed in non-async functions.
        allowAwaitOutsideFunction: null,
        // When enabled, super identifiers are not constrained to
        // appearing in methods and do not raise an error when they appear elsewhere.
        allowSuperOutsideMethod: null,
        // When enabled, hashbang directive in the beginning of file is
        // allowed and treated as a line comment. Enabled by default when
        // `ecmaVersion` >= 2023.
        allowHashBang: false,
        // By default, the parser will verify that private properties are
        // only used in places where they are valid and have been declared.
        // Set this to false to turn such checks off.
        checkPrivateFields: true,
        // When `locations` is on, `loc` properties holding objects with
        // `start` and `end` properties in `{line, column}` form (with
        // line being 1-based and column 0-based) will be attached to the
        // nodes.
        locations: false,
        // A function can be passed as `onToken` option, which will
        // cause Acorn to call that function with object in the same
        // format as tokens returned from `tokenizer().getToken()`. Note
        // that you are not allowed to call the parser from the
        // callback—that will corrupt its internal state.
        onToken: null,
        // A function can be passed as `onComment` option, which will
        // cause Acorn to call that function with `(block, text, start,
        // end)` parameters whenever a comment is skipped. `block` is a
        // boolean indicating whether this is a block (`/* */`) comment,
        // `text` is the content of the comment, and `start` and `end` are
        // character offsets that denote the start and end of the comment.
        // When the `locations` option is on, two more parameters are
        // passed, the full `{line, column}` locations of the start and
        // end of the comments. Note that you are not allowed to call the
        // parser from the callback—that will corrupt its internal state.
        // When this option has an array as value, objects representing the
        // comments are pushed to it.
        onComment: null,
        // Nodes have their start and end characters offsets recorded in
        // `start` and `end` properties (directly on the node, rather than
        // the `loc` object, which holds line/column data. To also add a
        // [semi-standardized][range] `range` property holding a `[start,
        // end]` array with the same numbers, set the `ranges` option to
        // `true`.
        //
        // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
        ranges: false,
        // It is possible to parse multiple files into a single AST by
        // passing the tree produced by parsing the first file as
        // `program` option in subsequent parses. This will add the
        // toplevel forms of the parsed file to the `Program` (top) node
        // of an existing parse tree.
        program: null,
        // When `locations` is on, you can pass this to record the source
        // file in every node's `loc` object.
        sourceFile: null,
        // This value, if given, is stored in every node, whether
        // `locations` is on or off.
        directSourceFile: null,
        // When enabled, parenthesized expressions are represented by
        // (non-standard) ParenthesizedExpression nodes
        preserveParens: false
      };
      var warnedAboutEcmaVersion2 = false;
      function getOptions2(opts) {
        var options = {};
        for (var opt in defaultOptions2) {
          options[opt] = opts && hasOwn2(opts, opt) ? opts[opt] : defaultOptions2[opt];
        }
        if (options.ecmaVersion === "latest") {
          options.ecmaVersion = 1e8;
        } else if (options.ecmaVersion == null) {
          if (!warnedAboutEcmaVersion2 && typeof console === "object" && console.warn) {
            warnedAboutEcmaVersion2 = true;
            console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
          }
          options.ecmaVersion = 11;
        } else if (options.ecmaVersion >= 2015) {
          options.ecmaVersion -= 2009;
        }
        if (options.allowReserved == null) {
          options.allowReserved = options.ecmaVersion < 5;
        }
        if (!opts || opts.allowHashBang == null) {
          options.allowHashBang = options.ecmaVersion >= 14;
        }
        if (isArray2(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        if (isArray2(options.onComment)) {
          options.onComment = pushComment2(options, options.onComment);
        }
        return options;
      }
      function pushComment2(options, array) {
        return function(block, text7, start2, end, startLoc, endLoc) {
          var comment2 = {
            type: block ? "Block" : "Line",
            value: text7,
            start: start2,
            end
          };
          if (options.locations) {
            comment2.loc = new SourceLocation3(this, startLoc, endLoc);
          }
          if (options.ranges) {
            comment2.range = [start2, end];
          }
          array.push(comment2);
        };
      }
      var SCOPE_TOP2 = 1, SCOPE_FUNCTION2 = 2, SCOPE_ASYNC2 = 4, SCOPE_GENERATOR2 = 8, SCOPE_ARROW2 = 16, SCOPE_SIMPLE_CATCH2 = 32, SCOPE_SUPER2 = 64, SCOPE_DIRECT_SUPER2 = 128, SCOPE_CLASS_STATIC_BLOCK2 = 256, SCOPE_VAR2 = SCOPE_TOP2 | SCOPE_FUNCTION2 | SCOPE_CLASS_STATIC_BLOCK2;
      function functionFlags2(async, generator) {
        return SCOPE_FUNCTION2 | (async ? SCOPE_ASYNC2 : 0) | (generator ? SCOPE_GENERATOR2 : 0);
      }
      var BIND_NONE2 = 0, BIND_VAR2 = 1, BIND_LEXICAL2 = 2, BIND_FUNCTION2 = 3, BIND_SIMPLE_CATCH2 = 4, BIND_OUTSIDE2 = 5;
      var Parser3 = function Parser4(options, input, startPos) {
        this.options = options = getOptions2(options);
        this.sourceFile = options.sourceFile;
        this.keywords = wordsRegexp2(keywords$12[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        if (options.allowReserved !== true) {
          reserved = reservedWords2[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
          if (options.sourceType === "module") {
            reserved += " await";
          }
        }
        this.reservedWords = wordsRegexp2(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords2.strict;
        this.reservedWordsStrict = wordsRegexp2(reservedStrict);
        this.reservedWordsStrictBind = wordsRegexp2(reservedStrict + " " + reservedWords2.strictBind);
        this.input = String(input);
        this.containsEsc = false;
        if (startPos) {
          this.pos = startPos;
          this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
          this.curLine = this.input.slice(0, this.lineStart).split(lineBreak2).length;
        } else {
          this.pos = this.lineStart = 0;
          this.curLine = 1;
        }
        this.type = types$12.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();
        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;
        this.context = this.initialContext();
        this.exprAllowed = true;
        this.inModule = options.sourceType === "module";
        this.strict = this.inModule || this.strictDirective(this.pos);
        this.potentialArrowAt = -1;
        this.potentialArrowInForAwait = false;
        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
        this.labels = [];
        this.undefinedExports = /* @__PURE__ */ Object.create(null);
        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
          this.skipLineComment(2);
        }
        this.scopeStack = [];
        this.enterScope(SCOPE_TOP2);
        this.regexpState = null;
        this.privateNameStack = [];
      };
      var prototypeAccessors2 = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
      Parser3.prototype.parse = function parse6() {
        var node2 = this.options.program || this.startNode();
        this.nextToken();
        return this.parseTopLevel(node2);
      };
      prototypeAccessors2.inFunction.get = function() {
        return (this.currentVarScope().flags & SCOPE_FUNCTION2) > 0;
      };
      prototypeAccessors2.inGenerator.get = function() {
        return (this.currentVarScope().flags & SCOPE_GENERATOR2) > 0 && !this.currentVarScope().inClassFieldInit;
      };
      prototypeAccessors2.inAsync.get = function() {
        return (this.currentVarScope().flags & SCOPE_ASYNC2) > 0 && !this.currentVarScope().inClassFieldInit;
      };
      prototypeAccessors2.canAwait.get = function() {
        for (var i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK2) {
            return false;
          }
          if (scope.flags & SCOPE_FUNCTION2) {
            return (scope.flags & SCOPE_ASYNC2) > 0;
          }
        }
        return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
      };
      prototypeAccessors2.allowSuper.get = function() {
        var ref3 = this.currentThisScope();
        var flags = ref3.flags;
        var inClassFieldInit = ref3.inClassFieldInit;
        return (flags & SCOPE_SUPER2) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
      };
      prototypeAccessors2.allowDirectSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER2) > 0;
      };
      prototypeAccessors2.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      };
      prototypeAccessors2.allowNewDotTarget.get = function() {
        var ref3 = this.currentThisScope();
        var flags = ref3.flags;
        var inClassFieldInit = ref3.inClassFieldInit;
        return (flags & (SCOPE_FUNCTION2 | SCOPE_CLASS_STATIC_BLOCK2)) > 0 || inClassFieldInit;
      };
      prototypeAccessors2.inClassStaticBlock.get = function() {
        return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK2) > 0;
      };
      Parser3.extend = function extend3() {
        var plugins = [], len = arguments.length;
        while (len--) plugins[len] = arguments[len];
        var cls = this;
        for (var i2 = 0; i2 < plugins.length; i2++) {
          cls = plugins[i2](cls);
        }
        return cls;
      };
      Parser3.parse = function parse6(input, options) {
        return new this(options, input).parse();
      };
      Parser3.parseExpressionAt = function parseExpressionAt3(input, pos, options) {
        var parser = new this(options, input, pos);
        parser.nextToken();
        return parser.parseExpression();
      };
      Parser3.tokenizer = function tokenizer3(input, options) {
        return new this(options, input);
      };
      Object.defineProperties(Parser3.prototype, prototypeAccessors2);
      var pp$92 = Parser3.prototype;
      var literal2 = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
      pp$92.strictDirective = function(start2) {
        if (this.options.ecmaVersion < 5) {
          return false;
        }
        for (; ; ) {
          skipWhiteSpace2.lastIndex = start2;
          start2 += skipWhiteSpace2.exec(this.input)[0].length;
          var match = literal2.exec(this.input.slice(start2));
          if (!match) {
            return false;
          }
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace2.lastIndex = start2 + match[0].length;
            var spaceAfter = skipWhiteSpace2.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
            var next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak2.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start2 += match[0].length;
          skipWhiteSpace2.lastIndex = start2;
          start2 += skipWhiteSpace2.exec(this.input)[0].length;
          if (this.input[start2] === ";") {
            start2++;
          }
        }
      };
      pp$92.eat = function(type) {
        if (this.type === type) {
          this.next();
          return true;
        } else {
          return false;
        }
      };
      pp$92.isContextual = function(name2) {
        return this.type === types$12.name && this.value === name2 && !this.containsEsc;
      };
      pp$92.eatContextual = function(name2) {
        if (!this.isContextual(name2)) {
          return false;
        }
        this.next();
        return true;
      };
      pp$92.expectContextual = function(name2) {
        if (!this.eatContextual(name2)) {
          this.unexpected();
        }
      };
      pp$92.canInsertSemicolon = function() {
        return this.type === types$12.eof || this.type === types$12.braceR || lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$92.insertSemicolon = function() {
        if (this.canInsertSemicolon()) {
          if (this.options.onInsertedSemicolon) {
            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
          }
          return true;
        }
      };
      pp$92.semicolon = function() {
        if (!this.eat(types$12.semi) && !this.insertSemicolon()) {
          this.unexpected();
        }
      };
      pp$92.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType) {
          if (this.options.onTrailingComma) {
            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
          }
          if (!notNext) {
            this.next();
          }
          return true;
        }
      };
      pp$92.expect = function(type) {
        this.eat(type) || this.unexpected();
      };
      pp$92.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      var DestructuringErrors3 = function DestructuringErrors4() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      };
      pp$92.checkPatternErrors = function(refDestructuringErrors, isAssign) {
        if (!refDestructuringErrors) {
          return;
        }
        if (refDestructuringErrors.trailingComma > -1) {
          this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
        }
        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
        if (parens > -1) {
          this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
        }
      };
      pp$92.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors) {
          return false;
        }
        var shorthandAssign = refDestructuringErrors.shorthandAssign;
        var doubleProto = refDestructuringErrors.doubleProto;
        if (!andThrow) {
          return shorthandAssign >= 0 || doubleProto >= 0;
        }
        if (shorthandAssign >= 0) {
          this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
        }
        if (doubleProto >= 0) {
          this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }
      };
      pp$92.checkYieldAwaitInDefaultParams = function() {
        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
          this.raise(this.yieldPos, "Yield expression cannot be a default value");
        }
        if (this.awaitPos) {
          this.raise(this.awaitPos, "Await expression cannot be a default value");
        }
      };
      pp$92.isSimpleAssignTarget = function(expr) {
        if (expr.type === "ParenthesizedExpression") {
          return this.isSimpleAssignTarget(expr.expression);
        }
        return expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$82 = Parser3.prototype;
      pp$82.parseTopLevel = function(node2) {
        var exports3 = /* @__PURE__ */ Object.create(null);
        if (!node2.body) {
          node2.body = [];
        }
        while (this.type !== types$12.eof) {
          var stmt = this.parseStatement(null, true, exports3);
          node2.body.push(stmt);
        }
        if (this.inModule) {
          for (var i2 = 0, list5 = Object.keys(this.undefinedExports); i2 < list5.length; i2 += 1) {
            var name2 = list5[i2];
            this.raiseRecoverable(this.undefinedExports[name2].start, "Export '" + name2 + "' is not defined");
          }
        }
        this.adaptDirectivePrologue(node2.body);
        this.next();
        node2.sourceType = this.options.sourceType;
        return this.finishNode(node2, "Program");
      };
      var loopLabel2 = { kind: "loop" }, switchLabel2 = { kind: "switch" };
      pp$82.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
          return false;
        }
        skipWhiteSpace2.lastIndex = this.pos;
        var skip = skipWhiteSpace2.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91 || nextCh === 92) {
          return true;
        }
        if (context) {
          return false;
        }
        if (nextCh === 123 || nextCh > 55295 && nextCh < 56320) {
          return true;
        }
        if (isIdentifierStart2(nextCh, true)) {
          var pos = next + 1;
          while (isIdentifierChar2(nextCh = this.input.charCodeAt(pos), true)) {
            ++pos;
          }
          if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
            return true;
          }
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator2.test(ident)) {
            return true;
          }
        }
        return false;
      };
      pp$82.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
          return false;
        }
        skipWhiteSpace2.lastIndex = this.pos;
        var skip = skipWhiteSpace2.exec(this.input);
        var next = this.pos + skip[0].length, after;
        return !lineBreak2.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar2(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
      };
      pp$82.parseStatement = function(context, topLevel, exports3) {
        var starttype = this.type, node2 = this.startNode(), kind;
        if (this.isLet(context)) {
          starttype = types$12._var;
          kind = "let";
        }
        switch (starttype) {
          case types$12._break:
          case types$12._continue:
            return this.parseBreakContinueStatement(node2, starttype.keyword);
          case types$12._debugger:
            return this.parseDebuggerStatement(node2);
          case types$12._do:
            return this.parseDoStatement(node2);
          case types$12._for:
            return this.parseForStatement(node2);
          case types$12._function:
            if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
              this.unexpected();
            }
            return this.parseFunctionStatement(node2, false, !context);
          case types$12._class:
            if (context) {
              this.unexpected();
            }
            return this.parseClass(node2, true);
          case types$12._if:
            return this.parseIfStatement(node2);
          case types$12._return:
            return this.parseReturnStatement(node2);
          case types$12._switch:
            return this.parseSwitchStatement(node2);
          case types$12._throw:
            return this.parseThrowStatement(node2);
          case types$12._try:
            return this.parseTryStatement(node2);
          case types$12._const:
          case types$12._var:
            kind = kind || this.value;
            if (context && kind !== "var") {
              this.unexpected();
            }
            return this.parseVarStatement(node2, kind);
          case types$12._while:
            return this.parseWhileStatement(node2);
          case types$12._with:
            return this.parseWithStatement(node2);
          case types$12.braceL:
            return this.parseBlock(true, node2);
          case types$12.semi:
            return this.parseEmptyStatement(node2);
          case types$12._export:
          case types$12._import:
            if (this.options.ecmaVersion > 10 && starttype === types$12._import) {
              skipWhiteSpace2.lastIndex = this.pos;
              var skip = skipWhiteSpace2.exec(this.input);
              var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46) {
                return this.parseExpressionStatement(node2, this.parseExpression());
              }
            }
            if (!this.options.allowImportExportEverywhere) {
              if (!topLevel) {
                this.raise(this.start, "'import' and 'export' may only appear at the top level");
              }
              if (!this.inModule) {
                this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
              }
            }
            return starttype === types$12._import ? this.parseImport(node2) : this.parseExport(node2, exports3);
          default:
            if (this.isAsyncFunction()) {
              if (context) {
                this.unexpected();
              }
              this.next();
              return this.parseFunctionStatement(node2, true, !context);
            }
            var maybeName = this.value, expr = this.parseExpression();
            if (starttype === types$12.name && expr.type === "Identifier" && this.eat(types$12.colon)) {
              return this.parseLabeledStatement(node2, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node2, expr);
            }
        }
      };
      pp$82.parseBreakContinueStatement = function(node2, keyword) {
        var isBreak = keyword === "break";
        this.next();
        if (this.eat(types$12.semi) || this.insertSemicolon()) {
          node2.label = null;
        } else if (this.type !== types$12.name) {
          this.unexpected();
        } else {
          node2.label = this.parseIdent();
          this.semicolon();
        }
        var i2 = 0;
        for (; i2 < this.labels.length; ++i2) {
          var lab = this.labels[i2];
          if (node2.label == null || lab.name === node2.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) {
              break;
            }
            if (node2.label && isBreak) {
              break;
            }
          }
        }
        if (i2 === this.labels.length) {
          this.raise(node2.start, "Unsyntactic " + keyword);
        }
        return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
      };
      pp$82.parseDebuggerStatement = function(node2) {
        this.next();
        this.semicolon();
        return this.finishNode(node2, "DebuggerStatement");
      };
      pp$82.parseDoStatement = function(node2) {
        this.next();
        this.labels.push(loopLabel2);
        node2.body = this.parseStatement("do");
        this.labels.pop();
        this.expect(types$12._while);
        node2.test = this.parseParenExpression();
        if (this.options.ecmaVersion >= 6) {
          this.eat(types$12.semi);
        } else {
          this.semicolon();
        }
        return this.finishNode(node2, "DoWhileStatement");
      };
      pp$82.parseForStatement = function(node2) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
        this.labels.push(loopLabel2);
        this.enterScope(0);
        this.expect(types$12.parenL);
        if (this.type === types$12.semi) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, null);
        }
        var isLet = this.isLet();
        if (this.type === types$12._var || this.type === types$12._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          this.next();
          this.parseVar(init$1, true, kind);
          this.finishNode(init$1, "VariableDeclaration");
          if ((this.type === types$12._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types$12._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node2.await = awaitAt > -1;
              }
            }
            return this.parseForIn(node2, init$1);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node2, init$1);
        }
        var startsWithLet = this.isContextual("let"), isForOf = false;
        var containsEsc = this.containsEsc;
        var refDestructuringErrors = new DestructuringErrors3();
        var initPos = this.start;
        var init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
        if (this.type === types$12._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
          if (awaitAt > -1) {
            if (this.type === types$12._in) {
              this.unexpected(awaitAt);
            }
            node2.await = true;
          } else if (isForOf && this.options.ecmaVersion >= 8) {
            if (init.start === initPos && !containsEsc && init.type === "Identifier" && init.name === "async") {
              this.unexpected();
            } else if (this.options.ecmaVersion >= 9) {
              node2.await = false;
            }
          }
          if (startsWithLet && isForOf) {
            this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
          }
          this.toAssignable(init, false, refDestructuringErrors);
          this.checkLValPattern(init);
          return this.parseForIn(node2, init);
        } else {
          this.checkExpressionErrors(refDestructuringErrors, true);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node2, init);
      };
      pp$82.parseFunctionStatement = function(node2, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node2, FUNC_STATEMENT2 | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT2), false, isAsync);
      };
      pp$82.parseIfStatement = function(node2) {
        this.next();
        node2.test = this.parseParenExpression();
        node2.consequent = this.parseStatement("if");
        node2.alternate = this.eat(types$12._else) ? this.parseStatement("if") : null;
        return this.finishNode(node2, "IfStatement");
      };
      pp$82.parseReturnStatement = function(node2) {
        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
          this.raise(this.start, "'return' outside of function");
        }
        this.next();
        if (this.eat(types$12.semi) || this.insertSemicolon()) {
          node2.argument = null;
        } else {
          node2.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node2, "ReturnStatement");
      };
      pp$82.parseSwitchStatement = function(node2) {
        this.next();
        node2.discriminant = this.parseParenExpression();
        node2.cases = [];
        this.expect(types$12.braceL);
        this.labels.push(switchLabel2);
        this.enterScope(0);
        var cur;
        for (var sawDefault = false; this.type !== types$12.braceR; ) {
          if (this.type === types$12._case || this.type === types$12._default) {
            var isCase = this.type === types$12._case;
            if (cur) {
              this.finishNode(cur, "SwitchCase");
            }
            node2.cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(types$12.colon);
          } else {
            if (!cur) {
              this.unexpected();
            }
            cur.consequent.push(this.parseStatement(null));
          }
        }
        this.exitScope();
        if (cur) {
          this.finishNode(cur, "SwitchCase");
        }
        this.next();
        this.labels.pop();
        return this.finishNode(node2, "SwitchStatement");
      };
      pp$82.parseThrowStatement = function(node2) {
        this.next();
        if (lineBreak2.test(this.input.slice(this.lastTokEnd, this.start))) {
          this.raise(this.lastTokEnd, "Illegal newline after throw");
        }
        node2.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node2, "ThrowStatement");
      };
      var empty$12 = [];
      pp$82.parseCatchClauseParam = function() {
        var param = this.parseBindingAtom();
        var simple = param.type === "Identifier";
        this.enterScope(simple ? SCOPE_SIMPLE_CATCH2 : 0);
        this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH2 : BIND_LEXICAL2);
        this.expect(types$12.parenR);
        return param;
      };
      pp$82.parseTryStatement = function(node2) {
        this.next();
        node2.block = this.parseBlock();
        node2.handler = null;
        if (this.type === types$12._catch) {
          var clause = this.startNode();
          this.next();
          if (this.eat(types$12.parenL)) {
            clause.param = this.parseCatchClauseParam();
          } else {
            if (this.options.ecmaVersion < 10) {
              this.unexpected();
            }
            clause.param = null;
            this.enterScope(0);
          }
          clause.body = this.parseBlock(false);
          this.exitScope();
          node2.handler = this.finishNode(clause, "CatchClause");
        }
        node2.finalizer = this.eat(types$12._finally) ? this.parseBlock() : null;
        if (!node2.handler && !node2.finalizer) {
          this.raise(node2.start, "Missing catch or finally clause");
        }
        return this.finishNode(node2, "TryStatement");
      };
      pp$82.parseVarStatement = function(node2, kind, allowMissingInitializer) {
        this.next();
        this.parseVar(node2, false, kind, allowMissingInitializer);
        this.semicolon();
        return this.finishNode(node2, "VariableDeclaration");
      };
      pp$82.parseWhileStatement = function(node2) {
        this.next();
        node2.test = this.parseParenExpression();
        this.labels.push(loopLabel2);
        node2.body = this.parseStatement("while");
        this.labels.pop();
        return this.finishNode(node2, "WhileStatement");
      };
      pp$82.parseWithStatement = function(node2) {
        if (this.strict) {
          this.raise(this.start, "'with' in strict mode");
        }
        this.next();
        node2.object = this.parseParenExpression();
        node2.body = this.parseStatement("with");
        return this.finishNode(node2, "WithStatement");
      };
      pp$82.parseEmptyStatement = function(node2) {
        this.next();
        return this.finishNode(node2, "EmptyStatement");
      };
      pp$82.parseLabeledStatement = function(node2, maybeName, expr, context) {
        for (var i$1 = 0, list5 = this.labels; i$1 < list5.length; i$1 += 1) {
          var label = list5[i$1];
          if (label.name === maybeName) {
            this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
        }
        var kind = this.type.isLoop ? "loop" : this.type === types$12._switch ? "switch" : null;
        for (var i2 = this.labels.length - 1; i2 >= 0; i2--) {
          var label$1 = this.labels[i2];
          if (label$1.statementStart === node2.start) {
            label$1.statementStart = this.start;
            label$1.kind = kind;
          } else {
            break;
          }
        }
        this.labels.push({ name: maybeName, kind, statementStart: this.start });
        node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.labels.pop();
        node2.label = expr;
        return this.finishNode(node2, "LabeledStatement");
      };
      pp$82.parseExpressionStatement = function(node2, expr) {
        node2.expression = expr;
        this.semicolon();
        return this.finishNode(node2, "ExpressionStatement");
      };
      pp$82.parseBlock = function(createNewLexicalScope, node2, exitStrict) {
        if (createNewLexicalScope === void 0) createNewLexicalScope = true;
        if (node2 === void 0) node2 = this.startNode();
        node2.body = [];
        this.expect(types$12.braceL);
        if (createNewLexicalScope) {
          this.enterScope(0);
        }
        while (this.type !== types$12.braceR) {
          var stmt = this.parseStatement(null);
          node2.body.push(stmt);
        }
        if (exitStrict) {
          this.strict = false;
        }
        this.next();
        if (createNewLexicalScope) {
          this.exitScope();
        }
        return this.finishNode(node2, "BlockStatement");
      };
      pp$82.parseFor = function(node2, init) {
        node2.init = init;
        this.expect(types$12.semi);
        node2.test = this.type === types$12.semi ? null : this.parseExpression();
        this.expect(types$12.semi);
        node2.update = this.type === types$12.parenR ? null : this.parseExpression();
        this.expect(types$12.parenR);
        node2.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node2, "ForStatement");
      };
      pp$82.parseForIn = function(node2, init) {
        var isForIn = this.type === types$12._in;
        this.next();
        if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
          this.raise(
            init.start,
            (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
          );
        }
        node2.left = init;
        node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
        this.expect(types$12.parenR);
        node2.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
      };
      pp$82.parseVar = function(node2, isFor, kind, allowMissingInitializer) {
        node2.declarations = [];
        node2.kind = kind;
        for (; ; ) {
          var decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(types$12.eq)) {
            decl.init = this.parseMaybeAssign(isFor);
          } else if (!allowMissingInitializer && kind === "const" && !(this.type === types$12._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
            this.unexpected();
          } else if (!allowMissingInitializer && decl.id.type !== "Identifier" && !(isFor && (this.type === types$12._in || this.isContextual("of")))) {
            this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
          } else {
            decl.init = null;
          }
          node2.declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(types$12.comma)) {
            break;
          }
        }
        return node2;
      };
      pp$82.parseVarId = function(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR2 : BIND_LEXICAL2, false);
      };
      var FUNC_STATEMENT2 = 1, FUNC_HANGING_STATEMENT2 = 2, FUNC_NULLABLE_ID2 = 4;
      pp$82.parseFunction = function(node2, statement, allowExpressionBody, isAsync, forInit) {
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
          if (this.type === types$12.star && statement & FUNC_HANGING_STATEMENT2) {
            this.unexpected();
          }
          node2.generator = this.eat(types$12.star);
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        if (statement & FUNC_STATEMENT2) {
          node2.id = statement & FUNC_NULLABLE_ID2 && this.type !== types$12.name ? null : this.parseIdent();
          if (node2.id && !(statement & FUNC_HANGING_STATEMENT2)) {
            this.checkLValSimple(node2.id, this.strict || node2.generator || node2.async ? this.treatFunctionsAsVar ? BIND_VAR2 : BIND_LEXICAL2 : BIND_FUNCTION2);
          }
        }
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags2(node2.async, node2.generator));
        if (!(statement & FUNC_STATEMENT2)) {
          node2.id = this.type === types$12.name ? this.parseIdent() : null;
        }
        this.parseFunctionParams(node2);
        this.parseFunctionBody(node2, allowExpressionBody, false, forInit);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, statement & FUNC_STATEMENT2 ? "FunctionDeclaration" : "FunctionExpression");
      };
      pp$82.parseFunctionParams = function(node2) {
        this.expect(types$12.parenL);
        node2.params = this.parseBindingList(types$12.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
      };
      pp$82.parseClass = function(node2, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true;
        this.parseClassId(node2, isStatement);
        this.parseClassSuper(node2);
        var privateNameMap = this.enterClassBody();
        var classBody = this.startNode();
        var hadConstructor = false;
        classBody.body = [];
        this.expect(types$12.braceL);
        while (this.type !== types$12.braceR) {
          var element3 = this.parseClassElement(node2.superClass !== null);
          if (element3) {
            classBody.body.push(element3);
            if (element3.type === "MethodDefinition" && element3.kind === "constructor") {
              if (hadConstructor) {
                this.raiseRecoverable(element3.start, "Duplicate constructor in the same class");
              }
              hadConstructor = true;
            } else if (element3.key && element3.key.type === "PrivateIdentifier" && isPrivateNameConflicted2(privateNameMap, element3)) {
              this.raiseRecoverable(element3.key.start, "Identifier '#" + element3.key.name + "' has already been declared");
            }
          }
        }
        this.strict = oldStrict;
        this.next();
        node2.body = this.finishNode(classBody, "ClassBody");
        this.exitClassBody();
        return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
      };
      pp$82.parseClassElement = function(constructorAllowsSuper) {
        if (this.eat(types$12.semi)) {
          return null;
        }
        var ecmaVersion2 = this.options.ecmaVersion;
        var node2 = this.startNode();
        var keyName = "";
        var isGenerator = false;
        var isAsync = false;
        var kind = "method";
        var isStatic = false;
        if (this.eatContextual("static")) {
          if (ecmaVersion2 >= 13 && this.eat(types$12.braceL)) {
            this.parseClassStaticBlock(node2);
            return node2;
          }
          if (this.isClassElementNameStart() || this.type === types$12.star) {
            isStatic = true;
          } else {
            keyName = "static";
          }
        }
        node2.static = isStatic;
        if (!keyName && ecmaVersion2 >= 8 && this.eatContextual("async")) {
          if ((this.isClassElementNameStart() || this.type === types$12.star) && !this.canInsertSemicolon()) {
            isAsync = true;
          } else {
            keyName = "async";
          }
        }
        if (!keyName && (ecmaVersion2 >= 9 || !isAsync) && this.eat(types$12.star)) {
          isGenerator = true;
        }
        if (!keyName && !isAsync && !isGenerator) {
          var lastValue = this.value;
          if (this.eatContextual("get") || this.eatContextual("set")) {
            if (this.isClassElementNameStart()) {
              kind = lastValue;
            } else {
              keyName = lastValue;
            }
          }
        }
        if (keyName) {
          node2.computed = false;
          node2.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
          node2.key.name = keyName;
          this.finishNode(node2.key, "Identifier");
        } else {
          this.parseClassElementName(node2);
        }
        if (ecmaVersion2 < 13 || this.type === types$12.parenL || kind !== "method" || isGenerator || isAsync) {
          var isConstructor = !node2.static && checkKeyName2(node2, "constructor");
          var allowsDirectSuper = isConstructor && constructorAllowsSuper;
          if (isConstructor && kind !== "method") {
            this.raise(node2.key.start, "Constructor can't have get/set modifier");
          }
          node2.kind = isConstructor ? "constructor" : kind;
          this.parseClassMethod(node2, isGenerator, isAsync, allowsDirectSuper);
        } else {
          this.parseClassField(node2);
        }
        return node2;
      };
      pp$82.isClassElementNameStart = function() {
        return this.type === types$12.name || this.type === types$12.privateId || this.type === types$12.num || this.type === types$12.string || this.type === types$12.bracketL || this.type.keyword;
      };
      pp$82.parseClassElementName = function(element3) {
        if (this.type === types$12.privateId) {
          if (this.value === "constructor") {
            this.raise(this.start, "Classes can't have an element named '#constructor'");
          }
          element3.computed = false;
          element3.key = this.parsePrivateIdent();
        } else {
          this.parsePropertyName(element3);
        }
      };
      pp$82.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        var key = method.key;
        if (method.kind === "constructor") {
          if (isGenerator) {
            this.raise(key.start, "Constructor can't be a generator");
          }
          if (isAsync) {
            this.raise(key.start, "Constructor can't be an async method");
          }
        } else if (method.static && checkKeyName2(method, "prototype")) {
          this.raise(key.start, "Classes may not have a static property named prototype");
        }
        var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        if (method.kind === "get" && value.params.length !== 0) {
          this.raiseRecoverable(value.start, "getter should have no params");
        }
        if (method.kind === "set" && value.params.length !== 1) {
          this.raiseRecoverable(value.start, "setter should have exactly one param");
        }
        if (method.kind === "set" && value.params[0].type === "RestElement") {
          this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
        }
        return this.finishNode(method, "MethodDefinition");
      };
      pp$82.parseClassField = function(field) {
        if (checkKeyName2(field, "constructor")) {
          this.raise(field.key.start, "Classes can't have a field named 'constructor'");
        } else if (field.static && checkKeyName2(field, "prototype")) {
          this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
        }
        if (this.eat(types$12.eq)) {
          var scope = this.currentThisScope();
          var inClassFieldInit = scope.inClassFieldInit;
          scope.inClassFieldInit = true;
          field.value = this.parseMaybeAssign();
          scope.inClassFieldInit = inClassFieldInit;
        } else {
          field.value = null;
        }
        this.semicolon();
        return this.finishNode(field, "PropertyDefinition");
      };
      pp$82.parseClassStaticBlock = function(node2) {
        node2.body = [];
        var oldLabels = this.labels;
        this.labels = [];
        this.enterScope(SCOPE_CLASS_STATIC_BLOCK2 | SCOPE_SUPER2);
        while (this.type !== types$12.braceR) {
          var stmt = this.parseStatement(null);
          node2.body.push(stmt);
        }
        this.next();
        this.exitScope();
        this.labels = oldLabels;
        return this.finishNode(node2, "StaticBlock");
      };
      pp$82.parseClassId = function(node2, isStatement) {
        if (this.type === types$12.name) {
          node2.id = this.parseIdent();
          if (isStatement) {
            this.checkLValSimple(node2.id, BIND_LEXICAL2, false);
          }
        } else {
          if (isStatement === true) {
            this.unexpected();
          }
          node2.id = null;
        }
      };
      pp$82.parseClassSuper = function(node2) {
        node2.superClass = this.eat(types$12._extends) ? this.parseExprSubscripts(null, false) : null;
      };
      pp$82.enterClassBody = function() {
        var element3 = { declared: /* @__PURE__ */ Object.create(null), used: [] };
        this.privateNameStack.push(element3);
        return element3.declared;
      };
      pp$82.exitClassBody = function() {
        var ref3 = this.privateNameStack.pop();
        var declared = ref3.declared;
        var used = ref3.used;
        if (!this.options.checkPrivateFields) {
          return;
        }
        var len = this.privateNameStack.length;
        var parent = len === 0 ? null : this.privateNameStack[len - 1];
        for (var i2 = 0; i2 < used.length; ++i2) {
          var id = used[i2];
          if (!hasOwn2(declared, id.name)) {
            if (parent) {
              parent.used.push(id);
            } else {
              this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class");
            }
          }
        }
      };
      function isPrivateNameConflicted2(privateNameMap, element3) {
        var name2 = element3.key.name;
        var curr = privateNameMap[name2];
        var next = "true";
        if (element3.type === "MethodDefinition" && (element3.kind === "get" || element3.kind === "set")) {
          next = (element3.static ? "s" : "i") + element3.kind;
        }
        if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
          privateNameMap[name2] = "true";
          return false;
        } else if (!curr) {
          privateNameMap[name2] = next;
          return false;
        } else {
          return true;
        }
      }
      function checkKeyName2(node2, name2) {
        var computed = node2.computed;
        var key = node2.key;
        return !computed && (key.type === "Identifier" && key.name === name2 || key.type === "Literal" && key.value === name2);
      }
      pp$82.parseExportAllDeclaration = function(node2, exports3) {
        if (this.options.ecmaVersion >= 11) {
          if (this.eatContextual("as")) {
            node2.exported = this.parseModuleExportName();
            this.checkExport(exports3, node2.exported, this.lastTokStart);
          } else {
            node2.exported = null;
          }
        }
        this.expectContextual("from");
        if (this.type !== types$12.string) {
          this.unexpected();
        }
        node2.source = this.parseExprAtom();
        this.semicolon();
        return this.finishNode(node2, "ExportAllDeclaration");
      };
      pp$82.parseExport = function(node2, exports3) {
        this.next();
        if (this.eat(types$12.star)) {
          return this.parseExportAllDeclaration(node2, exports3);
        }
        if (this.eat(types$12._default)) {
          this.checkExport(exports3, "default", this.lastTokStart);
          node2.declaration = this.parseExportDefaultDeclaration();
          return this.finishNode(node2, "ExportDefaultDeclaration");
        }
        if (this.shouldParseExportStatement()) {
          node2.declaration = this.parseExportDeclaration(node2);
          if (node2.declaration.type === "VariableDeclaration") {
            this.checkVariableExport(exports3, node2.declaration.declarations);
          } else {
            this.checkExport(exports3, node2.declaration.id, node2.declaration.id.start);
          }
          node2.specifiers = [];
          node2.source = null;
        } else {
          node2.declaration = null;
          node2.specifiers = this.parseExportSpecifiers(exports3);
          if (this.eatContextual("from")) {
            if (this.type !== types$12.string) {
              this.unexpected();
            }
            node2.source = this.parseExprAtom();
          } else {
            for (var i2 = 0, list5 = node2.specifiers; i2 < list5.length; i2 += 1) {
              var spec = list5[i2];
              this.checkUnreserved(spec.local);
              this.checkLocalExport(spec.local);
              if (spec.local.type === "Literal") {
                this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
            }
            node2.source = null;
          }
          this.semicolon();
        }
        return this.finishNode(node2, "ExportNamedDeclaration");
      };
      pp$82.parseExportDeclaration = function(node2) {
        return this.parseStatement(null);
      };
      pp$82.parseExportDefaultDeclaration = function() {
        var isAsync;
        if (this.type === types$12._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          this.next();
          if (isAsync) {
            this.next();
          }
          return this.parseFunction(fNode, FUNC_STATEMENT2 | FUNC_NULLABLE_ID2, false, isAsync);
        } else if (this.type === types$12._class) {
          var cNode = this.startNode();
          return this.parseClass(cNode, "nullableID");
        } else {
          var declaration = this.parseMaybeAssign();
          this.semicolon();
          return declaration;
        }
      };
      pp$82.checkExport = function(exports3, name2, pos) {
        if (!exports3) {
          return;
        }
        if (typeof name2 !== "string") {
          name2 = name2.type === "Identifier" ? name2.name : name2.value;
        }
        if (hasOwn2(exports3, name2)) {
          this.raiseRecoverable(pos, "Duplicate export '" + name2 + "'");
        }
        exports3[name2] = true;
      };
      pp$82.checkPatternExport = function(exports3, pat) {
        var type = pat.type;
        if (type === "Identifier") {
          this.checkExport(exports3, pat, pat.start);
        } else if (type === "ObjectPattern") {
          for (var i2 = 0, list5 = pat.properties; i2 < list5.length; i2 += 1) {
            var prop = list5[i2];
            this.checkPatternExport(exports3, prop);
          }
        } else if (type === "ArrayPattern") {
          for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            if (elt) {
              this.checkPatternExport(exports3, elt);
            }
          }
        } else if (type === "Property") {
          this.checkPatternExport(exports3, pat.value);
        } else if (type === "AssignmentPattern") {
          this.checkPatternExport(exports3, pat.left);
        } else if (type === "RestElement") {
          this.checkPatternExport(exports3, pat.argument);
        }
      };
      pp$82.checkVariableExport = function(exports3, decls) {
        if (!exports3) {
          return;
        }
        for (var i2 = 0, list5 = decls; i2 < list5.length; i2 += 1) {
          var decl = list5[i2];
          this.checkPatternExport(exports3, decl.id);
        }
      };
      pp$82.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      };
      pp$82.parseExportSpecifier = function(exports3) {
        var node2 = this.startNode();
        node2.local = this.parseModuleExportName();
        node2.exported = this.eatContextual("as") ? this.parseModuleExportName() : node2.local;
        this.checkExport(
          exports3,
          node2.exported,
          node2.exported.start
        );
        return this.finishNode(node2, "ExportSpecifier");
      };
      pp$82.parseExportSpecifiers = function(exports3) {
        var nodes = [], first = true;
        this.expect(types$12.braceL);
        while (!this.eat(types$12.braceR)) {
          if (!first) {
            this.expect(types$12.comma);
            if (this.afterTrailingComma(types$12.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          nodes.push(this.parseExportSpecifier(exports3));
        }
        return nodes;
      };
      pp$82.parseImport = function(node2) {
        this.next();
        if (this.type === types$12.string) {
          node2.specifiers = empty$12;
          node2.source = this.parseExprAtom();
        } else {
          node2.specifiers = this.parseImportSpecifiers();
          this.expectContextual("from");
          node2.source = this.type === types$12.string ? this.parseExprAtom() : this.unexpected();
        }
        this.semicolon();
        return this.finishNode(node2, "ImportDeclaration");
      };
      pp$82.parseImportSpecifier = function() {
        var node2 = this.startNode();
        node2.imported = this.parseModuleExportName();
        if (this.eatContextual("as")) {
          node2.local = this.parseIdent();
        } else {
          this.checkUnreserved(node2.imported);
          node2.local = node2.imported;
        }
        this.checkLValSimple(node2.local, BIND_LEXICAL2);
        return this.finishNode(node2, "ImportSpecifier");
      };
      pp$82.parseImportDefaultSpecifier = function() {
        var node2 = this.startNode();
        node2.local = this.parseIdent();
        this.checkLValSimple(node2.local, BIND_LEXICAL2);
        return this.finishNode(node2, "ImportDefaultSpecifier");
      };
      pp$82.parseImportNamespaceSpecifier = function() {
        var node2 = this.startNode();
        this.next();
        this.expectContextual("as");
        node2.local = this.parseIdent();
        this.checkLValSimple(node2.local, BIND_LEXICAL2);
        return this.finishNode(node2, "ImportNamespaceSpecifier");
      };
      pp$82.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types$12.name) {
          nodes.push(this.parseImportDefaultSpecifier());
          if (!this.eat(types$12.comma)) {
            return nodes;
          }
        }
        if (this.type === types$12.star) {
          nodes.push(this.parseImportNamespaceSpecifier());
          return nodes;
        }
        this.expect(types$12.braceL);
        while (!this.eat(types$12.braceR)) {
          if (!first) {
            this.expect(types$12.comma);
            if (this.afterTrailingComma(types$12.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          nodes.push(this.parseImportSpecifier());
        }
        return nodes;
      };
      pp$82.parseModuleExportName = function() {
        if (this.options.ecmaVersion >= 13 && this.type === types$12.string) {
          var stringLiteral = this.parseLiteral(this.value);
          if (loneSurrogate2.test(stringLiteral.value)) {
            this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
          }
          return stringLiteral;
        }
        return this.parseIdent(true);
      };
      pp$82.adaptDirectivePrologue = function(statements) {
        for (var i2 = 0; i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2) {
          statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
        }
      };
      pp$82.isDirectiveCandidate = function(statement) {
        return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && // Reject parenthesized strings.
        (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$72 = Parser3.prototype;
      pp$72.toAssignable = function(node2, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node2) {
          switch (node2.type) {
            case "Identifier":
              if (this.inAsync && node2.name === "await") {
                this.raise(node2.start, "Cannot use 'await' as identifier inside an async function");
              }
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node2.type = "ObjectPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              for (var i2 = 0, list5 = node2.properties; i2 < list5.length; i2 += 1) {
                var prop = list5[i2];
                this.toAssignable(prop, isBinding);
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                  this.raise(prop.argument.start, "Unexpected token");
                }
              }
              break;
            case "Property":
              if (node2.kind !== "init") {
                this.raise(node2.key.start, "Object pattern can't contain getter or setter");
              }
              this.toAssignable(node2.value, isBinding);
              break;
            case "ArrayExpression":
              node2.type = "ArrayPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              this.toAssignableList(node2.elements, isBinding);
              break;
            case "SpreadElement":
              node2.type = "RestElement";
              this.toAssignable(node2.argument, isBinding);
              if (node2.argument.type === "AssignmentPattern") {
                this.raise(node2.argument.start, "Rest elements cannot have a default value");
              }
              break;
            case "AssignmentExpression":
              if (node2.operator !== "=") {
                this.raise(node2.left.end, "Only '=' operator can be used for specifying default value.");
              }
              node2.type = "AssignmentPattern";
              delete node2.operator;
              this.toAssignable(node2.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node2.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node2.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) {
                break;
              }
            default:
              this.raise(node2.start, "Assigning to rvalue");
          }
        } else if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        return node2;
      };
      pp$72.toAssignableList = function(exprList, isBinding) {
        var end = exprList.length;
        for (var i2 = 0; i2 < end; i2++) {
          var elt = exprList[i2];
          if (elt) {
            this.toAssignable(elt, isBinding);
          }
        }
        if (end) {
          var last = exprList[end - 1];
          if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
            this.unexpected(last.argument.start);
          }
        }
        return exprList;
      };
      pp$72.parseSpread = function(refDestructuringErrors) {
        var node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        return this.finishNode(node2, "SpreadElement");
      };
      pp$72.parseRestBinding = function() {
        var node2 = this.startNode();
        this.next();
        if (this.options.ecmaVersion === 6 && this.type !== types$12.name) {
          this.unexpected();
        }
        node2.argument = this.parseBindingAtom();
        return this.finishNode(node2, "RestElement");
      };
      pp$72.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6) {
          switch (this.type) {
            case types$12.bracketL:
              var node2 = this.startNode();
              this.next();
              node2.elements = this.parseBindingList(types$12.bracketR, true, true);
              return this.finishNode(node2, "ArrayPattern");
            case types$12.braceL:
              return this.parseObj(true);
          }
        }
        return this.parseIdent();
      };
      pp$72.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(types$12.comma);
          }
          if (allowEmpty && this.type === types$12.comma) {
            elts.push(null);
          } else if (allowTrailingComma && this.afterTrailingComma(close)) {
            break;
          } else if (this.type === types$12.ellipsis) {
            var rest = this.parseRestBinding();
            this.parseBindingListItem(rest);
            elts.push(rest);
            if (this.type === types$12.comma) {
              this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            }
            this.expect(close);
            break;
          } else {
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
        }
        return elts;
      };
      pp$72.parseAssignableListItem = function(allowModifiers) {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        this.parseBindingListItem(elem);
        return elem;
      };
      pp$72.parseBindingListItem = function(param) {
        return param;
      };
      pp$72.parseMaybeDefault = function(startPos, startLoc, left) {
        left = left || this.parseBindingAtom();
        if (this.options.ecmaVersion < 6 || !this.eat(types$12.eq)) {
          return left;
        }
        var node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.right = this.parseMaybeAssign();
        return this.finishNode(node2, "AssignmentPattern");
      };
      pp$72.checkLValSimple = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0) bindingType = BIND_NONE2;
        var isBind = bindingType !== BIND_NONE2;
        switch (expr.type) {
          case "Identifier":
            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
              this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            }
            if (isBind) {
              if (bindingType === BIND_LEXICAL2 && expr.name === "let") {
                this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
              }
              if (checkClashes) {
                if (hasOwn2(checkClashes, expr.name)) {
                  this.raiseRecoverable(expr.start, "Argument name clash");
                }
                checkClashes[expr.name] = true;
              }
              if (bindingType !== BIND_OUTSIDE2) {
                this.declareName(expr.name, bindingType, expr.start);
              }
            }
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            if (isBind) {
              this.raiseRecoverable(expr.start, "Binding member expression");
            }
            break;
          case "ParenthesizedExpression":
            if (isBind) {
              this.raiseRecoverable(expr.start, "Binding parenthesized expression");
            }
            return this.checkLValSimple(expr.expression, bindingType, checkClashes);
          default:
            this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
        }
      };
      pp$72.checkLValPattern = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0) bindingType = BIND_NONE2;
        switch (expr.type) {
          case "ObjectPattern":
            for (var i2 = 0, list5 = expr.properties; i2 < list5.length; i2 += 1) {
              var prop = list5[i2];
              this.checkLValInnerPattern(prop, bindingType, checkClashes);
            }
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              if (elem) {
                this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
            }
            break;
          default:
            this.checkLValSimple(expr, bindingType, checkClashes);
        }
      };
      pp$72.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0) bindingType = BIND_NONE2;
        switch (expr.type) {
          case "Property":
            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
            break;
          case "AssignmentPattern":
            this.checkLValPattern(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLValPattern(expr.argument, bindingType, checkClashes);
            break;
          default:
            this.checkLValPattern(expr, bindingType, checkClashes);
        }
      };
      var TokContext3 = function TokContext4(token, isExpr, preserveSpace, override, generator) {
        this.token = token;
        this.isExpr = !!isExpr;
        this.preserveSpace = !!preserveSpace;
        this.override = override;
        this.generator = !!generator;
      };
      var types2 = {
        b_stat: new TokContext3("{", false),
        b_expr: new TokContext3("{", true),
        b_tmpl: new TokContext3("${", false),
        p_stat: new TokContext3("(", false),
        p_expr: new TokContext3("(", true),
        q_tmpl: new TokContext3("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }),
        f_stat: new TokContext3("function", false),
        f_expr: new TokContext3("function", true),
        f_expr_gen: new TokContext3("function", true, false, null, true),
        f_gen: new TokContext3("function", false, false, null, true)
      };
      var pp$62 = Parser3.prototype;
      pp$62.initialContext = function() {
        return [types2.b_stat];
      };
      pp$62.curContext = function() {
        return this.context[this.context.length - 1];
      };
      pp$62.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        if (parent === types2.f_expr || parent === types2.f_stat) {
          return true;
        }
        if (prevType === types$12.colon && (parent === types2.b_stat || parent === types2.b_expr)) {
          return !parent.isExpr;
        }
        if (prevType === types$12._return || prevType === types$12.name && this.exprAllowed) {
          return lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
        }
        if (prevType === types$12._else || prevType === types$12.semi || prevType === types$12.eof || prevType === types$12.parenR || prevType === types$12.arrow) {
          return true;
        }
        if (prevType === types$12.braceL) {
          return parent === types2.b_stat;
        }
        if (prevType === types$12._var || prevType === types$12._const || prevType === types$12.name) {
          return false;
        }
        return !this.exprAllowed;
      };
      pp$62.inGeneratorContext = function() {
        for (var i2 = this.context.length - 1; i2 >= 1; i2--) {
          var context = this.context[i2];
          if (context.token === "function") {
            return context.generator;
          }
        }
        return false;
      };
      pp$62.updateContext = function(prevType) {
        var update, type = this.type;
        if (type.keyword && prevType === types$12.dot) {
          this.exprAllowed = false;
        } else if (update = type.updateContext) {
          update.call(this, prevType);
        } else {
          this.exprAllowed = type.beforeExpr;
        }
      };
      pp$62.overrideContext = function(tokenCtx) {
        if (this.curContext() !== tokenCtx) {
          this.context[this.context.length - 1] = tokenCtx;
        }
      };
      types$12.parenR.updateContext = types$12.braceR.updateContext = function() {
        if (this.context.length === 1) {
          this.exprAllowed = true;
          return;
        }
        var out = this.context.pop();
        if (out === types2.b_stat && this.curContext().token === "function") {
          out = this.context.pop();
        }
        this.exprAllowed = !out.isExpr;
      };
      types$12.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types2.b_stat : types2.b_expr);
        this.exprAllowed = true;
      };
      types$12.dollarBraceL.updateContext = function() {
        this.context.push(types2.b_tmpl);
        this.exprAllowed = true;
      };
      types$12.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types$12._if || prevType === types$12._for || prevType === types$12._with || prevType === types$12._while;
        this.context.push(statementParens ? types2.p_stat : types2.p_expr);
        this.exprAllowed = true;
      };
      types$12.incDec.updateContext = function() {
      };
      types$12._function.updateContext = types$12._class.updateContext = function(prevType) {
        if (prevType.beforeExpr && prevType !== types$12._else && !(prevType === types$12.semi && this.curContext() !== types2.p_stat) && !(prevType === types$12._return && lineBreak2.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$12.colon || prevType === types$12.braceL) && this.curContext() === types2.b_stat)) {
          this.context.push(types2.f_expr);
        } else {
          this.context.push(types2.f_stat);
        }
        this.exprAllowed = false;
      };
      types$12.colon.updateContext = function() {
        if (this.curContext().token === "function") {
          this.context.pop();
        }
        this.exprAllowed = true;
      };
      types$12.backQuote.updateContext = function() {
        if (this.curContext() === types2.q_tmpl) {
          this.context.pop();
        } else {
          this.context.push(types2.q_tmpl);
        }
        this.exprAllowed = false;
      };
      types$12.star.updateContext = function(prevType) {
        if (prevType === types$12._function) {
          var index2 = this.context.length - 1;
          if (this.context[index2] === types2.f_expr) {
            this.context[index2] = types2.f_expr_gen;
          } else {
            this.context[index2] = types2.f_gen;
          }
        }
        this.exprAllowed = true;
      };
      types$12.name.updateContext = function(prevType) {
        var allowed = false;
        if (this.options.ecmaVersion >= 6 && prevType !== types$12.dot) {
          if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
            allowed = true;
          }
        }
        this.exprAllowed = allowed;
      };
      var pp$52 = Parser3.prototype;
      pp$52.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
          return;
        }
        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
          return;
        }
        var key = prop.key;
        var name2;
        switch (key.type) {
          case "Identifier":
            name2 = key.name;
            break;
          case "Literal":
            name2 = String(key.value);
            break;
          default:
            return;
        }
        var kind = prop.kind;
        if (this.options.ecmaVersion >= 6) {
          if (name2 === "__proto__" && kind === "init") {
            if (propHash.proto) {
              if (refDestructuringErrors) {
                if (refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                }
              } else {
                this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
              }
            }
            propHash.proto = true;
          }
          return;
        }
        name2 = "$" + name2;
        var other = propHash[name2];
        if (other) {
          var redefinition;
          if (kind === "init") {
            redefinition = this.strict && other.init || other.get || other.set;
          } else {
            redefinition = other.init || other[kind];
          }
          if (redefinition) {
            this.raiseRecoverable(key.start, "Redefinition of property");
          }
        } else {
          other = propHash[name2] = {
            init: false,
            get: false,
            set: false
          };
        }
        other[kind] = true;
      };
      pp$52.parseExpression = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
        if (this.type === types$12.comma) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.expressions = [expr];
          while (this.eat(types$12.comma)) {
            node2.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
          }
          return this.finishNode(node2, "SequenceExpression");
        }
        return expr;
      };
      pp$52.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator) {
            return this.parseYield(forInit);
          } else {
            this.exprAllowed = false;
          }
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
        if (refDestructuringErrors) {
          oldParenAssign = refDestructuringErrors.parenthesizedAssign;
          oldTrailingComma = refDestructuringErrors.trailingComma;
          oldDoubleProto = refDestructuringErrors.doubleProto;
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
        } else {
          refDestructuringErrors = new DestructuringErrors3();
          ownDestructuringErrors = true;
        }
        var startPos = this.start, startLoc = this.startLoc;
        if (this.type === types$12.parenL || this.type === types$12.name) {
          this.potentialArrowAt = this.start;
          this.potentialArrowInForAwait = forInit === "await";
        }
        var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (this.type.isAssign) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.operator = this.value;
          if (this.type === types$12.eq) {
            left = this.toAssignable(left, false, refDestructuringErrors);
          }
          if (!ownDestructuringErrors) {
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
          }
          if (refDestructuringErrors.shorthandAssign >= left.start) {
            refDestructuringErrors.shorthandAssign = -1;
          }
          if (this.type === types$12.eq) {
            this.checkLValPattern(left);
          } else {
            this.checkLValSimple(left);
          }
          node2.left = left;
          this.next();
          node2.right = this.parseMaybeAssign(forInit);
          if (oldDoubleProto > -1) {
            refDestructuringErrors.doubleProto = oldDoubleProto;
          }
          return this.finishNode(node2, "AssignmentExpression");
        } else {
          if (ownDestructuringErrors) {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
        }
        if (oldParenAssign > -1) {
          refDestructuringErrors.parenthesizedAssign = oldParenAssign;
        }
        if (oldTrailingComma > -1) {
          refDestructuringErrors.trailingComma = oldTrailingComma;
        }
        return left;
      };
      pp$52.parseMaybeConditional = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprOps(forInit, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        if (this.eat(types$12.question)) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.test = expr;
          node2.consequent = this.parseMaybeAssign();
          this.expect(types$12.colon);
          node2.alternate = this.parseMaybeAssign(forInit);
          return this.finishNode(node2, "ConditionalExpression");
        }
        return expr;
      };
      pp$52.parseExprOps = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
      };
      pp$52.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
        var prec = this.type.binop;
        if (prec != null && (!forInit || this.type !== types$12._in)) {
          if (prec > minPrec) {
            var logical = this.type === types$12.logicalOR || this.type === types$12.logicalAND;
            var coalesce = this.type === types$12.coalesce;
            if (coalesce) {
              prec = types$12.logicalAND.binop;
            }
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc;
            var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
            var node2 = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            if (logical && this.type === types$12.coalesce || coalesce && (this.type === types$12.logicalOR || this.type === types$12.logicalAND)) {
              this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
            }
            return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec, forInit);
          }
        }
        return left;
      };
      pp$52.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        if (right.type === "PrivateIdentifier") {
          this.raise(right.start, "Private identifier can only be left side of binary expression");
        }
        var node2 = this.startNodeAt(startPos, startLoc);
        node2.left = left;
        node2.operator = op;
        node2.right = right;
        return this.finishNode(node2, logical ? "LogicalExpression" : "BinaryExpression");
      };
      pp$52.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
        var startPos = this.start, startLoc = this.startLoc, expr;
        if (this.isContextual("await") && this.canAwait) {
          expr = this.parseAwait(forInit);
          sawUnary = true;
        } else if (this.type.prefix) {
          var node2 = this.startNode(), update = this.type === types$12.incDec;
          node2.operator = this.value;
          node2.prefix = true;
          this.next();
          node2.argument = this.parseMaybeUnary(null, true, update, forInit);
          this.checkExpressionErrors(refDestructuringErrors, true);
          if (update) {
            this.checkLValSimple(node2.argument);
          } else if (this.strict && node2.operator === "delete" && isLocalVariableAccess2(node2.argument)) {
            this.raiseRecoverable(node2.start, "Deleting local variable in strict mode");
          } else if (node2.operator === "delete" && isPrivateFieldAccess2(node2.argument)) {
            this.raiseRecoverable(node2.start, "Private fields can not be deleted");
          } else {
            sawUnary = true;
          }
          expr = this.finishNode(node2, update ? "UpdateExpression" : "UnaryExpression");
        } else if (!sawUnary && this.type === types$12.privateId) {
          if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) {
            this.unexpected();
          }
          expr = this.parsePrivateIdent();
          if (this.type !== types$12._in) {
            this.unexpected();
          }
        } else {
          expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          while (this.type.postfix && !this.canInsertSemicolon()) {
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value;
            node$1.prefix = false;
            node$1.argument = expr;
            this.checkLValSimple(expr);
            this.next();
            expr = this.finishNode(node$1, "UpdateExpression");
          }
        }
        if (!incDec && this.eat(types$12.starstar)) {
          if (sawUnary) {
            this.unexpected(this.lastTokStart);
          } else {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
          }
        } else {
          return expr;
        }
      };
      function isLocalVariableAccess2(node2) {
        return node2.type === "Identifier" || node2.type === "ParenthesizedExpression" && isLocalVariableAccess2(node2.expression);
      }
      function isPrivateFieldAccess2(node2) {
        return node2.type === "MemberExpression" && node2.property.type === "PrivateIdentifier" || node2.type === "ChainExpression" && isPrivateFieldAccess2(node2.expression) || node2.type === "ParenthesizedExpression" && isPrivateFieldAccess2(node2.expression);
      }
      pp$52.parseExprSubscripts = function(refDestructuringErrors, forInit) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprAtom(refDestructuringErrors, forInit);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
          return expr;
        }
        var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
        if (refDestructuringErrors && result.type === "MemberExpression") {
          if (refDestructuringErrors.parenthesizedAssign >= result.start) {
            refDestructuringErrors.parenthesizedAssign = -1;
          }
          if (refDestructuringErrors.parenthesizedBind >= result.start) {
            refDestructuringErrors.parenthesizedBind = -1;
          }
          if (refDestructuringErrors.trailingComma >= result.start) {
            refDestructuringErrors.trailingComma = -1;
          }
        }
        return result;
      };
      pp$52.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
        var optionalChained = false;
        while (true) {
          var element3 = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
          if (element3.optional) {
            optionalChained = true;
          }
          if (element3 === base || element3.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element3;
              element3 = this.finishNode(chainNode, "ChainExpression");
            }
            return element3;
          }
          base = element3;
        }
      };
      pp$52.shouldParseAsyncArrow = function() {
        return !this.canInsertSemicolon() && this.eat(types$12.arrow);
      };
      pp$52.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
      };
      pp$52.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
        var optionalSupported = this.options.ecmaVersion >= 11;
        var optional = optionalSupported && this.eat(types$12.questionDot);
        if (noCalls && optional) {
          this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        }
        var computed = this.eat(types$12.bracketL);
        if (computed || optional && this.type !== types$12.parenL && this.type !== types$12.backQuote || this.eat(types$12.dot)) {
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.object = base;
          if (computed) {
            node2.property = this.parseExpression();
            this.expect(types$12.bracketR);
          } else if (this.type === types$12.privateId && base.type !== "Super") {
            node2.property = this.parsePrivateIdent();
          } else {
            node2.property = this.parseIdent(this.options.allowReserved !== "never");
          }
          node2.computed = !!computed;
          if (optionalSupported) {
            node2.optional = optional;
          }
          base = this.finishNode(node2, "MemberExpression");
        } else if (!noCalls && this.eat(types$12.parenL)) {
          var refDestructuringErrors = new DestructuringErrors3(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types$12.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            if (this.awaitIdentPos > 0) {
              this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
            }
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            this.awaitIdentPos = oldAwaitIdentPos;
            return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.callee = base;
          node$1.arguments = exprList;
          if (optionalSupported) {
            node$1.optional = optional;
          }
          base = this.finishNode(node$1, "CallExpression");
        } else if (this.type === types$12.backQuote) {
          if (optional || optionalChained) {
            this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          }
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base;
          node$2.quasi = this.parseTemplate({ isTagged: true });
          base = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base;
      };
      pp$52.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
        if (this.type === types$12.slash) {
          this.readRegexp();
        }
        var node2, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types$12._super:
            if (!this.allowSuper) {
              this.raise(this.start, "'super' keyword outside a method");
            }
            node2 = this.startNode();
            this.next();
            if (this.type === types$12.parenL && !this.allowDirectSuper) {
              this.raise(node2.start, "super() call outside constructor of a subclass");
            }
            if (this.type !== types$12.dot && this.type !== types$12.bracketL && this.type !== types$12.parenL) {
              this.unexpected();
            }
            return this.finishNode(node2, "Super");
          case types$12._this:
            node2 = this.startNode();
            this.next();
            return this.finishNode(node2, "ThisExpression");
          case types$12.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
            var id = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$12._function)) {
              this.overrideContext(types2.f_expr);
              return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types$12.arrow)) {
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
              }
              if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$12.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
                id = this.parseIdent(false);
                if (this.canInsertSemicolon() || !this.eat(types$12.arrow)) {
                  this.unexpected();
                }
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
            }
            return id;
          case types$12.regexp:
            var value = this.value;
            node2 = this.parseLiteral(value.value);
            node2.regex = { pattern: value.pattern, flags: value.flags };
            return node2;
          case types$12.num:
          case types$12.string:
            return this.parseLiteral(this.value);
          case types$12._null:
          case types$12._true:
          case types$12._false:
            node2 = this.startNode();
            node2.value = this.type === types$12._null ? null : this.type === types$12._true;
            node2.raw = this.type.keyword;
            this.next();
            return this.finishNode(node2, "Literal");
          case types$12.parenL:
            var start2 = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
            if (refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                refDestructuringErrors.parenthesizedAssign = start2;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = start2;
              }
            }
            return expr;
          case types$12.bracketL:
            node2 = this.startNode();
            this.next();
            node2.elements = this.parseExprList(types$12.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node2, "ArrayExpression");
          case types$12.braceL:
            this.overrideContext(types2.b_expr);
            return this.parseObj(false, refDestructuringErrors);
          case types$12._function:
            node2 = this.startNode();
            this.next();
            return this.parseFunction(node2, 0);
          case types$12._class:
            return this.parseClass(this.startNode(), false);
          case types$12._new:
            return this.parseNew();
          case types$12.backQuote:
            return this.parseTemplate();
          case types$12._import:
            if (this.options.ecmaVersion >= 11) {
              return this.parseExprImport(forNew);
            } else {
              return this.unexpected();
            }
          default:
            return this.parseExprAtomDefault();
        }
      };
      pp$52.parseExprAtomDefault = function() {
        this.unexpected();
      };
      pp$52.parseExprImport = function(forNew) {
        var node2 = this.startNode();
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword import");
        }
        this.next();
        if (this.type === types$12.parenL && !forNew) {
          return this.parseDynamicImport(node2);
        } else if (this.type === types$12.dot) {
          var meta = this.startNodeAt(node2.start, node2.loc && node2.loc.start);
          meta.name = "import";
          node2.meta = this.finishNode(meta, "Identifier");
          return this.parseImportMeta(node2);
        } else {
          this.unexpected();
        }
      };
      pp$52.parseDynamicImport = function(node2) {
        this.next();
        node2.source = this.parseMaybeAssign();
        if (!this.eat(types$12.parenR)) {
          var errorPos = this.start;
          if (this.eat(types$12.comma) && this.eat(types$12.parenR)) {
            this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
          } else {
            this.unexpected(errorPos);
          }
        }
        return this.finishNode(node2, "ImportExpression");
      };
      pp$52.parseImportMeta = function(node2) {
        this.next();
        var containsEsc = this.containsEsc;
        node2.property = this.parseIdent(true);
        if (node2.property.name !== "meta") {
          this.raiseRecoverable(node2.property.start, "The only valid meta property for import is 'import.meta'");
        }
        if (containsEsc) {
          this.raiseRecoverable(node2.start, "'import.meta' must not contain escaped characters");
        }
        if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
          this.raiseRecoverable(node2.start, "Cannot use 'import.meta' outside a module");
        }
        return this.finishNode(node2, "MetaProperty");
      };
      pp$52.parseLiteral = function(value) {
        var node2 = this.startNode();
        node2.value = value;
        node2.raw = this.input.slice(this.start, this.end);
        if (node2.raw.charCodeAt(node2.raw.length - 1) === 110) {
          node2.bigint = node2.raw.slice(0, -1).replace(/_/g, "");
        }
        this.next();
        return this.finishNode(node2, "Literal");
      };
      pp$52.parseParenExpression = function() {
        this.expect(types$12.parenL);
        var val = this.parseExpression();
        this.expect(types$12.parenR);
        return val;
      };
      pp$52.shouldParseArrow = function(exprList) {
        return !this.canInsertSemicolon();
      };
      pp$52.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var innerStartPos = this.start, innerStartLoc = this.startLoc;
          var exprList = [], first = true, lastIsComma = false;
          var refDestructuringErrors = new DestructuringErrors3(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
          this.yieldPos = 0;
          this.awaitPos = 0;
          while (this.type !== types$12.parenR) {
            first ? first = false : this.expect(types$12.comma);
            if (allowTrailingComma && this.afterTrailingComma(types$12.parenR, true)) {
              lastIsComma = true;
              break;
            } else if (this.type === types$12.ellipsis) {
              spreadStart = this.start;
              exprList.push(this.parseParenItem(this.parseRestBinding()));
              if (this.type === types$12.comma) {
                this.raiseRecoverable(
                  this.start,
                  "Comma is not permitted after the rest element"
                );
              }
              break;
            } else {
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
          }
          var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
          this.expect(types$12.parenR);
          if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$12.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
          }
          if (!exprList.length || lastIsComma) {
            this.unexpected(this.lastTokStart);
          }
          if (spreadStart) {
            this.unexpected(spreadStart);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
          } else {
            val = exprList[0];
          }
        } else {
          val = this.parseParenExpression();
        }
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          par.expression = val;
          return this.finishNode(par, "ParenthesizedExpression");
        } else {
          return val;
        }
      };
      pp$52.parseParenItem = function(item) {
        return item;
      };
      pp$52.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
      };
      var empty5 = [];
      pp$52.parseNew = function() {
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        }
        var node2 = this.startNode();
        this.next();
        if (this.options.ecmaVersion >= 6 && this.type === types$12.dot) {
          var meta = this.startNodeAt(node2.start, node2.loc && node2.loc.start);
          meta.name = "new";
          node2.meta = this.finishNode(meta, "Identifier");
          this.next();
          var containsEsc = this.containsEsc;
          node2.property = this.parseIdent(true);
          if (node2.property.name !== "target") {
            this.raiseRecoverable(node2.property.start, "The only valid meta property for new is 'new.target'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node2.start, "'new.target' must not contain escaped characters");
          }
          if (!this.allowNewDotTarget) {
            this.raiseRecoverable(node2.start, "'new.target' can only be used in functions and class static block");
          }
          return this.finishNode(node2, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc;
        node2.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);
        if (this.eat(types$12.parenL)) {
          node2.arguments = this.parseExprList(types$12.parenR, this.options.ecmaVersion >= 8, false);
        } else {
          node2.arguments = empty5;
        }
        return this.finishNode(node2, "NewExpression");
      };
      pp$52.parseTemplateElement = function(ref3) {
        var isTagged = ref3.isTagged;
        var elem = this.startNode();
        if (this.type === types$12.invalidTemplate) {
          if (!isTagged) {
            this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
          }
          elem.value = {
            raw: this.value.replace(/\r\n?/g, "\n"),
            cooked: null
          };
        } else {
          elem.value = {
            raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
            cooked: this.value
          };
        }
        this.next();
        elem.tail = this.type === types$12.backQuote;
        return this.finishNode(elem, "TemplateElement");
      };
      pp$52.parseTemplate = function(ref3) {
        if (ref3 === void 0) ref3 = {};
        var isTagged = ref3.isTagged;
        if (isTagged === void 0) isTagged = false;
        var node2 = this.startNode();
        this.next();
        node2.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        node2.quasis = [curElt];
        while (!curElt.tail) {
          if (this.type === types$12.eof) {
            this.raise(this.pos, "Unterminated template literal");
          }
          this.expect(types$12.dollarBraceL);
          node2.expressions.push(this.parseExpression());
          this.expect(types$12.braceR);
          node2.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        }
        this.next();
        return this.finishNode(node2, "TemplateLiteral");
      };
      pp$52.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$12.name || this.type === types$12.num || this.type === types$12.string || this.type === types$12.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$12.star) && !lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$52.parseObj = function(isPattern, refDestructuringErrors) {
        var node2 = this.startNode(), first = true, propHash = {};
        node2.properties = [];
        this.next();
        while (!this.eat(types$12.braceR)) {
          if (!first) {
            this.expect(types$12.comma);
            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$12.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          if (!isPattern) {
            this.checkPropClash(prop, propHash, refDestructuringErrors);
          }
          node2.properties.push(prop);
        }
        return this.finishNode(node2, isPattern ? "ObjectPattern" : "ObjectExpression");
      };
      pp$52.parseProperty = function(isPattern, refDestructuringErrors) {
        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
        if (this.options.ecmaVersion >= 9 && this.eat(types$12.ellipsis)) {
          if (isPattern) {
            prop.argument = this.parseIdent(false);
            if (this.type === types$12.comma) {
              this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            }
            return this.finishNode(prop, "RestElement");
          }
          prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          if (this.type === types$12.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
            refDestructuringErrors.trailingComma = this.start;
          }
          return this.finishNode(prop, "SpreadElement");
        }
        if (this.options.ecmaVersion >= 6) {
          prop.method = false;
          prop.shorthand = false;
          if (isPattern || refDestructuringErrors) {
            startPos = this.start;
            startLoc = this.startLoc;
          }
          if (!isPattern) {
            isGenerator = this.eat(types$12.star);
          }
        }
        var containsEsc = this.containsEsc;
        this.parsePropertyName(prop);
        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
          isAsync = true;
          isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$12.star);
          this.parsePropertyName(prop);
        } else {
          isAsync = false;
        }
        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
        return this.finishNode(prop, "Property");
      };
      pp$52.parseGetterSetter = function(prop) {
        prop.kind = prop.key.name;
        this.parsePropertyName(prop);
        prop.value = this.parseMethod(false);
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start2 = prop.value.start;
          if (prop.kind === "get") {
            this.raiseRecoverable(start2, "getter should have no params");
          } else {
            this.raiseRecoverable(start2, "setter should have exactly one param");
          }
        } else {
          if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
            this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
          }
        }
      };
      pp$52.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        if ((isGenerator || isAsync) && this.type === types$12.colon) {
          this.unexpected();
        }
        if (this.eat(types$12.colon)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
          prop.kind = "init";
        } else if (this.options.ecmaVersion >= 6 && this.type === types$12.parenL) {
          if (isPattern) {
            this.unexpected();
          }
          prop.kind = "init";
          prop.method = true;
          prop.value = this.parseMethod(isGenerator, isAsync);
        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types$12.comma && this.type !== types$12.braceR && this.type !== types$12.eq)) {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.parseGetterSetter(prop);
        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.checkUnreserved(prop.key);
          if (prop.key.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = startPos;
          }
          prop.kind = "init";
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
          } else if (this.type === types$12.eq && refDestructuringErrors) {
            if (refDestructuringErrors.shorthandAssign < 0) {
              refDestructuringErrors.shorthandAssign = this.start;
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
          } else {
            prop.value = this.copyNode(prop.key);
          }
          prop.shorthand = true;
        } else {
          this.unexpected();
        }
      };
      pp$52.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types$12.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssign();
            this.expect(types$12.bracketR);
            return prop.key;
          } else {
            prop.computed = false;
          }
        }
        return prop.key = this.type === types$12.num || this.type === types$12.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      };
      pp$52.initFunction = function(node2) {
        node2.id = null;
        if (this.options.ecmaVersion >= 6) {
          node2.generator = node2.expression = false;
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = false;
        }
      };
      pp$52.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node2 = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 6) {
          node2.generator = isGenerator;
        }
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags2(isAsync, node2.generator) | SCOPE_SUPER2 | (allowDirectSuper ? SCOPE_DIRECT_SUPER2 : 0));
        this.expect(types$12.parenL);
        node2.params = this.parseBindingList(types$12.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
        this.parseFunctionBody(node2, false, true, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, "FunctionExpression");
      };
      pp$52.parseArrowExpression = function(node2, params, isAsync, forInit) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.enterScope(functionFlags2(isAsync, false) | SCOPE_ARROW2);
        this.initFunction(node2);
        if (this.options.ecmaVersion >= 8) {
          node2.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        node2.params = this.toAssignableList(params, true);
        this.parseFunctionBody(node2, true, false, forInit);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node2, "ArrowFunctionExpression");
      };
      pp$52.parseFunctionBody = function(node2, isArrowFunction, isMethod, forInit) {
        var isExpression = isArrowFunction && this.type !== types$12.braceL;
        var oldStrict = this.strict, useStrict = false;
        if (isExpression) {
          node2.body = this.parseMaybeAssign(forInit);
          node2.expression = true;
          this.checkParams(node2, false);
        } else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node2.params);
          if (!oldStrict || nonSimple) {
            useStrict = this.strictDirective(this.end);
            if (useStrict && nonSimple) {
              this.raiseRecoverable(node2.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            }
          }
          var oldLabels = this.labels;
          this.labels = [];
          if (useStrict) {
            this.strict = true;
          }
          this.checkParams(node2, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node2.params));
          if (this.strict && node2.id) {
            this.checkLValSimple(node2.id, BIND_OUTSIDE2);
          }
          node2.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
          node2.expression = false;
          this.adaptDirectivePrologue(node2.body.body);
          this.labels = oldLabels;
        }
        this.exitScope();
      };
      pp$52.isSimpleParamList = function(params) {
        for (var i2 = 0, list5 = params; i2 < list5.length; i2 += 1) {
          var param = list5[i2];
          if (param.type !== "Identifier") {
            return false;
          }
        }
        return true;
      };
      pp$52.checkParams = function(node2, allowDuplicates) {
        var nameHash = /* @__PURE__ */ Object.create(null);
        for (var i2 = 0, list5 = node2.params; i2 < list5.length; i2 += 1) {
          var param = list5[i2];
          this.checkLValInnerPattern(param, BIND_VAR2, allowDuplicates ? null : nameHash);
        }
      };
      pp$52.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (!first) {
            this.expect(types$12.comma);
            if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            }
          } else {
            first = false;
          }
          var elt = void 0;
          if (allowEmpty && this.type === types$12.comma) {
            elt = null;
          } else if (this.type === types$12.ellipsis) {
            elt = this.parseSpread(refDestructuringErrors);
            if (refDestructuringErrors && this.type === types$12.comma && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }
          } else {
            elt = this.parseMaybeAssign(false, refDestructuringErrors);
          }
          elts.push(elt);
        }
        return elts;
      };
      pp$52.checkUnreserved = function(ref3) {
        var start2 = ref3.start;
        var end = ref3.end;
        var name2 = ref3.name;
        if (this.inGenerator && name2 === "yield") {
          this.raiseRecoverable(start2, "Cannot use 'yield' as identifier inside a generator");
        }
        if (this.inAsync && name2 === "await") {
          this.raiseRecoverable(start2, "Cannot use 'await' as identifier inside an async function");
        }
        if (this.currentThisScope().inClassFieldInit && name2 === "arguments") {
          this.raiseRecoverable(start2, "Cannot use 'arguments' in class field initializer");
        }
        if (this.inClassStaticBlock && (name2 === "arguments" || name2 === "await")) {
          this.raise(start2, "Cannot use " + name2 + " in class static initialization block");
        }
        if (this.keywords.test(name2)) {
          this.raise(start2, "Unexpected keyword '" + name2 + "'");
        }
        if (this.options.ecmaVersion < 6 && this.input.slice(start2, end).indexOf("\\") !== -1) {
          return;
        }
        var re2 = this.strict ? this.reservedWordsStrict : this.reservedWords;
        if (re2.test(name2)) {
          if (!this.inAsync && name2 === "await") {
            this.raiseRecoverable(start2, "Cannot use keyword 'await' outside an async function");
          }
          this.raiseRecoverable(start2, "The keyword '" + name2 + "' is reserved");
        }
      };
      pp$52.parseIdent = function(liberal) {
        var node2 = this.parseIdentNode();
        this.next(!!liberal);
        this.finishNode(node2, "Identifier");
        if (!liberal) {
          this.checkUnreserved(node2);
          if (node2.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = node2.start;
          }
        }
        return node2;
      };
      pp$52.parseIdentNode = function() {
        var node2 = this.startNode();
        if (this.type === types$12.name) {
          node2.name = this.value;
        } else if (this.type.keyword) {
          node2.name = this.type.keyword;
          if ((node2.name === "class" || node2.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
            this.context.pop();
          }
          this.type = types$12.name;
        } else {
          this.unexpected();
        }
        return node2;
      };
      pp$52.parsePrivateIdent = function() {
        var node2 = this.startNode();
        if (this.type === types$12.privateId) {
          node2.name = this.value;
        } else {
          this.unexpected();
        }
        this.next();
        this.finishNode(node2, "PrivateIdentifier");
        if (this.options.checkPrivateFields) {
          if (this.privateNameStack.length === 0) {
            this.raise(node2.start, "Private field '#" + node2.name + "' must be declared in an enclosing class");
          } else {
            this.privateNameStack[this.privateNameStack.length - 1].used.push(node2);
          }
        }
        return node2;
      };
      pp$52.parseYield = function(forInit) {
        if (!this.yieldPos) {
          this.yieldPos = this.start;
        }
        var node2 = this.startNode();
        this.next();
        if (this.type === types$12.semi || this.canInsertSemicolon() || this.type !== types$12.star && !this.type.startsExpr) {
          node2.delegate = false;
          node2.argument = null;
        } else {
          node2.delegate = this.eat(types$12.star);
          node2.argument = this.parseMaybeAssign(forInit);
        }
        return this.finishNode(node2, "YieldExpression");
      };
      pp$52.parseAwait = function(forInit) {
        if (!this.awaitPos) {
          this.awaitPos = this.start;
        }
        var node2 = this.startNode();
        this.next();
        node2.argument = this.parseMaybeUnary(null, true, false, forInit);
        return this.finishNode(node2, "AwaitExpression");
      };
      var pp$42 = Parser3.prototype;
      pp$42.raise = function(pos, message) {
        var loc = getLineInfo2(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        var err = new SyntaxError(message);
        err.pos = pos;
        err.loc = loc;
        err.raisedAt = this.pos;
        throw err;
      };
      pp$42.raiseRecoverable = pp$42.raise;
      pp$42.curPosition = function() {
        if (this.options.locations) {
          return new Position3(this.curLine, this.pos - this.lineStart);
        }
      };
      var pp$32 = Parser3.prototype;
      var Scope4 = function Scope5(flags) {
        this.flags = flags;
        this.var = [];
        this.lexical = [];
        this.functions = [];
        this.inClassFieldInit = false;
      };
      pp$32.enterScope = function(flags) {
        this.scopeStack.push(new Scope4(flags));
      };
      pp$32.exitScope = function() {
        this.scopeStack.pop();
      };
      pp$32.treatFunctionsAsVarInScope = function(scope) {
        return scope.flags & SCOPE_FUNCTION2 || !this.inModule && scope.flags & SCOPE_TOP2;
      };
      pp$32.declareName = function(name2, bindingType, pos) {
        var redeclared = false;
        if (bindingType === BIND_LEXICAL2) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name2) > -1 || scope.functions.indexOf(name2) > -1 || scope.var.indexOf(name2) > -1;
          scope.lexical.push(name2);
          if (this.inModule && scope.flags & SCOPE_TOP2) {
            delete this.undefinedExports[name2];
          }
        } else if (bindingType === BIND_SIMPLE_CATCH2) {
          var scope$1 = this.currentScope();
          scope$1.lexical.push(name2);
        } else if (bindingType === BIND_FUNCTION2) {
          var scope$2 = this.currentScope();
          if (this.treatFunctionsAsVar) {
            redeclared = scope$2.lexical.indexOf(name2) > -1;
          } else {
            redeclared = scope$2.lexical.indexOf(name2) > -1 || scope$2.var.indexOf(name2) > -1;
          }
          scope$2.functions.push(name2);
        } else {
          for (var i2 = this.scopeStack.length - 1; i2 >= 0; --i2) {
            var scope$3 = this.scopeStack[i2];
            if (scope$3.lexical.indexOf(name2) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH2 && scope$3.lexical[0] === name2) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name2) > -1) {
              redeclared = true;
              break;
            }
            scope$3.var.push(name2);
            if (this.inModule && scope$3.flags & SCOPE_TOP2) {
              delete this.undefinedExports[name2];
            }
            if (scope$3.flags & SCOPE_VAR2) {
              break;
            }
          }
        }
        if (redeclared) {
          this.raiseRecoverable(pos, "Identifier '" + name2 + "' has already been declared");
        }
      };
      pp$32.checkLocalExport = function(id) {
        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
          this.undefinedExports[id.name] = id;
        }
      };
      pp$32.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      };
      pp$32.currentVarScope = function() {
        for (var i2 = this.scopeStack.length - 1; ; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.flags & SCOPE_VAR2) {
            return scope;
          }
        }
      };
      pp$32.currentThisScope = function() {
        for (var i2 = this.scopeStack.length - 1; ; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.flags & SCOPE_VAR2 && !(scope.flags & SCOPE_ARROW2)) {
            return scope;
          }
        }
      };
      var Node3 = function Node4(parser, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        if (parser.options.locations) {
          this.loc = new SourceLocation3(parser, loc);
        }
        if (parser.options.directSourceFile) {
          this.sourceFile = parser.options.directSourceFile;
        }
        if (parser.options.ranges) {
          this.range = [pos, 0];
        }
      };
      var pp$22 = Parser3.prototype;
      pp$22.startNode = function() {
        return new Node3(this, this.start, this.startLoc);
      };
      pp$22.startNodeAt = function(pos, loc) {
        return new Node3(this, pos, loc);
      };
      function finishNodeAt2(node2, type, pos, loc) {
        node2.type = type;
        node2.end = pos;
        if (this.options.locations) {
          node2.loc.end = loc;
        }
        if (this.options.ranges) {
          node2.range[1] = pos;
        }
        return node2;
      }
      pp$22.finishNode = function(node2, type) {
        return finishNodeAt2.call(this, node2, type, this.lastTokEnd, this.lastTokEndLoc);
      };
      pp$22.finishNodeAt = function(node2, type, pos, loc) {
        return finishNodeAt2.call(this, node2, type, pos, loc);
      };
      pp$22.copyNode = function(node2) {
        var newNode = new Node3(this, node2.start, this.startLoc);
        for (var prop in node2) {
          newNode[prop] = node2[prop];
        }
        return newNode;
      };
      var ecma9BinaryProperties2 = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
      var ecma10BinaryProperties2 = ecma9BinaryProperties2 + " Extended_Pictographic";
      var ecma11BinaryProperties2 = ecma10BinaryProperties2;
      var ecma12BinaryProperties2 = ecma11BinaryProperties2 + " EBase EComp EMod EPres ExtPict";
      var ecma13BinaryProperties2 = ecma12BinaryProperties2;
      var ecma14BinaryProperties2 = ecma13BinaryProperties2;
      var unicodeBinaryProperties2 = {
        9: ecma9BinaryProperties2,
        10: ecma10BinaryProperties2,
        11: ecma11BinaryProperties2,
        12: ecma12BinaryProperties2,
        13: ecma13BinaryProperties2,
        14: ecma14BinaryProperties2
      };
      var ecma14BinaryPropertiesOfStrings2 = "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji";
      var unicodeBinaryPropertiesOfStrings2 = {
        9: "",
        10: "",
        11: "",
        12: "",
        13: "",
        14: ecma14BinaryPropertiesOfStrings2
      };
      var unicodeGeneralCategoryValues2 = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
      var ecma9ScriptValues2 = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
      var ecma10ScriptValues2 = ecma9ScriptValues2 + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
      var ecma11ScriptValues2 = ecma10ScriptValues2 + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
      var ecma12ScriptValues2 = ecma11ScriptValues2 + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
      var ecma13ScriptValues2 = ecma12ScriptValues2 + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
      var ecma14ScriptValues2 = ecma13ScriptValues2 + " Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz";
      var unicodeScriptValues2 = {
        9: ecma9ScriptValues2,
        10: ecma10ScriptValues2,
        11: ecma11ScriptValues2,
        12: ecma12ScriptValues2,
        13: ecma13ScriptValues2,
        14: ecma14ScriptValues2
      };
      var data2 = {};
      function buildUnicodeData2(ecmaVersion2) {
        var d = data2[ecmaVersion2] = {
          binary: wordsRegexp2(unicodeBinaryProperties2[ecmaVersion2] + " " + unicodeGeneralCategoryValues2),
          binaryOfStrings: wordsRegexp2(unicodeBinaryPropertiesOfStrings2[ecmaVersion2]),
          nonBinary: {
            General_Category: wordsRegexp2(unicodeGeneralCategoryValues2),
            Script: wordsRegexp2(unicodeScriptValues2[ecmaVersion2])
          }
        };
        d.nonBinary.Script_Extensions = d.nonBinary.Script;
        d.nonBinary.gc = d.nonBinary.General_Category;
        d.nonBinary.sc = d.nonBinary.Script;
        d.nonBinary.scx = d.nonBinary.Script_Extensions;
      }
      for (var i = 0, list4 = [9, 10, 11, 12, 13, 14]; i < list4.length; i += 1) {
        var ecmaVersion = list4[i];
        buildUnicodeData2(ecmaVersion);
      }
      var pp$12 = Parser3.prototype;
      var BranchID3 = function BranchID4(parent, base) {
        this.parent = parent;
        this.base = base || this;
      };
      BranchID3.prototype.separatedFrom = function separatedFrom2(alt) {
        for (var self2 = this; self2; self2 = self2.parent) {
          for (var other = alt; other; other = other.parent) {
            if (self2.base === other.base && self2 !== other) {
              return true;
            }
          }
        }
        return false;
      };
      BranchID3.prototype.sibling = function sibling2() {
        return new BranchID3(this.parent, this.base);
      };
      var RegExpValidationState3 = function RegExpValidationState4(parser) {
        this.parser = parser;
        this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : "");
        this.unicodeProperties = data2[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
        this.source = "";
        this.flags = "";
        this.start = 0;
        this.switchU = false;
        this.switchV = false;
        this.switchN = false;
        this.pos = 0;
        this.lastIntValue = 0;
        this.lastStringValue = "";
        this.lastAssertionIsQuantifiable = false;
        this.numCapturingParens = 0;
        this.maxBackReference = 0;
        this.groupNames = /* @__PURE__ */ Object.create(null);
        this.backReferenceNames = [];
        this.branchID = null;
      };
      RegExpValidationState3.prototype.reset = function reset2(start2, pattern, flags) {
        var unicodeSets = flags.indexOf("v") !== -1;
        var unicode = flags.indexOf("u") !== -1;
        this.start = start2 | 0;
        this.source = pattern + "";
        this.flags = flags;
        if (unicodeSets && this.parser.options.ecmaVersion >= 15) {
          this.switchU = true;
          this.switchV = true;
          this.switchN = true;
        } else {
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
          this.switchV = false;
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        }
      };
      RegExpValidationState3.prototype.raise = function raise2(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      };
      RegExpValidationState3.prototype.at = function at2(i2, forceU) {
        if (forceU === void 0) forceU = false;
        var s = this.source;
        var l = s.length;
        if (i2 >= l) {
          return -1;
        }
        var c = s.charCodeAt(i2);
        if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i2 + 1 >= l) {
          return c;
        }
        var next = s.charCodeAt(i2 + 1);
        return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
      };
      RegExpValidationState3.prototype.nextIndex = function nextIndex2(i2, forceU) {
        if (forceU === void 0) forceU = false;
        var s = this.source;
        var l = s.length;
        if (i2 >= l) {
          return l;
        }
        var c = s.charCodeAt(i2), next;
        if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i2 + 1 >= l || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343) {
          return i2 + 1;
        }
        return i2 + 2;
      };
      RegExpValidationState3.prototype.current = function current2(forceU) {
        if (forceU === void 0) forceU = false;
        return this.at(this.pos, forceU);
      };
      RegExpValidationState3.prototype.lookahead = function lookahead2(forceU) {
        if (forceU === void 0) forceU = false;
        return this.at(this.nextIndex(this.pos, forceU), forceU);
      };
      RegExpValidationState3.prototype.advance = function advance2(forceU) {
        if (forceU === void 0) forceU = false;
        this.pos = this.nextIndex(this.pos, forceU);
      };
      RegExpValidationState3.prototype.eat = function eat2(ch, forceU) {
        if (forceU === void 0) forceU = false;
        if (this.current(forceU) === ch) {
          this.advance(forceU);
          return true;
        }
        return false;
      };
      RegExpValidationState3.prototype.eatChars = function eatChars2(chs, forceU) {
        if (forceU === void 0) forceU = false;
        var pos = this.pos;
        for (var i2 = 0, list5 = chs; i2 < list5.length; i2 += 1) {
          var ch = list5[i2];
          var current2 = this.at(pos, forceU);
          if (current2 === -1 || current2 !== ch) {
            return false;
          }
          pos = this.nextIndex(pos, forceU);
        }
        this.pos = pos;
        return true;
      };
      pp$12.validateRegExpFlags = function(state) {
        var validFlags = state.validFlags;
        var flags = state.flags;
        var u = false;
        var v = false;
        for (var i2 = 0; i2 < flags.length; i2++) {
          var flag = flags.charAt(i2);
          if (validFlags.indexOf(flag) === -1) {
            this.raise(state.start, "Invalid regular expression flag");
          }
          if (flags.indexOf(flag, i2 + 1) > -1) {
            this.raise(state.start, "Duplicate regular expression flag");
          }
          if (flag === "u") {
            u = true;
          }
          if (flag === "v") {
            v = true;
          }
        }
        if (this.options.ecmaVersion >= 15 && u && v) {
          this.raise(state.start, "Invalid regular expression flag");
        }
      };
      function hasProp2(obj) {
        for (var _ in obj) {
          return true;
        }
        return false;
      }
      pp$12.validateRegExpPattern = function(state) {
        this.regexp_pattern(state);
        if (!state.switchN && this.options.ecmaVersion >= 9 && hasProp2(state.groupNames)) {
          state.switchN = true;
          this.regexp_pattern(state);
        }
      };
      pp$12.regexp_pattern = function(state) {
        state.pos = 0;
        state.lastIntValue = 0;
        state.lastStringValue = "";
        state.lastAssertionIsQuantifiable = false;
        state.numCapturingParens = 0;
        state.maxBackReference = 0;
        state.groupNames = /* @__PURE__ */ Object.create(null);
        state.backReferenceNames.length = 0;
        state.branchID = null;
        this.regexp_disjunction(state);
        if (state.pos !== state.source.length) {
          if (state.eat(
            41
            /* ) */
          )) {
            state.raise("Unmatched ')'");
          }
          if (state.eat(
            93
            /* ] */
          ) || state.eat(
            125
            /* } */
          )) {
            state.raise("Lone quantifier brackets");
          }
        }
        if (state.maxBackReference > state.numCapturingParens) {
          state.raise("Invalid escape");
        }
        for (var i2 = 0, list5 = state.backReferenceNames; i2 < list5.length; i2 += 1) {
          var name2 = list5[i2];
          if (!state.groupNames[name2]) {
            state.raise("Invalid named capture referenced");
          }
        }
      };
      pp$12.regexp_disjunction = function(state) {
        var trackDisjunction = this.options.ecmaVersion >= 16;
        if (trackDisjunction) {
          state.branchID = new BranchID3(state.branchID, null);
        }
        this.regexp_alternative(state);
        while (state.eat(
          124
          /* | */
        )) {
          if (trackDisjunction) {
            state.branchID = state.branchID.sibling();
          }
          this.regexp_alternative(state);
        }
        if (trackDisjunction) {
          state.branchID = state.branchID.parent;
        }
        if (this.regexp_eatQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        if (state.eat(
          123
          /* { */
        )) {
          state.raise("Lone quantifier brackets");
        }
      };
      pp$12.regexp_alternative = function(state) {
        while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
        }
      };
      pp$12.regexp_eatTerm = function(state) {
        if (this.regexp_eatAssertion(state)) {
          if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
            if (state.switchU) {
              state.raise("Invalid quantifier");
            }
          }
          return true;
        }
        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
          this.regexp_eatQuantifier(state);
          return true;
        }
        return false;
      };
      pp$12.regexp_eatAssertion = function(state) {
        var start2 = state.pos;
        state.lastAssertionIsQuantifiable = false;
        if (state.eat(
          94
          /* ^ */
        ) || state.eat(
          36
          /* $ */
        )) {
          return true;
        }
        if (state.eat(
          92
          /* \ */
        )) {
          if (state.eat(
            66
            /* B */
          ) || state.eat(
            98
            /* b */
          )) {
            return true;
          }
          state.pos = start2;
        }
        if (state.eat(
          40
          /* ( */
        ) && state.eat(
          63
          /* ? */
        )) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9) {
            lookbehind = state.eat(
              60
              /* < */
            );
          }
          if (state.eat(
            61
            /* = */
          ) || state.eat(
            33
            /* ! */
          )) {
            this.regexp_disjunction(state);
            if (!state.eat(
              41
              /* ) */
            )) {
              state.raise("Unterminated group");
            }
            state.lastAssertionIsQuantifiable = !lookbehind;
            return true;
          }
        }
        state.pos = start2;
        return false;
      };
      pp$12.regexp_eatQuantifier = function(state, noError) {
        if (noError === void 0) noError = false;
        if (this.regexp_eatQuantifierPrefix(state, noError)) {
          state.eat(
            63
            /* ? */
          );
          return true;
        }
        return false;
      };
      pp$12.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(
          42
          /* * */
        ) || state.eat(
          43
          /* + */
        ) || state.eat(
          63
          /* ? */
        ) || this.regexp_eatBracedQuantifier(state, noError);
      };
      pp$12.regexp_eatBracedQuantifier = function(state, noError) {
        var start2 = state.pos;
        if (state.eat(
          123
          /* { */
        )) {
          var min = 0, max2 = -1;
          if (this.regexp_eatDecimalDigits(state)) {
            min = state.lastIntValue;
            if (state.eat(
              44
              /* , */
            ) && this.regexp_eatDecimalDigits(state)) {
              max2 = state.lastIntValue;
            }
            if (state.eat(
              125
              /* } */
            )) {
              if (max2 !== -1 && max2 < min && !noError) {
                state.raise("numbers out of order in {} quantifier");
              }
              return true;
            }
          }
          if (state.switchU && !noError) {
            state.raise("Incomplete quantifier");
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(
          46
          /* . */
        ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      };
      pp$12.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start2 = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatAtomEscape(state)) {
            return true;
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatUncapturingGroup = function(state) {
        var start2 = state.pos;
        if (state.eat(
          40
          /* ( */
        )) {
          if (state.eat(
            63
            /* ? */
          ) && state.eat(
            58
            /* : */
          )) {
            this.regexp_disjunction(state);
            if (state.eat(
              41
              /* ) */
            )) {
              return true;
            }
            state.raise("Unterminated group");
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatCapturingGroup = function(state) {
        if (state.eat(
          40
          /* ( */
        )) {
          if (this.options.ecmaVersion >= 9) {
            this.regexp_groupSpecifier(state);
          } else if (state.current() === 63) {
            state.raise("Invalid group");
          }
          this.regexp_disjunction(state);
          if (state.eat(
            41
            /* ) */
          )) {
            state.numCapturingParens += 1;
            return true;
          }
          state.raise("Unterminated group");
        }
        return false;
      };
      pp$12.regexp_eatExtendedAtom = function(state) {
        return state.eat(
          46
          /* . */
        ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      };
      pp$12.regexp_eatInvalidBracedQuantifier = function(state) {
        if (this.regexp_eatBracedQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        return false;
      };
      pp$12.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        if (isSyntaxCharacter2(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isSyntaxCharacter2(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      pp$12.regexp_eatPatternCharacters = function(state) {
        var start2 = state.pos;
        var ch = 0;
        while ((ch = state.current()) !== -1 && !isSyntaxCharacter2(ch)) {
          state.advance();
        }
        return state.pos !== start2;
      };
      pp$12.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
          state.advance();
          return true;
        }
        return false;
      };
      pp$12.regexp_groupSpecifier = function(state) {
        if (state.eat(
          63
          /* ? */
        )) {
          if (!this.regexp_eatGroupName(state)) {
            state.raise("Invalid group");
          }
          var trackDisjunction = this.options.ecmaVersion >= 16;
          var known = state.groupNames[state.lastStringValue];
          if (known) {
            if (trackDisjunction) {
              for (var i2 = 0, list5 = known; i2 < list5.length; i2 += 1) {
                var altID = list5[i2];
                if (!altID.separatedFrom(state.branchID)) {
                  state.raise("Duplicate capture group name");
                }
              }
            } else {
              state.raise("Duplicate capture group name");
            }
          }
          if (trackDisjunction) {
            (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID);
          } else {
            state.groupNames[state.lastStringValue] = true;
          }
        }
      };
      pp$12.regexp_eatGroupName = function(state) {
        state.lastStringValue = "";
        if (state.eat(
          60
          /* < */
        )) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(
            62
            /* > */
          )) {
            return true;
          }
          state.raise("Invalid capture group name");
        }
        return false;
      };
      pp$12.regexp_eatRegExpIdentifierName = function(state) {
        state.lastStringValue = "";
        if (this.regexp_eatRegExpIdentifierStart(state)) {
          state.lastStringValue += codePointToString2(state.lastIntValue);
          while (this.regexp_eatRegExpIdentifierPart(state)) {
            state.lastStringValue += codePointToString2(state.lastIntValue);
          }
          return true;
        }
        return false;
      };
      pp$12.regexp_eatRegExpIdentifierStart = function(state) {
        var start2 = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierStart2(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start2;
        return false;
      };
      function isRegExpIdentifierStart2(ch) {
        return isIdentifierStart2(ch, true) || ch === 36 || ch === 95;
      }
      pp$12.regexp_eatRegExpIdentifierPart = function(state) {
        var start2 = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierPart2(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start2;
        return false;
      };
      function isRegExpIdentifierPart2(ch) {
        return isIdentifierChar2(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
      }
      pp$12.regexp_eatAtomEscape = function(state) {
        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
          return true;
        }
        if (state.switchU) {
          if (state.current() === 99) {
            state.raise("Invalid unicode escape");
          }
          state.raise("Invalid escape");
        }
        return false;
      };
      pp$12.regexp_eatBackReference = function(state) {
        var start2 = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n = state.lastIntValue;
          if (state.switchU) {
            if (n > state.maxBackReference) {
              state.maxBackReference = n;
            }
            return true;
          }
          if (n <= state.numCapturingParens) {
            return true;
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatKGroupName = function(state) {
        if (state.eat(
          107
          /* k */
        )) {
          if (this.regexp_eatGroupName(state)) {
            state.backReferenceNames.push(state.lastStringValue);
            return true;
          }
          state.raise("Invalid named reference");
        }
        return false;
      };
      pp$12.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      };
      pp$12.regexp_eatCControlLetter = function(state) {
        var start2 = state.pos;
        if (state.eat(
          99
          /* c */
        )) {
          if (this.regexp_eatControlLetter(state)) {
            return true;
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatZero = function(state) {
        if (state.current() === 48 && !isDecimalDigit2(state.lookahead())) {
          state.lastIntValue = 0;
          state.advance();
          return true;
        }
        return false;
      };
      pp$12.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        if (ch === 116) {
          state.lastIntValue = 9;
          state.advance();
          return true;
        }
        if (ch === 110) {
          state.lastIntValue = 10;
          state.advance();
          return true;
        }
        if (ch === 118) {
          state.lastIntValue = 11;
          state.advance();
          return true;
        }
        if (ch === 102) {
          state.lastIntValue = 12;
          state.advance();
          return true;
        }
        if (ch === 114) {
          state.lastIntValue = 13;
          state.advance();
          return true;
        }
        return false;
      };
      pp$12.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        if (isControlLetter2(ch)) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      function isControlLetter2(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      pp$12.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        if (forceU === void 0) forceU = false;
        var start2 = state.pos;
        var switchU = forceU || state.switchU;
        if (state.eat(
          117
          /* u */
        )) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(
                92
                /* \ */
              ) && state.eat(
                117
                /* u */
              ) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail2 = state.lastIntValue;
                if (trail2 >= 56320 && trail2 <= 57343) {
                  state.lastIntValue = (lead - 55296) * 1024 + (trail2 - 56320) + 65536;
                  return true;
                }
              }
              state.pos = leadSurrogateEnd;
              state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(
            123
            /* { */
          ) && this.regexp_eatHexDigits(state) && state.eat(
            125
            /* } */
          ) && isValidUnicode2(state.lastIntValue)) {
            return true;
          }
          if (switchU) {
            state.raise("Invalid unicode escape");
          }
          state.pos = start2;
        }
        return false;
      };
      function isValidUnicode2(ch) {
        return ch >= 0 && ch <= 1114111;
      }
      pp$12.regexp_eatIdentityEscape = function(state) {
        if (state.switchU) {
          if (this.regexp_eatSyntaxCharacter(state)) {
            return true;
          }
          if (state.eat(
            47
            /* / */
          )) {
            state.lastIntValue = 47;
            return true;
          }
          return false;
        }
        var ch = state.current();
        if (ch !== 99 && (!state.switchN || ch !== 107)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$12.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      var CharSetNone2 = 0;
      var CharSetOk2 = 1;
      var CharSetString2 = 2;
      pp$12.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (isCharacterClassEscape2(ch)) {
          state.lastIntValue = -1;
          state.advance();
          return CharSetOk2;
        }
        var negate = false;
        if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 80) || ch === 112)) {
          state.lastIntValue = -1;
          state.advance();
          var result;
          if (state.eat(
            123
            /* { */
          ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(
            125
            /* } */
          )) {
            if (negate && result === CharSetString2) {
              state.raise("Invalid property name");
            }
            return result;
          }
          state.raise("Invalid property name");
        }
        return CharSetNone2;
      };
      function isCharacterClassEscape2(ch) {
        return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
      }
      pp$12.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start2 = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(
          61
          /* = */
        )) {
          var name2 = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameAndValue(state, name2, value);
            return CharSetOk2;
          }
        }
        state.pos = start2;
        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        }
        return CharSetNone2;
      };
      pp$12.regexp_validateUnicodePropertyNameAndValue = function(state, name2, value) {
        if (!hasOwn2(state.unicodeProperties.nonBinary, name2)) {
          state.raise("Invalid property name");
        }
        if (!state.unicodeProperties.nonBinary[name2].test(value)) {
          state.raise("Invalid property value");
        }
      };
      pp$12.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        if (state.unicodeProperties.binary.test(nameOrValue)) {
          return CharSetOk2;
        }
        if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) {
          return CharSetString2;
        }
        state.raise("Invalid property name");
      };
      pp$12.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyNameCharacter2(ch = state.current())) {
          state.lastStringValue += codePointToString2(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyNameCharacter2(ch) {
        return isControlLetter2(ch) || ch === 95;
      }
      pp$12.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyValueCharacter2(ch = state.current())) {
          state.lastStringValue += codePointToString2(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyValueCharacter2(ch) {
        return isUnicodePropertyNameCharacter2(ch) || isDecimalDigit2(ch);
      }
      pp$12.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      };
      pp$12.regexp_eatCharacterClass = function(state) {
        if (state.eat(
          91
          /* [ */
        )) {
          var negate = state.eat(
            94
            /* ^ */
          );
          var result = this.regexp_classContents(state);
          if (!state.eat(
            93
            /* ] */
          )) {
            state.raise("Unterminated character class");
          }
          if (negate && result === CharSetString2) {
            state.raise("Negated character class may contain strings");
          }
          return true;
        }
        return false;
      };
      pp$12.regexp_classContents = function(state) {
        if (state.current() === 93) {
          return CharSetOk2;
        }
        if (state.switchV) {
          return this.regexp_classSetExpression(state);
        }
        this.regexp_nonEmptyClassRanges(state);
        return CharSetOk2;
      };
      pp$12.regexp_nonEmptyClassRanges = function(state) {
        while (this.regexp_eatClassAtom(state)) {
          var left = state.lastIntValue;
          if (state.eat(
            45
            /* - */
          ) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            if (state.switchU && (left === -1 || right === -1)) {
              state.raise("Invalid character class");
            }
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
          }
        }
      };
      pp$12.regexp_eatClassAtom = function(state) {
        var start2 = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatClassEscape(state)) {
            return true;
          }
          if (state.switchU) {
            var ch$1 = state.current();
            if (ch$1 === 99 || isOctalDigit2(ch$1)) {
              state.raise("Invalid class escape");
            }
            state.raise("Invalid escape");
          }
          state.pos = start2;
        }
        var ch = state.current();
        if (ch !== 93) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$12.regexp_eatClassEscape = function(state) {
        var start2 = state.pos;
        if (state.eat(
          98
          /* b */
        )) {
          state.lastIntValue = 8;
          return true;
        }
        if (state.switchU && state.eat(
          45
          /* - */
        )) {
          state.lastIntValue = 45;
          return true;
        }
        if (!state.switchU && state.eat(
          99
          /* c */
        )) {
          if (this.regexp_eatClassControlLetter(state)) {
            return true;
          }
          state.pos = start2;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      };
      pp$12.regexp_classSetExpression = function(state) {
        var result = CharSetOk2, subResult;
        if (this.regexp_eatClassSetRange(state)) ;
        else if (subResult = this.regexp_eatClassSetOperand(state)) {
          if (subResult === CharSetString2) {
            result = CharSetString2;
          }
          var start2 = state.pos;
          while (state.eatChars(
            [38, 38]
            /* && */
          )) {
            if (state.current() !== 38 && (subResult = this.regexp_eatClassSetOperand(state))) {
              if (subResult !== CharSetString2) {
                result = CharSetOk2;
              }
              continue;
            }
            state.raise("Invalid character in character class");
          }
          if (start2 !== state.pos) {
            return result;
          }
          while (state.eatChars(
            [45, 45]
            /* -- */
          )) {
            if (this.regexp_eatClassSetOperand(state)) {
              continue;
            }
            state.raise("Invalid character in character class");
          }
          if (start2 !== state.pos) {
            return result;
          }
        } else {
          state.raise("Invalid character in character class");
        }
        for (; ; ) {
          if (this.regexp_eatClassSetRange(state)) {
            continue;
          }
          subResult = this.regexp_eatClassSetOperand(state);
          if (!subResult) {
            return result;
          }
          if (subResult === CharSetString2) {
            result = CharSetString2;
          }
        }
      };
      pp$12.regexp_eatClassSetRange = function(state) {
        var start2 = state.pos;
        if (this.regexp_eatClassSetCharacter(state)) {
          var left = state.lastIntValue;
          if (state.eat(
            45
            /* - */
          ) && this.regexp_eatClassSetCharacter(state)) {
            var right = state.lastIntValue;
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
            return true;
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatClassSetOperand = function(state) {
        if (this.regexp_eatClassSetCharacter(state)) {
          return CharSetOk2;
        }
        return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
      };
      pp$12.regexp_eatNestedClass = function(state) {
        var start2 = state.pos;
        if (state.eat(
          91
          /* [ */
        )) {
          var negate = state.eat(
            94
            /* ^ */
          );
          var result = this.regexp_classContents(state);
          if (state.eat(
            93
            /* ] */
          )) {
            if (negate && result === CharSetString2) {
              state.raise("Negated character class may contain strings");
            }
            return result;
          }
          state.pos = start2;
        }
        if (state.eat(
          92
          /* \ */
        )) {
          var result$1 = this.regexp_eatCharacterClassEscape(state);
          if (result$1) {
            return result$1;
          }
          state.pos = start2;
        }
        return null;
      };
      pp$12.regexp_eatClassStringDisjunction = function(state) {
        var start2 = state.pos;
        if (state.eatChars(
          [92, 113]
          /* \q */
        )) {
          if (state.eat(
            123
            /* { */
          )) {
            var result = this.regexp_classStringDisjunctionContents(state);
            if (state.eat(
              125
              /* } */
            )) {
              return result;
            }
          } else {
            state.raise("Invalid escape");
          }
          state.pos = start2;
        }
        return null;
      };
      pp$12.regexp_classStringDisjunctionContents = function(state) {
        var result = this.regexp_classString(state);
        while (state.eat(
          124
          /* | */
        )) {
          if (this.regexp_classString(state) === CharSetString2) {
            result = CharSetString2;
          }
        }
        return result;
      };
      pp$12.regexp_classString = function(state) {
        var count = 0;
        while (this.regexp_eatClassSetCharacter(state)) {
          count++;
        }
        return count === 1 ? CharSetOk2 : CharSetString2;
      };
      pp$12.regexp_eatClassSetCharacter = function(state) {
        var start2 = state.pos;
        if (state.eat(
          92
          /* \ */
        )) {
          if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) {
            return true;
          }
          if (state.eat(
            98
            /* b */
          )) {
            state.lastIntValue = 8;
            return true;
          }
          state.pos = start2;
          return false;
        }
        var ch = state.current();
        if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter2(ch)) {
          return false;
        }
        if (isClassSetSyntaxCharacter2(ch)) {
          return false;
        }
        state.advance();
        state.lastIntValue = ch;
        return true;
      };
      function isClassSetReservedDoublePunctuatorCharacter2(ch) {
        return ch === 33 || ch >= 35 && ch <= 38 || ch >= 42 && ch <= 44 || ch === 46 || ch >= 58 && ch <= 64 || ch === 94 || ch === 96 || ch === 126;
      }
      function isClassSetSyntaxCharacter2(ch) {
        return ch === 40 || ch === 41 || ch === 45 || ch === 47 || ch >= 91 && ch <= 93 || ch >= 123 && ch <= 125;
      }
      pp$12.regexp_eatClassSetReservedPunctuator = function(state) {
        var ch = state.current();
        if (isClassSetReservedPunctuator2(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isClassSetReservedPunctuator2(ch) {
        return ch === 33 || ch === 35 || ch === 37 || ch === 38 || ch === 44 || ch === 45 || ch >= 58 && ch <= 62 || ch === 64 || ch === 96 || ch === 126;
      }
      pp$12.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        if (isDecimalDigit2(ch) || ch === 95) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      pp$12.regexp_eatHexEscapeSequence = function(state) {
        var start2 = state.pos;
        if (state.eat(
          120
          /* x */
        )) {
          if (this.regexp_eatFixedHexDigits(state, 2)) {
            return true;
          }
          if (state.switchU) {
            state.raise("Invalid escape");
          }
          state.pos = start2;
        }
        return false;
      };
      pp$12.regexp_eatDecimalDigits = function(state) {
        var start2 = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isDecimalDigit2(ch = state.current())) {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
          state.advance();
        }
        return state.pos !== start2;
      };
      function isDecimalDigit2(ch) {
        return ch >= 48 && ch <= 57;
      }
      pp$12.regexp_eatHexDigits = function(state) {
        var start2 = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isHexDigit2(ch = state.current())) {
          state.lastIntValue = 16 * state.lastIntValue + hexToInt2(ch);
          state.advance();
        }
        return state.pos !== start2;
      };
      function isHexDigit2(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt2(ch) {
        if (ch >= 65 && ch <= 70) {
          return 10 + (ch - 65);
        }
        if (ch >= 97 && ch <= 102) {
          return 10 + (ch - 97);
        }
        return ch - 48;
      }
      pp$12.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
              state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
            } else {
              state.lastIntValue = n1 * 8 + n2;
            }
          } else {
            state.lastIntValue = n1;
          }
          return true;
        }
        return false;
      };
      pp$12.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        if (isOctalDigit2(ch)) {
          state.lastIntValue = ch - 48;
          state.advance();
          return true;
        }
        state.lastIntValue = 0;
        return false;
      };
      function isOctalDigit2(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$12.regexp_eatFixedHexDigits = function(state, length) {
        var start2 = state.pos;
        state.lastIntValue = 0;
        for (var i2 = 0; i2 < length; ++i2) {
          var ch = state.current();
          if (!isHexDigit2(ch)) {
            state.pos = start2;
            return false;
          }
          state.lastIntValue = 16 * state.lastIntValue + hexToInt2(ch);
          state.advance();
        }
        return true;
      };
      var Token3 = function Token4(p) {
        this.type = p.type;
        this.value = p.value;
        this.start = p.start;
        this.end = p.end;
        if (p.options.locations) {
          this.loc = new SourceLocation3(p, p.startLoc, p.endLoc);
        }
        if (p.options.ranges) {
          this.range = [p.start, p.end];
        }
      };
      var pp2 = Parser3.prototype;
      pp2.next = function(ignoreEscapeSequenceInKeyword) {
        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
        }
        if (this.options.onToken) {
          this.options.onToken(new Token3(this));
        }
        this.lastTokEnd = this.end;
        this.lastTokStart = this.start;
        this.lastTokEndLoc = this.endLoc;
        this.lastTokStartLoc = this.startLoc;
        this.nextToken();
      };
      pp2.getToken = function() {
        this.next();
        return new Token3(this);
      };
      if (typeof Symbol !== "undefined") {
        pp2[Symbol.iterator] = function() {
          var this$1$1 = this;
          return {
            next: function() {
              var token = this$1$1.getToken();
              return {
                done: token.type === types$12.eof,
                value: token
              };
            }
          };
        };
      }
      pp2.nextToken = function() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace) {
          this.skipSpace();
        }
        this.start = this.pos;
        if (this.options.locations) {
          this.startLoc = this.curPosition();
        }
        if (this.pos >= this.input.length) {
          return this.finishToken(types$12.eof);
        }
        if (curContext.override) {
          return curContext.override(this);
        } else {
          this.readToken(this.fullCharCodeAtPos());
        }
      };
      pp2.readToken = function(code4) {
        if (isIdentifierStart2(code4, this.options.ecmaVersion >= 6) || code4 === 92) {
          return this.readWord();
        }
        return this.getTokenFromCode(code4);
      };
      pp2.fullCharCodeAtPos = function() {
        var code4 = this.input.charCodeAt(this.pos);
        if (code4 <= 55295 || code4 >= 56320) {
          return code4;
        }
        var next = this.input.charCodeAt(this.pos + 1);
        return next <= 56319 || next >= 57344 ? code4 : (code4 << 10) + next - 56613888;
      };
      pp2.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition();
        var start2 = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1) {
          this.raise(this.pos - 2, "Unterminated comment");
        }
        this.pos = end + 2;
        if (this.options.locations) {
          for (var nextBreak = void 0, pos = start2; (nextBreak = nextLineBreak2(this.input, pos, this.pos)) > -1; ) {
            ++this.curLine;
            pos = this.lineStart = nextBreak;
          }
        }
        if (this.options.onComment) {
          this.options.onComment(
            true,
            this.input.slice(start2 + 2, end),
            start2,
            this.pos,
            startLoc,
            this.curPosition()
          );
        }
      };
      pp2.skipLineComment = function(startSkip) {
        var start2 = this.pos;
        var startLoc = this.options.onComment && this.curPosition();
        var ch = this.input.charCodeAt(this.pos += startSkip);
        while (this.pos < this.input.length && !isNewLine2(ch)) {
          ch = this.input.charCodeAt(++this.pos);
        }
        if (this.options.onComment) {
          this.options.onComment(
            false,
            this.input.slice(start2 + startSkip, this.pos),
            start2,
            this.pos,
            startLoc,
            this.curPosition()
          );
        }
      };
      pp2.skipSpace = function() {
        loop: while (this.pos < this.input.length) {
          var ch = this.input.charCodeAt(this.pos);
          switch (ch) {
            case 32:
            case 160:
              ++this.pos;
              break;
            case 13:
              if (this.input.charCodeAt(this.pos + 1) === 10) {
                ++this.pos;
              }
            case 10:
            case 8232:
            case 8233:
              ++this.pos;
              if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
              }
              break;
            case 47:
              switch (this.input.charCodeAt(this.pos + 1)) {
                case 42:
                  this.skipBlockComment();
                  break;
                case 47:
                  this.skipLineComment(2);
                  break;
                default:
                  break loop;
              }
              break;
            default:
              if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace2.test(String.fromCharCode(ch))) {
                ++this.pos;
              } else {
                break loop;
              }
          }
        }
      };
      pp2.finishToken = function(type, val) {
        this.end = this.pos;
        if (this.options.locations) {
          this.endLoc = this.curPosition();
        }
        var prevType = this.type;
        this.type = type;
        this.value = val;
        this.updateContext(prevType);
      };
      pp2.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
          this.pos += 3;
          return this.finishToken(types$12.ellipsis);
        } else {
          ++this.pos;
          return this.finishToken(types$12.dot);
        }
      };
      pp2.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (this.exprAllowed) {
          ++this.pos;
          return this.readRegexp();
        }
        if (next === 61) {
          return this.finishOp(types$12.assign, 2);
        }
        return this.finishOp(types$12.slash, 1);
      };
      pp2.readToken_mult_modulo_exp = function(code4) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        var tokentype = code4 === 42 ? types$12.star : types$12.modulo;
        if (this.options.ecmaVersion >= 7 && code4 === 42 && next === 42) {
          ++size;
          tokentype = types$12.starstar;
          next = this.input.charCodeAt(this.pos + 2);
        }
        if (next === 61) {
          return this.finishOp(types$12.assign, size + 1);
        }
        return this.finishOp(tokentype, size);
      };
      pp2.readToken_pipe_amp = function(code4) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code4) {
          if (this.options.ecmaVersion >= 12) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 === 61) {
              return this.finishOp(types$12.assign, 3);
            }
          }
          return this.finishOp(code4 === 124 ? types$12.logicalOR : types$12.logicalAND, 2);
        }
        if (next === 61) {
          return this.finishOp(types$12.assign, 2);
        }
        return this.finishOp(code4 === 124 ? types$12.bitwiseOR : types$12.bitwiseAND, 1);
      };
      pp2.readToken_caret = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types$12.assign, 2);
        }
        return this.finishOp(types$12.bitwiseXOR, 1);
      };
      pp2.readToken_plus_min = function(code4) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code4) {
          if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak2.test(this.input.slice(this.lastTokEnd, this.pos)))) {
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(types$12.incDec, 2);
        }
        if (next === 61) {
          return this.finishOp(types$12.assign, 2);
        }
        return this.finishOp(types$12.plusMin, 1);
      };
      pp2.readToken_lt_gt = function(code4) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        if (next === code4) {
          size = code4 === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.pos + size) === 61) {
            return this.finishOp(types$12.assign, size + 1);
          }
          return this.finishOp(types$12.bitShift, size);
        }
        if (next === 33 && code4 === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }
        if (next === 61) {
          size = 2;
        }
        return this.finishOp(types$12.relational, size);
      };
      pp2.readToken_eq_excl = function(code4) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types$12.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
        }
        if (code4 === 61 && next === 62 && this.options.ecmaVersion >= 6) {
          this.pos += 2;
          return this.finishToken(types$12.arrow);
        }
        return this.finishOp(code4 === 61 ? types$12.eq : types$12.prefix, 1);
      };
      pp2.readToken_question = function() {
        var ecmaVersion2 = this.options.ecmaVersion;
        if (ecmaVersion2 >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57) {
              return this.finishOp(types$12.questionDot, 2);
            }
          }
          if (next === 63) {
            if (ecmaVersion2 >= 12) {
              var next2$1 = this.input.charCodeAt(this.pos + 2);
              if (next2$1 === 61) {
                return this.finishOp(types$12.assign, 3);
              }
            }
            return this.finishOp(types$12.coalesce, 2);
          }
        }
        return this.finishOp(types$12.question, 1);
      };
      pp2.readToken_numberSign = function() {
        var ecmaVersion2 = this.options.ecmaVersion;
        var code4 = 35;
        if (ecmaVersion2 >= 13) {
          ++this.pos;
          code4 = this.fullCharCodeAtPos();
          if (isIdentifierStart2(code4, true) || code4 === 92) {
            return this.finishToken(types$12.privateId, this.readWord1());
          }
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString2(code4) + "'");
      };
      pp2.getTokenFromCode = function(code4) {
        switch (code4) {
          case 46:
            return this.readToken_dot();
          case 40:
            ++this.pos;
            return this.finishToken(types$12.parenL);
          case 41:
            ++this.pos;
            return this.finishToken(types$12.parenR);
          case 59:
            ++this.pos;
            return this.finishToken(types$12.semi);
          case 44:
            ++this.pos;
            return this.finishToken(types$12.comma);
          case 91:
            ++this.pos;
            return this.finishToken(types$12.bracketL);
          case 93:
            ++this.pos;
            return this.finishToken(types$12.bracketR);
          case 123:
            ++this.pos;
            return this.finishToken(types$12.braceL);
          case 125:
            ++this.pos;
            return this.finishToken(types$12.braceR);
          case 58:
            ++this.pos;
            return this.finishToken(types$12.colon);
          case 96:
            if (this.options.ecmaVersion < 6) {
              break;
            }
            ++this.pos;
            return this.finishToken(types$12.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88) {
              return this.readRadixNumber(16);
            }
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79) {
                return this.readRadixNumber(8);
              }
              if (next === 98 || next === 66) {
                return this.readRadixNumber(2);
              }
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code4);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code4);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code4);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code4);
          case 60:
          case 62:
            return this.readToken_lt_gt(code4);
          case 61:
          case 33:
            return this.readToken_eq_excl(code4);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types$12.prefix, 1);
          case 35:
            return this.readToken_numberSign();
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString2(code4) + "'");
      };
      pp2.finishOp = function(type, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        this.pos += size;
        return this.finishToken(type, str);
      };
      pp2.readRegexp = function() {
        var escaped, inClass, start2 = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(start2, "Unterminated regular expression");
          }
          var ch = this.input.charAt(this.pos);
          if (lineBreak2.test(ch)) {
            this.raise(start2, "Unterminated regular expression");
          }
          if (!escaped) {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          } else {
            escaped = false;
          }
          ++this.pos;
        }
        var pattern = this.input.slice(start2, this.pos);
        ++this.pos;
        var flagsStart = this.pos;
        var flags = this.readWord1();
        if (this.containsEsc) {
          this.unexpected(flagsStart);
        }
        var state = this.regexpState || (this.regexpState = new RegExpValidationState3(this));
        state.reset(start2, pattern, flags);
        this.validateRegExpFlags(state);
        this.validateRegExpPattern(state);
        var value = null;
        try {
          value = new RegExp(pattern, flags);
        } catch (e) {
        }
        return this.finishToken(types$12.regexp, { pattern, flags, value });
      };
      pp2.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
        var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
        var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
        var start2 = this.pos, total = 0, lastCode = 0;
        for (var i2 = 0, e = len == null ? Infinity : len; i2 < e; ++i2, ++this.pos) {
          var code4 = this.input.charCodeAt(this.pos), val = void 0;
          if (allowSeparators && code4 === 95) {
            if (isLegacyOctalNumericLiteral) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
            }
            if (lastCode === 95) {
              this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
            }
            if (i2 === 0) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
            }
            lastCode = code4;
            continue;
          }
          if (code4 >= 97) {
            val = code4 - 97 + 10;
          } else if (code4 >= 65) {
            val = code4 - 65 + 10;
          } else if (code4 >= 48 && code4 <= 57) {
            val = code4 - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            break;
          }
          lastCode = code4;
          total = total * radix + val;
        }
        if (allowSeparators && lastCode === 95) {
          this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
        }
        if (this.pos === start2 || len != null && this.pos - start2 !== len) {
          return null;
        }
        return total;
      };
      function stringToNumber2(str, isLegacyOctalNumericLiteral) {
        if (isLegacyOctalNumericLiteral) {
          return parseInt(str, 8);
        }
        return parseFloat(str.replace(/_/g, ""));
      }
      function stringToBigInt2(str) {
        if (typeof BigInt !== "function") {
          return null;
        }
        return BigInt(str.replace(/_/g, ""));
      }
      pp2.readRadixNumber = function(radix) {
        var start2 = this.pos;
        this.pos += 2;
        var val = this.readInt(radix);
        if (val == null) {
          this.raise(this.start + 2, "Expected number in radix " + radix);
        }
        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
          val = stringToBigInt2(this.input.slice(start2, this.pos));
          ++this.pos;
        } else if (isIdentifierStart2(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        return this.finishToken(types$12.num, val);
      };
      pp2.readNumber = function(startsWithDot) {
        var start2 = this.pos;
        if (!startsWithDot && this.readInt(10, void 0, true) === null) {
          this.raise(start2, "Invalid number");
        }
        var octal = this.pos - start2 >= 2 && this.input.charCodeAt(start2) === 48;
        if (octal && this.strict) {
          this.raise(start2, "Invalid number");
        }
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt2(this.input.slice(start2, this.pos));
          ++this.pos;
          if (isIdentifierStart2(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          return this.finishToken(types$12.num, val$1);
        }
        if (octal && /[89]/.test(this.input.slice(start2, this.pos))) {
          octal = false;
        }
        if (next === 46 && !octal) {
          ++this.pos;
          this.readInt(10);
          next = this.input.charCodeAt(this.pos);
        }
        if ((next === 69 || next === 101) && !octal) {
          next = this.input.charCodeAt(++this.pos);
          if (next === 43 || next === 45) {
            ++this.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(start2, "Invalid number");
          }
        }
        if (isIdentifierStart2(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        var val = stringToNumber2(this.input.slice(start2, this.pos), octal);
        return this.finishToken(types$12.num, val);
      };
      pp2.readCodePoint = function() {
        var ch = this.input.charCodeAt(this.pos), code4;
        if (ch === 123) {
          if (this.options.ecmaVersion < 6) {
            this.unexpected();
          }
          var codePos = ++this.pos;
          code4 = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
          ++this.pos;
          if (code4 > 1114111) {
            this.invalidStringToken(codePos, "Code point out of bounds");
          }
        } else {
          code4 = this.readHexChar(4);
        }
        return code4;
      };
      pp2.readString = function(quote) {
        var out = "", chunkStart = ++this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated string constant");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote) {
            break;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.pos;
          } else if (ch === 8232 || ch === 8233) {
            if (this.options.ecmaVersion < 10) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
            if (this.options.locations) {
              this.curLine++;
              this.lineStart = this.pos;
            }
          } else {
            if (isNewLine2(ch)) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
          }
        }
        out += this.input.slice(chunkStart, this.pos++);
        return this.finishToken(types$12.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR2 = {};
      pp2.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err === INVALID_TEMPLATE_ESCAPE_ERROR2) {
            this.readInvalidTemplateToken();
          } else {
            throw err;
          }
        }
        this.inTemplateElement = false;
      };
      pp2.invalidStringToken = function(position3, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
          throw INVALID_TEMPLATE_ESCAPE_ERROR2;
        } else {
          this.raise(position3, message);
        }
      };
      pp2.readTmplToken = function() {
        var out = "", chunkStart = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated template");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
            if (this.pos === this.start && (this.type === types$12.template || this.type === types$12.invalidTemplate)) {
              if (ch === 36) {
                this.pos += 2;
                return this.finishToken(types$12.dollarBraceL);
              } else {
                ++this.pos;
                return this.finishToken(types$12.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.pos);
            return this.finishToken(types$12.template, out);
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.pos;
          } else if (isNewLine2(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            ++this.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.pos) === 10) {
                  ++this.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            chunkStart = this.pos;
          } else {
            ++this.pos;
          }
        }
      };
      pp2.readInvalidTemplateToken = function() {
        for (; this.pos < this.input.length; this.pos++) {
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{") {
                break;
              }
            case "`":
              return this.finishToken(types$12.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              if (this.input[this.pos + 1] === "\n") {
                ++this.pos;
              }
            case "\n":
            case "\u2028":
            case "\u2029":
              ++this.curLine;
              this.lineStart = this.pos + 1;
              break;
          }
        }
        this.raise(this.start, "Unterminated template");
      };
      pp2.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        ++this.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString2(this.readCodePoint());
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
            }
          case 10:
            if (this.options.locations) {
              this.lineStart = this.pos;
              ++this.curLine;
            }
            return "";
          case 56:
          case 57:
            if (this.strict) {
              this.invalidStringToken(
                this.pos - 1,
                "Invalid escape sequence"
              );
            }
            if (inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(
                codePos,
                "Invalid escape sequence in template string"
              );
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.pos += octalStr.length - 1;
              ch = this.input.charCodeAt(this.pos);
              if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                this.invalidStringToken(
                  this.pos - 1 - octalStr.length,
                  inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
                );
              }
              return String.fromCharCode(octal);
            }
            if (isNewLine2(ch)) {
              if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
              }
              return "";
            }
            return String.fromCharCode(ch);
        }
      };
      pp2.readHexChar = function(len) {
        var codePos = this.pos;
        var n = this.readInt(16, len);
        if (n === null) {
          this.invalidStringToken(codePos, "Bad character escape sequence");
        }
        return n;
      };
      pp2.readWord1 = function() {
        this.containsEsc = false;
        var word = "", first = true, chunkStart = this.pos;
        var astral = this.options.ecmaVersion >= 6;
        while (this.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar2(ch, astral)) {
            this.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.containsEsc = true;
            word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            if (this.input.charCodeAt(++this.pos) !== 117) {
              this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
            }
            ++this.pos;
            var esc = this.readCodePoint();
            if (!(first ? isIdentifierStart2 : isIdentifierChar2)(esc, astral)) {
              this.invalidStringToken(escStart, "Invalid Unicode escape");
            }
            word += codePointToString2(esc);
            chunkStart = this.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      };
      pp2.readWord = function() {
        var word = this.readWord1();
        var type = types$12.name;
        if (this.keywords.test(word)) {
          type = keywords2[word];
        }
        return this.finishToken(type, word);
      };
      var version2 = "8.12.1";
      Parser3.acorn = {
        Parser: Parser3,
        version: version2,
        defaultOptions: defaultOptions2,
        Position: Position3,
        SourceLocation: SourceLocation3,
        getLineInfo: getLineInfo2,
        Node: Node3,
        TokenType: TokenType3,
        tokTypes: types$12,
        keywordTypes: keywords2,
        TokContext: TokContext3,
        tokContexts: types2,
        isIdentifierChar: isIdentifierChar2,
        isIdentifierStart: isIdentifierStart2,
        Token: Token3,
        isNewLine: isNewLine2,
        lineBreak: lineBreak2,
        lineBreakG: lineBreakG2,
        nonASCIIwhitespace: nonASCIIwhitespace2
      };
      function parse5(input, options) {
        return Parser3.parse(input, options);
      }
      function parseExpressionAt2(input, pos, options) {
        return Parser3.parseExpressionAt(input, pos, options);
      }
      function tokenizer2(input, options) {
        return Parser3.tokenizer(input, options);
      }
      exports2.Node = Node3;
      exports2.Parser = Parser3;
      exports2.Position = Position3;
      exports2.SourceLocation = SourceLocation3;
      exports2.TokContext = TokContext3;
      exports2.Token = Token3;
      exports2.TokenType = TokenType3;
      exports2.defaultOptions = defaultOptions2;
      exports2.getLineInfo = getLineInfo2;
      exports2.isIdentifierChar = isIdentifierChar2;
      exports2.isIdentifierStart = isIdentifierStart2;
      exports2.isNewLine = isNewLine2;
      exports2.keywordTypes = keywords2;
      exports2.lineBreak = lineBreak2;
      exports2.lineBreakG = lineBreakG2;
      exports2.nonASCIIwhitespace = nonASCIIwhitespace2;
      exports2.parse = parse5;
      exports2.parseExpressionAt = parseExpressionAt2;
      exports2.tokContexts = types2;
      exports2.tokTypes = types$12;
      exports2.tokenizer = tokenizer2;
      exports2.version = version2;
    });
  }
});

// node_modules/acorn-jsx/index.js
var require_acorn_jsx = __commonJS({
  "node_modules/acorn-jsx/index.js"(exports, module2) {
    "use strict";
    var XHTMLEntities = require_xhtml();
    var hexNumber = /^[\da-fA-F]+$/;
    var decimalNumber = /^\d+$/;
    var acornJsxMap = /* @__PURE__ */ new WeakMap();
    function getJsxTokens(acorn) {
      acorn = acorn.Parser.acorn || acorn;
      let acornJsx2 = acornJsxMap.get(acorn);
      if (!acornJsx2) {
        const tt = acorn.tokTypes;
        const TokContext3 = acorn.TokContext;
        const TokenType3 = acorn.TokenType;
        const tc_oTag = new TokContext3("<tag", false);
        const tc_cTag = new TokContext3("</tag", false);
        const tc_expr = new TokContext3("<tag>...</tag>", true, true);
        const tokContexts = {
          tc_oTag,
          tc_cTag,
          tc_expr
        };
        const tokTypes = {
          jsxName: new TokenType3("jsxName"),
          jsxText: new TokenType3("jsxText", { beforeExpr: true }),
          jsxTagStart: new TokenType3("jsxTagStart", { startsExpr: true }),
          jsxTagEnd: new TokenType3("jsxTagEnd")
        };
        tokTypes.jsxTagStart.updateContext = function() {
          this.context.push(tc_expr);
          this.context.push(tc_oTag);
          this.exprAllowed = false;
        };
        tokTypes.jsxTagEnd.updateContext = function(prevType) {
          let out = this.context.pop();
          if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
            this.context.pop();
            this.exprAllowed = this.curContext() === tc_expr;
          } else {
            this.exprAllowed = true;
          }
        };
        acornJsx2 = { tokContexts, tokTypes };
        acornJsxMap.set(acorn, acornJsx2);
      }
      return acornJsx2;
    }
    function getQualifiedJSXName(object) {
      if (!object)
        return object;
      if (object.type === "JSXIdentifier")
        return object.name;
      if (object.type === "JSXNamespacedName")
        return object.namespace.name + ":" + object.name.name;
      if (object.type === "JSXMemberExpression")
        return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
    module2.exports = function(options) {
      options = options || {};
      return function(Parser3) {
        return plugin({
          allowNamespaces: options.allowNamespaces !== false,
          allowNamespacedObjects: !!options.allowNamespacedObjects
        }, Parser3);
      };
    };
    Object.defineProperty(module2.exports, "tokTypes", {
      get: function get_tokTypes() {
        return getJsxTokens(require_acorn()).tokTypes;
      },
      configurable: true,
      enumerable: true
    });
    function plugin(options, Parser3) {
      const acorn = Parser3.acorn || require_acorn();
      const acornJsx2 = getJsxTokens(acorn);
      const tt = acorn.tokTypes;
      const tok = acornJsx2.tokTypes;
      const tokContexts = acorn.tokContexts;
      const tc_oTag = acornJsx2.tokContexts.tc_oTag;
      const tc_cTag = acornJsx2.tokContexts.tc_cTag;
      const tc_expr = acornJsx2.tokContexts.tc_expr;
      const isNewLine2 = acorn.isNewLine;
      const isIdentifierStart2 = acorn.isIdentifierStart;
      const isIdentifierChar2 = acorn.isIdentifierChar;
      return class extends Parser3 {
        // Expose actual `tokTypes` and `tokContexts` to other plugins.
        static get acornJsx() {
          return acornJsx2;
        }
        // Reads inline JSX contents token.
        jsx_readToken() {
          let out = "", chunkStart = this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length)
              this.raise(this.start, "Unterminated JSX contents");
            let ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 60:
              case 123:
                if (this.pos === this.start) {
                  if (ch === 60 && this.exprAllowed) {
                    ++this.pos;
                    return this.finishToken(tok.jsxTagStart);
                  }
                  return this.getTokenFromCode(ch);
                }
                out += this.input.slice(chunkStart, this.pos);
                return this.finishToken(tok.jsxText, out);
              case 38:
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readEntity();
                chunkStart = this.pos;
                break;
              case 62:
              case 125:
                this.raise(
                  this.pos,
                  "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (ch === 62 ? "&gt;" : "&rbrace;") + '` or `{"' + this.input[this.pos] + '"}`?'
                );
              default:
                if (isNewLine2(ch)) {
                  out += this.input.slice(chunkStart, this.pos);
                  out += this.jsx_readNewLine(true);
                  chunkStart = this.pos;
                } else {
                  ++this.pos;
                }
            }
          }
        }
        jsx_readNewLine(normalizeCRLF) {
          let ch = this.input.charCodeAt(this.pos);
          let out;
          ++this.pos;
          if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
            ++this.pos;
            out = normalizeCRLF ? "\n" : "\r\n";
          } else {
            out = String.fromCharCode(ch);
          }
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          return out;
        }
        jsx_readString(quote) {
          let out = "", chunkStart = ++this.pos;
          for (; ; ) {
            if (this.pos >= this.input.length)
              this.raise(this.start, "Unterminated string constant");
            let ch = this.input.charCodeAt(this.pos);
            if (ch === quote) break;
            if (ch === 38) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.jsx_readEntity();
              chunkStart = this.pos;
            } else if (isNewLine2(ch)) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.jsx_readNewLine(false);
              chunkStart = this.pos;
            } else {
              ++this.pos;
            }
          }
          out += this.input.slice(chunkStart, this.pos++);
          return this.finishToken(tt.string, out);
        }
        jsx_readEntity() {
          let str = "", count = 0, entity;
          let ch = this.input[this.pos];
          if (ch !== "&")
            this.raise(this.pos, "Entity must start with an ampersand");
          let startPos = ++this.pos;
          while (this.pos < this.input.length && count++ < 10) {
            ch = this.input[this.pos++];
            if (ch === ";") {
              if (str[0] === "#") {
                if (str[1] === "x") {
                  str = str.substr(2);
                  if (hexNumber.test(str))
                    entity = String.fromCharCode(parseInt(str, 16));
                } else {
                  str = str.substr(1);
                  if (decimalNumber.test(str))
                    entity = String.fromCharCode(parseInt(str, 10));
                }
              } else {
                entity = XHTMLEntities[str];
              }
              break;
            }
            str += ch;
          }
          if (!entity) {
            this.pos = startPos;
            return "&";
          }
          return entity;
        }
        // Read a JSX identifier (valid tag or attribute name).
        //
        // Optimized version since JSX identifiers can't contain
        // escape characters and so can be read as single slice.
        // Also assumes that first character was already checked
        // by isIdentifierStart in readToken.
        jsx_readWord() {
          let ch, start2 = this.pos;
          do {
            ch = this.input.charCodeAt(++this.pos);
          } while (isIdentifierChar2(ch) || ch === 45);
          return this.finishToken(tok.jsxName, this.input.slice(start2, this.pos));
        }
        // Parse next token as JSX identifier
        jsx_parseIdentifier() {
          let node2 = this.startNode();
          if (this.type === tok.jsxName)
            node2.name = this.value;
          else if (this.type.keyword)
            node2.name = this.type.keyword;
          else
            this.unexpected();
          this.next();
          return this.finishNode(node2, "JSXIdentifier");
        }
        // Parse namespaced identifier.
        jsx_parseNamespacedName() {
          let startPos = this.start, startLoc = this.startLoc;
          let name2 = this.jsx_parseIdentifier();
          if (!options.allowNamespaces || !this.eat(tt.colon)) return name2;
          var node2 = this.startNodeAt(startPos, startLoc);
          node2.namespace = name2;
          node2.name = this.jsx_parseIdentifier();
          return this.finishNode(node2, "JSXNamespacedName");
        }
        // Parses element name in any form - namespaced, member
        // or single identifier.
        jsx_parseElementName() {
          if (this.type === tok.jsxTagEnd) return "";
          let startPos = this.start, startLoc = this.startLoc;
          let node2 = this.jsx_parseNamespacedName();
          if (this.type === tt.dot && node2.type === "JSXNamespacedName" && !options.allowNamespacedObjects) {
            this.unexpected();
          }
          while (this.eat(tt.dot)) {
            let newNode = this.startNodeAt(startPos, startLoc);
            newNode.object = node2;
            newNode.property = this.jsx_parseIdentifier();
            node2 = this.finishNode(newNode, "JSXMemberExpression");
          }
          return node2;
        }
        // Parses any type of JSX attribute value.
        jsx_parseAttributeValue() {
          switch (this.type) {
            case tt.braceL:
              let node2 = this.jsx_parseExpressionContainer();
              if (node2.expression.type === "JSXEmptyExpression")
                this.raise(node2.start, "JSX attributes must only be assigned a non-empty expression");
              return node2;
            case tok.jsxTagStart:
            case tt.string:
              return this.parseExprAtom();
            default:
              this.raise(this.start, "JSX value should be either an expression or a quoted JSX text");
          }
        }
        // JSXEmptyExpression is unique type since it doesn't actually parse anything,
        // and so it should start at the end of last read token (left brace) and finish
        // at the beginning of the next one (right brace).
        jsx_parseEmptyExpression() {
          let node2 = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
          return this.finishNodeAt(node2, "JSXEmptyExpression", this.start, this.startLoc);
        }
        // Parses JSX expression enclosed into curly brackets.
        jsx_parseExpressionContainer() {
          let node2 = this.startNode();
          this.next();
          node2.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
          this.expect(tt.braceR);
          return this.finishNode(node2, "JSXExpressionContainer");
        }
        // Parses following JSX attribute name-value pair.
        jsx_parseAttribute() {
          let node2 = this.startNode();
          if (this.eat(tt.braceL)) {
            this.expect(tt.ellipsis);
            node2.argument = this.parseMaybeAssign();
            this.expect(tt.braceR);
            return this.finishNode(node2, "JSXSpreadAttribute");
          }
          node2.name = this.jsx_parseNamespacedName();
          node2.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
          return this.finishNode(node2, "JSXAttribute");
        }
        // Parses JSX opening tag starting after '<'.
        jsx_parseOpeningElementAt(startPos, startLoc) {
          let node2 = this.startNodeAt(startPos, startLoc);
          node2.attributes = [];
          let nodeName = this.jsx_parseElementName();
          if (nodeName) node2.name = nodeName;
          while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)
            node2.attributes.push(this.jsx_parseAttribute());
          node2.selfClosing = this.eat(tt.slash);
          this.expect(tok.jsxTagEnd);
          return this.finishNode(node2, nodeName ? "JSXOpeningElement" : "JSXOpeningFragment");
        }
        // Parses JSX closing tag starting after '</'.
        jsx_parseClosingElementAt(startPos, startLoc) {
          let node2 = this.startNodeAt(startPos, startLoc);
          let nodeName = this.jsx_parseElementName();
          if (nodeName) node2.name = nodeName;
          this.expect(tok.jsxTagEnd);
          return this.finishNode(node2, nodeName ? "JSXClosingElement" : "JSXClosingFragment");
        }
        // Parses entire JSX element, including it's opening tag
        // (starting after '<'), attributes, contents and closing tag.
        jsx_parseElementAt(startPos, startLoc) {
          let node2 = this.startNodeAt(startPos, startLoc);
          let children = [];
          let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
          let closingElement = null;
          if (!openingElement.selfClosing) {
            contents: for (; ; ) {
              switch (this.type) {
                case tok.jsxTagStart:
                  startPos = this.start;
                  startLoc = this.startLoc;
                  this.next();
                  if (this.eat(tt.slash)) {
                    closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                    break contents;
                  }
                  children.push(this.jsx_parseElementAt(startPos, startLoc));
                  break;
                case tok.jsxText:
                  children.push(this.parseExprAtom());
                  break;
                case tt.braceL:
                  children.push(this.jsx_parseExpressionContainer());
                  break;
                default:
                  this.unexpected();
              }
            }
            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
              this.raise(
                closingElement.start,
                "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">"
              );
            }
          }
          let fragmentOrElement = openingElement.name ? "Element" : "Fragment";
          node2["opening" + fragmentOrElement] = openingElement;
          node2["closing" + fragmentOrElement] = closingElement;
          node2.children = children;
          if (this.type === tt.relational && this.value === "<") {
            this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
          }
          return this.finishNode(node2, "JSX" + fragmentOrElement);
        }
        // Parse JSX text
        jsx_parseText() {
          let node2 = this.parseLiteral(this.value);
          node2.type = "JSXText";
          return node2;
        }
        // Parses entire JSX element from current position.
        jsx_parseElement() {
          let startPos = this.start, startLoc = this.startLoc;
          this.next();
          return this.jsx_parseElementAt(startPos, startLoc);
        }
        parseExprAtom(refShortHandDefaultPos) {
          if (this.type === tok.jsxText)
            return this.jsx_parseText();
          else if (this.type === tok.jsxTagStart)
            return this.jsx_parseElement();
          else
            return super.parseExprAtom(refShortHandDefaultPos);
        }
        readToken(code4) {
          let context = this.curContext();
          if (context === tc_expr) return this.jsx_readToken();
          if (context === tc_oTag || context === tc_cTag) {
            if (isIdentifierStart2(code4)) return this.jsx_readWord();
            if (code4 == 62) {
              ++this.pos;
              return this.finishToken(tok.jsxTagEnd);
            }
            if ((code4 === 34 || code4 === 39) && context == tc_oTag)
              return this.jsx_readString(code4);
          }
          if (code4 === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
            ++this.pos;
            return this.finishToken(tok.jsxTagStart);
          }
          return super.readToken(code4);
        }
        updateContext(prevType) {
          if (this.type == tt.braceL) {
            var curContext = this.curContext();
            if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);
            else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);
            else super.updateContext(prevType);
            this.exprAllowed = true;
          } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
            this.context.length -= 2;
            this.context.push(tc_cTag);
            this.exprAllowed = false;
          } else {
            return super.updateContext(prevType);
          }
        }
      };
    }
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module2) {
    "use strict";
    var hasOwn2 = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray2 = function isArray3(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject2 = function isPlainObject3(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn2.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn2.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn2.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name2) {
      if (name2 === "__proto__") {
        if (!hasOwn2.call(obj, name2)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name2).value;
        }
      }
      return obj[name2];
    };
    module2.exports = function extend3() {
      var options, name2, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name2 in options) {
            src = getProperty(target, name2);
            copy = getProperty(options, name2);
            if (target !== copy) {
              if (deep && copy && (isPlainObject2(copy) || (copyIsArray = isArray2(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray2(src) ? src : [];
                } else {
                  clone = src && isPlainObject2(src) ? src : {};
                }
                setProperty(target, { name: name2, newValue: extend3(deep, clone, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name: name2, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/inline-style-parser/index.js
var require_inline_style_parser = __commonJS({
  "node_modules/inline-style-parser/index.js"(exports, module2) {
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;
    var TRIM_REGEX = /^\s+|\s+$/g;
    var NEWLINE = "\n";
    var FORWARD_SLASH = "/";
    var ASTERISK = "*";
    var EMPTY_STRING = "";
    var TYPE_COMMENT = "comment";
    var TYPE_DECLARATION = "declaration";
    module2.exports = function(style, options) {
      if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
      }
      if (!style) return [];
      options = options || {};
      var lineno = 1;
      var column = 1;
      function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
      }
      function position3() {
        var start2 = { line: lineno, column };
        return function(node2) {
          node2.position = new Position3(start2);
          whitespace2();
          return node2;
        };
      }
      function Position3(start2) {
        this.start = start2;
        this.end = { line: lineno, column };
        this.source = options.source;
      }
      Position3.prototype.content = style;
      var errorsList = [];
      function error(msg) {
        var err = new Error(
          options.source + ":" + lineno + ":" + column + ": " + msg
        );
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options.silent) {
          errorsList.push(err);
        } else {
          throw err;
        }
      }
      function match(re2) {
        var m = re2.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
      }
      function whitespace2() {
        match(WHITESPACE_REGEX);
      }
      function comments(rules) {
        var c;
        rules = rules || [];
        while (c = comment2()) {
          if (c !== false) {
            rules.push(c);
          }
        }
        return rules;
      }
      function comment2() {
        var pos = position3();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i = 2;
        while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {
          ++i;
        }
        i += 2;
        if (EMPTY_STRING === style.charAt(i - 1)) {
          return error("End of comment missing");
        }
        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;
        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }
      function declaration() {
        var pos = position3();
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment2();
        if (!match(COLON_REGEX)) return error("property missing ':'");
        var val = match(VALUE_REGEX);
        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        match(SEMICOLON_REGEX);
        return ret;
      }
      function declarations() {
        var decls = [];
        comments(decls);
        var decl;
        while (decl = declaration()) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }
        return decls;
      }
      whitespace2();
      return declarations();
    };
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }
  }
});

// node_modules/style-to-object/index.js
var require_style_to_object = __commonJS({
  "node_modules/style-to-object/index.js"(exports, module2) {
    var parse5 = require_inline_style_parser();
    function StyleToObject2(style, iterator) {
      var output = null;
      if (!style || typeof style !== "string") {
        return output;
      }
      var declaration;
      var declarations = parse5(style);
      var hasIterator = typeof iterator === "function";
      var property;
      var value;
      for (var i = 0, len = declarations.length; i < len; i++) {
        declaration = declarations[i];
        property = declaration.property;
        value = declaration.value;
        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          output || (output = {});
          output[property] = value;
        }
      }
      return output;
    }
    module2.exports = StyleToObject2;
    module2.exports.default = StyleToObject2;
  }
});

// node_modules/vscode-oniguruma/release/main.js
var require_main = __commonJS({
  "node_modules/vscode-oniguruma/release/main.js"(exports, module2) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.onig = t() : e.onig = t();
    }(exports, () => {
      return e = { 770: function(e2, t2, n) {
        "use strict";
        var r = this && this.__importDefault || function(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.setDefaultDebugCall = t2.createOnigScanner = t2.createOnigString = t2.loadWASM = t2.OnigScanner = t2.OnigString = void 0;
        const i = r(n(418));
        let o = null, a = false;
        class s {
          static _utf8ByteLength(e3) {
            let t3 = 0;
            for (let n2 = 0, r2 = e3.length; n2 < r2; n2++) {
              const i2 = e3.charCodeAt(n2);
              let o2 = i2, a2 = false;
              if (i2 >= 55296 && i2 <= 56319 && n2 + 1 < r2) {
                const t4 = e3.charCodeAt(n2 + 1);
                t4 >= 56320 && t4 <= 57343 && (o2 = 65536 + (i2 - 55296 << 10) | t4 - 56320, a2 = true);
              }
              t3 += o2 <= 127 ? 1 : o2 <= 2047 ? 2 : o2 <= 65535 ? 3 : 4, a2 && n2++;
            }
            return t3;
          }
          constructor(e3) {
            const t3 = e3.length, n2 = s._utf8ByteLength(e3), r2 = n2 !== t3, i2 = r2 ? new Uint32Array(t3 + 1) : null;
            r2 && (i2[t3] = n2);
            const o2 = r2 ? new Uint32Array(n2 + 1) : null;
            r2 && (o2[n2] = t3);
            const a2 = new Uint8Array(n2);
            let f2 = 0;
            for (let n3 = 0; n3 < t3; n3++) {
              const s2 = e3.charCodeAt(n3);
              let u2 = s2, c2 = false;
              if (s2 >= 55296 && s2 <= 56319 && n3 + 1 < t3) {
                const t4 = e3.charCodeAt(n3 + 1);
                t4 >= 56320 && t4 <= 57343 && (u2 = 65536 + (s2 - 55296 << 10) | t4 - 56320, c2 = true);
              }
              r2 && (i2[n3] = f2, c2 && (i2[n3 + 1] = f2), u2 <= 127 ? o2[f2 + 0] = n3 : u2 <= 2047 ? (o2[f2 + 0] = n3, o2[f2 + 1] = n3) : u2 <= 65535 ? (o2[f2 + 0] = n3, o2[f2 + 1] = n3, o2[f2 + 2] = n3) : (o2[f2 + 0] = n3, o2[f2 + 1] = n3, o2[f2 + 2] = n3, o2[f2 + 3] = n3)), u2 <= 127 ? a2[f2++] = u2 : u2 <= 2047 ? (a2[f2++] = 192 | (1984 & u2) >>> 6, a2[f2++] = 128 | (63 & u2) >>> 0) : u2 <= 65535 ? (a2[f2++] = 224 | (61440 & u2) >>> 12, a2[f2++] = 128 | (4032 & u2) >>> 6, a2[f2++] = 128 | (63 & u2) >>> 0) : (a2[f2++] = 240 | (1835008 & u2) >>> 18, a2[f2++] = 128 | (258048 & u2) >>> 12, a2[f2++] = 128 | (4032 & u2) >>> 6, a2[f2++] = 128 | (63 & u2) >>> 0), c2 && n3++;
            }
            this.utf16Length = t3, this.utf8Length = n2, this.utf16Value = e3, this.utf8Value = a2, this.utf16OffsetToUtf8 = i2, this.utf8OffsetToUtf16 = o2;
          }
          createString(e3) {
            const t3 = e3._omalloc(this.utf8Length);
            return e3.HEAPU8.set(this.utf8Value, t3), t3;
          }
        }
        class f {
          constructor(e3) {
            if (this.id = ++f.LAST_ID, !o) throw new Error("Must invoke loadWASM first.");
            this._onigBinding = o, this.content = e3;
            const t3 = new s(e3);
            this.utf16Length = t3.utf16Length, this.utf8Length = t3.utf8Length, this.utf16OffsetToUtf8 = t3.utf16OffsetToUtf8, this.utf8OffsetToUtf16 = t3.utf8OffsetToUtf16, this.utf8Length < 1e4 && !f._sharedPtrInUse ? (f._sharedPtr || (f._sharedPtr = o._omalloc(1e4)), f._sharedPtrInUse = true, o.HEAPU8.set(t3.utf8Value, f._sharedPtr), this.ptr = f._sharedPtr) : this.ptr = t3.createString(o);
          }
          convertUtf8OffsetToUtf16(e3) {
            return this.utf8OffsetToUtf16 ? e3 < 0 ? 0 : e3 > this.utf8Length ? this.utf16Length : this.utf8OffsetToUtf16[e3] : e3;
          }
          convertUtf16OffsetToUtf8(e3) {
            return this.utf16OffsetToUtf8 ? e3 < 0 ? 0 : e3 > this.utf16Length ? this.utf8Length : this.utf16OffsetToUtf8[e3] : e3;
          }
          dispose() {
            this.ptr === f._sharedPtr ? f._sharedPtrInUse = false : this._onigBinding._ofree(this.ptr);
          }
        }
        t2.OnigString = f, f.LAST_ID = 0, f._sharedPtr = 0, f._sharedPtrInUse = false;
        class u {
          constructor(e3, t3) {
            var n2, r2;
            if (!o) throw new Error("Must invoke loadWASM first.");
            const i2 = [], a2 = [];
            for (let t4 = 0, n3 = e3.length; t4 < n3; t4++) {
              const n4 = new s(e3[t4]);
              i2[t4] = n4.createString(o), a2[t4] = n4.utf8Length;
            }
            const f2 = o._omalloc(4 * e3.length);
            o.HEAPU32.set(i2, f2 / 4);
            const u2 = o._omalloc(4 * e3.length);
            o.HEAPU32.set(a2, u2 / 4), this._onigBinding = o, this._options = null !== (n2 = null == t3 ? void 0 : t3.options) && void 0 !== n2 ? n2 : [10];
            const c2 = this.onigOptions(this._options), _2 = this.onigSyntax(null !== (r2 = null == t3 ? void 0 : t3.syntax) && void 0 !== r2 ? r2 : 0), d = o._createOnigScanner(f2, u2, e3.length, c2, _2);
            this._ptr = d;
            for (let t4 = 0, n3 = e3.length; t4 < n3; t4++) o._ofree(i2[t4]);
            o._ofree(u2), o._ofree(f2), 0 === d && function(e4) {
              throw new Error(e4.UTF8ToString(e4._getLastOnigError()));
            }(o);
          }
          dispose() {
            this._onigBinding._freeOnigScanner(this._ptr);
          }
          findNextMatchSync(e3, t3, n2) {
            let r2 = a, i2 = this._options;
            if (Array.isArray(n2) ? (n2.includes(25) && (r2 = true), i2 = i2.concat(n2)) : "boolean" == typeof n2 && (r2 = n2), "string" == typeof e3) {
              e3 = new f(e3);
              const n3 = this._findNextMatchSync(e3, t3, r2, i2);
              return e3.dispose(), n3;
            }
            return this._findNextMatchSync(e3, t3, r2, i2);
          }
          _findNextMatchSync(e3, t3, n2, r2) {
            const i2 = this._onigBinding, o2 = this.onigOptions(r2);
            let a2;
            if (a2 = n2 ? i2._findNextOnigScannerMatchDbg(this._ptr, e3.id, e3.ptr, e3.utf8Length, e3.convertUtf16OffsetToUtf8(t3), o2) : i2._findNextOnigScannerMatch(this._ptr, e3.id, e3.ptr, e3.utf8Length, e3.convertUtf16OffsetToUtf8(t3), o2), 0 === a2) return null;
            const s2 = i2.HEAPU32;
            let f2 = a2 / 4;
            const u2 = s2[f2++], c2 = s2[f2++];
            let _2 = [];
            for (let t4 = 0; t4 < c2; t4++) {
              const n3 = e3.convertUtf8OffsetToUtf16(s2[f2++]), r3 = e3.convertUtf8OffsetToUtf16(s2[f2++]);
              _2[t4] = { start: n3, end: r3, length: r3 - n3 };
            }
            return { index: u2, captureIndices: _2 };
          }
          onigOptions(e3) {
            return e3.map((e4) => this.onigOption(e4)).reduce((e4, t3) => e4 | t3, this._onigBinding.ONIG_OPTION_NONE);
          }
          onigSyntax(e3) {
            switch (e3) {
              case 0:
                return this._onigBinding.ONIG_SYNTAX_DEFAULT;
              case 1:
                return this._onigBinding.ONIG_SYNTAX_ASIS;
              case 2:
                return this._onigBinding.ONIG_SYNTAX_POSIX_BASIC;
              case 3:
                return this._onigBinding.ONIG_SYNTAX_POSIX_EXTENDED;
              case 4:
                return this._onigBinding.ONIG_SYNTAX_EMACS;
              case 5:
                return this._onigBinding.ONIG_SYNTAX_GREP;
              case 6:
                return this._onigBinding.ONIG_SYNTAX_GNU_REGEX;
              case 7:
                return this._onigBinding.ONIG_SYNTAX_JAVA;
              case 8:
                return this._onigBinding.ONIG_SYNTAX_PERL;
              case 9:
                return this._onigBinding.ONIG_SYNTAX_PERL_NG;
              case 10:
                return this._onigBinding.ONIG_SYNTAX_RUBY;
              case 11:
                return this._onigBinding.ONIG_SYNTAX_PYTHON;
              case 12:
                return this._onigBinding.ONIG_SYNTAX_ONIGURUMA;
            }
          }
          onigOption(e3) {
            switch (e3) {
              case 1:
                return this._onigBinding.ONIG_OPTION_NONE;
              case 0:
              case 25:
                return this._onigBinding.ONIG_OPTION_DEFAULT;
              case 2:
                return this._onigBinding.ONIG_OPTION_IGNORECASE;
              case 3:
                return this._onigBinding.ONIG_OPTION_EXTEND;
              case 4:
                return this._onigBinding.ONIG_OPTION_MULTILINE;
              case 5:
                return this._onigBinding.ONIG_OPTION_SINGLELINE;
              case 6:
                return this._onigBinding.ONIG_OPTION_FIND_LONGEST;
              case 7:
                return this._onigBinding.ONIG_OPTION_FIND_NOT_EMPTY;
              case 8:
                return this._onigBinding.ONIG_OPTION_NEGATE_SINGLELINE;
              case 9:
                return this._onigBinding.ONIG_OPTION_DONT_CAPTURE_GROUP;
              case 10:
                return this._onigBinding.ONIG_OPTION_CAPTURE_GROUP;
              case 11:
                return this._onigBinding.ONIG_OPTION_NOTBOL;
              case 12:
                return this._onigBinding.ONIG_OPTION_NOTEOL;
              case 13:
                return this._onigBinding.ONIG_OPTION_CHECK_VALIDITY_OF_STRING;
              case 14:
                return this._onigBinding.ONIG_OPTION_IGNORECASE_IS_ASCII;
              case 15:
                return this._onigBinding.ONIG_OPTION_WORD_IS_ASCII;
              case 16:
                return this._onigBinding.ONIG_OPTION_DIGIT_IS_ASCII;
              case 17:
                return this._onigBinding.ONIG_OPTION_SPACE_IS_ASCII;
              case 18:
                return this._onigBinding.ONIG_OPTION_POSIX_IS_ASCII;
              case 19:
                return this._onigBinding.ONIG_OPTION_TEXT_SEGMENT_EXTENDED_GRAPHEME_CLUSTER;
              case 20:
                return this._onigBinding.ONIG_OPTION_TEXT_SEGMENT_WORD;
              case 21:
                return this._onigBinding.ONIG_OPTION_NOT_BEGIN_STRING;
              case 22:
                return this._onigBinding.ONIG_OPTION_NOT_END_STRING;
              case 23:
                return this._onigBinding.ONIG_OPTION_NOT_BEGIN_POSITION;
              case 24:
                return this._onigBinding.ONIG_OPTION_CALLBACK_EACH_MATCH;
            }
          }
        }
        t2.OnigScanner = u;
        let c = false, _ = null;
        t2.loadWASM = function(e3) {
          if (c) return _;
          let t3, n2, r2, a2;
          if (c = true, function(e4) {
            return "function" == typeof e4.instantiator;
          }(e3)) t3 = e3.instantiator, n2 = e3.print;
          else {
            let r3;
            !function(e4) {
              return void 0 !== e4.data;
            }(e3) ? r3 = e3 : (r3 = e3.data, n2 = e3.print), t3 = function(e4) {
              return "undefined" != typeof Response && e4 instanceof Response;
            }(r3) ? "function" == typeof WebAssembly.instantiateStreaming ? /* @__PURE__ */ function(e4) {
              return (t4) => WebAssembly.instantiateStreaming(e4, t4);
            }(r3) : /* @__PURE__ */ function(e4) {
              return async (t4) => {
                const n3 = await e4.arrayBuffer();
                return WebAssembly.instantiate(n3, t4);
              };
            }(r3) : /* @__PURE__ */ function(e4) {
              return (t4) => WebAssembly.instantiate(e4, t4);
            }(r3);
          }
          return _ = new Promise((e4, t4) => {
            r2 = e4, a2 = t4;
          }), function(e4, t4, n3, r3) {
            (0, i.default)({ print: t4, instantiateWasm: (t5, n4) => {
              if ("undefined" == typeof performance) {
                const e5 = () => Date.now();
                t5.env.emscripten_get_now = e5, t5.wasi_snapshot_preview1.emscripten_get_now = e5;
              }
              return e4(t5).then((e5) => n4(e5.instance), r3), {};
            } }).then((e5) => {
              o = e5, n3();
            });
          }(t3, n2, r2, a2), _;
        }, t2.createOnigString = function(e3) {
          return new f(e3);
        }, t2.createOnigScanner = function(e3) {
          return new u(e3);
        }, t2.setDefaultDebugCall = function(e3) {
          a = e3;
        };
      }, 418: (e2) => {
        var t2 = ("undefined" != typeof document && document.currentScript && document.currentScript.src, function(e3 = {}) {
          var t3, n, r = e3;
          r.ready = new Promise((e4, r2) => {
            t3 = e4, n = r2;
          });
          var i, o = Object.assign({}, r);
          "undefined" != typeof read && read, i = (e4) => {
            if ("function" == typeof readbuffer) return new Uint8Array(readbuffer(e4));
            let t4 = read(e4, "binary");
            return "object" == typeof t4 || P(n2), t4;
            var n2;
          }, "undefined" == typeof clearTimeout && (globalThis.clearTimeout = (e4) => {
          }), "undefined" == typeof setTimeout && (globalThis.setTimeout = (e4) => "function" == typeof e4 ? e4() : P()), "undefined" != typeof scriptArgs && scriptArgs, "undefined" != typeof onig_print && ("undefined" == typeof console && (console = {}), console.log = onig_print, console.warn = console.error = "undefined" != typeof printErr ? printErr : onig_print);
          var a, s, f = r.print || console.log.bind(console), u = r.printErr || console.error.bind(console);
          Object.assign(r, o), o = null, r.arguments && r.arguments, r.thisProgram && r.thisProgram, r.quit && r.quit, r.wasmBinary && (a = r.wasmBinary), r.noExitRuntime, "object" != typeof WebAssembly && P("no native wasm support detected");
          var c, _, d, g, l, h, p, O, v = false;
          function m() {
            var e4 = s.buffer;
            r.HEAP8 = c = new Int8Array(e4), r.HEAP16 = d = new Int16Array(e4), r.HEAPU8 = _ = new Uint8Array(e4), r.HEAPU16 = g = new Uint16Array(e4), r.HEAP32 = l = new Int32Array(e4), r.HEAPU32 = h = new Uint32Array(e4), r.HEAPF32 = p = new Float32Array(e4), r.HEAPF64 = O = new Float64Array(e4);
          }
          var y = [], I = [], T = [];
          var N = 0, A = null, S = null;
          function P(e4) {
            r.onAbort && r.onAbort(e4), u(e4 = "Aborted(" + e4 + ")"), v = true, e4 += ". Build with -sASSERTIONS for more info.";
            var t4 = new WebAssembly.RuntimeError(e4);
            throw n(t4), t4;
          }
          var E, w;
          function b(e4) {
            return e4.startsWith("data:application/octet-stream;base64,");
          }
          function C(e4) {
            if (e4 == E && a) return new Uint8Array(a);
            if (i) return i(e4);
            throw "both async and sync fetching of the wasm failed";
          }
          function U(e4, t4, n2) {
            return function(e5) {
              return Promise.resolve().then(() => C(e5));
            }(e4).then((e5) => WebAssembly.instantiate(e5, t4)).then((e5) => e5).then(n2, (e5) => {
              u(`failed to asynchronously prepare wasm: ${e5}`), P(e5);
            });
          }
          b(E = "onig.wasm") || (w = E, E = r.locateFile ? r.locateFile(w, "") : "" + w);
          var G = (e4) => {
            for (; e4.length > 0; ) e4.shift()(r);
          }, B = void 0, R = (e4) => {
            for (var t4 = "", n2 = e4; _[n2]; ) t4 += B[_[n2++]];
            return t4;
          }, W = {}, L = {}, D = {}, x = void 0, M = (e4) => {
            throw new x(e4);
          }, F = void 0, X = (e4, t4, n2) => {
            function r2(t5) {
              var r3 = n2(t5);
              r3.length !== e4.length && ((e5) => {
                throw new F(e5);
              })("Mismatched type converter count");
              for (var i3 = 0; i3 < e4.length; ++i3) k(e4[i3], r3[i3]);
            }
            e4.forEach(function(e5) {
              D[e5] = t4;
            });
            var i2 = new Array(t4.length), o2 = [], a2 = 0;
            t4.forEach((e5, t5) => {
              L.hasOwnProperty(e5) ? i2[t5] = L[e5] : (o2.push(e5), W.hasOwnProperty(e5) || (W[e5] = []), W[e5].push(() => {
                i2[t5] = L[e5], ++a2 === o2.length && r2(i2);
              }));
            }), 0 === o2.length && r2(i2);
          };
          function k(e4, t4, n2 = {}) {
            if (!("argPackAdvance" in t4)) throw new TypeError("registerType registeredInstance requires argPackAdvance");
            return function(e5, t5, n3 = {}) {
              var r2 = t5.name;
              if (e5 || M(`type "${r2}" must have a positive integer typeid pointer`), L.hasOwnProperty(e5)) {
                if (n3.ignoreDuplicateRegistrations) return;
                M(`Cannot register type '${r2}' twice`);
              }
              if (L[e5] = t5, delete D[e5], W.hasOwnProperty(e5)) {
                var i2 = W[e5];
                delete W[e5], i2.forEach((e6) => e6());
              }
            }(e4, t4, n2);
          }
          function H() {
            this.allocated = [void 0], this.freelist = [];
          }
          var Y = new H(), j = () => {
            for (var e4 = 0, t4 = Y.reserved; t4 < Y.allocated.length; ++t4) void 0 !== Y.allocated[t4] && ++e4;
            return e4;
          }, V = (e4) => (e4 || M("Cannot use deleted val. handle = " + e4), Y.get(e4).value), $ = (e4) => {
            switch (e4) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return Y.allocate({ refcount: 1, value: e4 });
            }
          };
          function z(e4) {
            return this.fromWireType(l[e4 >> 2]);
          }
          var q = (e4, t4) => {
            switch (t4) {
              case 4:
                return function(e5) {
                  return this.fromWireType(p[e5 >> 2]);
                };
              case 8:
                return function(e5) {
                  return this.fromWireType(O[e5 >> 3]);
                };
              default:
                throw new TypeError(`invalid float width (${t4}): ${e4}`);
            }
          }, K = (e4, t4, n2) => {
            switch (t4) {
              case 1:
                return n2 ? (e5) => c[e5 >> 0] : (e5) => _[e5 >> 0];
              case 2:
                return n2 ? (e5) => d[e5 >> 1] : (e5) => g[e5 >> 1];
              case 4:
                return n2 ? (e5) => l[e5 >> 2] : (e5) => h[e5 >> 2];
              default:
                throw new TypeError(`invalid integer width (${t4}): ${e4}`);
            }
          };
          function J(e4) {
            return this.fromWireType(h[e4 >> 2]);
          }
          var Q, Z = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, ee = (e4, t4, n2) => {
            for (var r2 = t4 + n2, i2 = t4; e4[i2] && !(i2 >= r2); ) ++i2;
            if (i2 - t4 > 16 && e4.buffer && Z) return Z.decode(e4.subarray(t4, i2));
            for (var o2 = ""; t4 < i2; ) {
              var a2 = e4[t4++];
              if (128 & a2) {
                var s2 = 63 & e4[t4++];
                if (192 != (224 & a2)) {
                  var f2 = 63 & e4[t4++];
                  if ((a2 = 224 == (240 & a2) ? (15 & a2) << 12 | s2 << 6 | f2 : (7 & a2) << 18 | s2 << 12 | f2 << 6 | 63 & e4[t4++]) < 65536) o2 += String.fromCharCode(a2);
                  else {
                    var u2 = a2 - 65536;
                    o2 += String.fromCharCode(55296 | u2 >> 10, 56320 | 1023 & u2);
                  }
                } else o2 += String.fromCharCode((31 & a2) << 6 | s2);
              } else o2 += String.fromCharCode(a2);
            }
            return o2;
          }, te = (e4, t4) => e4 ? ee(_, e4, t4) : "", ne = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, re2 = (e4, t4) => {
            for (var n2 = e4, r2 = n2 >> 1, i2 = r2 + t4 / 2; !(r2 >= i2) && g[r2]; ) ++r2;
            if ((n2 = r2 << 1) - e4 > 32 && ne) return ne.decode(_.subarray(e4, n2));
            for (var o2 = "", a2 = 0; !(a2 >= t4 / 2); ++a2) {
              var s2 = d[e4 + 2 * a2 >> 1];
              if (0 == s2) break;
              o2 += String.fromCharCode(s2);
            }
            return o2;
          }, ie = (e4, t4, n2) => {
            if (void 0 === n2 && (n2 = 2147483647), n2 < 2) return 0;
            for (var r2 = t4, i2 = (n2 -= 2) < 2 * e4.length ? n2 / 2 : e4.length, o2 = 0; o2 < i2; ++o2) {
              var a2 = e4.charCodeAt(o2);
              d[t4 >> 1] = a2, t4 += 2;
            }
            return d[t4 >> 1] = 0, t4 - r2;
          }, oe = (e4) => 2 * e4.length, ae = (e4, t4) => {
            for (var n2 = 0, r2 = ""; !(n2 >= t4 / 4); ) {
              var i2 = l[e4 + 4 * n2 >> 2];
              if (0 == i2) break;
              if (++n2, i2 >= 65536) {
                var o2 = i2 - 65536;
                r2 += String.fromCharCode(55296 | o2 >> 10, 56320 | 1023 & o2);
              } else r2 += String.fromCharCode(i2);
            }
            return r2;
          }, se = (e4, t4, n2) => {
            if (void 0 === n2 && (n2 = 2147483647), n2 < 4) return 0;
            for (var r2 = t4, i2 = r2 + n2 - 4, o2 = 0; o2 < e4.length; ++o2) {
              var a2 = e4.charCodeAt(o2);
              if (a2 >= 55296 && a2 <= 57343 && (a2 = 65536 + ((1023 & a2) << 10) | 1023 & e4.charCodeAt(++o2)), l[t4 >> 2] = a2, (t4 += 4) + 4 > i2) break;
            }
            return l[t4 >> 2] = 0, t4 - r2;
          }, fe = (e4) => {
            for (var t4 = 0, n2 = 0; n2 < e4.length; ++n2) {
              var r2 = e4.charCodeAt(n2);
              r2 >= 55296 && r2 <= 57343 && ++n2, t4 += 4;
            }
            return t4;
          };
          Q = () => performance.now();
          var ue = (e4) => {
            var t4 = (e4 - s.buffer.byteLength + 65535) / 65536;
            try {
              return s.grow(t4), m(), 1;
            } catch (e5) {
            }
          }, ce = [null, [], []];
          (() => {
            for (var e4 = new Array(256), t4 = 0; t4 < 256; ++t4) e4[t4] = String.fromCharCode(t4);
            B = e4;
          })(), x = r.BindingError = class extends Error {
            constructor(e4) {
              super(e4), this.name = "BindingError";
            }
          }, F = r.InternalError = class extends Error {
            constructor(e4) {
              super(e4), this.name = "InternalError";
            }
          }, Object.assign(H.prototype, { get(e4) {
            return this.allocated[e4];
          }, has(e4) {
            return void 0 !== this.allocated[e4];
          }, allocate(e4) {
            var t4 = this.freelist.pop() || this.allocated.length;
            return this.allocated[t4] = e4, t4;
          }, free(e4) {
            this.allocated[e4] = void 0, this.freelist.push(e4);
          } }), Y.allocated.push({ value: void 0 }, { value: null }, { value: true }, { value: false }), Y.reserved = Y.allocated.length, r.count_emval_handles = j;
          var _e, de = { _embind_register_bigint: (e4, t4, n2, r2, i2) => {
          }, _embind_register_bool: (e4, t4, n2, r2) => {
            k(e4, { name: t4 = R(t4), fromWireType: function(e5) {
              return !!e5;
            }, toWireType: function(e5, t5) {
              return t5 ? n2 : r2;
            }, argPackAdvance: 8, readValueFromPointer: function(e5) {
              return this.fromWireType(_[e5]);
            }, destructorFunction: null });
          }, _embind_register_constant: (e4, t4, n2) => {
            e4 = R(e4), X([], [t4], function(t5) {
              return t5 = t5[0], r[e4] = t5.fromWireType(n2), [];
            });
          }, _embind_register_emval: (e4, t4) => {
            k(e4, { name: t4 = R(t4), fromWireType: (e5) => {
              var t5 = V(e5);
              return ((e6) => {
                e6 >= Y.reserved && 0 == --Y.get(e6).refcount && Y.free(e6);
              })(e5), t5;
            }, toWireType: (e5, t5) => $(t5), argPackAdvance: 8, readValueFromPointer: z, destructorFunction: null });
          }, _embind_register_float: (e4, t4, n2) => {
            k(e4, { name: t4 = R(t4), fromWireType: (e5) => e5, toWireType: (e5, t5) => t5, argPackAdvance: 8, readValueFromPointer: q(t4, n2), destructorFunction: null });
          }, _embind_register_integer: (e4, t4, n2, r2, i2) => {
            t4 = R(t4), -1 === i2 && (i2 = 4294967295);
            var o2 = (e5) => e5;
            if (0 === r2) {
              var a2 = 32 - 8 * n2;
              o2 = (e5) => e5 << a2 >>> a2;
            }
            var s2 = t4.includes("unsigned");
            k(e4, { name: t4, fromWireType: o2, toWireType: s2 ? function(e5, t5) {
              return this.name, t5 >>> 0;
            } : function(e5, t5) {
              return this.name, t5;
            }, argPackAdvance: 8, readValueFromPointer: K(t4, n2, 0 !== r2), destructorFunction: null });
          }, _embind_register_memory_view: (e4, t4, n2) => {
            var r2 = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][t4];
            function i2(e5) {
              var t5 = h[e5 >> 2], n3 = h[e5 + 4 >> 2];
              return new r2(c.buffer, n3, t5);
            }
            k(e4, { name: n2 = R(n2), fromWireType: i2, argPackAdvance: 8, readValueFromPointer: i2 }, { ignoreDuplicateRegistrations: true });
          }, _embind_register_std_string: (e4, t4) => {
            var n2 = "std::string" === (t4 = R(t4));
            k(e4, { name: t4, fromWireType: (e5) => {
              var t5, r2 = h[e5 >> 2], i2 = e5 + 4;
              if (n2) for (var o2 = i2, a2 = 0; a2 <= r2; ++a2) {
                var s2 = i2 + a2;
                if (a2 == r2 || 0 == _[s2]) {
                  var f2 = te(o2, s2 - o2);
                  void 0 === t5 ? t5 = f2 : (t5 += String.fromCharCode(0), t5 += f2), o2 = s2 + 1;
                }
              }
              else {
                var u2 = new Array(r2);
                for (a2 = 0; a2 < r2; ++a2) u2[a2] = String.fromCharCode(_[i2 + a2]);
                t5 = u2.join("");
              }
              return he(e5), t5;
            }, toWireType: (e5, t5) => {
              var r2;
              t5 instanceof ArrayBuffer && (t5 = new Uint8Array(t5));
              var i2 = "string" == typeof t5;
              i2 || t5 instanceof Uint8Array || t5 instanceof Uint8ClampedArray || t5 instanceof Int8Array || M("Cannot pass non-string to std::string"), r2 = n2 && i2 ? ((e6) => {
                for (var t6 = 0, n3 = 0; n3 < e6.length; ++n3) {
                  var r3 = e6.charCodeAt(n3);
                  r3 <= 127 ? t6++ : r3 <= 2047 ? t6 += 2 : r3 >= 55296 && r3 <= 57343 ? (t6 += 4, ++n3) : t6 += 3;
                }
                return t6;
              })(t5) : t5.length;
              var o2 = le(4 + r2 + 1), a2 = o2 + 4;
              if (h[o2 >> 2] = r2, n2 && i2) ((e6, t6, n3, r3) => {
                if (!(r3 > 0)) return 0;
                for (var i3 = n3, o3 = n3 + r3 - 1, a3 = 0; a3 < e6.length; ++a3) {
                  var s3 = e6.charCodeAt(a3);
                  if (s3 >= 55296 && s3 <= 57343 && (s3 = 65536 + ((1023 & s3) << 10) | 1023 & e6.charCodeAt(++a3)), s3 <= 127) {
                    if (n3 >= o3) break;
                    t6[n3++] = s3;
                  } else if (s3 <= 2047) {
                    if (n3 + 1 >= o3) break;
                    t6[n3++] = 192 | s3 >> 6, t6[n3++] = 128 | 63 & s3;
                  } else if (s3 <= 65535) {
                    if (n3 + 2 >= o3) break;
                    t6[n3++] = 224 | s3 >> 12, t6[n3++] = 128 | s3 >> 6 & 63, t6[n3++] = 128 | 63 & s3;
                  } else {
                    if (n3 + 3 >= o3) break;
                    t6[n3++] = 240 | s3 >> 18, t6[n3++] = 128 | s3 >> 12 & 63, t6[n3++] = 128 | s3 >> 6 & 63, t6[n3++] = 128 | 63 & s3;
                  }
                }
                t6[n3] = 0;
              })(t5, _, a2, r2 + 1);
              else if (i2) for (var s2 = 0; s2 < r2; ++s2) {
                var f2 = t5.charCodeAt(s2);
                f2 > 255 && (he(a2), M("String has UTF-16 code units that do not fit in 8 bits")), _[a2 + s2] = f2;
              }
              else for (s2 = 0; s2 < r2; ++s2) _[a2 + s2] = t5[s2];
              return null !== e5 && e5.push(he, o2), o2;
            }, argPackAdvance: 8, readValueFromPointer: J, destructorFunction: (e5) => he(e5) });
          }, _embind_register_std_wstring: (e4, t4, n2) => {
            var r2, i2, o2, a2, s2;
            n2 = R(n2), 2 === t4 ? (r2 = re2, i2 = ie, a2 = oe, o2 = () => g, s2 = 1) : 4 === t4 && (r2 = ae, i2 = se, a2 = fe, o2 = () => h, s2 = 2), k(e4, { name: n2, fromWireType: (e5) => {
              for (var n3, i3 = h[e5 >> 2], a3 = o2(), f2 = e5 + 4, u2 = 0; u2 <= i3; ++u2) {
                var c2 = e5 + 4 + u2 * t4;
                if (u2 == i3 || 0 == a3[c2 >> s2]) {
                  var _2 = r2(f2, c2 - f2);
                  void 0 === n3 ? n3 = _2 : (n3 += String.fromCharCode(0), n3 += _2), f2 = c2 + t4;
                }
              }
              return he(e5), n3;
            }, toWireType: (e5, r3) => {
              "string" != typeof r3 && M(`Cannot pass non-string to C++ string type ${n2}`);
              var o3 = a2(r3), f2 = le(4 + o3 + t4);
              return h[f2 >> 2] = o3 >> s2, i2(r3, f2 + 4, o3 + t4), null !== e5 && e5.push(he, f2), f2;
            }, argPackAdvance: 8, readValueFromPointer: z, destructorFunction: (e5) => he(e5) });
          }, _embind_register_void: (e4, t4) => {
            k(e4, { isVoid: true, name: t4 = R(t4), argPackAdvance: 0, fromWireType: () => {
            }, toWireType: (e5, t5) => {
            } });
          }, emscripten_get_now: Q, emscripten_memcpy_big: (e4, t4, n2) => _.copyWithin(e4, t4, t4 + n2), emscripten_resize_heap: (e4) => {
            var t4 = _.length, n2 = 2147483648;
            if ((e4 >>>= 0) > n2) return false;
            for (var r2, i2 = 1; i2 <= 4; i2 *= 2) {
              var o2 = t4 * (1 + 0.2 / i2);
              o2 = Math.min(o2, e4 + 100663296);
              var a2 = Math.min(n2, (r2 = Math.max(e4, o2)) + (65536 - r2 % 65536) % 65536);
              if (ue(a2)) return true;
            }
            return false;
          }, fd_write: (e4, t4, n2, r2) => {
            for (var i2 = 0, o2 = 0; o2 < n2; o2++) {
              var a2 = h[t4 >> 2], s2 = h[t4 + 4 >> 2];
              t4 += 8;
              for (var c2 = 0; c2 < s2; c2++) d2 = e4, g2 = _[a2 + c2], l2 = void 0, l2 = ce[d2], 0 === g2 || 10 === g2 ? ((1 === d2 ? f : u)(ee(l2, 0)), l2.length = 0) : l2.push(g2);
              i2 += s2;
            }
            var d2, g2, l2;
            return h[r2 >> 2] = i2, 0;
          } }, ge = function() {
            var e4, t4, i2, o2, f2 = { env: de, wasi_snapshot_preview1: de };
            function c2(e5, t5) {
              var n2, i3 = e5.exports;
              return s = (ge = i3).memory, m(), ge.__indirect_function_table, n2 = ge.__wasm_call_ctors, I.unshift(n2), function(e6) {
                if (N--, r.monitorRunDependencies && r.monitorRunDependencies(N), 0 == N && (null !== A && (clearInterval(A), A = null), S)) {
                  var t6 = S;
                  S = null, t6();
                }
              }(), i3;
            }
            if (N++, r.monitorRunDependencies && r.monitorRunDependencies(N), r.instantiateWasm) try {
              return r.instantiateWasm(f2, c2);
            } catch (e5) {
              u(`Module.instantiateWasm callback failed with error: ${e5}`), n(e5);
            }
            return (e4 = a, t4 = E, i2 = f2, o2 = function(e5) {
              c2(e5.instance);
            }, e4 || "function" != typeof WebAssembly.instantiateStreaming || b(t4) || "function" != typeof fetch ? U(t4, i2, o2) : fetch(t4, { credentials: "same-origin" }).then((e5) => WebAssembly.instantiateStreaming(e5, i2).then(o2, function(e6) {
              return u(`wasm streaming compile failed: ${e6}`), u("falling back to ArrayBuffer instantiation"), U(t4, i2, o2);
            }))).catch(n), {};
          }(), le = (e4) => (le = ge.malloc)(e4), he = (e4) => (he = ge.free)(e4);
          function pe() {
            function e4() {
              _e || (_e = true, r.calledRun = true, v || (G(I), t3(r), r.onRuntimeInitialized && r.onRuntimeInitialized(), function() {
                if (r.postRun) for ("function" == typeof r.postRun && (r.postRun = [r.postRun]); r.postRun.length; ) e5 = r.postRun.shift(), T.unshift(e5);
                var e5;
                G(T);
              }()));
            }
            N > 0 || (function() {
              if (r.preRun) for ("function" == typeof r.preRun && (r.preRun = [r.preRun]); r.preRun.length; ) e5 = r.preRun.shift(), y.unshift(e5);
              var e5;
              G(y);
            }(), N > 0 || (r.setStatus ? (r.setStatus("Running..."), setTimeout(function() {
              setTimeout(function() {
                r.setStatus("");
              }, 1), e4();
            }, 1)) : e4()));
          }
          if (r._omalloc = (e4) => (r._omalloc = ge.omalloc)(e4), r._ofree = (e4) => (r._ofree = ge.ofree)(e4), r._getLastOnigError = () => (r._getLastOnigError = ge.getLastOnigError)(), r._createOnigScanner = (e4, t4, n2, i2, o2) => (r._createOnigScanner = ge.createOnigScanner)(e4, t4, n2, i2, o2), r._freeOnigScanner = (e4) => (r._freeOnigScanner = ge.freeOnigScanner)(e4), r._findNextOnigScannerMatch = (e4, t4, n2, i2, o2, a2) => (r._findNextOnigScannerMatch = ge.findNextOnigScannerMatch)(e4, t4, n2, i2, o2, a2), r._findNextOnigScannerMatchDbg = (e4, t4, n2, i2, o2, a2) => (r._findNextOnigScannerMatchDbg = ge.findNextOnigScannerMatchDbg)(e4, t4, n2, i2, o2, a2), r.__embind_initialize_bindings = () => (r.__embind_initialize_bindings = ge._embind_initialize_bindings)(), r.dynCall_jiji = (e4, t4, n2, i2, o2) => (r.dynCall_jiji = ge.dynCall_jiji)(e4, t4, n2, i2, o2), r.UTF8ToString = te, S = function e4() {
            _e || pe(), _e || (S = e4);
          }, r.preInit) for ("function" == typeof r.preInit && (r.preInit = [r.preInit]); r.preInit.length > 0; ) r.preInit.pop()();
          return pe(), e3.ready;
        });
        e2.exports = t2;
      } }, t = {}, function n(r) {
        var i = t[r];
        if (void 0 !== i) return i.exports;
        var o = t[r] = { exports: {} };
        return e[r].call(o.exports, o, o.exports, n), o.exports;
      }(770);
      var e, t;
    });
  }
});

// node_modules/vscode-textmate/release/main.js
var require_main2 = __commonJS({
  "node_modules/vscode-textmate/release/main.js"(exports, module2) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.vscodetextmate = t() : e.vscodetextmate = t();
    }(exports, () => (() => {
      "use strict";
      var e = { 350: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.UseOnigurumaFindOptions = t2.DebugFlags = void 0, t2.DebugFlags = { InDebugMode: "undefined" != typeof process && !!process.env.VSCODE_TEXTMATE_DEBUG }, t2.UseOnigurumaFindOptions = false;
      }, 442: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.applyStateStackDiff = t2.diffStateStacksRefEq = void 0;
        const s = n(391);
        t2.diffStateStacksRefEq = function(e3, t3) {
          let n2 = 0;
          const s2 = [];
          let r = e3, i = t3;
          for (; r !== i; ) r && (!i || r.depth >= i.depth) ? (n2++, r = r.parent) : (s2.push(i.toStateStackFrame()), i = i.parent);
          return { pops: n2, newFrames: s2.reverse() };
        }, t2.applyStateStackDiff = function(e3, t3) {
          let n2 = e3;
          for (let e4 = 0; e4 < t3.pops; e4++) n2 = n2.parent;
          for (const e4 of t3.newFrames) n2 = s.StateStackImpl.pushFrame(n2, e4);
          return n2;
        };
      }, 36: (e2, t2) => {
        var n;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.toOptionalTokenType = t2.EncodedTokenAttributes = void 0, (n = t2.EncodedTokenAttributes || (t2.EncodedTokenAttributes = {})).toBinaryStr = function(e3) {
          return e3.toString(2).padStart(32, "0");
        }, n.print = function(e3) {
          const t3 = n.getLanguageId(e3), s = n.getTokenType(e3), r = n.getFontStyle(e3), i = n.getForeground(e3), o = n.getBackground(e3);
          console.log({ languageId: t3, tokenType: s, fontStyle: r, foreground: i, background: o });
        }, n.getLanguageId = function(e3) {
          return (255 & e3) >>> 0;
        }, n.getTokenType = function(e3) {
          return (768 & e3) >>> 8;
        }, n.containsBalancedBrackets = function(e3) {
          return 0 != (1024 & e3);
        }, n.getFontStyle = function(e3) {
          return (30720 & e3) >>> 11;
        }, n.getForeground = function(e3) {
          return (16744448 & e3) >>> 15;
        }, n.getBackground = function(e3) {
          return (4278190080 & e3) >>> 24;
        }, n.set = function(e3, t3, s, r, i, o, a) {
          let c = n.getLanguageId(e3), l = n.getTokenType(e3), u = n.containsBalancedBrackets(e3) ? 1 : 0, h = n.getFontStyle(e3), p = n.getForeground(e3), d = n.getBackground(e3);
          return 0 !== t3 && (c = t3), 8 !== s && (l = s), null !== r && (u = r ? 1 : 0), -1 !== i && (h = i), 0 !== o && (p = o), 0 !== a && (d = a), (c << 0 | l << 8 | u << 10 | h << 11 | p << 15 | d << 24) >>> 0;
        }, t2.toOptionalTokenType = function(e3) {
          return e3;
        };
      }, 996: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.BasicScopeAttributesProvider = t2.BasicScopeAttributes = void 0;
        const s = n(878);
        class r {
          constructor(e3, t3) {
            this.languageId = e3, this.tokenType = t3;
          }
        }
        t2.BasicScopeAttributes = r;
        class i {
          constructor(e3, t3) {
            this._getBasicScopeAttributes = new s.CachedFn((e4) => {
              const t4 = this._scopeToLanguage(e4), n2 = this._toStandardTokenType(e4);
              return new r(t4, n2);
            }), this._defaultAttributes = new r(e3, 8), this._embeddedLanguagesMatcher = new o(Object.entries(t3 || {}));
          }
          getDefaultAttributes() {
            return this._defaultAttributes;
          }
          getBasicScopeAttributes(e3) {
            return null === e3 ? i._NULL_SCOPE_METADATA : this._getBasicScopeAttributes.get(e3);
          }
          _scopeToLanguage(e3) {
            return this._embeddedLanguagesMatcher.match(e3) || 0;
          }
          _toStandardTokenType(e3) {
            const t3 = e3.match(i.STANDARD_TOKEN_TYPE_REGEXP);
            if (!t3) return 8;
            switch (t3[1]) {
              case "comment":
                return 1;
              case "string":
                return 2;
              case "regex":
                return 3;
              case "meta.embedded":
                return 0;
            }
            throw new Error("Unexpected match for standard token type!");
          }
        }
        t2.BasicScopeAttributesProvider = i, i._NULL_SCOPE_METADATA = new r(0, 0), i.STANDARD_TOKEN_TYPE_REGEXP = /\b(comment|string|regex|meta\.embedded)\b/;
        class o {
          constructor(e3) {
            if (0 === e3.length) this.values = null, this.scopesRegExp = null;
            else {
              this.values = new Map(e3);
              const t3 = e3.map(([e4, t4]) => s.escapeRegExpCharacters(e4));
              t3.sort(), t3.reverse(), this.scopesRegExp = new RegExp(`^((${t3.join(")|(")}))($|\\.)`, "");
            }
          }
          match(e3) {
            if (!this.scopesRegExp) return;
            const t3 = e3.match(this.scopesRegExp);
            return t3 ? this.values.get(t3[1]) : void 0;
          }
        }
      }, 947: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.LineTokens = t2.BalancedBracketSelectors = t2.StateStackImpl = t2.AttributedScopeStack = t2.Grammar = t2.createGrammar = void 0;
        const s = n(350), r = n(36), i = n(736), o = n(44), a = n(792), c = n(583), l = n(878), u = n(996), h = n(47);
        function p(e3, t3, n2, s2, r2) {
          const o2 = i.createMatchers(t3, d), c2 = a.RuleFactory.getCompiledRuleId(n2, s2, r2.repository);
          for (const n3 of o2) e3.push({ debugSelector: t3, matcher: n3.matcher, ruleId: c2, grammar: r2, priority: n3.priority });
        }
        function d(e3, t3) {
          if (t3.length < e3.length) return false;
          let n2 = 0;
          return e3.every((e4) => {
            for (let s2 = n2; s2 < t3.length; s2++) if (f(t3[s2], e4)) return n2 = s2 + 1, true;
            return false;
          });
        }
        function f(e3, t3) {
          if (!e3) return false;
          if (e3 === t3) return true;
          const n2 = t3.length;
          return e3.length > n2 && e3.substr(0, n2) === t3 && "." === e3[n2];
        }
        t2.createGrammar = function(e3, t3, n2, s2, r2, i2, o2, a2) {
          return new m(e3, t3, n2, s2, r2, i2, o2, a2);
        };
        class m {
          constructor(e3, t3, n2, s2, r2, o2, a2, c2) {
            if (this._rootScopeName = e3, this.balancedBracketSelectors = o2, this._onigLib = c2, this._basicScopeAttributesProvider = new u.BasicScopeAttributesProvider(n2, s2), this._rootId = -1, this._lastRuleId = 0, this._ruleId2desc = [null], this._includedGrammars = {}, this._grammarRepository = a2, this._grammar = g(t3, null), this._injections = null, this._tokenTypeMatchers = [], r2) for (const e4 of Object.keys(r2)) {
              const t4 = i.createMatchers(e4, d);
              for (const n3 of t4) this._tokenTypeMatchers.push({ matcher: n3.matcher, type: r2[e4] });
            }
          }
          get themeProvider() {
            return this._grammarRepository;
          }
          dispose() {
            for (const e3 of this._ruleId2desc) e3 && e3.dispose();
          }
          createOnigScanner(e3) {
            return this._onigLib.createOnigScanner(e3);
          }
          createOnigString(e3) {
            return this._onigLib.createOnigString(e3);
          }
          getMetadataForScope(e3) {
            return this._basicScopeAttributesProvider.getBasicScopeAttributes(e3);
          }
          _collectInjections() {
            const e3 = [], t3 = this._rootScopeName, n2 = ((e4) => e4 === this._rootScopeName ? this._grammar : this.getExternalGrammar(e4))(t3);
            if (n2) {
              const s2 = n2.injections;
              if (s2) for (let t4 in s2) p(e3, t4, s2[t4], this, n2);
              const r2 = this._grammarRepository.injections(t3);
              r2 && r2.forEach((t4) => {
                const n3 = this.getExternalGrammar(t4);
                if (n3) {
                  const t5 = n3.injectionSelector;
                  t5 && p(e3, t5, n3, this, n3);
                }
              });
            }
            return e3.sort((e4, t4) => e4.priority - t4.priority), e3;
          }
          getInjections() {
            if (null === this._injections && (this._injections = this._collectInjections(), s.DebugFlags.InDebugMode && this._injections.length > 0)) {
              console.log(`Grammar ${this._rootScopeName} contains the following injections:`);
              for (const e3 of this._injections) console.log(`  - ${e3.debugSelector}`);
            }
            return this._injections;
          }
          registerRule(e3) {
            const t3 = ++this._lastRuleId, n2 = e3(a.ruleIdFromNumber(t3));
            return this._ruleId2desc[t3] = n2, n2;
          }
          getRule(e3) {
            return this._ruleId2desc[a.ruleIdToNumber(e3)];
          }
          getExternalGrammar(e3, t3) {
            if (this._includedGrammars[e3]) return this._includedGrammars[e3];
            if (this._grammarRepository) {
              const n2 = this._grammarRepository.lookup(e3);
              if (n2) return this._includedGrammars[e3] = g(n2, t3 && t3.$base), this._includedGrammars[e3];
            }
          }
          tokenizeLine(e3, t3, n2 = 0) {
            const s2 = this._tokenize(e3, t3, false, n2);
            return { tokens: s2.lineTokens.getResult(s2.ruleStack, s2.lineLength), ruleStack: s2.ruleStack, stoppedEarly: s2.stoppedEarly };
          }
          tokenizeLine2(e3, t3, n2 = 0) {
            const s2 = this._tokenize(e3, t3, true, n2);
            return { tokens: s2.lineTokens.getBinaryResult(s2.ruleStack, s2.lineLength), ruleStack: s2.ruleStack, stoppedEarly: s2.stoppedEarly };
          }
          _tokenize(e3, t3, n2, s2) {
            let i2;
            if (-1 === this._rootId && (this._rootId = a.RuleFactory.getCompiledRuleId(this._grammar.repository.$self, this, this._grammar.repository), this.getInjections()), t3 && t3 !== b.NULL) i2 = false, t3.reset();
            else {
              i2 = true;
              const e4 = this._basicScopeAttributesProvider.getDefaultAttributes(), n3 = this.themeProvider.getDefaults(), s3 = r.EncodedTokenAttributes.set(0, e4.languageId, e4.tokenType, null, n3.fontStyle, n3.foregroundId, n3.backgroundId), o2 = this.getRule(this._rootId).getName(null, null);
              let a2;
              a2 = o2 ? _.createRootAndLookUpScopeName(o2, s3, this) : _.createRoot("unknown", s3), t3 = new b(null, this._rootId, -1, -1, false, null, a2, a2);
            }
            e3 += "\n";
            const c2 = this.createOnigString(e3), l2 = c2.content.length, u2 = new y(n2, e3, this._tokenTypeMatchers, this.balancedBracketSelectors), p2 = h._tokenizeString(this, c2, i2, 0, t3, u2, true, s2);
            return o.disposeOnigString(c2), { lineLength: l2, lineTokens: u2, ruleStack: p2.stack, stoppedEarly: p2.stoppedEarly };
          }
        }
        function g(e3, t3) {
          return (e3 = l.clone(e3)).repository = e3.repository || {}, e3.repository.$self = { $vscodeTextmateLocation: e3.$vscodeTextmateLocation, patterns: e3.patterns, name: e3.scopeName }, e3.repository.$base = t3 || e3.repository.$self, e3;
        }
        t2.Grammar = m;
        class _ {
          constructor(e3, t3, n2) {
            this.parent = e3, this.scopePath = t3, this.tokenAttributes = n2;
          }
          static fromExtension(e3, t3) {
            let n2 = e3, s2 = e3?.scopePath ?? null;
            for (const e4 of t3) s2 = c.ScopeStack.push(s2, e4.scopeNames), n2 = new _(n2, s2, e4.encodedTokenAttributes);
            return n2;
          }
          static createRoot(e3, t3) {
            return new _(null, new c.ScopeStack(null, e3), t3);
          }
          static createRootAndLookUpScopeName(e3, t3, n2) {
            const s2 = n2.getMetadataForScope(e3), r2 = new c.ScopeStack(null, e3), i2 = n2.themeProvider.themeMatch(r2), o2 = _.mergeAttributes(t3, s2, i2);
            return new _(null, r2, o2);
          }
          get scopeName() {
            return this.scopePath.scopeName;
          }
          toString() {
            return this.getScopeNames().join(" ");
          }
          equals(e3) {
            return _.equals(this, e3);
          }
          static equals(e3, t3) {
            for (; ; ) {
              if (e3 === t3) return true;
              if (!e3 && !t3) return true;
              if (!e3 || !t3) return false;
              if (e3.scopeName !== t3.scopeName || e3.tokenAttributes !== t3.tokenAttributes) return false;
              e3 = e3.parent, t3 = t3.parent;
            }
          }
          static mergeAttributes(e3, t3, n2) {
            let s2 = -1, i2 = 0, o2 = 0;
            return null !== n2 && (s2 = n2.fontStyle, i2 = n2.foregroundId, o2 = n2.backgroundId), r.EncodedTokenAttributes.set(e3, t3.languageId, t3.tokenType, null, s2, i2, o2);
          }
          pushAttributed(e3, t3) {
            if (null === e3) return this;
            if (-1 === e3.indexOf(" ")) return _._pushAttributed(this, e3, t3);
            const n2 = e3.split(/ /g);
            let s2 = this;
            for (const e4 of n2) s2 = _._pushAttributed(s2, e4, t3);
            return s2;
          }
          static _pushAttributed(e3, t3, n2) {
            const s2 = n2.getMetadataForScope(t3), r2 = e3.scopePath.push(t3), i2 = n2.themeProvider.themeMatch(r2), o2 = _.mergeAttributes(e3.tokenAttributes, s2, i2);
            return new _(e3, r2, o2);
          }
          getScopeNames() {
            return this.scopePath.getSegments();
          }
          getExtensionIfDefined(e3) {
            const t3 = [];
            let n2 = this;
            for (; n2 && n2 !== e3; ) t3.push({ encodedTokenAttributes: n2.tokenAttributes, scopeNames: n2.scopePath.getExtensionIfDefined(n2.parent?.scopePath ?? null) }), n2 = n2.parent;
            return n2 === e3 ? t3.reverse() : void 0;
          }
        }
        t2.AttributedScopeStack = _;
        class b {
          constructor(e3, t3, n2, s2, r2, i2, o2, a2) {
            this.parent = e3, this.ruleId = t3, this.beginRuleCapturedEOL = r2, this.endRule = i2, this.nameScopesList = o2, this.contentNameScopesList = a2, this._stackElementBrand = void 0, this.depth = this.parent ? this.parent.depth + 1 : 1, this._enterPos = n2, this._anchorPos = s2;
          }
          equals(e3) {
            return null !== e3 && b._equals(this, e3);
          }
          static _equals(e3, t3) {
            return e3 === t3 || !!this._structuralEquals(e3, t3) && _.equals(e3.contentNameScopesList, t3.contentNameScopesList);
          }
          static _structuralEquals(e3, t3) {
            for (; ; ) {
              if (e3 === t3) return true;
              if (!e3 && !t3) return true;
              if (!e3 || !t3) return false;
              if (e3.depth !== t3.depth || e3.ruleId !== t3.ruleId || e3.endRule !== t3.endRule) return false;
              e3 = e3.parent, t3 = t3.parent;
            }
          }
          clone() {
            return this;
          }
          static _reset(e3) {
            for (; e3; ) e3._enterPos = -1, e3._anchorPos = -1, e3 = e3.parent;
          }
          reset() {
            b._reset(this);
          }
          pop() {
            return this.parent;
          }
          safePop() {
            return this.parent ? this.parent : this;
          }
          push(e3, t3, n2, s2, r2, i2, o2) {
            return new b(this, e3, t3, n2, s2, r2, i2, o2);
          }
          getEnterPos() {
            return this._enterPos;
          }
          getAnchorPos() {
            return this._anchorPos;
          }
          getRule(e3) {
            return e3.getRule(this.ruleId);
          }
          toString() {
            const e3 = [];
            return this._writeString(e3, 0), "[" + e3.join(",") + "]";
          }
          _writeString(e3, t3) {
            return this.parent && (t3 = this.parent._writeString(e3, t3)), e3[t3++] = `(${this.ruleId}, ${this.nameScopesList?.toString()}, ${this.contentNameScopesList?.toString()})`, t3;
          }
          withContentNameScopesList(e3) {
            return this.contentNameScopesList === e3 ? this : this.parent.push(this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, this.endRule, this.nameScopesList, e3);
          }
          withEndRule(e3) {
            return this.endRule === e3 ? this : new b(this.parent, this.ruleId, this._enterPos, this._anchorPos, this.beginRuleCapturedEOL, e3, this.nameScopesList, this.contentNameScopesList);
          }
          hasSameRuleAs(e3) {
            let t3 = this;
            for (; t3 && t3._enterPos === e3._enterPos; ) {
              if (t3.ruleId === e3.ruleId) return true;
              t3 = t3.parent;
            }
            return false;
          }
          toStateStackFrame() {
            return { ruleId: a.ruleIdToNumber(this.ruleId), beginRuleCapturedEOL: this.beginRuleCapturedEOL, endRule: this.endRule, nameScopesList: this.nameScopesList?.getExtensionIfDefined(this.parent?.nameScopesList ?? null) ?? [], contentNameScopesList: this.contentNameScopesList?.getExtensionIfDefined(this.nameScopesList) ?? [] };
          }
          static pushFrame(e3, t3) {
            const n2 = _.fromExtension(e3?.nameScopesList ?? null, t3.nameScopesList);
            return new b(e3, a.ruleIdFromNumber(t3.ruleId), t3.enterPos ?? -1, t3.anchorPos ?? -1, t3.beginRuleCapturedEOL, t3.endRule, n2, _.fromExtension(n2, t3.contentNameScopesList));
          }
        }
        t2.StateStackImpl = b, b.NULL = new b(null, 0, 0, 0, false, null, null, null), t2.BalancedBracketSelectors = class {
          constructor(e3, t3) {
            this.allowAny = false, this.balancedBracketScopes = e3.flatMap((e4) => "*" === e4 ? (this.allowAny = true, []) : i.createMatchers(e4, d).map((e5) => e5.matcher)), this.unbalancedBracketScopes = t3.flatMap((e4) => i.createMatchers(e4, d).map((e5) => e5.matcher));
          }
          get matchesAlways() {
            return this.allowAny && 0 === this.unbalancedBracketScopes.length;
          }
          get matchesNever() {
            return 0 === this.balancedBracketScopes.length && !this.allowAny;
          }
          match(e3) {
            for (const t3 of this.unbalancedBracketScopes) if (t3(e3)) return false;
            for (const t3 of this.balancedBracketScopes) if (t3(e3)) return true;
            return this.allowAny;
          }
        };
        class y {
          constructor(e3, t3, n2, r2) {
            this.balancedBracketSelectors = r2, this._emitBinaryTokens = e3, this._tokenTypeOverrides = n2, s.DebugFlags.InDebugMode ? this._lineText = t3 : this._lineText = null, this._tokens = [], this._binaryTokens = [], this._lastTokenEndIndex = 0;
          }
          produce(e3, t3) {
            this.produceFromScopes(e3.contentNameScopesList, t3);
          }
          produceFromScopes(e3, t3) {
            if (this._lastTokenEndIndex >= t3) return;
            if (this._emitBinaryTokens) {
              let n3 = e3?.tokenAttributes ?? 0, i2 = false;
              if (this.balancedBracketSelectors?.matchesAlways && (i2 = true), this._tokenTypeOverrides.length > 0 || this.balancedBracketSelectors && !this.balancedBracketSelectors.matchesAlways && !this.balancedBracketSelectors.matchesNever) {
                const t4 = e3?.getScopeNames() ?? [];
                for (const e4 of this._tokenTypeOverrides) e4.matcher(t4) && (n3 = r.EncodedTokenAttributes.set(n3, 0, r.toOptionalTokenType(e4.type), null, -1, 0, 0));
                this.balancedBracketSelectors && (i2 = this.balancedBracketSelectors.match(t4));
              }
              if (i2 && (n3 = r.EncodedTokenAttributes.set(n3, 0, 8, i2, -1, 0, 0)), this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 1] === n3) return void (this._lastTokenEndIndex = t3);
              if (s.DebugFlags.InDebugMode) {
                const n4 = e3?.getScopeNames() ?? [];
                console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t3).replace(/\n$/, "\\n") + "|");
                for (let e4 = 0; e4 < n4.length; e4++) console.log("      * " + n4[e4]);
              }
              return this._binaryTokens.push(this._lastTokenEndIndex), this._binaryTokens.push(n3), void (this._lastTokenEndIndex = t3);
            }
            const n2 = e3?.getScopeNames() ?? [];
            if (s.DebugFlags.InDebugMode) {
              console.log("  token: |" + this._lineText.substring(this._lastTokenEndIndex, t3).replace(/\n$/, "\\n") + "|");
              for (let e4 = 0; e4 < n2.length; e4++) console.log("      * " + n2[e4]);
            }
            this._tokens.push({ startIndex: this._lastTokenEndIndex, endIndex: t3, scopes: n2 }), this._lastTokenEndIndex = t3;
          }
          getResult(e3, t3) {
            return this._tokens.length > 0 && this._tokens[this._tokens.length - 1].startIndex === t3 - 1 && this._tokens.pop(), 0 === this._tokens.length && (this._lastTokenEndIndex = -1, this.produce(e3, t3), this._tokens[this._tokens.length - 1].startIndex = 0), this._tokens;
          }
          getBinaryResult(e3, t3) {
            this._binaryTokens.length > 0 && this._binaryTokens[this._binaryTokens.length - 2] === t3 - 1 && (this._binaryTokens.pop(), this._binaryTokens.pop()), 0 === this._binaryTokens.length && (this._lastTokenEndIndex = -1, this.produce(e3, t3), this._binaryTokens[this._binaryTokens.length - 2] = 0);
            const n2 = new Uint32Array(this._binaryTokens.length);
            for (let e4 = 0, t4 = this._binaryTokens.length; e4 < t4; e4++) n2[e4] = this._binaryTokens[e4];
            return n2;
          }
        }
        t2.LineTokens = y;
      }, 965: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseInclude = t2.TopLevelRepositoryReference = t2.TopLevelReference = t2.RelativeReference = t2.SelfReference = t2.BaseReference = t2.ScopeDependencyProcessor = t2.ExternalReferenceCollector = t2.TopLevelRepositoryRuleReference = t2.TopLevelRuleReference = void 0;
        const s = n(878);
        class r {
          constructor(e3) {
            this.scopeName = e3;
          }
          toKey() {
            return this.scopeName;
          }
        }
        t2.TopLevelRuleReference = r;
        class i {
          constructor(e3, t3) {
            this.scopeName = e3, this.ruleName = t3;
          }
          toKey() {
            return `${this.scopeName}#${this.ruleName}`;
          }
        }
        t2.TopLevelRepositoryRuleReference = i;
        class o {
          constructor() {
            this._references = [], this._seenReferenceKeys = /* @__PURE__ */ new Set(), this.visitedRule = /* @__PURE__ */ new Set();
          }
          get references() {
            return this._references;
          }
          add(e3) {
            const t3 = e3.toKey();
            this._seenReferenceKeys.has(t3) || (this._seenReferenceKeys.add(t3), this._references.push(e3));
          }
        }
        function a(e3, t3, n2, s2) {
          const i2 = n2.lookup(e3.scopeName);
          if (!i2) {
            if (e3.scopeName === t3) throw new Error(`No grammar provided for <${t3}>`);
            return;
          }
          const o2 = n2.lookup(t3);
          e3 instanceof r ? l({ baseGrammar: o2, selfGrammar: i2 }, s2) : c(e3.ruleName, { baseGrammar: o2, selfGrammar: i2, repository: i2.repository }, s2);
          const a2 = n2.injections(e3.scopeName);
          if (a2) for (const e4 of a2) s2.add(new r(e4));
        }
        function c(e3, t3, n2) {
          t3.repository && t3.repository[e3] && u([t3.repository[e3]], t3, n2);
        }
        function l(e3, t3) {
          e3.selfGrammar.patterns && Array.isArray(e3.selfGrammar.patterns) && u(e3.selfGrammar.patterns, { ...e3, repository: e3.selfGrammar.repository }, t3), e3.selfGrammar.injections && u(Object.values(e3.selfGrammar.injections), { ...e3, repository: e3.selfGrammar.repository }, t3);
        }
        function u(e3, t3, n2) {
          for (const o2 of e3) {
            if (n2.visitedRule.has(o2)) continue;
            n2.visitedRule.add(o2);
            const e4 = o2.repository ? s.mergeObjects({}, t3.repository, o2.repository) : t3.repository;
            Array.isArray(o2.patterns) && u(o2.patterns, { ...t3, repository: e4 }, n2);
            const a2 = o2.include;
            if (!a2) continue;
            const h2 = g(a2);
            switch (h2.kind) {
              case 0:
                l({ ...t3, selfGrammar: t3.baseGrammar }, n2);
                break;
              case 1:
                l(t3, n2);
                break;
              case 2:
                c(h2.ruleName, { ...t3, repository: e4 }, n2);
                break;
              case 3:
              case 4:
                const s2 = h2.scopeName === t3.selfGrammar.scopeName ? t3.selfGrammar : h2.scopeName === t3.baseGrammar.scopeName ? t3.baseGrammar : void 0;
                if (s2) {
                  const r2 = { baseGrammar: t3.baseGrammar, selfGrammar: s2, repository: e4 };
                  4 === h2.kind ? c(h2.ruleName, r2, n2) : l(r2, n2);
                } else 4 === h2.kind ? n2.add(new i(h2.scopeName, h2.ruleName)) : n2.add(new r(h2.scopeName));
            }
          }
        }
        t2.ExternalReferenceCollector = o, t2.ScopeDependencyProcessor = class {
          constructor(e3, t3) {
            this.repo = e3, this.initialScopeName = t3, this.seenFullScopeRequests = /* @__PURE__ */ new Set(), this.seenPartialScopeRequests = /* @__PURE__ */ new Set(), this.seenFullScopeRequests.add(this.initialScopeName), this.Q = [new r(this.initialScopeName)];
          }
          processQueue() {
            const e3 = this.Q;
            this.Q = [];
            const t3 = new o();
            for (const n2 of e3) a(n2, this.initialScopeName, this.repo, t3);
            for (const e4 of t3.references) if (e4 instanceof r) {
              if (this.seenFullScopeRequests.has(e4.scopeName)) continue;
              this.seenFullScopeRequests.add(e4.scopeName), this.Q.push(e4);
            } else {
              if (this.seenFullScopeRequests.has(e4.scopeName)) continue;
              if (this.seenPartialScopeRequests.has(e4.toKey())) continue;
              this.seenPartialScopeRequests.add(e4.toKey()), this.Q.push(e4);
            }
          }
        };
        class h {
          constructor() {
            this.kind = 0;
          }
        }
        t2.BaseReference = h;
        class p {
          constructor() {
            this.kind = 1;
          }
        }
        t2.SelfReference = p;
        class d {
          constructor(e3) {
            this.ruleName = e3, this.kind = 2;
          }
        }
        t2.RelativeReference = d;
        class f {
          constructor(e3) {
            this.scopeName = e3, this.kind = 3;
          }
        }
        t2.TopLevelReference = f;
        class m {
          constructor(e3, t3) {
            this.scopeName = e3, this.ruleName = t3, this.kind = 4;
          }
        }
        function g(e3) {
          if ("$base" === e3) return new h();
          if ("$self" === e3) return new p();
          const t3 = e3.indexOf("#");
          if (-1 === t3) return new f(e3);
          if (0 === t3) return new d(e3.substring(1));
          {
            const n2 = e3.substring(0, t3), s2 = e3.substring(t3 + 1);
            return new m(n2, s2);
          }
        }
        t2.TopLevelRepositoryReference = m, t2.parseInclude = g;
      }, 391: function(e2, t2, n) {
        var s = this && this.__createBinding || (Object.create ? function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), Object.defineProperty(e3, s2, { enumerable: true, get: function() {
            return t3[n2];
          } });
        } : function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), e3[s2] = t3[n2];
        }), r = this && this.__exportStar || function(e3, t3) {
          for (var n2 in e3) "default" === n2 || Object.prototype.hasOwnProperty.call(t3, n2) || s(t3, e3, n2);
        };
        Object.defineProperty(t2, "__esModule", { value: true }), r(n(947), t2);
      }, 47: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.LocalStackElement = t2._tokenizeString = void 0;
        const s = n(350), r = n(44), i = n(792), o = n(878);
        class a {
          constructor(e3, t3) {
            this.stack = e3, this.stoppedEarly = t3;
          }
        }
        function c(e3, t3, n2, r2, c2, h2, d2, f) {
          const m = t3.content.length;
          let g = false, _ = -1;
          if (d2) {
            const o2 = function(e4, t4, n3, r3, o3, a2) {
              let c3 = o3.beginRuleCapturedEOL ? 0 : -1;
              const l2 = [];
              for (let t5 = o3; t5; t5 = t5.pop()) {
                const n4 = t5.getRule(e4);
                n4 instanceof i.BeginWhileRule && l2.push({ rule: n4, stack: t5 });
              }
              for (let h3 = l2.pop(); h3; h3 = l2.pop()) {
                const { ruleScanner: l3, findOptions: d3 } = u(h3.rule, e4, h3.stack.endRule, n3, r3 === c3), f2 = l3.findNextMatchSync(t4, r3, d3);
                if (s.DebugFlags.InDebugMode && (console.log("  scanning for while rule"), console.log(l3.toString())), !f2) {
                  s.DebugFlags.InDebugMode && console.log("  popping " + h3.rule.debugName + " - " + h3.rule.debugWhileRegExp), o3 = h3.stack.pop();
                  break;
                }
                if (f2.ruleId !== i.whileRuleId) {
                  o3 = h3.stack.pop();
                  break;
                }
                f2.captureIndices && f2.captureIndices.length && (a2.produce(h3.stack, f2.captureIndices[0].start), p(e4, t4, n3, h3.stack, a2, h3.rule.whileCaptures, f2.captureIndices), a2.produce(h3.stack, f2.captureIndices[0].end), c3 = f2.captureIndices[0].end, f2.captureIndices[0].end > r3 && (r3 = f2.captureIndices[0].end, n3 = false));
              }
              return { stack: o3, linePos: r3, anchorPosition: c3, isFirstLine: n3 };
            }(e3, t3, n2, r2, c2, h2);
            c2 = o2.stack, r2 = o2.linePos, n2 = o2.isFirstLine, _ = o2.anchorPosition;
          }
          const b = Date.now();
          for (; !g; ) {
            if (0 !== f && Date.now() - b > f) return new a(c2, true);
            y();
          }
          return new a(c2, false);
          function y() {
            s.DebugFlags.InDebugMode && (console.log(""), console.log(`@@scanNext ${r2}: |${t3.content.substr(r2).replace(/\n$/, "\\n")}|`));
            const a2 = function(e4, t4, n3, r3, i2, a3) {
              const c3 = function(e5, t5, n4, r4, i3, a4) {
                const c4 = i3.getRule(e5), { ruleScanner: u4, findOptions: h4 } = l(c4, e5, i3.endRule, n4, r4 === a4);
                let p3 = 0;
                s.DebugFlags.InDebugMode && (p3 = o.performanceNow());
                const d5 = u4.findNextMatchSync(t5, r4, h4);
                if (s.DebugFlags.InDebugMode) {
                  const e6 = o.performanceNow() - p3;
                  e6 > 5 && console.warn(`Rule ${c4.debugName} (${c4.id}) matching took ${e6} against '${t5}'`), console.log(`  scanning for (linePos: ${r4}, anchorPosition: ${a4})`), console.log(u4.toString()), d5 && console.log(`matched rule id: ${d5.ruleId} from ${d5.captureIndices[0].start} to ${d5.captureIndices[0].end}`);
                }
                return d5 ? { captureIndices: d5.captureIndices, matchedRuleId: d5.ruleId } : null;
              }(e4, t4, n3, r3, i2, a3), u3 = e4.getInjections();
              if (0 === u3.length) return c3;
              const h3 = function(e5, t5, n4, r4, i3, o2, a4) {
                let c4, u4 = Number.MAX_VALUE, h4 = null, p3 = 0;
                const d5 = o2.contentNameScopesList.getScopeNames();
                for (let o3 = 0, f3 = e5.length; o3 < f3; o3++) {
                  const f4 = e5[o3];
                  if (!f4.matcher(d5)) continue;
                  const m2 = t5.getRule(f4.ruleId), { ruleScanner: g2, findOptions: _2 } = l(m2, t5, null, r4, i3 === a4), b2 = g2.findNextMatchSync(n4, i3, _2);
                  if (!b2) continue;
                  s.DebugFlags.InDebugMode && (console.log(`  matched injection: ${f4.debugSelector}`), console.log(g2.toString()));
                  const y2 = b2.captureIndices[0].start;
                  if (!(y2 >= u4) && (u4 = y2, h4 = b2.captureIndices, c4 = b2.ruleId, p3 = f4.priority, u4 === i3)) break;
                }
                return h4 ? { priorityMatch: -1 === p3, captureIndices: h4, matchedRuleId: c4 } : null;
              }(u3, e4, t4, n3, r3, i2, a3);
              if (!h3) return c3;
              if (!c3) return h3;
              const p2 = c3.captureIndices[0].start, d4 = h3.captureIndices[0].start;
              return d4 < p2 || h3.priorityMatch && d4 === p2 ? h3 : c3;
            }(e3, t3, n2, r2, c2, _);
            if (!a2) return s.DebugFlags.InDebugMode && console.log("  no more matches."), h2.produce(c2, m), void (g = true);
            const u2 = a2.captureIndices, d3 = a2.matchedRuleId, f2 = !!(u2 && u2.length > 0) && u2[0].end > r2;
            if (d3 === i.endRuleId) {
              const i2 = c2.getRule(e3);
              s.DebugFlags.InDebugMode && console.log("  popping " + i2.debugName + " - " + i2.debugEndRegExp), h2.produce(c2, u2[0].start), c2 = c2.withContentNameScopesList(c2.nameScopesList), p(e3, t3, n2, c2, h2, i2.endCaptures, u2), h2.produce(c2, u2[0].end);
              const o2 = c2;
              if (c2 = c2.parent, _ = o2.getAnchorPos(), !f2 && o2.getEnterPos() === r2) return s.DebugFlags.InDebugMode && console.error("[1] - Grammar is in an endless loop - Grammar pushed & popped a rule without advancing"), c2 = o2, h2.produce(c2, m), void (g = true);
            } else {
              const o2 = e3.getRule(d3);
              h2.produce(c2, u2[0].start);
              const a3 = c2, l2 = o2.getName(t3.content, u2), b2 = c2.contentNameScopesList.pushAttributed(l2, e3);
              if (c2 = c2.push(d3, r2, _, u2[0].end === m, null, b2, b2), o2 instanceof i.BeginEndRule) {
                const r3 = o2;
                s.DebugFlags.InDebugMode && console.log("  pushing " + r3.debugName + " - " + r3.debugBeginRegExp), p(e3, t3, n2, c2, h2, r3.beginCaptures, u2), h2.produce(c2, u2[0].end), _ = u2[0].end;
                const i2 = r3.getContentName(t3.content, u2), l3 = b2.pushAttributed(i2, e3);
                if (c2 = c2.withContentNameScopesList(l3), r3.endHasBackReferences && (c2 = c2.withEndRule(r3.getEndWithResolvedBackReferences(t3.content, u2))), !f2 && a3.hasSameRuleAs(c2)) return s.DebugFlags.InDebugMode && console.error("[2] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), c2 = c2.pop(), h2.produce(c2, m), void (g = true);
              } else if (o2 instanceof i.BeginWhileRule) {
                const r3 = o2;
                s.DebugFlags.InDebugMode && console.log("  pushing " + r3.debugName), p(e3, t3, n2, c2, h2, r3.beginCaptures, u2), h2.produce(c2, u2[0].end), _ = u2[0].end;
                const i2 = r3.getContentName(t3.content, u2), l3 = b2.pushAttributed(i2, e3);
                if (c2 = c2.withContentNameScopesList(l3), r3.whileHasBackReferences && (c2 = c2.withEndRule(r3.getWhileWithResolvedBackReferences(t3.content, u2))), !f2 && a3.hasSameRuleAs(c2)) return s.DebugFlags.InDebugMode && console.error("[3] - Grammar is in an endless loop - Grammar pushed the same rule without advancing"), c2 = c2.pop(), h2.produce(c2, m), void (g = true);
              } else {
                const r3 = o2;
                if (s.DebugFlags.InDebugMode && console.log("  matched " + r3.debugName + " - " + r3.debugMatchRegExp), p(e3, t3, n2, c2, h2, r3.captures, u2), h2.produce(c2, u2[0].end), c2 = c2.pop(), !f2) return s.DebugFlags.InDebugMode && console.error("[4] - Grammar is in an endless loop - Grammar is not advancing, nor is it pushing/popping"), c2 = c2.safePop(), h2.produce(c2, m), void (g = true);
              }
            }
            u2[0].end > r2 && (r2 = u2[0].end, n2 = false);
          }
        }
        function l(e3, t3, n2, r2, i2) {
          return s.UseOnigurumaFindOptions ? { ruleScanner: e3.compile(t3, n2), findOptions: h(r2, i2) } : { ruleScanner: e3.compileAG(t3, n2, r2, i2), findOptions: 0 };
        }
        function u(e3, t3, n2, r2, i2) {
          return s.UseOnigurumaFindOptions ? { ruleScanner: e3.compileWhile(t3, n2), findOptions: h(r2, i2) } : { ruleScanner: e3.compileWhileAG(t3, n2, r2, i2), findOptions: 0 };
        }
        function h(e3, t3) {
          let n2 = 0;
          return e3 || (n2 |= 1), t3 || (n2 |= 4), n2;
        }
        function p(e3, t3, n2, s2, i2, o2, a2) {
          if (0 === o2.length) return;
          const l2 = t3.content, u2 = Math.min(o2.length, a2.length), h2 = [], p2 = a2[0].end;
          for (let t4 = 0; t4 < u2; t4++) {
            const u3 = o2[t4];
            if (null === u3) continue;
            const f = a2[t4];
            if (0 === f.length) continue;
            if (f.start > p2) break;
            for (; h2.length > 0 && h2[h2.length - 1].endPos <= f.start; ) i2.produceFromScopes(h2[h2.length - 1].scopes, h2[h2.length - 1].endPos), h2.pop();
            if (h2.length > 0 ? i2.produceFromScopes(h2[h2.length - 1].scopes, f.start) : i2.produce(s2, f.start), u3.retokenizeCapturedWithRuleId) {
              const t5 = u3.getName(l2, a2), o3 = s2.contentNameScopesList.pushAttributed(t5, e3), h3 = u3.getContentName(l2, a2), p3 = o3.pushAttributed(h3, e3), d2 = s2.push(u3.retokenizeCapturedWithRuleId, f.start, -1, false, null, o3, p3), m2 = e3.createOnigString(l2.substring(0, f.end));
              c(e3, m2, n2 && 0 === f.start, f.start, d2, i2, false, 0), r.disposeOnigString(m2);
              continue;
            }
            const m = u3.getName(l2, a2);
            if (null !== m) {
              const t5 = (h2.length > 0 ? h2[h2.length - 1].scopes : s2.contentNameScopesList).pushAttributed(m, e3);
              h2.push(new d(t5, f.end));
            }
          }
          for (; h2.length > 0; ) i2.produceFromScopes(h2[h2.length - 1].scopes, h2[h2.length - 1].endPos), h2.pop();
        }
        t2._tokenizeString = c;
        class d {
          constructor(e3, t3) {
            this.scopes = e3, this.endPos = t3;
          }
        }
        t2.LocalStackElement = d;
      }, 974: (e2, t2) => {
        function n(e3, t3) {
          throw new Error("Near offset " + e3.pos + ": " + t3 + " ~~~" + e3.source.substr(e3.pos, 50) + "~~~");
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseJSON = void 0, t2.parseJSON = function(e3, t3, o) {
          let a = new s(e3), c = new r(), l = 0, u = null, h = [], p = [];
          function d() {
            h.push(l), p.push(u);
          }
          function f() {
            l = h.pop(), u = p.pop();
          }
          function m(e4) {
            n(a, e4);
          }
          for (; i(a, c); ) {
            if (0 === l) {
              if (null !== u && m("too many constructs in root"), 3 === c.type) {
                u = {}, o && (u.$vscodeTextmateLocation = c.toLocation(t3)), d(), l = 1;
                continue;
              }
              if (2 === c.type) {
                u = [], d(), l = 4;
                continue;
              }
              m("unexpected token in root");
            }
            if (2 === l) {
              if (5 === c.type) {
                f();
                continue;
              }
              if (7 === c.type) {
                l = 3;
                continue;
              }
              m("expected , or }");
            }
            if (1 === l || 3 === l) {
              if (1 === l && 5 === c.type) {
                f();
                continue;
              }
              if (1 === c.type) {
                let e4 = c.value;
                if (i(a, c) && 6 === c.type || m("expected colon"), i(a, c) || m("expected value"), l = 2, 1 === c.type) {
                  u[e4] = c.value;
                  continue;
                }
                if (8 === c.type) {
                  u[e4] = null;
                  continue;
                }
                if (9 === c.type) {
                  u[e4] = true;
                  continue;
                }
                if (10 === c.type) {
                  u[e4] = false;
                  continue;
                }
                if (11 === c.type) {
                  u[e4] = parseFloat(c.value);
                  continue;
                }
                if (2 === c.type) {
                  let t4 = [];
                  u[e4] = t4, d(), l = 4, u = t4;
                  continue;
                }
                if (3 === c.type) {
                  let n2 = {};
                  o && (n2.$vscodeTextmateLocation = c.toLocation(t3)), u[e4] = n2, d(), l = 1, u = n2;
                  continue;
                }
              }
              m("unexpected token in dict");
            }
            if (5 === l) {
              if (4 === c.type) {
                f();
                continue;
              }
              if (7 === c.type) {
                l = 6;
                continue;
              }
              m("expected , or ]");
            }
            if (4 === l || 6 === l) {
              if (4 === l && 4 === c.type) {
                f();
                continue;
              }
              if (l = 5, 1 === c.type) {
                u.push(c.value);
                continue;
              }
              if (8 === c.type) {
                u.push(null);
                continue;
              }
              if (9 === c.type) {
                u.push(true);
                continue;
              }
              if (10 === c.type) {
                u.push(false);
                continue;
              }
              if (11 === c.type) {
                u.push(parseFloat(c.value));
                continue;
              }
              if (2 === c.type) {
                let e4 = [];
                u.push(e4), d(), l = 4, u = e4;
                continue;
              }
              if (3 === c.type) {
                let e4 = {};
                o && (e4.$vscodeTextmateLocation = c.toLocation(t3)), u.push(e4), d(), l = 1, u = e4;
                continue;
              }
              m("unexpected token in array");
            }
            m("unknown state");
          }
          return 0 !== p.length && m("unclosed constructs"), u;
        };
        class s {
          constructor(e3) {
            this.source = e3, this.pos = 0, this.len = e3.length, this.line = 1, this.char = 0;
          }
        }
        class r {
          constructor() {
            this.value = null, this.type = 0, this.offset = -1, this.len = -1, this.line = -1, this.char = -1;
          }
          toLocation(e3) {
            return { filename: e3, line: this.line, char: this.char };
          }
        }
        function i(e3, t3) {
          t3.value = null, t3.type = 0, t3.offset = -1, t3.len = -1, t3.line = -1, t3.char = -1;
          let s2, r2 = e3.source, i2 = e3.pos, o = e3.len, a = e3.line, c = e3.char;
          for (; ; ) {
            if (i2 >= o) return false;
            if (s2 = r2.charCodeAt(i2), 32 !== s2 && 9 !== s2 && 13 !== s2) {
              if (10 !== s2) break;
              i2++, a++, c = 0;
            } else i2++, c++;
          }
          if (t3.offset = i2, t3.line = a, t3.char = c, 34 === s2) {
            for (t3.type = 1, i2++, c++; ; ) {
              if (i2 >= o) return false;
              if (s2 = r2.charCodeAt(i2), i2++, c++, 92 !== s2) {
                if (34 === s2) break;
              } else i2++, c++;
            }
            t3.value = r2.substring(t3.offset + 1, i2 - 1).replace(/\\u([0-9A-Fa-f]{4})/g, (e4, t4) => String.fromCodePoint(parseInt(t4, 16))).replace(/\\(.)/g, (t4, s3) => {
              switch (s3) {
                case '"':
                  return '"';
                case "\\":
                  return "\\";
                case "/":
                  return "/";
                case "b":
                  return "\b";
                case "f":
                  return "\f";
                case "n":
                  return "\n";
                case "r":
                  return "\r";
                case "t":
                  return "	";
                default:
                  n(e3, "invalid escape sequence");
              }
              throw new Error("unreachable");
            });
          } else if (91 === s2) t3.type = 2, i2++, c++;
          else if (123 === s2) t3.type = 3, i2++, c++;
          else if (93 === s2) t3.type = 4, i2++, c++;
          else if (125 === s2) t3.type = 5, i2++, c++;
          else if (58 === s2) t3.type = 6, i2++, c++;
          else if (44 === s2) t3.type = 7, i2++, c++;
          else if (110 === s2) {
            if (t3.type = 8, i2++, c++, s2 = r2.charCodeAt(i2), 117 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 108 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 108 !== s2) return false;
            i2++, c++;
          } else if (116 === s2) {
            if (t3.type = 9, i2++, c++, s2 = r2.charCodeAt(i2), 114 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 117 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 101 !== s2) return false;
            i2++, c++;
          } else if (102 === s2) {
            if (t3.type = 10, i2++, c++, s2 = r2.charCodeAt(i2), 97 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 108 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 115 !== s2) return false;
            if (i2++, c++, s2 = r2.charCodeAt(i2), 101 !== s2) return false;
            i2++, c++;
          } else for (t3.type = 11; ; ) {
            if (i2 >= o) return false;
            if (s2 = r2.charCodeAt(i2), !(46 === s2 || s2 >= 48 && s2 <= 57 || 101 === s2 || 69 === s2 || 45 === s2 || 43 === s2)) break;
            i2++, c++;
          }
          return t3.len = i2 - t3.offset, null === t3.value && (t3.value = r2.substr(t3.offset, t3.len)), e3.pos = i2, e3.line = a, e3.char = c, true;
        }
      }, 787: function(e2, t2, n) {
        var s = this && this.__createBinding || (Object.create ? function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), Object.defineProperty(e3, s2, { enumerable: true, get: function() {
            return t3[n2];
          } });
        } : function(e3, t3, n2, s2) {
          void 0 === s2 && (s2 = n2), e3[s2] = t3[n2];
        }), r = this && this.__exportStar || function(e3, t3) {
          for (var n2 in e3) "default" === n2 || Object.prototype.hasOwnProperty.call(t3, n2) || s(t3, e3, n2);
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.applyStateStackDiff = t2.diffStateStacksRefEq = t2.parseRawGrammar = t2.INITIAL = t2.Registry = void 0;
        const i = n(391), o = n(50), a = n(652), c = n(583), l = n(965), u = n(442);
        Object.defineProperty(t2, "applyStateStackDiff", { enumerable: true, get: function() {
          return u.applyStateStackDiff;
        } }), Object.defineProperty(t2, "diffStateStacksRefEq", { enumerable: true, get: function() {
          return u.diffStateStacksRefEq;
        } }), r(n(44), t2), t2.Registry = class {
          constructor(e3) {
            this._options = e3, this._syncRegistry = new a.SyncRegistry(c.Theme.createFromRawTheme(e3.theme, e3.colorMap), e3.onigLib), this._ensureGrammarCache = /* @__PURE__ */ new Map();
          }
          dispose() {
            this._syncRegistry.dispose();
          }
          setTheme(e3, t3) {
            this._syncRegistry.setTheme(c.Theme.createFromRawTheme(e3, t3));
          }
          getColorMap() {
            return this._syncRegistry.getColorMap();
          }
          loadGrammarWithEmbeddedLanguages(e3, t3, n2) {
            return this.loadGrammarWithConfiguration(e3, t3, { embeddedLanguages: n2 });
          }
          loadGrammarWithConfiguration(e3, t3, n2) {
            return this._loadGrammar(e3, t3, n2.embeddedLanguages, n2.tokenTypes, new i.BalancedBracketSelectors(n2.balancedBracketSelectors || [], n2.unbalancedBracketSelectors || []));
          }
          loadGrammar(e3) {
            return this._loadGrammar(e3, 0, null, null, null);
          }
          async _loadGrammar(e3, t3, n2, s2, r2) {
            const i2 = new l.ScopeDependencyProcessor(this._syncRegistry, e3);
            for (; i2.Q.length > 0; ) await Promise.all(i2.Q.map((e4) => this._loadSingleGrammar(e4.scopeName))), i2.processQueue();
            return this._grammarForScopeName(e3, t3, n2, s2, r2);
          }
          async _loadSingleGrammar(e3) {
            return this._ensureGrammarCache.has(e3) || this._ensureGrammarCache.set(e3, this._doLoadSingleGrammar(e3)), this._ensureGrammarCache.get(e3);
          }
          async _doLoadSingleGrammar(e3) {
            const t3 = await this._options.loadGrammar(e3);
            if (t3) {
              const n2 = "function" == typeof this._options.getInjections ? this._options.getInjections(e3) : void 0;
              this._syncRegistry.addGrammar(t3, n2);
            }
          }
          async addGrammar(e3, t3 = [], n2 = 0, s2 = null) {
            return this._syncRegistry.addGrammar(e3, t3), await this._grammarForScopeName(e3.scopeName, n2, s2);
          }
          _grammarForScopeName(e3, t3 = 0, n2 = null, s2 = null, r2 = null) {
            return this._syncRegistry.grammarForScopeName(e3, t3, n2, s2, r2);
          }
        }, t2.INITIAL = i.StateStackImpl.NULL, t2.parseRawGrammar = o.parseRawGrammar;
      }, 736: (e2, t2) => {
        function n(e3) {
          return !!e3 && !!e3.match(/[\w\.:]+/);
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.createMatchers = void 0, t2.createMatchers = function(e3, t3) {
          const s = [], r = function(e4) {
            let t4 = /([LR]:|[\w\.:][\w\.:\-]*|[\,\|\-\(\)])/g, n2 = t4.exec(e4);
            return { next: () => {
              if (!n2) return null;
              const s2 = n2[0];
              return n2 = t4.exec(e4), s2;
            } };
          }(e3);
          let i = r.next();
          for (; null !== i; ) {
            let e4 = 0;
            if (2 === i.length && ":" === i.charAt(1)) {
              switch (i.charAt(0)) {
                case "R":
                  e4 = 1;
                  break;
                case "L":
                  e4 = -1;
                  break;
                default:
                  console.log(`Unknown priority ${i} in scope selector`);
              }
              i = r.next();
            }
            let t4 = a();
            if (s.push({ matcher: t4, priority: e4 }), "," !== i) break;
            i = r.next();
          }
          return s;
          function o() {
            if ("-" === i) {
              i = r.next();
              const e4 = o();
              return (t4) => !!e4 && !e4(t4);
            }
            if ("(" === i) {
              i = r.next();
              const e4 = function() {
                const e5 = [];
                let t4 = a();
                for (; t4 && (e5.push(t4), "|" === i || "," === i); ) {
                  do {
                    i = r.next();
                  } while ("|" === i || "," === i);
                  t4 = a();
                }
                return (t5) => e5.some((e6) => e6(t5));
              }();
              return ")" === i && (i = r.next()), e4;
            }
            if (n(i)) {
              const e4 = [];
              do {
                e4.push(i), i = r.next();
              } while (n(i));
              return (n2) => t3(e4, n2);
            }
            return null;
          }
          function a() {
            const e4 = [];
            let t4 = o();
            for (; t4; ) e4.push(t4), t4 = o();
            return (t5) => e4.every((e5) => e5(t5));
          }
        };
      }, 44: (e2, t2) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.disposeOnigString = void 0, t2.disposeOnigString = function(e3) {
          "function" == typeof e3.dispose && e3.dispose();
        };
      }, 50: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parseRawGrammar = void 0;
        const s = n(69), r = n(350), i = n(974);
        t2.parseRawGrammar = function(e3, t3 = null) {
          return null !== t3 && /\.json$/.test(t3) ? (n2 = e3, o = t3, r.DebugFlags.InDebugMode ? i.parseJSON(n2, o, true) : JSON.parse(n2)) : function(e4, t4) {
            return r.DebugFlags.InDebugMode ? s.parseWithLocation(e4, t4, "$vscodeTextmateLocation") : s.parsePLIST(e4);
          }(e3, t3);
          var n2, o;
        };
      }, 69: (e2, t2) => {
        function n(e3, t3, n2) {
          const s = e3.length;
          let r = 0, i = 1, o = 0;
          function a(t4) {
            if (null === n2) r += t4;
            else for (; t4 > 0; ) 10 === e3.charCodeAt(r) ? (r++, i++, o = 0) : (r++, o++), t4--;
          }
          function c(e4) {
            null === n2 ? r = e4 : a(e4 - r);
          }
          function l() {
            for (; r < s; ) {
              let t4 = e3.charCodeAt(r);
              if (32 !== t4 && 9 !== t4 && 13 !== t4 && 10 !== t4) break;
              a(1);
            }
          }
          function u(t4) {
            return e3.substr(r, t4.length) === t4 && (a(t4.length), true);
          }
          function h(t4) {
            let n3 = e3.indexOf(t4, r);
            c(-1 !== n3 ? n3 + t4.length : s);
          }
          function p(t4) {
            let n3 = e3.indexOf(t4, r);
            if (-1 !== n3) {
              let s2 = e3.substring(r, n3);
              return c(n3 + t4.length), s2;
            }
            {
              let t5 = e3.substr(r);
              return c(s), t5;
            }
          }
          s > 0 && 65279 === e3.charCodeAt(0) && (r = 1);
          let d = 0, f = null, m = [], g = [], _ = null;
          function b(e4, t4) {
            m.push(d), g.push(f), d = e4, f = t4;
          }
          function y() {
            if (0 === m.length) return S("illegal state stack");
            d = m.pop(), f = g.pop();
          }
          function S(t4) {
            throw new Error("Near offset " + r + ": " + t4 + " ~~~" + e3.substr(r, 50) + "~~~");
          }
          const k = function() {
            if (null === _) return S("missing <key>");
            let e4 = {};
            null !== n2 && (e4[n2] = { filename: t3, line: i, char: o }), f[_] = e4, _ = null, b(1, e4);
          }, C = function() {
            if (null === _) return S("missing <key>");
            let e4 = [];
            f[_] = e4, _ = null, b(2, e4);
          }, R = function() {
            let e4 = {};
            null !== n2 && (e4[n2] = { filename: t3, line: i, char: o }), f.push(e4), b(1, e4);
          }, A = function() {
            let e4 = [];
            f.push(e4), b(2, e4);
          };
          function w() {
            if (1 !== d) return S("unexpected </dict>");
            y();
          }
          function P() {
            return 1 === d || 2 !== d ? S("unexpected </array>") : void y();
          }
          function I(e4) {
            if (1 === d) {
              if (null === _) return S("missing <key>");
              f[_] = e4, _ = null;
            } else 2 === d ? f.push(e4) : f = e4;
          }
          function v(e4) {
            if (isNaN(e4)) return S("cannot parse float");
            if (1 === d) {
              if (null === _) return S("missing <key>");
              f[_] = e4, _ = null;
            } else 2 === d ? f.push(e4) : f = e4;
          }
          function N(e4) {
            if (isNaN(e4)) return S("cannot parse integer");
            if (1 === d) {
              if (null === _) return S("missing <key>");
              f[_] = e4, _ = null;
            } else 2 === d ? f.push(e4) : f = e4;
          }
          function x(e4) {
            if (1 === d) {
              if (null === _) return S("missing <key>");
              f[_] = e4, _ = null;
            } else 2 === d ? f.push(e4) : f = e4;
          }
          function T(e4) {
            if (1 === d) {
              if (null === _) return S("missing <key>");
              f[_] = e4, _ = null;
            } else 2 === d ? f.push(e4) : f = e4;
          }
          function G(e4) {
            if (1 === d) {
              if (null === _) return S("missing <key>");
              f[_] = e4, _ = null;
            } else 2 === d ? f.push(e4) : f = e4;
          }
          function E() {
            let e4 = p(">"), t4 = false;
            return 47 === e4.charCodeAt(e4.length - 1) && (t4 = true, e4 = e4.substring(0, e4.length - 1)), { name: e4.trim(), isClosed: t4 };
          }
          function L(e4) {
            if (e4.isClosed) return "";
            let t4 = p("</");
            return h(">"), t4.replace(/&#([0-9]+);/g, function(e5, t5) {
              return String.fromCodePoint(parseInt(t5, 10));
            }).replace(/&#x([0-9a-f]+);/g, function(e5, t5) {
              return String.fromCodePoint(parseInt(t5, 16));
            }).replace(/&amp;|&lt;|&gt;|&quot;|&apos;/g, function(e5) {
              switch (e5) {
                case "&amp;":
                  return "&";
                case "&lt;":
                  return "<";
                case "&gt;":
                  return ">";
                case "&quot;":
                  return '"';
                case "&apos;":
                  return "'";
              }
              return e5;
            });
          }
          for (; r < s && (l(), !(r >= s)); ) {
            const c2 = e3.charCodeAt(r);
            if (a(1), 60 !== c2) return S("expected <");
            if (r >= s) return S("unexpected end of input");
            const p2 = e3.charCodeAt(r);
            if (63 === p2) {
              a(1), h("?>");
              continue;
            }
            if (33 === p2) {
              if (a(1), u("--")) {
                h("-->");
                continue;
              }
              h(">");
              continue;
            }
            if (47 === p2) {
              if (a(1), l(), u("plist")) {
                h(">");
                continue;
              }
              if (u("dict")) {
                h(">"), w();
                continue;
              }
              if (u("array")) {
                h(">"), P();
                continue;
              }
              return S("unexpected closed tag");
            }
            let m2 = E();
            switch (m2.name) {
              case "dict":
                1 === d ? k() : 2 === d ? R() : (f = {}, null !== n2 && (f[n2] = { filename: t3, line: i, char: o }), b(1, f)), m2.isClosed && w();
                continue;
              case "array":
                1 === d ? C() : 2 === d ? A() : (f = [], b(2, f)), m2.isClosed && P();
                continue;
              case "key":
                M = L(m2), 1 !== d ? S("unexpected <key>") : null !== _ ? S("too many <key>") : _ = M;
                continue;
              case "string":
                I(L(m2));
                continue;
              case "real":
                v(parseFloat(L(m2)));
                continue;
              case "integer":
                N(parseInt(L(m2), 10));
                continue;
              case "date":
                x(new Date(L(m2)));
                continue;
              case "data":
                T(L(m2));
                continue;
              case "true":
                L(m2), G(true);
                continue;
              case "false":
                L(m2), G(false);
                continue;
            }
            if (!/^plist/.test(m2.name)) return S("unexpected opened tag " + m2.name);
          }
          var M;
          return f;
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.parsePLIST = t2.parseWithLocation = void 0, t2.parseWithLocation = function(e3, t3, s) {
          return n(e3, t3, s);
        }, t2.parsePLIST = function(e3) {
          return n(e3, null, null);
        };
      }, 652: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.SyncRegistry = void 0;
        const s = n(391);
        t2.SyncRegistry = class {
          constructor(e3, t3) {
            this._onigLibPromise = t3, this._grammars = /* @__PURE__ */ new Map(), this._rawGrammars = /* @__PURE__ */ new Map(), this._injectionGrammars = /* @__PURE__ */ new Map(), this._theme = e3;
          }
          dispose() {
            for (const e3 of this._grammars.values()) e3.dispose();
          }
          setTheme(e3) {
            this._theme = e3;
          }
          getColorMap() {
            return this._theme.getColorMap();
          }
          addGrammar(e3, t3) {
            this._rawGrammars.set(e3.scopeName, e3), t3 && this._injectionGrammars.set(e3.scopeName, t3);
          }
          lookup(e3) {
            return this._rawGrammars.get(e3);
          }
          injections(e3) {
            return this._injectionGrammars.get(e3);
          }
          getDefaults() {
            return this._theme.getDefaults();
          }
          themeMatch(e3) {
            return this._theme.match(e3);
          }
          async grammarForScopeName(e3, t3, n2, r, i) {
            if (!this._grammars.has(e3)) {
              let o = this._rawGrammars.get(e3);
              if (!o) return null;
              this._grammars.set(e3, s.createGrammar(e3, o, t3, n2, r, i, this, await this._onigLibPromise));
            }
            return this._grammars.get(e3);
          }
        };
      }, 792: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.CompiledRule = t2.RegExpSourceList = t2.RegExpSource = t2.RuleFactory = t2.BeginWhileRule = t2.BeginEndRule = t2.IncludeOnlyRule = t2.MatchRule = t2.CaptureRule = t2.Rule = t2.ruleIdToNumber = t2.ruleIdFromNumber = t2.whileRuleId = t2.endRuleId = void 0;
        const s = n(878), r = n(965), i = /\\(\d+)/, o = /\\(\d+)/g;
        Symbol("RuleId"), t2.endRuleId = -1, t2.whileRuleId = -2, t2.ruleIdFromNumber = function(e3) {
          return e3;
        }, t2.ruleIdToNumber = function(e3) {
          return e3;
        };
        class a {
          constructor(e3, t3, n2, r2) {
            this.$location = e3, this.id = t3, this._name = n2 || null, this._nameIsCapturing = s.RegexSource.hasCaptures(this._name), this._contentName = r2 || null, this._contentNameIsCapturing = s.RegexSource.hasCaptures(this._contentName);
          }
          get debugName() {
            const e3 = this.$location ? `${s.basename(this.$location.filename)}:${this.$location.line}` : "unknown";
            return `${this.constructor.name}#${this.id} @ ${e3}`;
          }
          getName(e3, t3) {
            return this._nameIsCapturing && null !== this._name && null !== e3 && null !== t3 ? s.RegexSource.replaceCaptures(this._name, e3, t3) : this._name;
          }
          getContentName(e3, t3) {
            return this._contentNameIsCapturing && null !== this._contentName ? s.RegexSource.replaceCaptures(this._contentName, e3, t3) : this._contentName;
          }
        }
        t2.Rule = a;
        class c extends a {
          constructor(e3, t3, n2, s2, r2) {
            super(e3, t3, n2, s2), this.retokenizeCapturedWithRuleId = r2;
          }
          dispose() {
          }
          collectPatterns(e3, t3) {
            throw new Error("Not supported!");
          }
          compile(e3, t3) {
            throw new Error("Not supported!");
          }
          compileAG(e3, t3, n2, s2) {
            throw new Error("Not supported!");
          }
        }
        t2.CaptureRule = c;
        class l extends a {
          constructor(e3, t3, n2, s2, r2) {
            super(e3, t3, n2, null), this._match = new f(s2, this.id), this.captures = r2, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugMatchRegExp() {
            return `${this._match.source}`;
          }
          collectPatterns(e3, t3) {
            t3.push(this._match);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new m(), this.collectPatterns(e3, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t2.MatchRule = l;
        class u extends a {
          constructor(e3, t3, n2, s2, r2) {
            super(e3, t3, n2, s2), this.patterns = r2.patterns, this.hasMissingPatterns = r2.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          collectPatterns(e3, t3) {
            for (const n2 of this.patterns) e3.getRule(n2).collectPatterns(e3, t3);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3) {
            return this._cachedCompiledPatterns || (this._cachedCompiledPatterns = new m(), this.collectPatterns(e3, this._cachedCompiledPatterns)), this._cachedCompiledPatterns;
          }
        }
        t2.IncludeOnlyRule = u;
        class h extends a {
          constructor(e3, t3, n2, s2, r2, i2, o2, a2, c2, l2) {
            super(e3, t3, n2, s2), this._begin = new f(r2, this.id), this.beginCaptures = i2, this._end = new f(o2 || "\uFFFF", -1), this.endHasBackReferences = this._end.hasBackReferences, this.endCaptures = a2, this.applyEndPatternLast = c2 || false, this.patterns = l2.patterns, this.hasMissingPatterns = l2.hasMissingPatterns, this._cachedCompiledPatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugEndRegExp() {
            return `${this._end.source}`;
          }
          getEndWithResolvedBackReferences(e3, t3) {
            return this._end.resolveBackReferences(e3, t3);
          }
          collectPatterns(e3, t3) {
            t3.push(this._begin);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3, t3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3, t3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3, t3) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new m();
              for (const t4 of this.patterns) e3.getRule(t4).collectPatterns(e3, this._cachedCompiledPatterns);
              this.applyEndPatternLast ? this._cachedCompiledPatterns.push(this._end.hasBackReferences ? this._end.clone() : this._end) : this._cachedCompiledPatterns.unshift(this._end.hasBackReferences ? this._end.clone() : this._end);
            }
            return this._end.hasBackReferences && (this.applyEndPatternLast ? this._cachedCompiledPatterns.setSource(this._cachedCompiledPatterns.length() - 1, t3) : this._cachedCompiledPatterns.setSource(0, t3)), this._cachedCompiledPatterns;
          }
        }
        t2.BeginEndRule = h;
        class p extends a {
          constructor(e3, n2, s2, r2, i2, o2, a2, c2, l2) {
            super(e3, n2, s2, r2), this._begin = new f(i2, this.id), this.beginCaptures = o2, this.whileCaptures = c2, this._while = new f(a2, t2.whileRuleId), this.whileHasBackReferences = this._while.hasBackReferences, this.patterns = l2.patterns, this.hasMissingPatterns = l2.hasMissingPatterns, this._cachedCompiledPatterns = null, this._cachedCompiledWhilePatterns = null;
          }
          dispose() {
            this._cachedCompiledPatterns && (this._cachedCompiledPatterns.dispose(), this._cachedCompiledPatterns = null), this._cachedCompiledWhilePatterns && (this._cachedCompiledWhilePatterns.dispose(), this._cachedCompiledWhilePatterns = null);
          }
          get debugBeginRegExp() {
            return `${this._begin.source}`;
          }
          get debugWhileRegExp() {
            return `${this._while.source}`;
          }
          getWhileWithResolvedBackReferences(e3, t3) {
            return this._while.resolveBackReferences(e3, t3);
          }
          collectPatterns(e3, t3) {
            t3.push(this._begin);
          }
          compile(e3, t3) {
            return this._getCachedCompiledPatterns(e3).compile(e3);
          }
          compileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledPatterns(e3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledPatterns(e3) {
            if (!this._cachedCompiledPatterns) {
              this._cachedCompiledPatterns = new m();
              for (const t3 of this.patterns) e3.getRule(t3).collectPatterns(e3, this._cachedCompiledPatterns);
            }
            return this._cachedCompiledPatterns;
          }
          compileWhile(e3, t3) {
            return this._getCachedCompiledWhilePatterns(e3, t3).compile(e3);
          }
          compileWhileAG(e3, t3, n2, s2) {
            return this._getCachedCompiledWhilePatterns(e3, t3).compileAG(e3, n2, s2);
          }
          _getCachedCompiledWhilePatterns(e3, t3) {
            return this._cachedCompiledWhilePatterns || (this._cachedCompiledWhilePatterns = new m(), this._cachedCompiledWhilePatterns.push(this._while.hasBackReferences ? this._while.clone() : this._while)), this._while.hasBackReferences && this._cachedCompiledWhilePatterns.setSource(0, t3 || "\uFFFF"), this._cachedCompiledWhilePatterns;
          }
        }
        t2.BeginWhileRule = p;
        class d {
          static createCaptureRule(e3, t3, n2, s2, r2) {
            return e3.registerRule((e4) => new c(t3, e4, n2, s2, r2));
          }
          static getCompiledRuleId(e3, t3, n2) {
            return e3.id || t3.registerRule((r2) => {
              if (e3.id = r2, e3.match) return new l(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.match, d._compileCaptures(e3.captures, t3, n2));
              if (void 0 === e3.begin) {
                e3.repository && (n2 = s.mergeObjects({}, n2, e3.repository));
                let r3 = e3.patterns;
                return void 0 === r3 && e3.include && (r3 = [{ include: e3.include }]), new u(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.contentName, d._compilePatterns(r3, t3, n2));
              }
              return e3.while ? new p(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.contentName, e3.begin, d._compileCaptures(e3.beginCaptures || e3.captures, t3, n2), e3.while, d._compileCaptures(e3.whileCaptures || e3.captures, t3, n2), d._compilePatterns(e3.patterns, t3, n2)) : new h(e3.$vscodeTextmateLocation, e3.id, e3.name, e3.contentName, e3.begin, d._compileCaptures(e3.beginCaptures || e3.captures, t3, n2), e3.end, d._compileCaptures(e3.endCaptures || e3.captures, t3, n2), e3.applyEndPatternLast, d._compilePatterns(e3.patterns, t3, n2));
            }), e3.id;
          }
          static _compileCaptures(e3, t3, n2) {
            let s2 = [];
            if (e3) {
              let r2 = 0;
              for (const t4 in e3) {
                if ("$vscodeTextmateLocation" === t4) continue;
                const e4 = parseInt(t4, 10);
                e4 > r2 && (r2 = e4);
              }
              for (let e4 = 0; e4 <= r2; e4++) s2[e4] = null;
              for (const r3 in e3) {
                if ("$vscodeTextmateLocation" === r3) continue;
                const i2 = parseInt(r3, 10);
                let o2 = 0;
                e3[r3].patterns && (o2 = d.getCompiledRuleId(e3[r3], t3, n2)), s2[i2] = d.createCaptureRule(t3, e3[r3].$vscodeTextmateLocation, e3[r3].name, e3[r3].contentName, o2);
              }
            }
            return s2;
          }
          static _compilePatterns(e3, t3, n2) {
            let s2 = [];
            if (e3) for (let i2 = 0, o2 = e3.length; i2 < o2; i2++) {
              const o3 = e3[i2];
              let a2 = -1;
              if (o3.include) {
                const e4 = r.parseInclude(o3.include);
                switch (e4.kind) {
                  case 0:
                  case 1:
                    a2 = d.getCompiledRuleId(n2[o3.include], t3, n2);
                    break;
                  case 2:
                    let s3 = n2[e4.ruleName];
                    s3 && (a2 = d.getCompiledRuleId(s3, t3, n2));
                    break;
                  case 3:
                  case 4:
                    const r2 = e4.scopeName, i3 = 4 === e4.kind ? e4.ruleName : null, c2 = t3.getExternalGrammar(r2, n2);
                    if (c2) if (i3) {
                      let e5 = c2.repository[i3];
                      e5 && (a2 = d.getCompiledRuleId(e5, t3, c2.repository));
                    } else a2 = d.getCompiledRuleId(c2.repository.$self, t3, c2.repository);
                }
              } else a2 = d.getCompiledRuleId(o3, t3, n2);
              if (-1 !== a2) {
                const e4 = t3.getRule(a2);
                let n3 = false;
                if ((e4 instanceof u || e4 instanceof h || e4 instanceof p) && e4.hasMissingPatterns && 0 === e4.patterns.length && (n3 = true), n3) continue;
                s2.push(a2);
              }
            }
            return { patterns: s2, hasMissingPatterns: (e3 ? e3.length : 0) !== s2.length };
          }
        }
        t2.RuleFactory = d;
        class f {
          constructor(e3, t3) {
            if (e3) {
              const t4 = e3.length;
              let n2 = 0, s2 = [], r2 = false;
              for (let i2 = 0; i2 < t4; i2++) if ("\\" === e3.charAt(i2) && i2 + 1 < t4) {
                const t5 = e3.charAt(i2 + 1);
                "z" === t5 ? (s2.push(e3.substring(n2, i2)), s2.push("$(?!\\n)(?<!\\n)"), n2 = i2 + 2) : "A" !== t5 && "G" !== t5 || (r2 = true), i2++;
              }
              this.hasAnchor = r2, 0 === n2 ? this.source = e3 : (s2.push(e3.substring(n2, t4)), this.source = s2.join(""));
            } else this.hasAnchor = false, this.source = e3;
            this.hasAnchor ? this._anchorCache = this._buildAnchorCache() : this._anchorCache = null, this.ruleId = t3, this.hasBackReferences = i.test(this.source);
          }
          clone() {
            return new f(this.source, this.ruleId);
          }
          setSource(e3) {
            this.source !== e3 && (this.source = e3, this.hasAnchor && (this._anchorCache = this._buildAnchorCache()));
          }
          resolveBackReferences(e3, t3) {
            let n2 = t3.map((t4) => e3.substring(t4.start, t4.end));
            return o.lastIndex = 0, this.source.replace(o, (e4, t4) => s.escapeRegExpCharacters(n2[parseInt(t4, 10)] || ""));
          }
          _buildAnchorCache() {
            let e3, t3, n2, s2, r2 = [], i2 = [], o2 = [], a2 = [];
            for (e3 = 0, t3 = this.source.length; e3 < t3; e3++) n2 = this.source.charAt(e3), r2[e3] = n2, i2[e3] = n2, o2[e3] = n2, a2[e3] = n2, "\\" === n2 && e3 + 1 < t3 && (s2 = this.source.charAt(e3 + 1), "A" === s2 ? (r2[e3 + 1] = "\uFFFF", i2[e3 + 1] = "\uFFFF", o2[e3 + 1] = "A", a2[e3 + 1] = "A") : "G" === s2 ? (r2[e3 + 1] = "\uFFFF", i2[e3 + 1] = "G", o2[e3 + 1] = "\uFFFF", a2[e3 + 1] = "G") : (r2[e3 + 1] = s2, i2[e3 + 1] = s2, o2[e3 + 1] = s2, a2[e3 + 1] = s2), e3++);
            return { A0_G0: r2.join(""), A0_G1: i2.join(""), A1_G0: o2.join(""), A1_G1: a2.join("") };
          }
          resolveAnchors(e3, t3) {
            return this.hasAnchor && this._anchorCache ? e3 ? t3 ? this._anchorCache.A1_G1 : this._anchorCache.A1_G0 : t3 ? this._anchorCache.A0_G1 : this._anchorCache.A0_G0 : this.source;
          }
        }
        t2.RegExpSource = f;
        class m {
          constructor() {
            this._items = [], this._hasAnchors = false, this._cached = null, this._anchorCache = { A0_G0: null, A0_G1: null, A1_G0: null, A1_G1: null };
          }
          dispose() {
            this._disposeCaches();
          }
          _disposeCaches() {
            this._cached && (this._cached.dispose(), this._cached = null), this._anchorCache.A0_G0 && (this._anchorCache.A0_G0.dispose(), this._anchorCache.A0_G0 = null), this._anchorCache.A0_G1 && (this._anchorCache.A0_G1.dispose(), this._anchorCache.A0_G1 = null), this._anchorCache.A1_G0 && (this._anchorCache.A1_G0.dispose(), this._anchorCache.A1_G0 = null), this._anchorCache.A1_G1 && (this._anchorCache.A1_G1.dispose(), this._anchorCache.A1_G1 = null);
          }
          push(e3) {
            this._items.push(e3), this._hasAnchors = this._hasAnchors || e3.hasAnchor;
          }
          unshift(e3) {
            this._items.unshift(e3), this._hasAnchors = this._hasAnchors || e3.hasAnchor;
          }
          length() {
            return this._items.length;
          }
          setSource(e3, t3) {
            this._items[e3].source !== t3 && (this._disposeCaches(), this._items[e3].setSource(t3));
          }
          compile(e3) {
            if (!this._cached) {
              let t3 = this._items.map((e4) => e4.source);
              this._cached = new g(e3, t3, this._items.map((e4) => e4.ruleId));
            }
            return this._cached;
          }
          compileAG(e3, t3, n2) {
            return this._hasAnchors ? t3 ? n2 ? (this._anchorCache.A1_G1 || (this._anchorCache.A1_G1 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A1_G1) : (this._anchorCache.A1_G0 || (this._anchorCache.A1_G0 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A1_G0) : n2 ? (this._anchorCache.A0_G1 || (this._anchorCache.A0_G1 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A0_G1) : (this._anchorCache.A0_G0 || (this._anchorCache.A0_G0 = this._resolveAnchors(e3, t3, n2)), this._anchorCache.A0_G0) : this.compile(e3);
          }
          _resolveAnchors(e3, t3, n2) {
            let s2 = this._items.map((e4) => e4.resolveAnchors(t3, n2));
            return new g(e3, s2, this._items.map((e4) => e4.ruleId));
          }
        }
        t2.RegExpSourceList = m;
        class g {
          constructor(e3, t3, n2) {
            this.regExps = t3, this.rules = n2, this.scanner = e3.createOnigScanner(t3);
          }
          dispose() {
            "function" == typeof this.scanner.dispose && this.scanner.dispose();
          }
          toString() {
            const e3 = [];
            for (let t3 = 0, n2 = this.rules.length; t3 < n2; t3++) e3.push("   - " + this.rules[t3] + ": " + this.regExps[t3]);
            return e3.join("\n");
          }
          findNextMatchSync(e3, t3, n2) {
            const s2 = this.scanner.findNextMatchSync(e3, t3, n2);
            return s2 ? { ruleId: this.rules[s2.index], captureIndices: s2.captureIndices } : null;
          }
        }
        t2.CompiledRule = g;
      }, 583: (e2, t2, n) => {
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ThemeTrieElement = t2.ThemeTrieElementRule = t2.ColorMap = t2.fontStyleToString = t2.ParsedThemeRule = t2.parseTheme = t2.StyleAttributes = t2.ScopeStack = t2.Theme = void 0;
        const s = n(878);
        class r {
          constructor(e3, t3, n2) {
            this._colorMap = e3, this._defaults = t3, this._root = n2, this._cachedMatchRoot = new s.CachedFn((e4) => this._root.match(e4));
          }
          static createFromRawTheme(e3, t3) {
            return this.createFromParsedTheme(c(e3), t3);
          }
          static createFromParsedTheme(e3, t3) {
            return function(e4, t4) {
              e4.sort((e5, t5) => {
                let n3 = s.strcmp(e5.scope, t5.scope);
                return 0 !== n3 ? n3 : (n3 = s.strArrCmp(e5.parentScopes, t5.parentScopes), 0 !== n3 ? n3 : e5.index - t5.index);
              });
              let n2 = 0, i2 = "#000000", o2 = "#ffffff";
              for (; e4.length >= 1 && "" === e4[0].scope; ) {
                let t5 = e4.shift();
                -1 !== t5.fontStyle && (n2 = t5.fontStyle), null !== t5.foreground && (i2 = t5.foreground), null !== t5.background && (o2 = t5.background);
              }
              let c2 = new u(t4), l2 = new a(n2, c2.getId(i2), c2.getId(o2)), h2 = new d(new p(0, null, -1, 0, 0), []);
              for (let t5 = 0, n3 = e4.length; t5 < n3; t5++) {
                let n4 = e4[t5];
                h2.insert(0, n4.scope, n4.parentScopes, n4.fontStyle, c2.getId(n4.foreground), c2.getId(n4.background));
              }
              return new r(c2, l2, h2);
            }(e3, t3);
          }
          getColorMap() {
            return this._colorMap.getColorMap();
          }
          getDefaults() {
            return this._defaults;
          }
          match(e3) {
            if (null === e3) return this._defaults;
            const t3 = e3.scopeName, n2 = this._cachedMatchRoot.get(t3).find((t4) => function(e4, t5) {
              if (0 === t5.length) return true;
              for (let n3 = 0; n3 < t5.length; n3++) {
                let s2 = t5[n3], r2 = false;
                if (">" === s2) {
                  if (n3 === t5.length - 1) return false;
                  s2 = t5[++n3], r2 = true;
                }
                for (; e4 && !o(e4.scopeName, s2); ) {
                  if (r2) return false;
                  e4 = e4.parent;
                }
                if (!e4) return false;
                e4 = e4.parent;
              }
              return true;
            }(e3.parent, t4.parentScopes));
            return n2 ? new a(n2.fontStyle, n2.foreground, n2.background) : null;
          }
        }
        t2.Theme = r;
        class i {
          constructor(e3, t3) {
            this.parent = e3, this.scopeName = t3;
          }
          static push(e3, t3) {
            for (const n2 of t3) e3 = new i(e3, n2);
            return e3;
          }
          static from(...e3) {
            let t3 = null;
            for (let n2 = 0; n2 < e3.length; n2++) t3 = new i(t3, e3[n2]);
            return t3;
          }
          push(e3) {
            return new i(this, e3);
          }
          getSegments() {
            let e3 = this;
            const t3 = [];
            for (; e3; ) t3.push(e3.scopeName), e3 = e3.parent;
            return t3.reverse(), t3;
          }
          toString() {
            return this.getSegments().join(" ");
          }
          extends(e3) {
            return this === e3 || null !== this.parent && this.parent.extends(e3);
          }
          getExtensionIfDefined(e3) {
            const t3 = [];
            let n2 = this;
            for (; n2 && n2 !== e3; ) t3.push(n2.scopeName), n2 = n2.parent;
            return n2 === e3 ? t3.reverse() : void 0;
          }
        }
        function o(e3, t3) {
          return t3 === e3 || e3.startsWith(t3) && "." === e3[t3.length];
        }
        t2.ScopeStack = i;
        class a {
          constructor(e3, t3, n2) {
            this.fontStyle = e3, this.foregroundId = t3, this.backgroundId = n2;
          }
        }
        function c(e3) {
          if (!e3) return [];
          if (!e3.settings || !Array.isArray(e3.settings)) return [];
          let t3 = e3.settings, n2 = [], r2 = 0;
          for (let e4 = 0, i2 = t3.length; e4 < i2; e4++) {
            let i3, o2 = t3[e4];
            if (!o2.settings) continue;
            if ("string" == typeof o2.scope) {
              let e5 = o2.scope;
              e5 = e5.replace(/^[,]+/, ""), e5 = e5.replace(/[,]+$/, ""), i3 = e5.split(",");
            } else i3 = Array.isArray(o2.scope) ? o2.scope : [""];
            let a2 = -1;
            if ("string" == typeof o2.settings.fontStyle) {
              a2 = 0;
              let e5 = o2.settings.fontStyle.split(" ");
              for (let t4 = 0, n3 = e5.length; t4 < n3; t4++) switch (e5[t4]) {
                case "italic":
                  a2 |= 1;
                  break;
                case "bold":
                  a2 |= 2;
                  break;
                case "underline":
                  a2 |= 4;
                  break;
                case "strikethrough":
                  a2 |= 8;
              }
            }
            let c2 = null;
            "string" == typeof o2.settings.foreground && s.isValidHexColor(o2.settings.foreground) && (c2 = o2.settings.foreground);
            let u2 = null;
            "string" == typeof o2.settings.background && s.isValidHexColor(o2.settings.background) && (u2 = o2.settings.background);
            for (let t4 = 0, s2 = i3.length; t4 < s2; t4++) {
              let s3 = i3[t4].trim().split(" "), o3 = s3[s3.length - 1], h2 = null;
              s3.length > 1 && (h2 = s3.slice(0, s3.length - 1), h2.reverse()), n2[r2++] = new l(o3, h2, e4, a2, c2, u2);
            }
          }
          return n2;
        }
        t2.StyleAttributes = a, t2.parseTheme = c;
        class l {
          constructor(e3, t3, n2, s2, r2, i2) {
            this.scope = e3, this.parentScopes = t3, this.index = n2, this.fontStyle = s2, this.foreground = r2, this.background = i2;
          }
        }
        t2.ParsedThemeRule = l, t2.fontStyleToString = function(e3) {
          if (-1 === e3) return "not set";
          let t3 = "";
          return 1 & e3 && (t3 += "italic "), 2 & e3 && (t3 += "bold "), 4 & e3 && (t3 += "underline "), 8 & e3 && (t3 += "strikethrough "), "" === t3 && (t3 = "none"), t3.trim();
        };
        class u {
          constructor(e3) {
            if (this._lastColorId = 0, this._id2color = [], this._color2id = /* @__PURE__ */ Object.create(null), Array.isArray(e3)) {
              this._isFrozen = true;
              for (let t3 = 0, n2 = e3.length; t3 < n2; t3++) this._color2id[e3[t3]] = t3, this._id2color[t3] = e3[t3];
            } else this._isFrozen = false;
          }
          getId(e3) {
            if (null === e3) return 0;
            e3 = e3.toUpperCase();
            let t3 = this._color2id[e3];
            if (t3) return t3;
            if (this._isFrozen) throw new Error(`Missing color in color map - ${e3}`);
            return t3 = ++this._lastColorId, this._color2id[e3] = t3, this._id2color[t3] = e3, t3;
          }
          getColorMap() {
            return this._id2color.slice(0);
          }
        }
        t2.ColorMap = u;
        const h = Object.freeze([]);
        class p {
          constructor(e3, t3, n2, s2, r2) {
            this.scopeDepth = e3, this.parentScopes = t3 || h, this.fontStyle = n2, this.foreground = s2, this.background = r2;
          }
          clone() {
            return new p(this.scopeDepth, this.parentScopes, this.fontStyle, this.foreground, this.background);
          }
          static cloneArr(e3) {
            let t3 = [];
            for (let n2 = 0, s2 = e3.length; n2 < s2; n2++) t3[n2] = e3[n2].clone();
            return t3;
          }
          acceptOverwrite(e3, t3, n2, s2) {
            this.scopeDepth > e3 ? console.log("how did this happen?") : this.scopeDepth = e3, -1 !== t3 && (this.fontStyle = t3), 0 !== n2 && (this.foreground = n2), 0 !== s2 && (this.background = s2);
          }
        }
        t2.ThemeTrieElementRule = p;
        class d {
          constructor(e3, t3 = [], n2 = {}) {
            this._mainRule = e3, this._children = n2, this._rulesWithParentScopes = t3;
          }
          static _cmpBySpecificity(e3, t3) {
            if (e3.scopeDepth !== t3.scopeDepth) return t3.scopeDepth - e3.scopeDepth;
            let n2 = 0, s2 = 0;
            for (; ">" === e3.parentScopes[n2] && n2++, ">" === t3.parentScopes[s2] && s2++, !(n2 >= e3.parentScopes.length || s2 >= t3.parentScopes.length); ) {
              const r2 = t3.parentScopes[s2].length - e3.parentScopes[n2].length;
              if (0 !== r2) return r2;
              n2++, s2++;
            }
            return t3.parentScopes.length - e3.parentScopes.length;
          }
          match(e3) {
            if ("" !== e3) {
              let t4, n2, s2 = e3.indexOf(".");
              if (-1 === s2 ? (t4 = e3, n2 = "") : (t4 = e3.substring(0, s2), n2 = e3.substring(s2 + 1)), this._children.hasOwnProperty(t4)) return this._children[t4].match(n2);
            }
            const t3 = this._rulesWithParentScopes.concat(this._mainRule);
            return t3.sort(d._cmpBySpecificity), t3;
          }
          insert(e3, t3, n2, s2, r2, i2) {
            if ("" === t3) return void this._doInsertHere(e3, n2, s2, r2, i2);
            let o2, a2, c2, l2 = t3.indexOf(".");
            -1 === l2 ? (o2 = t3, a2 = "") : (o2 = t3.substring(0, l2), a2 = t3.substring(l2 + 1)), this._children.hasOwnProperty(o2) ? c2 = this._children[o2] : (c2 = new d(this._mainRule.clone(), p.cloneArr(this._rulesWithParentScopes)), this._children[o2] = c2), c2.insert(e3 + 1, a2, n2, s2, r2, i2);
          }
          _doInsertHere(e3, t3, n2, r2, i2) {
            if (null !== t3) {
              for (let o2 = 0, a2 = this._rulesWithParentScopes.length; o2 < a2; o2++) {
                let a3 = this._rulesWithParentScopes[o2];
                if (0 === s.strArrCmp(a3.parentScopes, t3)) return void a3.acceptOverwrite(e3, n2, r2, i2);
              }
              -1 === n2 && (n2 = this._mainRule.fontStyle), 0 === r2 && (r2 = this._mainRule.foreground), 0 === i2 && (i2 = this._mainRule.background), this._rulesWithParentScopes.push(new p(e3, t3, n2, r2, i2));
            } else this._mainRule.acceptOverwrite(e3, n2, r2, i2);
          }
        }
        t2.ThemeTrieElement = d;
      }, 878: (e2, t2) => {
        function n(e3) {
          return Array.isArray(e3) ? function(e4) {
            let t3 = [];
            for (let s2 = 0, r2 = e4.length; s2 < r2; s2++) t3[s2] = n(e4[s2]);
            return t3;
          }(e3) : "object" == typeof e3 ? function(e4) {
            let t3 = {};
            for (let s2 in e4) t3[s2] = n(e4[s2]);
            return t3;
          }(e3) : e3;
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.performanceNow = t2.CachedFn = t2.escapeRegExpCharacters = t2.isValidHexColor = t2.strArrCmp = t2.strcmp = t2.RegexSource = t2.basename = t2.mergeObjects = t2.clone = void 0, t2.clone = function(e3) {
          return n(e3);
        }, t2.mergeObjects = function(e3, ...t3) {
          return t3.forEach((t4) => {
            for (let n2 in t4) e3[n2] = t4[n2];
          }), e3;
        }, t2.basename = function e3(t3) {
          const n2 = ~t3.lastIndexOf("/") || ~t3.lastIndexOf("\\");
          return 0 === n2 ? t3 : ~n2 == t3.length - 1 ? e3(t3.substring(0, t3.length - 1)) : t3.substr(1 + ~n2);
        };
        let s = /\$(\d+)|\${(\d+):\/(downcase|upcase)}/g;
        function r(e3, t3) {
          return e3 < t3 ? -1 : e3 > t3 ? 1 : 0;
        }
        t2.RegexSource = class {
          static hasCaptures(e3) {
            return null !== e3 && (s.lastIndex = 0, s.test(e3));
          }
          static replaceCaptures(e3, t3, n2) {
            return e3.replace(s, (e4, s2, r2, i) => {
              let o = n2[parseInt(s2 || r2, 10)];
              if (!o) return e4;
              {
                let e5 = t3.substring(o.start, o.end);
                for (; "." === e5[0]; ) e5 = e5.substring(1);
                switch (i) {
                  case "downcase":
                    return e5.toLowerCase();
                  case "upcase":
                    return e5.toUpperCase();
                  default:
                    return e5;
                }
              }
            });
          }
        }, t2.strcmp = r, t2.strArrCmp = function(e3, t3) {
          if (null === e3 && null === t3) return 0;
          if (!e3) return -1;
          if (!t3) return 1;
          let n2 = e3.length, s2 = t3.length;
          if (n2 === s2) {
            for (let s3 = 0; s3 < n2; s3++) {
              let n3 = r(e3[s3], t3[s3]);
              if (0 !== n3) return n3;
            }
            return 0;
          }
          return n2 - s2;
        }, t2.isValidHexColor = function(e3) {
          return !!(/^#[0-9a-f]{6}$/i.test(e3) || /^#[0-9a-f]{8}$/i.test(e3) || /^#[0-9a-f]{3}$/i.test(e3) || /^#[0-9a-f]{4}$/i.test(e3));
        }, t2.escapeRegExpCharacters = function(e3) {
          return e3.replace(/[\-\\\{\}\*\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, "\\$&");
        }, t2.CachedFn = class {
          constructor(e3) {
            this.fn = e3, this.cache = /* @__PURE__ */ new Map();
          }
          get(e3) {
            if (this.cache.has(e3)) return this.cache.get(e3);
            const t3 = this.fn(e3);
            return this.cache.set(e3, t3), t3;
          }
        }, t2.performanceNow = "undefined" == typeof performance ? function() {
          return Date.now();
        } : function() {
          return performance.now();
        };
      } }, t = {};
      return function n(s) {
        var r = t[s];
        if (void 0 !== r) return r.exports;
        var i = t[s] = { exports: {} };
        return e[s].call(i.exports, i, i.exports, n), i.exports;
      }(787);
    })());
  }
});

// src/index.tsx
var import_client = __toESM(require_client());

// node_modules/react-router-dom/dist/index.js
var React2 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/react-router/dist/index.js
var React = __toESM(require_react());

// node_modules/@remix-run/router/dist/router.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
var PopStateEventType = "popstate";
function createBrowserHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search: search2,
      hash
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search: search2,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to === "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined") console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index2) {
  return {
    usr: location.state,
    key: location.key,
    idx: index2
  };
}
function createLocation(current2, to, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends({
    pathname: typeof current2 === "string" ? current2 : current2.pathname,
    search: "",
    hash: ""
  }, typeof to === "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search: search2 = "",
    hash = ""
  } = _ref;
  if (search2 && search2 !== "?") pathname += search2.charAt(0) === "?" ? search2 : "?" + search2;
  if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path2) {
  let parsedPath = {};
  if (path2) {
    let hashIndex = path2.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path2.substr(hashIndex);
      path2 = path2.substr(0, hashIndex);
    }
    let searchIndex = path2.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path2.substr(searchIndex);
      path2 = path2.substr(0, searchIndex);
    }
    if (path2) {
      parsedPath.pathname = path2;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex2 = getIndex();
    let delta = nextIndex2 == null ? null : nextIndex2 - index2;
    index2 = nextIndex2;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push2(to, state) {
    action = Action.Push;
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace3(to, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to, state);
    if (validateLocation) validateLocation(location, to);
    index2 = getIndex();
    let historyState = getHistoryState(location, index2);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push: push2,
    replace: replace3,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
var immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
function isIndexRoute(route) {
  return route.index === true;
}
function convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath, manifest) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  if (manifest === void 0) {
    manifest = {};
  }
  return routes.map((route, index2) => {
    let treePath = [...parentPath, String(index2)];
    let id = typeof route.id === "string" ? route.id : treePath.join("-");
    invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
    invariant(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`);
    if (isIndexRoute(route)) {
      let indexRoute = _extends({}, route, mapRouteProperties2(route), {
        id
      });
      manifest[id] = indexRoute;
      return indexRoute;
    } else {
      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties2(route), {
        id,
        children: void 0
      });
      manifest[id] = pathOrLayoutRoute;
      if (route.children) {
        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties2, treePath, manifest);
      }
      return pathOrLayoutRoute;
    }
  });
}
function matchRoutes(routes, locationArg, basename2) {
  if (basename2 === void 0) {
    basename2 = "/";
  }
  return matchRoutesImpl(routes, locationArg, basename2, false);
}
function matchRoutesImpl(routes, locationArg, basename2, allowPartial) {
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename2);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i], decoded, allowPartial);
  }
  return matches;
}
function convertRouteMatchToUiMatch(match, loaderData) {
  let {
    route,
    pathname,
    params
  } = match;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path2 = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path2 + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path2);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path: path2,
      score: computeScore(path2, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path2) {
  let segments = path2.split("/");
  if (segments.length === 0) return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
}
var paramRe = /^:[\w-]+$/;
var dynamicSegmentValue = 3;
var indexRouteValue = 2;
var emptySegmentValue = 1;
var staticSegmentValue = 10;
var splatPenalty = -2;
var isSplat = (s) => s === "*";
function computeScore(path2, index2) {
  let segments = path2.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score2, segment) => score2 + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b) {
  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial) {
  if (allowPartial === void 0) {
    allowPartial = false;
  }
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    let route = meta.route;
    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end: false
      }, remainingPathname);
    }
    if (!match) {
      return null;
    }
    Object.assign(matchedParams, match.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
      route
    });
    if (match.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
    }
  }
  return matches;
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match = pathname.match(matcher);
  if (!match) return null;
  let matchedPathname = match[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match.slice(1);
  let params = compiledParams.reduce((memo2, _ref, index2) => {
    let {
      paramName,
      isOptional
    } = _ref;
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index2];
    if (isOptional && !value) {
      memo2[paramName] = void 0;
    } else {
      memo2[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo2;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path2, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"), 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path2.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path2 !== "" && path2 !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename2) {
  if (basename2 === "/") return pathname;
  if (!pathname.toLowerCase().startsWith(basename2.toLowerCase())) {
    return null;
  }
  let startIndex = basename2.endsWith("/") ? basename2.length - 1 : basename2.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search: search2 = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search2),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1) segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path2) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path2) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
  }
  return pathMatches.map((match) => match.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = _extends({}, toArg);
    invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
    invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
    invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path2 = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path2.pathname += "/";
  }
  return path2;
}
var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
var normalizeSearch = (search2) => !search2 || search2 === "?" ? "" : search2.startsWith("?") ? search2 : "?" + search2;
var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
var ErrorResponseImpl = class {
  constructor(status, statusText, data2, internal) {
    if (internal === void 0) {
      internal = false;
    }
    this.status = status;
    this.statusText = statusText || "";
    this.internal = internal;
    if (data2 instanceof Error) {
      this.data = data2.toString();
      this.error = data2;
    } else {
      this.data = data2;
    }
  }
};
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
var validMutationMethodsArr = ["post", "put", "patch", "delete"];
var validMutationMethods = new Set(validMutationMethodsArr);
var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
var validRequestMethods = new Set(validRequestMethodsArr);
var redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
var redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
var IDLE_NAVIGATION = {
  state: "idle",
  location: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0,
  json: void 0,
  text: void 0
};
var IDLE_FETCHER = {
  state: "idle",
  data: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0,
  json: void 0,
  text: void 0
};
var IDLE_BLOCKER = {
  state: "unblocked",
  proceed: void 0,
  reset: void 0,
  location: void 0
};
var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
var defaultMapRouteProperties = (route) => ({
  hasErrorBoundary: Boolean(route.hasErrorBoundary)
});
var TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
function createRouter(init) {
  const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
  const isBrowser2 = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
  const isServer = !isBrowser2;
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let mapRouteProperties2;
  if (init.mapRouteProperties) {
    mapRouteProperties2 = init.mapRouteProperties;
  } else if (init.detectErrorBoundary) {
    let detectErrorBoundary = init.detectErrorBoundary;
    mapRouteProperties2 = (route) => ({
      hasErrorBoundary: detectErrorBoundary(route)
    });
  } else {
    mapRouteProperties2 = defaultMapRouteProperties;
  }
  let manifest = {};
  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties2, void 0, manifest);
  let inFlightDataRoutes;
  let basename2 = init.basename || "/";
  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;
  let patchRoutesOnMissImpl = init.unstable_patchRoutesOnMiss;
  let future = _extends({
    v7_fetcherPersist: false,
    v7_normalizeFormMethod: false,
    v7_partialHydration: false,
    v7_prependBasename: false,
    v7_relativeSplatPath: false,
    v7_skipActionErrorRevalidation: false
  }, init.future);
  let unlistenHistory = null;
  let subscribers = /* @__PURE__ */ new Set();
  let savedScrollPositions2 = null;
  let getScrollRestorationKey = null;
  let getScrollPosition = null;
  let initialScrollRestored = init.hydrationData != null;
  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename2);
  let initialErrors = null;
  if (initialMatches == null && !patchRoutesOnMissImpl) {
    let error = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    });
    let {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches;
    initialErrors = {
      [route.id]: error
    };
  }
  if (initialMatches && !init.hydrationData) {
    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);
    if (fogOfWar.active) {
      initialMatches = null;
    }
  }
  let initialized;
  if (!initialMatches) {
    initialized = false;
    initialMatches = [];
    if (future.v7_partialHydration) {
      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);
      if (fogOfWar.active && fogOfWar.matches) {
        initialMatches = fogOfWar.matches;
      }
    }
  } else if (initialMatches.some((m) => m.route.lazy)) {
    initialized = false;
  } else if (!initialMatches.some((m) => m.route.loader)) {
    initialized = true;
  } else if (future.v7_partialHydration) {
    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
    let errors = init.hydrationData ? init.hydrationData.errors : null;
    let isRouteInitialized = (m) => {
      if (!m.route.loader) {
        return true;
      }
      if (typeof m.route.loader === "function" && m.route.loader.hydrate === true) {
        return false;
      }
      return loaderData && loaderData[m.route.id] !== void 0 || errors && errors[m.route.id] !== void 0;
    };
    if (errors) {
      let idx = initialMatches.findIndex((m) => errors[m.route.id] !== void 0);
      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);
    } else {
      initialized = initialMatches.every(isRouteInitialized);
    }
  } else {
    initialized = init.hydrationData != null;
  }
  let router2;
  let state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    // Don't restore on initial updateState() if we were SSR'd
    restoreScrollPosition: init.hydrationData != null ? false : null,
    preventScrollReset: false,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  };
  let pendingAction = Action.Pop;
  let pendingPreventScrollReset = false;
  let pendingNavigationController;
  let pendingViewTransitionEnabled = false;
  let appliedViewTransitions = /* @__PURE__ */ new Map();
  let removePageHideEventListener = null;
  let isUninterruptedRevalidation = false;
  let isRevalidationRequired = false;
  let cancelledDeferredRoutes = [];
  let cancelledFetcherLoads = /* @__PURE__ */ new Set();
  let fetchControllers = /* @__PURE__ */ new Map();
  let incrementingLoadId = 0;
  let pendingNavigationLoadId = -1;
  let fetchReloadIds = /* @__PURE__ */ new Map();
  let fetchRedirectIds = /* @__PURE__ */ new Set();
  let fetchLoadMatches = /* @__PURE__ */ new Map();
  let activeFetchers = /* @__PURE__ */ new Map();
  let deletedFetchers = /* @__PURE__ */ new Set();
  let activeDeferreds = /* @__PURE__ */ new Map();
  let blockerFunctions = /* @__PURE__ */ new Map();
  let pendingPatchRoutes = /* @__PURE__ */ new Map();
  let ignoreNextHistoryUpdate = false;
  function initialize() {
    unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location,
        delta
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = false;
        return;
      }
      warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location,
        historyAction
      });
      if (blockerKey && delta != null) {
        ignoreNextHistoryUpdate = true;
        init.history.go(delta * -1);
        updateBlocker(blockerKey, {
          state: "blocked",
          location,
          proceed() {
            updateBlocker(blockerKey, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location
            });
            init.history.go(delta);
          },
          reset() {
            let blockers = new Map(state.blockers);
            blockers.set(blockerKey, IDLE_BLOCKER);
            updateState({
              blockers
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location);
    });
    if (isBrowser2) {
      restoreAppliedTransitions(routerWindow, appliedViewTransitions);
      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
      routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
      removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
    }
    if (!state.initialized) {
      startNavigation(Action.Pop, state.location, {
        initialHydration: true
      });
    }
    return router2;
  }
  function dispose() {
    if (unlistenHistory) {
      unlistenHistory();
    }
    if (removePageHideEventListener) {
      removePageHideEventListener();
    }
    subscribers.clear();
    pendingNavigationController && pendingNavigationController.abort();
    state.fetchers.forEach((_, key) => deleteFetcher(key));
    state.blockers.forEach((_, key) => deleteBlocker(key));
  }
  function subscribe(fn) {
    subscribers.add(fn);
    return () => subscribers.delete(fn);
  }
  function updateState(newState, opts) {
    if (opts === void 0) {
      opts = {};
    }
    state = _extends({}, state, newState);
    let completedFetchers = [];
    let deletedFetchersKeys = [];
    if (future.v7_fetcherPersist) {
      state.fetchers.forEach((fetcher, key) => {
        if (fetcher.state === "idle") {
          if (deletedFetchers.has(key)) {
            deletedFetchersKeys.push(key);
          } else {
            completedFetchers.push(key);
          }
        }
      });
    }
    [...subscribers].forEach((subscriber) => subscriber(state, {
      deletedFetchers: deletedFetchersKeys,
      unstable_viewTransitionOpts: opts.viewTransitionOpts,
      unstable_flushSync: opts.flushSync === true
    }));
    if (future.v7_fetcherPersist) {
      completedFetchers.forEach((key) => state.fetchers.delete(key));
      deletedFetchersKeys.forEach((key) => deleteFetcher(key));
    }
  }
  function completeNavigation(location, newState, _temp) {
    var _location$state, _location$state2;
    let {
      flushSync
    } = _temp === void 0 ? {} : _temp;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
    let actionData;
    if (newState.actionData) {
      if (Object.keys(newState.actionData).length > 0) {
        actionData = newState.actionData;
      } else {
        actionData = null;
      }
    } else if (isActionReload) {
      actionData = state.actionData;
    } else {
      actionData = null;
    }
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    let blockers = state.blockers;
    if (blockers.size > 0) {
      blockers = new Map(blockers);
      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));
    }
    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
    if (inFlightDataRoutes) {
      dataRoutes = inFlightDataRoutes;
      inFlightDataRoutes = void 0;
    }
    if (isUninterruptedRevalidation) ;
    else if (pendingAction === Action.Pop) ;
    else if (pendingAction === Action.Push) {
      init.history.push(location, location.state);
    } else if (pendingAction === Action.Replace) {
      init.history.replace(location, location.state);
    }
    let viewTransitionOpts;
    if (pendingAction === Action.Pop) {
      let priorPaths = appliedViewTransitions.get(state.location.pathname);
      if (priorPaths && priorPaths.has(location.pathname)) {
        viewTransitionOpts = {
          currentLocation: state.location,
          nextLocation: location
        };
      } else if (appliedViewTransitions.has(location.pathname)) {
        viewTransitionOpts = {
          currentLocation: location,
          nextLocation: state.location
        };
      }
    } else if (pendingViewTransitionEnabled) {
      let toPaths = appliedViewTransitions.get(state.location.pathname);
      if (toPaths) {
        toPaths.add(location.pathname);
      } else {
        toPaths = /* @__PURE__ */ new Set([location.pathname]);
        appliedViewTransitions.set(state.location.pathname, toPaths);
      }
      viewTransitionOpts = {
        currentLocation: state.location,
        nextLocation: location
      };
    }
    updateState(_extends({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location,
      initialized: true,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
      preventScrollReset,
      blockers
    }), {
      viewTransitionOpts,
      flushSync: flushSync === true
    });
    pendingAction = Action.Pop;
    pendingPreventScrollReset = false;
    pendingViewTransitionEnabled = false;
    isUninterruptedRevalidation = false;
    isRevalidationRequired = false;
    cancelledDeferredRoutes = [];
  }
  async function navigate(to, opts) {
    if (typeof to === "number") {
      init.history.go(to);
      return;
    }
    let normalizedPath = normalizeTo(state.location, state.matches, basename2, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
    let {
      path: path2,
      submission,
      error
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
    let currentLocation = state.location;
    let nextLocation = createLocation(state.location, path2, opts && opts.state);
    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0;
    let historyAction = Action.Push;
    if (userReplace === true) {
      historyAction = Action.Replace;
    } else if (userReplace === false) ;
    else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
      historyAction = Action.Replace;
    }
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
    let flushSync = (opts && opts.unstable_flushSync) === true;
    let blockerKey = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey) {
      updateBlocker(blockerKey, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          });
          navigate(to, opts);
        },
        reset() {
          let blockers = new Map(state.blockers);
          blockers.set(blockerKey, IDLE_BLOCKER);
          updateState({
            blockers
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      // Send through the formData serialization error if we have one so we can
      // render at the right error boundary after we match routes
      pendingError: error,
      preventScrollReset,
      replace: opts && opts.replace,
      enableViewTransition: opts && opts.unstable_viewTransition,
      flushSync
    });
  }
  function revalidate() {
    interruptActiveLoads();
    updateState({
      revalidation: "loading"
    });
    if (state.navigation.state === "submitting") {
      return;
    }
    if (state.navigation.state === "idle") {
      startNavigation(state.historyAction, state.location, {
        startUninterruptedRevalidation: true
      });
      return;
    }
    startNavigation(pendingAction || state.historyAction, state.navigation.location, {
      overrideNavigation: state.navigation
    });
  }
  async function startNavigation(historyAction, location, opts) {
    pendingNavigationController && pendingNavigationController.abort();
    pendingNavigationController = null;
    pendingAction = historyAction;
    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
    saveScrollPosition(state.location, state.matches);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let loadingNavigation = opts && opts.overrideNavigation;
    let matches = matchRoutes(routesToUse, location, basename2);
    let flushSync = (opts && opts.flushSync) === true;
    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);
    if (fogOfWar.active && fogOfWar.matches) {
      matches = fogOfWar.matches;
    }
    if (!matches) {
      let {
        error,
        notFoundMatches,
        route
      } = handleNavigational404(location.pathname);
      completeNavigation(location, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error
        }
      }, {
        flushSync
      });
      return;
    }
    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location, {
        matches
      }, {
        flushSync
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
    let pendingActionResult;
    if (opts && opts.pendingError) {
      pendingActionResult = [findNearestBoundary(matches).route.id, {
        type: ResultType.error,
        error: opts.pendingError
      }];
    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {
        replace: opts.replace,
        flushSync
      });
      if (actionResult.shortCircuited) {
        return;
      }
      if (actionResult.pendingActionResult) {
        let [routeId, result] = actionResult.pendingActionResult;
        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {
          pendingNavigationController = null;
          completeNavigation(location, {
            matches: actionResult.matches,
            loaderData: {},
            errors: {
              [routeId]: result.error
            }
          });
          return;
        }
      }
      matches = actionResult.matches || matches;
      pendingActionResult = actionResult.pendingActionResult;
      loadingNavigation = getLoadingNavigation(location, opts.submission);
      flushSync = false;
      fogOfWar.active = false;
      request = createClientSideRequest(init.history, request.url, request.signal);
    }
    let {
      shortCircuited,
      matches: updatedMatches,
      loaderData,
      errors
    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);
    if (shortCircuited) {
      return;
    }
    pendingNavigationController = null;
    completeNavigation(location, _extends({
      matches: updatedMatches || matches
    }, getActionDataForCommit(pendingActionResult), {
      loaderData,
      errors
    }));
  }
  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {
    if (opts === void 0) {
      opts = {};
    }
    interruptActiveLoads();
    let navigation = getSubmittingNavigation(location, submission);
    updateState({
      navigation
    }, {
      flushSync: opts.flushSync === true
    });
    if (isFogOfWar) {
      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);
      if (discoverResult.type === "aborted") {
        return {
          shortCircuited: true
        };
      } else if (discoverResult.type === "error") {
        let {
          boundaryId,
          error
        } = handleDiscoverRouteError(location.pathname, discoverResult);
        return {
          matches: discoverResult.partialMatches,
          pendingActionResult: [boundaryId, {
            type: ResultType.error,
            error
          }]
        };
      } else if (!discoverResult.matches) {
        let {
          notFoundMatches,
          error,
          route
        } = handleNavigational404(location.pathname);
        return {
          matches: notFoundMatches,
          pendingActionResult: [route.id, {
            type: ResultType.error,
            error
          }]
        };
      } else {
        matches = discoverResult.matches;
      }
    }
    let result;
    let actionMatch = getTargetMatch(matches, location);
    if (!actionMatch.route.action && !actionMatch.route.lazy) {
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location.pathname,
          routeId: actionMatch.route.id
        })
      };
    } else {
      let results = await callDataStrategy("action", request, [actionMatch], matches);
      result = results[0];
      if (request.signal.aborted) {
        return {
          shortCircuited: true
        };
      }
    }
    if (isRedirectResult(result)) {
      let replace3;
      if (opts && opts.replace != null) {
        replace3 = opts.replace;
      } else {
        let location2 = normalizeRedirectLocation(result.response.headers.get("Location"), new URL(request.url), basename2);
        replace3 = location2 === state.location.pathname + state.location.search;
      }
      await startRedirectNavigation(request, result, {
        submission,
        replace: replace3
      });
      return {
        shortCircuited: true
      };
    }
    if (isDeferredResult(result)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      if ((opts && opts.replace) !== true) {
        pendingAction = Action.Push;
      }
      return {
        matches,
        pendingActionResult: [boundaryMatch.route.id, result]
      };
    }
    return {
      matches,
      pendingActionResult: [actionMatch.route.id, result]
    };
  }
  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace3, initialHydration, flushSync, pendingActionResult) {
    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);
    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);
    if (isFogOfWar) {
      if (shouldUpdateNavigationState) {
        let actionData = getUpdatedActionData(pendingActionResult);
        updateState(_extends({
          navigation: loadingNavigation
        }, actionData !== void 0 ? {
          actionData
        } : {}), {
          flushSync
        });
      }
      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);
      if (discoverResult.type === "aborted") {
        return {
          shortCircuited: true
        };
      } else if (discoverResult.type === "error") {
        let {
          boundaryId,
          error
        } = handleDiscoverRouteError(location.pathname, discoverResult);
        return {
          matches: discoverResult.partialMatches,
          loaderData: {},
          errors: {
            [boundaryId]: error
          }
        };
      } else if (!discoverResult.matches) {
        let {
          error,
          notFoundMatches,
          route
        } = handleNavigational404(location.pathname);
        return {
          matches: notFoundMatches,
          loaderData: {},
          errors: {
            [route.id]: error
          }
        };
      } else {
        matches = discoverResult.matches;
      }
    }
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename2, pendingActionResult);
    cancelActiveDeferreds((routeId) => !(matches && matches.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId));
    pendingNavigationLoadId = ++incrementingLoadId;
    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
      let updatedFetchers2 = markFetchRedirectsDone();
      completeNavigation(location, _extends({
        matches,
        loaderData: {},
        // Commit pending error if we're short circuiting
        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {
          [pendingActionResult[0]]: pendingActionResult[1].error
        } : null
      }, getActionDataForCommit(pendingActionResult), updatedFetchers2 ? {
        fetchers: new Map(state.fetchers)
      } : {}), {
        flushSync
      });
      return {
        shortCircuited: true
      };
    }
    if (shouldUpdateNavigationState) {
      let updates = {};
      if (!isFogOfWar) {
        updates.navigation = loadingNavigation;
        let actionData = getUpdatedActionData(pendingActionResult);
        if (actionData !== void 0) {
          updates.actionData = actionData;
        }
      }
      if (revalidatingFetchers.length > 0) {
        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);
      }
      updateState(updates, {
        flushSync
      });
    }
    revalidatingFetchers.forEach((rf) => {
      if (fetchControllers.has(rf.key)) {
        abortFetcher(rf.key);
      }
      if (rf.controller) {
        fetchControllers.set(rf.key, rf.controller);
      }
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
    if (pendingNavigationController) {
      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    }
    let {
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted) {
      return {
        shortCircuited: true
      };
    }
    if (pendingNavigationController) {
      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    }
    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
    let redirect2 = findRedirect([...loaderResults, ...fetcherResults]);
    if (redirect2) {
      if (redirect2.idx >= matchesToLoad.length) {
        let fetcherKey = revalidatingFetchers[redirect2.idx - matchesToLoad.length].key;
        fetchRedirectIds.add(fetcherKey);
      }
      await startRedirectNavigation(request, redirect2.result, {
        replace: replace3
      });
      return {
        shortCircuited: true
      };
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        if (aborted || deferredData.done) {
          activeDeferreds.delete(routeId);
        }
      });
    });
    if (future.v7_partialHydration && initialHydration && state.errors) {
      Object.entries(state.errors).filter((_ref2) => {
        let [id] = _ref2;
        return !matchesToLoad.some((m) => m.route.id === id);
      }).forEach((_ref3) => {
        let [routeId, error] = _ref3;
        errors = Object.assign(errors || {}, {
          [routeId]: error
        });
      });
    }
    let updatedFetchers = markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
    return _extends({
      matches,
      loaderData,
      errors
    }, shouldUpdateFetchers ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function getUpdatedActionData(pendingActionResult) {
    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {
      return {
        [pendingActionResult[0]]: pendingActionResult[1].data
      };
    } else if (state.actionData) {
      if (Object.keys(state.actionData).length === 0) {
        return null;
      } else {
        return state.actionData;
      }
    }
  }
  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {
    revalidatingFetchers.forEach((rf) => {
      let fetcher = state.fetchers.get(rf.key);
      let revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
      state.fetchers.set(rf.key, revalidatingFetcher);
    });
    return new Map(state.fetchers);
  }
  function fetch2(key, routeId, href, opts) {
    if (isServer) {
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    }
    if (fetchControllers.has(key)) abortFetcher(key);
    let flushSync = (opts && opts.unstable_flushSync) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let normalizedPath = normalizeTo(state.location, state.matches, basename2, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);
    let matches = matchRoutes(routesToUse, normalizedPath, basename2);
    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);
    if (fogOfWar.active && fogOfWar.matches) {
      matches = fogOfWar.matches;
    }
    if (!matches) {
      setFetcherError(key, routeId, getInternalRouterError(404, {
        pathname: normalizedPath
      }), {
        flushSync
      });
      return;
    }
    let {
      path: path2,
      submission,
      error
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
    if (error) {
      setFetcherError(key, routeId, error, {
        flushSync
      });
      return;
    }
    let match = getTargetMatch(matches, path2);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    if (submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key, routeId, path2, match, matches, fogOfWar.active, flushSync, submission);
      return;
    }
    fetchLoadMatches.set(key, {
      routeId,
      path: path2
    });
    handleFetcherLoader(key, routeId, path2, match, matches, fogOfWar.active, flushSync, submission);
  }
  async function handleFetcherAction(key, routeId, path2, match, requestMatches, isFogOfWar, flushSync, submission) {
    interruptActiveLoads();
    fetchLoadMatches.delete(key);
    function detectAndHandle405Error(m) {
      if (!m.route.action && !m.route.lazy) {
        let error = getInternalRouterError(405, {
          method: submission.formMethod,
          pathname: path2,
          routeId
        });
        setFetcherError(key, routeId, error, {
          flushSync
        });
        return true;
      }
      return false;
    }
    if (!isFogOfWar && detectAndHandle405Error(match)) {
      return;
    }
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
      flushSync
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path2, abortController.signal, submission);
    if (isFogOfWar) {
      let discoverResult = await discoverRoutes(requestMatches, path2, fetchRequest.signal);
      if (discoverResult.type === "aborted") {
        return;
      } else if (discoverResult.type === "error") {
        let {
          error
        } = handleDiscoverRouteError(path2, discoverResult);
        setFetcherError(key, routeId, error, {
          flushSync
        });
        return;
      } else if (!discoverResult.matches) {
        setFetcherError(key, routeId, getInternalRouterError(404, {
          pathname: path2
        }), {
          flushSync
        });
        return;
      } else {
        requestMatches = discoverResult.matches;
        match = getTargetMatch(requestMatches, path2);
        if (detectAndHandle405Error(match)) {
          return;
        }
      }
    }
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId;
    let actionResults = await callDataStrategy("action", fetchRequest, [match], requestMatches);
    let actionResult = actionResults[0];
    if (fetchRequest.signal.aborted) {
      if (fetchControllers.get(key) === abortController) {
        fetchControllers.delete(key);
      }
      return;
    }
    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      }
    } else {
      if (isRedirectResult(actionResult)) {
        fetchControllers.delete(key);
        if (pendingNavigationLoadId > originatingLoadId) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        } else {
          fetchRedirectIds.add(key);
          updateFetcherState(key, getLoadingFetcher(submission));
          return startRedirectNavigation(fetchRequest, actionResult, {
            fetcherSubmission: submission
          });
        }
      }
      if (isErrorResult(actionResult)) {
        setFetcherError(key, routeId, actionResult.error);
        return;
      }
    }
    if (isDeferredResult(actionResult)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    let nextLocation = state.navigation.location || state.location;
    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename2) : state.matches;
    invariant(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let loadFetcher = getLoadingFetcher(submission, actionResult.data);
    state.fetchers.set(key, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename2, [match.route.id, actionResult]);
    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
      let staleKey = rf.key;
      let existingFetcher2 = state.fetchers.get(staleKey);
      let revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
      state.fetchers.set(staleKey, revalidatingFetcher);
      if (fetchControllers.has(staleKey)) {
        abortFetcher(staleKey);
      }
      if (rf.controller) {
        fetchControllers.set(staleKey, rf.controller);
      }
    });
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    let {
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted) {
      return;
    }
    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    fetchReloadIds.delete(key);
    fetchControllers.delete(key);
    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));
    let redirect2 = findRedirect([...loaderResults, ...fetcherResults]);
    if (redirect2) {
      if (redirect2.idx >= matchesToLoad.length) {
        let fetcherKey = revalidatingFetchers[redirect2.idx - matchesToLoad.length].key;
        fetchRedirectIds.add(fetcherKey);
      }
      return startRedirectNavigation(revalidationRequest, redirect2.result);
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
    if (state.fetchers.has(key)) {
      let doneFetcher = getDoneFetcher(actionResult.data);
      state.fetchers.set(key, doneFetcher);
    }
    abortStaleFetchLoads(loadId);
    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
      invariant(pendingAction, "Expected pending action");
      pendingNavigationController && pendingNavigationController.abort();
      completeNavigation(state.navigation.location, {
        matches,
        loaderData,
        errors,
        fetchers: new Map(state.fetchers)
      });
    } else {
      updateState({
        errors,
        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),
        fetchers: new Map(state.fetchers)
      });
      isRevalidationRequired = false;
    }
  }
  async function handleFetcherLoader(key, routeId, path2, match, matches, isFogOfWar, flushSync, submission) {
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0), {
      flushSync
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path2, abortController.signal);
    if (isFogOfWar) {
      let discoverResult = await discoverRoutes(matches, path2, fetchRequest.signal);
      if (discoverResult.type === "aborted") {
        return;
      } else if (discoverResult.type === "error") {
        let {
          error
        } = handleDiscoverRouteError(path2, discoverResult);
        setFetcherError(key, routeId, error, {
          flushSync
        });
        return;
      } else if (!discoverResult.matches) {
        setFetcherError(key, routeId, getInternalRouterError(404, {
          pathname: path2
        }), {
          flushSync
        });
        return;
      } else {
        matches = discoverResult.matches;
        match = getTargetMatch(matches, path2);
      }
    }
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId;
    let results = await callDataStrategy("loader", fetchRequest, [match], matches);
    let result = results[0];
    if (isDeferredResult(result)) {
      result = await resolveDeferredData(result, fetchRequest.signal, true) || result;
    }
    if (fetchControllers.get(key) === abortController) {
      fetchControllers.delete(key);
    }
    if (fetchRequest.signal.aborted) {
      return;
    }
    if (deletedFetchers.has(key)) {
      updateFetcherState(key, getDoneFetcher(void 0));
      return;
    }
    if (isRedirectResult(result)) {
      if (pendingNavigationLoadId > originatingLoadId) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      } else {
        fetchRedirectIds.add(key);
        await startRedirectNavigation(fetchRequest, result);
        return;
      }
    }
    if (isErrorResult(result)) {
      setFetcherError(key, routeId, result.error);
      return;
    }
    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
    updateFetcherState(key, getDoneFetcher(result.data));
  }
  async function startRedirectNavigation(request, redirect2, _temp2) {
    let {
      submission,
      fetcherSubmission,
      replace: replace3
    } = _temp2 === void 0 ? {} : _temp2;
    if (redirect2.response.headers.has("X-Remix-Revalidate")) {
      isRevalidationRequired = true;
    }
    let location = redirect2.response.headers.get("Location");
    invariant(location, "Expected a Location header on the redirect Response");
    location = normalizeRedirectLocation(location, new URL(request.url), basename2);
    let redirectLocation = createLocation(state.location, location, {
      _isRedirect: true
    });
    if (isBrowser2) {
      let isDocumentReload = false;
      if (redirect2.response.headers.has("X-Remix-Reload-Document")) {
        isDocumentReload = true;
      } else if (ABSOLUTE_URL_REGEX.test(location)) {
        const url = init.history.createURL(location);
        isDocumentReload = // Hard reload if it's an absolute URL to a new origin
        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
        stripBasename(url.pathname, basename2) == null;
      }
      if (isDocumentReload) {
        if (replace3) {
          routerWindow.location.replace(location);
        } else {
          routerWindow.location.assign(location);
        }
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace3 === true || redirect2.response.headers.has("X-Remix-Replace") ? Action.Replace : Action.Push;
    let {
      formMethod,
      formAction,
      formEncType
    } = state.navigation;
    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
      submission = getSubmissionFromNavigation(state.navigation);
    }
    let activeSubmission = submission || fetcherSubmission;
    if (redirectPreserveMethodStatusCodes.has(redirect2.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        submission: _extends({}, activeSubmission, {
          formAction: location
        }),
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    } else {
      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation,
        // Send fetcher submissions through for shouldRevalidate
        fetcherSubmission,
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    }
  }
  async function callDataStrategy(type, request, matchesToLoad, matches) {
    try {
      let results = await callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties2);
      return await Promise.all(results.map((result, i) => {
        if (isRedirectHandlerResult(result)) {
          let response = result.result;
          return {
            type: ResultType.redirect,
            response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename2, future.v7_relativeSplatPath)
          };
        }
        return convertHandlerResultToDataResult(result);
      }));
    } catch (e) {
      return matchesToLoad.map(() => ({
        type: ResultType.error,
        error: e
      }));
    }
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
    let [loaderResults, ...fetcherResults] = await Promise.all([matchesToLoad.length ? callDataStrategy("loader", request, matchesToLoad, matches) : [], ...fetchersToLoad.map((f) => {
      if (f.matches && f.match && f.controller) {
        let fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);
        return callDataStrategy("loader", fetcherRequest, [f.match], f.matches).then((r) => r[0]);
      } else {
        return Promise.resolve({
          type: ResultType.error,
          error: getInternalRouterError(404, {
            pathname: f.path
          })
        });
      }
    })]);
    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f) => f.match), fetcherResults, fetchersToLoad.map((f) => f.controller ? f.controller.signal : null), true)]);
    return {
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = true;
    cancelledDeferredRoutes.push(...cancelActiveDeferreds());
    fetchLoadMatches.forEach((_, key) => {
      if (fetchControllers.has(key)) {
        cancelledFetcherLoads.add(key);
        abortFetcher(key);
      }
    });
  }
  function updateFetcherState(key, fetcher, opts) {
    if (opts === void 0) {
      opts = {};
    }
    state.fetchers.set(key, fetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function setFetcherError(key, routeId, error, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key);
    updateState({
      errors: {
        [boundaryMatch.route.id]: error
      },
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function getFetcher(key) {
    if (future.v7_fetcherPersist) {
      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
      if (deletedFetchers.has(key)) {
        deletedFetchers.delete(key);
      }
    }
    return state.fetchers.get(key) || IDLE_FETCHER;
  }
  function deleteFetcher(key) {
    let fetcher = state.fetchers.get(key);
    if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
      abortFetcher(key);
    }
    fetchLoadMatches.delete(key);
    fetchReloadIds.delete(key);
    fetchRedirectIds.delete(key);
    deletedFetchers.delete(key);
    cancelledFetcherLoads.delete(key);
    state.fetchers.delete(key);
  }
  function deleteFetcherAndUpdateState(key) {
    if (future.v7_fetcherPersist) {
      let count = (activeFetchers.get(key) || 0) - 1;
      if (count <= 0) {
        activeFetchers.delete(key);
        deletedFetchers.add(key);
      } else {
        activeFetchers.set(key, count);
      }
    } else {
      deleteFetcher(key);
    }
    updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    invariant(controller, "Expected fetch controller: " + key);
    controller.abort();
    fetchControllers.delete(key);
  }
  function markFetchersDone(keys2) {
    for (let key of keys2) {
      let fetcher = getFetcher(key);
      let doneFetcher = getDoneFetcher(fetcher.data);
      state.fetchers.set(key, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    let updatedFetchers = false;
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant(fetcher, "Expected fetcher: " + key);
      if (fetcher.state === "loading") {
        fetchRedirectIds.delete(key);
        doneKeys.push(key);
        updatedFetchers = true;
      }
    }
    markFetchersDone(doneKeys);
    return updatedFetchers;
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds) {
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant(fetcher, "Expected fetcher: " + key);
        if (fetcher.state === "loading") {
          abortFetcher(key);
          fetchReloadIds.delete(key);
          yeetedKeys.push(key);
        }
      }
    }
    markFetchersDone(yeetedKeys);
    return yeetedKeys.length > 0;
  }
  function getBlocker(key, fn) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    if (blockerFunctions.get(key) !== fn) {
      blockerFunctions.set(key, fn);
    }
    return blocker;
  }
  function deleteBlocker(key) {
    state.blockers.delete(key);
    blockerFunctions.delete(key);
  }
  function updateBlocker(key, newBlocker) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
    let blockers = new Map(state.blockers);
    blockers.set(key, newBlocker);
    updateState({
      blockers
    });
  }
  function shouldBlockNavigation(_ref4) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref4;
    if (blockerFunctions.size === 0) {
      return;
    }
    if (blockerFunctions.size > 1) {
      warning(false, "A router only supports one blocker at a time");
    }
    let entries = Array.from(blockerFunctions.entries());
    let [blockerKey, blockerFunction] = entries[entries.length - 1];
    let blocker = state.blockers.get(blockerKey);
    if (blocker && blocker.state === "proceeding") {
      return;
    }
    if (blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    })) {
      return blockerKey;
    }
  }
  function handleNavigational404(pathname) {
    let error = getInternalRouterError(404, {
      pathname
    });
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let {
      matches,
      route
    } = getShortCircuitMatches(routesToUse);
    cancelActiveDeferreds();
    return {
      notFoundMatches: matches,
      route,
      error
    };
  }
  function handleDiscoverRouteError(pathname, discoverResult) {
    return {
      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,
      error: getInternalRouterError(400, {
        type: "route-discovery",
        pathname,
        message: discoverResult.error != null && "message" in discoverResult.error ? discoverResult.error : String(discoverResult.error)
      })
    };
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    activeDeferreds.forEach((dfd, routeId) => {
      if (!predicate || predicate(routeId)) {
        dfd.cancel();
        cancelledRouteIds.push(routeId);
        activeDeferreds.delete(routeId);
      }
    });
    return cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    savedScrollPositions2 = positions;
    getScrollPosition = getPosition;
    getScrollRestorationKey = getKey || null;
    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = true;
      let y = getSavedScrollPosition(state.location, state.matches);
      if (y != null) {
        updateState({
          restoreScrollPosition: y
        });
      }
    }
    return () => {
      savedScrollPositions2 = null;
      getScrollPosition = null;
      getScrollRestorationKey = null;
    };
  }
  function getScrollKey(location, matches) {
    if (getScrollRestorationKey) {
      let key = getScrollRestorationKey(location, matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData)));
      return key || location.key;
    }
    return location.key;
  }
  function saveScrollPosition(location, matches) {
    if (savedScrollPositions2 && getScrollPosition) {
      let key = getScrollKey(location, matches);
      savedScrollPositions2[key] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location, matches) {
    if (savedScrollPositions2) {
      let key = getScrollKey(location, matches);
      let y = savedScrollPositions2[key];
      if (typeof y === "number") {
        return y;
      }
    }
    return null;
  }
  function checkFogOfWar(matches, routesToUse, pathname) {
    if (patchRoutesOnMissImpl) {
      if (!matches) {
        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename2, true);
        return {
          active: true,
          matches: fogMatches || []
        };
      } else {
        let leafRoute = matches[matches.length - 1].route;
        if (leafRoute.path && (leafRoute.path === "*" || leafRoute.path.endsWith("/*"))) {
          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename2, true);
          return {
            active: true,
            matches: partialMatches
          };
        }
      }
    }
    return {
      active: false,
      matches: null
    };
  }
  async function discoverRoutes(matches, pathname, signal) {
    let partialMatches = matches;
    let route = partialMatches.length > 0 ? partialMatches[partialMatches.length - 1].route : null;
    while (true) {
      let isNonHMR = inFlightDataRoutes == null;
      let routesToUse = inFlightDataRoutes || dataRoutes;
      try {
        await loadLazyRouteChildren(patchRoutesOnMissImpl, pathname, partialMatches, routesToUse, manifest, mapRouteProperties2, pendingPatchRoutes, signal);
      } catch (e) {
        return {
          type: "error",
          error: e,
          partialMatches
        };
      } finally {
        if (isNonHMR) {
          dataRoutes = [...dataRoutes];
        }
      }
      if (signal.aborted) {
        return {
          type: "aborted"
        };
      }
      let newMatches = matchRoutes(routesToUse, pathname, basename2);
      let matchedSplat = false;
      if (newMatches) {
        let leafRoute = newMatches[newMatches.length - 1].route;
        if (leafRoute.index) {
          return {
            type: "success",
            matches: newMatches
          };
        }
        if (leafRoute.path && leafRoute.path.length > 0) {
          if (leafRoute.path === "*") {
            matchedSplat = true;
          } else {
            return {
              type: "success",
              matches: newMatches
            };
          }
        }
      }
      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename2, true);
      if (!newPartialMatches || partialMatches.map((m) => m.route.id).join("-") === newPartialMatches.map((m) => m.route.id).join("-")) {
        return {
          type: "success",
          matches: matchedSplat ? newMatches : null
        };
      }
      partialMatches = newPartialMatches;
      route = partialMatches[partialMatches.length - 1].route;
      if (route.path === "*") {
        return {
          type: "success",
          matches: partialMatches
        };
      }
    }
  }
  function _internalSetRoutes(newRoutes) {
    manifest = {};
    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties2, void 0, manifest);
  }
  function patchRoutes(routeId, children) {
    let isNonHMR = inFlightDataRoutes == null;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2);
    if (isNonHMR) {
      dataRoutes = [...dataRoutes];
      updateState({});
    }
  }
  router2 = {
    get basename() {
      return basename2;
    },
    get future() {
      return future;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    get window() {
      return routerWindow;
    },
    initialize,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    // Passthrough to history-aware createHref used by useHref so we get proper
    // hash-aware URLs in DOM paths
    createHref: (to) => init.history.createHref(to),
    encodeLocation: (to) => init.history.encodeLocation(to),
    getFetcher,
    deleteFetcher: deleteFetcherAndUpdateState,
    dispose,
    getBlocker,
    deleteBlocker,
    patchRoutes,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds,
    // TODO: Remove setRoutes, it's temporary to avoid dealing with
    // updating the tree while validating the update algorithm.
    _internalSetRoutes
  };
  return router2;
}
var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
function isSubmissionNavigation(opts) {
  return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
}
function normalizeTo(location, matches, basename2, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
  let contextualMatches;
  let activeRouteMatch;
  if (fromRouteId) {
    contextualMatches = [];
    for (let match of matches) {
      contextualMatches.push(match);
      if (match.route.id === fromRouteId) {
        activeRouteMatch = match;
        break;
      }
    }
  } else {
    contextualMatches = matches;
    activeRouteMatch = matches[matches.length - 1];
  }
  let path2 = resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename2) || location.pathname, relative === "path");
  if (to == null) {
    path2.search = location.search;
    path2.hash = location.hash;
  }
  if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path2.search)) {
    path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index";
  }
  if (prependBasename && basename2 !== "/") {
    path2.pathname = path2.pathname === "/" ? basename2 : joinPaths([basename2, path2.pathname]);
  }
  return createPath(path2);
}
function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path2, opts) {
  if (!opts || !isSubmissionNavigation(opts)) {
    return {
      path: path2
    };
  }
  if (opts.formMethod && !isValidMethod(opts.formMethod)) {
    return {
      path: path2,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  }
  let getInvalidBodyError = () => ({
    path: path2,
    error: getInternalRouterError(400, {
      type: "invalid-body"
    })
  });
  let rawFormMethod = opts.formMethod || "get";
  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
  let formAction = stripHashFromPath(path2);
  if (opts.body !== void 0) {
    if (opts.formEncType === "text/plain") {
      if (!isMutationMethod(formMethod)) {
        return getInvalidBodyError();
      }
      let text7 = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
        Array.from(opts.body.entries()).reduce((acc, _ref5) => {
          let [name2, value] = _ref5;
          return "" + acc + name2 + "=" + value + "\n";
        }, "")
      ) : String(opts.body);
      return {
        path: path2,
        submission: {
          formMethod,
          formAction,
          formEncType: opts.formEncType,
          formData: void 0,
          json: void 0,
          text: text7
        }
      };
    } else if (opts.formEncType === "application/json") {
      if (!isMutationMethod(formMethod)) {
        return getInvalidBodyError();
      }
      try {
        let json2 = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
        return {
          path: path2,
          submission: {
            formMethod,
            formAction,
            formEncType: opts.formEncType,
            formData: void 0,
            json: json2,
            text: void 0
          }
        };
      } catch (e) {
        return getInvalidBodyError();
      }
    }
  }
  invariant(typeof FormData === "function", "FormData is not available in this environment");
  let searchParams;
  let formData;
  if (opts.formData) {
    searchParams = convertFormDataToSearchParams(opts.formData);
    formData = opts.formData;
  } else if (opts.body instanceof FormData) {
    searchParams = convertFormDataToSearchParams(opts.body);
    formData = opts.body;
  } else if (opts.body instanceof URLSearchParams) {
    searchParams = opts.body;
    formData = convertSearchParamsToFormData(searchParams);
  } else if (opts.body == null) {
    searchParams = new URLSearchParams();
    formData = new FormData();
  } else {
    try {
      searchParams = new URLSearchParams(opts.body);
      formData = convertSearchParamsToFormData(searchParams);
    } catch (e) {
      return getInvalidBodyError();
    }
  }
  let submission = {
    formMethod,
    formAction,
    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
    formData,
    json: void 0,
    text: void 0
  };
  if (isMutationMethod(submission.formMethod)) {
    return {
      path: path2,
      submission
    };
  }
  let parsedPath = parsePath(path2);
  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
    searchParams.append("index", "");
  }
  parsedPath.search = "?" + searchParams;
  return {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId) {
  let boundaryMatches = matches;
  if (boundaryId) {
    let index2 = matches.findIndex((m) => m.route.id === boundaryId);
    if (index2 >= 0) {
      boundaryMatches = matches.slice(0, index2);
    }
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename2, pendingActionResult) {
  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : void 0;
  let currentUrl = history.createURL(state.location);
  let nextUrl = history.createURL(location);
  let boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : void 0;
  let boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;
  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : void 0;
  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
  let navigationMatches = boundaryMatches.filter((match, index2) => {
    let {
      route
    } = match;
    if (route.lazy) {
      return true;
    }
    if (route.loader == null) {
      return false;
    }
    if (isInitialLoad) {
      if (typeof route.loader !== "function" || route.loader.hydrate) {
        return true;
      }
      return state.loaderData[route.id] === void 0 && // Don't re-run if the loader ran and threw an error
      (!state.errors || state.errors[route.id] === void 0);
    }
    if (isNewLoader(state.loaderData, state.matches[index2], match) || cancelledDeferredRoutes.some((id) => id === match.route.id)) {
      return true;
    }
    let currentRouteMatch = state.matches[index2];
    let nextRouteMatch = match;
    return shouldRevalidateLoader(match, _extends({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      actionStatus,
      defaultShouldRevalidate: shouldSkipRevalidation ? false : (
        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
        isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
        currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
      )
    }));
  });
  let revalidatingFetchers = [];
  fetchLoadMatches.forEach((f, key) => {
    if (isInitialLoad || !matches.some((m) => m.route.id === f.routeId) || deletedFetchers.has(key)) {
      return;
    }
    let fetcherMatches = matchRoutes(routesToUse, f.path, basename2);
    if (!fetcherMatches) {
      revalidatingFetchers.push({
        key,
        routeId: f.routeId,
        path: f.path,
        matches: null,
        match: null,
        controller: null
      });
      return;
    }
    let fetcher = state.fetchers.get(key);
    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
    let shouldRevalidate = false;
    if (fetchRedirectIds.has(key)) {
      shouldRevalidate = false;
    } else if (cancelledFetcherLoads.has(key)) {
      cancelledFetcherLoads.delete(key);
      shouldRevalidate = true;
    } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
      shouldRevalidate = isRevalidationRequired;
    } else {
      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({
        currentUrl,
        currentParams: state.matches[state.matches.length - 1].params,
        nextUrl,
        nextParams: matches[matches.length - 1].params
      }, submission, {
        actionResult,
        actionStatus,
        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired
      }));
    }
    if (shouldRevalidate) {
      revalidatingFetchers.push({
        key,
        routeId: f.routeId,
        path: f.path,
        matches: fetcherMatches,
        match: fetcherMatch,
        controller: new AbortController()
      });
    }
  });
  return [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match) {
  let isNew = (
    // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match.route.id !== currentMatch.route.id
  );
  let isMissingData = currentLoaderData[match.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match) {
  let currentPath = currentMatch.route.path;
  return (
    // param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
  );
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice === "boolean") {
      return routeChoice;
    }
  }
  return arg.defaultShouldRevalidate;
}
async function loadLazyRouteChildren(patchRoutesOnMissImpl, path2, matches, routes, manifest, mapRouteProperties2, pendingRouteChildren, signal) {
  let key = [path2, ...matches.map((m) => m.route.id)].join("-");
  try {
    let pending = pendingRouteChildren.get(key);
    if (!pending) {
      pending = patchRoutesOnMissImpl({
        path: path2,
        matches,
        patch: (routeId, children) => {
          if (!signal.aborted) {
            patchRoutesImpl(routeId, children, routes, manifest, mapRouteProperties2);
          }
        }
      });
      pendingRouteChildren.set(key, pending);
    }
    if (pending && isPromise(pending)) {
      await pending;
    }
  } finally {
    pendingRouteChildren.delete(key);
  }
}
function patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2) {
  if (routeId) {
    var _route$children;
    let route = manifest[routeId];
    invariant(route, "No route found to patch children into: routeId = " + routeId);
    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties2, [routeId, "patch", String(((_route$children = route.children) == null ? void 0 : _route$children.length) || "0")], manifest);
    if (route.children) {
      route.children.push(...dataChildren);
    } else {
      route.children = dataChildren;
    }
  } else {
    let dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties2, ["patch", String(routesToUse.length || "0")], manifest);
    routesToUse.push(...dataChildren);
  }
}
async function loadLazyRouteModule(route, mapRouteProperties2, manifest) {
  if (!route.lazy) {
    return;
  }
  let lazyRoute = await route.lazy();
  if (!route.lazy) {
    return;
  }
  let routeToUpdate = manifest[route.id];
  invariant(routeToUpdate, "No route found in manifest");
  let routeUpdates = {};
  for (let lazyRouteProperty in lazyRoute) {
    let staticRouteValue = routeToUpdate[lazyRouteProperty];
    let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
    // on the route updates
    lazyRouteProperty !== "hasErrorBoundary";
    warning(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
  }
  Object.assign(routeToUpdate, routeUpdates);
  Object.assign(routeToUpdate, _extends({}, mapRouteProperties2(routeToUpdate), {
    lazy: void 0
  }));
}
function defaultDataStrategy(opts) {
  return Promise.all(opts.matches.map((m) => m.resolve()));
}
async function callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties2, requestContext) {
  let routeIdsToLoad = matchesToLoad.reduce((acc, m) => acc.add(m.route.id), /* @__PURE__ */ new Set());
  let loadedMatches = /* @__PURE__ */ new Set();
  let results = await dataStrategyImpl({
    matches: matches.map((match) => {
      let shouldLoad = routeIdsToLoad.has(match.route.id);
      let resolve = (handlerOverride) => {
        loadedMatches.add(match.route.id);
        return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties2, handlerOverride, requestContext) : Promise.resolve({
          type: ResultType.data,
          result: void 0
        });
      };
      return _extends({}, match, {
        shouldLoad,
        resolve
      });
    }),
    request,
    params: matches[0].params,
    context: requestContext
  });
  matches.forEach((m) => invariant(loadedMatches.has(m.route.id), '`match.resolve()` was not called for route id "' + m.route.id + '". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.'));
  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));
}
async function callLoaderOrAction(type, request, match, manifest, mapRouteProperties2, handlerOverride, staticContext) {
  let result;
  let onReject;
  let runHandler = (handler) => {
    let reject;
    let abortPromise = new Promise((_, r) => reject = r);
    onReject = () => reject();
    request.signal.addEventListener("abort", onReject);
    let actualHandler = (ctx) => {
      if (typeof handler !== "function") {
        return Promise.reject(new Error("You cannot call the handler for a route which defines a boolean " + ('"' + type + '" [routeId: ' + match.route.id + "]")));
      }
      return handler({
        request,
        params: match.params,
        context: staticContext
      }, ...ctx !== void 0 ? [ctx] : []);
    };
    let handlerPromise;
    if (handlerOverride) {
      handlerPromise = handlerOverride((ctx) => actualHandler(ctx));
    } else {
      handlerPromise = (async () => {
        try {
          let val = await actualHandler();
          return {
            type: "data",
            result: val
          };
        } catch (e) {
          return {
            type: "error",
            result: e
          };
        }
      })();
    }
    return Promise.race([handlerPromise, abortPromise]);
  };
  try {
    let handler = match.route[type];
    if (match.route.lazy) {
      if (handler) {
        let handlerError;
        let [value] = await Promise.all([
          // If the handler throws, don't let it immediately bubble out,
          // since we need to let the lazy() execution finish so we know if this
          // route has a boundary that can handle the error
          runHandler(handler).catch((e) => {
            handlerError = e;
          }),
          loadLazyRouteModule(match.route, mapRouteProperties2, manifest)
        ]);
        if (handlerError !== void 0) {
          throw handlerError;
        }
        result = value;
      } else {
        await loadLazyRouteModule(match.route, mapRouteProperties2, manifest);
        handler = match.route[type];
        if (handler) {
          result = await runHandler(handler);
        } else if (type === "action") {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(405, {
            method: request.method,
            pathname,
            routeId: match.route.id
          });
        } else {
          return {
            type: ResultType.data,
            result: void 0
          };
        }
      }
    } else if (!handler) {
      let url = new URL(request.url);
      let pathname = url.pathname + url.search;
      throw getInternalRouterError(404, {
        pathname
      });
    } else {
      result = await runHandler(handler);
    }
    invariant(result.result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e) {
    return {
      type: ResultType.error,
      result: e
    };
  } finally {
    if (onReject) {
      request.signal.removeEventListener("abort", onReject);
    }
  }
  return result;
}
async function convertHandlerResultToDataResult(handlerResult) {
  let {
    result,
    type
  } = handlerResult;
  if (isResponse(result)) {
    let data2;
    try {
      let contentType = result.headers.get("Content-Type");
      if (contentType && /\bapplication\/json\b/.test(contentType)) {
        if (result.body == null) {
          data2 = null;
        } else {
          data2 = await result.json();
        }
      } else {
        data2 = await result.text();
      }
    } catch (e) {
      return {
        type: ResultType.error,
        error: e
      };
    }
    if (type === ResultType.error) {
      return {
        type: ResultType.error,
        error: new ErrorResponseImpl(result.status, result.statusText, data2),
        statusCode: result.status,
        headers: result.headers
      };
    }
    return {
      type: ResultType.data,
      data: data2,
      statusCode: result.status,
      headers: result.headers
    };
  }
  if (type === ResultType.error) {
    if (isDataWithResponseInit(result)) {
      var _result$init2;
      if (result.data instanceof Error) {
        var _result$init;
        return {
          type: ResultType.error,
          error: result.data,
          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status
        };
      }
      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, void 0, result.data);
    }
    return {
      type: ResultType.error,
      error: result,
      statusCode: isRouteErrorResponse(result) ? result.status : void 0
    };
  }
  if (isDeferredData(result)) {
    var _result$init3, _result$init4;
    return {
      type: ResultType.deferred,
      deferredData: result,
      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,
      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)
    };
  }
  if (isDataWithResponseInit(result)) {
    var _result$init5, _result$init6;
    return {
      type: ResultType.data,
      data: result.data,
      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,
      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : void 0
    };
  }
  return {
    type: ResultType.data,
    data: result
  };
}
function normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename2, v7_relativeSplatPath) {
  let location = response.headers.get("Location");
  invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header");
  if (!ABSOLUTE_URL_REGEX.test(location)) {
    let trimmedMatches = matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1);
    location = normalizeTo(new URL(request.url), trimmedMatches, basename2, true, location, v7_relativeSplatPath);
    response.headers.set("Location", location);
  }
  return response;
}
function normalizeRedirectLocation(location, currentUrl, basename2) {
  if (ABSOLUTE_URL_REGEX.test(location)) {
    let normalizedLocation = location;
    let url = normalizedLocation.startsWith("//") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);
    let isSameBasename = stripBasename(url.pathname, basename2) != null;
    if (url.origin === currentUrl.origin && isSameBasename) {
      return url.pathname + url.search + url.hash;
    }
  }
  return location;
}
function createClientSideRequest(history, location, signal, submission) {
  let url = history.createURL(stripHashFromPath(location)).toString();
  let init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType
    } = submission;
    init.method = formMethod.toUpperCase();
    if (formEncType === "application/json") {
      init.headers = new Headers({
        "Content-Type": formEncType
      });
      init.body = JSON.stringify(submission.json);
    } else if (formEncType === "text/plain") {
      init.body = submission.text;
    } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
      init.body = convertFormDataToSearchParams(submission.formData);
    } else {
      init.body = submission.formData;
    }
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key, value] of formData.entries()) {
    searchParams.append(key, typeof value === "string" ? value : value.name);
  }
  return searchParams;
}
function convertSearchParamsToFormData(searchParams) {
  let formData = new FormData();
  for (let [key, value] of searchParams.entries()) {
    formData.append(key, value);
  }
  return formData;
}
function processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {
  let loaderData = {};
  let errors = null;
  let statusCode;
  let foundError = false;
  let loaderHeaders = {};
  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : void 0;
  results.forEach((result, index2) => {
    let id = matchesToLoad[index2].route.id;
    invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
    if (isErrorResult(result)) {
      let error = result.error;
      if (pendingError !== void 0) {
        error = pendingError;
        pendingError = void 0;
      }
      errors = errors || {};
      if (skipLoaderErrorBubbling) {
        errors[id] = error;
      } else {
        let boundaryMatch = findNearestBoundary(matches, id);
        if (errors[boundaryMatch.route.id] == null) {
          errors[boundaryMatch.route.id] = error;
        }
      }
      loaderData[id] = void 0;
      if (!foundError) {
        foundError = true;
        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
      }
      if (result.headers) {
        loaderHeaders[id] = result.headers;
      }
    } else {
      if (isDeferredResult(result)) {
        activeDeferreds.set(id, result.deferredData);
        loaderData[id] = result.deferredData.data;
        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
          statusCode = result.statusCode;
        }
        if (result.headers) {
          loaderHeaders[id] = result.headers;
        }
      } else {
        loaderData[id] = result.data;
        if (result.statusCode && result.statusCode !== 200 && !foundError) {
          statusCode = result.statusCode;
        }
        if (result.headers) {
          loaderHeaders[id] = result.headers;
        }
      }
    }
  });
  if (pendingError !== void 0 && pendingActionResult) {
    errors = {
      [pendingActionResult[0]]: pendingError
    };
    loaderData[pendingActionResult[0]] = void 0;
  }
  return {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(
    matches,
    matchesToLoad,
    results,
    pendingActionResult,
    activeDeferreds,
    false
    // This method is only called client side so we always want to bubble
  );
  for (let index2 = 0; index2 < revalidatingFetchers.length; index2++) {
    let {
      key,
      match,
      controller
    } = revalidatingFetchers[index2];
    invariant(fetcherResults !== void 0 && fetcherResults[index2] !== void 0, "Did not find corresponding fetcher result");
    let result = fetcherResults[index2];
    if (controller && controller.signal.aborted) {
      continue;
    } else if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
      if (!(errors && errors[boundaryMatch.route.id])) {
        errors = _extends({}, errors, {
          [boundaryMatch.route.id]: result.error
        });
      }
      state.fetchers.delete(key);
    } else if (isRedirectResult(result)) {
      invariant(false, "Unhandled fetcher revalidation redirect");
    } else if (isDeferredResult(result)) {
      invariant(false, "Unhandled fetcher deferred data");
    } else {
      let doneFetcher = getDoneFetcher(result.data);
      state.fetchers.set(key, doneFetcher);
    }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
  let mergedLoaderData = _extends({}, newLoaderData);
  for (let match of matches) {
    let id = match.route.id;
    if (newLoaderData.hasOwnProperty(id)) {
      if (newLoaderData[id] !== void 0) {
        mergedLoaderData[id] = newLoaderData[id];
      }
    } else if (loaderData[id] !== void 0 && match.route.loader) {
      mergedLoaderData[id] = loaderData[id];
    }
    if (errors && errors.hasOwnProperty(id)) {
      break;
    }
  }
  return mergedLoaderData;
}
function getActionDataForCommit(pendingActionResult) {
  if (!pendingActionResult) {
    return {};
  }
  return isErrorResult(pendingActionResult[1]) ? {
    // Clear out prior actionData on errors
    actionData: {}
  } : {
    actionData: {
      [pendingActionResult[0]]: pendingActionResult[1].data
    }
  };
}
function findNearestBoundary(matches, routeId) {
  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches];
  return eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0];
}
function getShortCircuitMatches(routes) {
  let route = routes.length === 1 ? routes[0] : routes.find((r) => r.index || !r.path || r.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp5) {
  let {
    pathname,
    routeId,
    method,
    type,
    message
  } = _temp5 === void 0 ? {} : _temp5;
  let statusText = "Unknown Server Error";
  let errorMessage = "Unknown @remix-run/router error";
  if (status === 400) {
    statusText = "Bad Request";
    if (type === "route-discovery") {
      errorMessage = 'Unable to match URL "' + pathname + '" - the `unstable_patchRoutesOnMiss()` ' + ("function threw the following error:\n" + message);
    } else if (method && pathname && routeId) {
      errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (type === "defer-action") {
      errorMessage = "defer() is not supported in actions";
    } else if (type === "invalid-body") {
      errorMessage = "Unable to encode submission body";
    }
  } else if (status === 403) {
    statusText = "Forbidden";
    errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
  } else if (status === 404) {
    statusText = "Not Found";
    errorMessage = 'No route matches URL "' + pathname + '"';
  } else if (status === 405) {
    statusText = "Method Not Allowed";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (method) {
      errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
  }
  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
}
function findRedirect(results) {
  for (let i = results.length - 1; i >= 0; i--) {
    let result = results[i];
    if (isRedirectResult(result)) {
      return {
        result,
        idx: i
      };
    }
  }
}
function stripHashFromPath(path2) {
  let parsedPath = typeof path2 === "string" ? parsePath(path2) : path2;
  return createPath(_extends({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a, b) {
  if (a.pathname !== b.pathname || a.search !== b.search) {
    return false;
  }
  if (a.hash === "") {
    return b.hash !== "";
  } else if (a.hash === b.hash) {
    return true;
  } else if (b.hash !== "") {
    return true;
  }
  return false;
}
function isPromise(val) {
  return typeof val === "object" && val != null && "then" in val;
}
function isRedirectHandlerResult(result) {
  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isDataWithResponseInit(value) {
  return typeof value === "object" && value != null && "type" in value && "data" in value && "init" in value && value.type === "DataWithResponseInit";
}
function isDeferredData(value) {
  let deferred = value;
  return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
}
function isResponse(value) {
  return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}
function isValidMethod(method) {
  return validRequestMethods.has(method.toLowerCase());
}
function isMutationMethod(method) {
  return validMutationMethods.has(method.toLowerCase());
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
  for (let index2 = 0; index2 < results.length; index2++) {
    let result = results[index2];
    let match = matchesToLoad[index2];
    if (!match) {
      continue;
    }
    let currentMatch = currentMatches.find((m) => m.route.id === match.route.id);
    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== void 0;
    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
      let signal = signals[index2];
      invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
      await resolveDeferredData(result, signal, isFetcher).then((result2) => {
        if (result2) {
          results[index2] = result2 || results[index2];
        }
      });
    }
  }
}
async function resolveDeferredData(result, signal, unwrap) {
  if (unwrap === void 0) {
    unwrap = false;
  }
  let aborted = await result.deferredData.resolveData(signal);
  if (aborted) {
    return;
  }
  if (unwrap) {
    try {
      return {
        type: ResultType.data,
        data: result.deferredData.unwrappedData
      };
    } catch (e) {
      return {
        type: ResultType.error,
        error: e
      };
    }
  }
  return {
    type: ResultType.data,
    data: result.deferredData.data
  };
}
function hasNakedIndexQuery(search2) {
  return new URLSearchParams(search2).getAll("index").some((v) => v === "");
}
function getTargetMatch(matches, location) {
  let search2 = typeof location === "string" ? parsePath(location).search : location.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search2 || "")) {
    return matches[matches.length - 1];
  }
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
function getSubmissionFromNavigation(navigation) {
  let {
    formMethod,
    formAction,
    formEncType,
    text: text7,
    formData,
    json: json2
  } = navigation;
  if (!formMethod || !formAction || !formEncType) {
    return;
  }
  if (text7 != null) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData: void 0,
      json: void 0,
      text: text7
    };
  } else if (formData != null) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData,
      json: void 0,
      text: void 0
    };
  } else if (json2 !== void 0) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData: void 0,
      json: json2,
      text: void 0
    };
  }
}
function getLoadingNavigation(location, submission) {
  if (submission) {
    let navigation = {
      state: "loading",
      location,
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text
    };
    return navigation;
  } else {
    let navigation = {
      state: "loading",
      location,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    return navigation;
  }
}
function getSubmittingNavigation(location, submission) {
  let navigation = {
    state: "submitting",
    location,
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text
  };
  return navigation;
}
function getLoadingFetcher(submission, data2) {
  if (submission) {
    let fetcher = {
      state: "loading",
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text,
      data: data2
    };
    return fetcher;
  } else {
    let fetcher = {
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0,
      data: data2
    };
    return fetcher;
  }
}
function getSubmittingFetcher(submission, existingFetcher) {
  let fetcher = {
    state: "submitting",
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text,
    data: existingFetcher ? existingFetcher.data : void 0
  };
  return fetcher;
}
function getDoneFetcher(data2) {
  let fetcher = {
    state: "idle",
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0,
    data: data2
  };
  return fetcher;
}
function restoreAppliedTransitions(_window, transitions) {
  try {
    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
    if (sessionPositions) {
      let json2 = JSON.parse(sessionPositions);
      for (let [k, v] of Object.entries(json2 || {})) {
        if (v && Array.isArray(v)) {
          transitions.set(k, new Set(v || []));
        }
      }
    }
  } catch (e) {
  }
}
function persistAppliedTransitions(_window, transitions) {
  if (transitions.size > 0) {
    let json2 = {};
    for (let [k, v] of transitions) {
      json2[k] = [...v];
    }
    try {
      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json2));
    } catch (error) {
      warning(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
    }
  }
}

// node_modules/react-router/dist/index.js
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var DataRouterContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  DataRouterContext.displayName = "DataRouter";
}
var DataRouterStateContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  DataRouterStateContext.displayName = "DataRouterState";
}
var AwaitContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  AwaitContext.displayName = "Await";
}
var NavigationContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  NavigationContext.displayName = "Navigation";
}
var LocationContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  LocationContext.displayName = "Location";
}
var RouteContext = /* @__PURE__ */ React.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
if (true) {
  RouteContext.displayName = "Route";
}
var RouteErrorContext = /* @__PURE__ */ React.createContext(null);
if (true) {
  RouteErrorContext.displayName = "RouteError";
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let {
    basename: basename2,
    navigator: navigator2
  } = React.useContext(NavigationContext);
  let {
    hash,
    pathname,
    search: search2
  } = useResolvedPath(to, {
    relative
  });
  let joinedPathname = pathname;
  if (basename2 !== "/") {
    joinedPathname = pathname === "/" ? basename2 : joinPaths([basename2, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search: search2,
    hash
  });
}
function useInRouterContext() {
  return React.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  return React.useContext(LocationContext).location;
}
var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
function useIsomorphicLayoutEffect(cb) {
  let isStatic = React.useContext(NavigationContext).static;
  if (!isStatic) {
    React.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = React.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let dataRouterContext = React.useContext(DataRouterContext);
  let {
    basename: basename2,
    future,
    navigator: navigator2
  } = React.useContext(NavigationContext);
  let {
    matches
  } = React.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = React.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    true ? warning(activeRef.current, navigateEffectWarning) : void 0;
    if (!activeRef.current) return;
    if (typeof to === "number") {
      navigator2.go(to);
      return;
    }
    let path2 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename2 !== "/") {
      path2.pathname = path2.pathname === "/" ? basename2 : joinPaths([basename2, path2.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path2, options.state, options);
  }, [basename2, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
var OutletContext = /* @__PURE__ */ React.createContext(null);
function useOutlet(context) {
  let outlet = React.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ React.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    future
  } = React.useContext(NavigationContext);
  let {
    matches
  } = React.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? true ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component."
  ) : invariant(false) : void 0;
  let {
    navigator: navigator2
  } = React.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = React.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  if (true) {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  if (true) {
    true ? warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
    true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
  }
  let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
    params: Object.assign({}, parentParams, match.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
    ]),
    pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ React.createElement(LocationContext.Provider, {
      value: {
        location: _extends2({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  if (true) {
    console.error("Error handled by React Router default ErrorBoundary:", error);
    devInfo = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React.createElement("code", {
      style: codeStyles
    }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React.createElement("code", {
      style: codeStyles
    }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ React.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
var defaultErrorElement = /* @__PURE__ */ React.createElement(DefaultErrorComponent, null);
var RenderErrorBoundary = class extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error("React Router caught the following error during render", error, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ React.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ React.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
};
function RenderedRoute(_ref) {
  let {
    routeContext,
    match,
    children
  } = _ref;
  let dataRouterContext = React.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
  }
  return /* @__PURE__ */ React.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _future;
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0);
    !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match = renderedMatches[i];
      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
        if (match.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match, index2) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match.route.id ? errors[match.route.id] : void 0;
      errorElement = match.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index2 === 0) {
          warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index2) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match.route.Component) {
        children = /* @__PURE__ */ React.createElement(match.route.Component, null);
      } else if (match.route.element) {
        children = match.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ React.createElement(RenderedRoute, {
        match,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
  DataRouterHook3["UseBlocker"] = "useBlocker";
  DataRouterHook3["UseRevalidator"] = "useRevalidator";
  DataRouterHook3["UseNavigateStable"] = "useNavigate";
  return DataRouterHook3;
}(DataRouterHook || {});
var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
  DataRouterStateHook3["UseBlocker"] = "useBlocker";
  DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook3["UseActionData"] = "useActionData";
  DataRouterStateHook3["UseRouteError"] = "useRouteError";
  DataRouterStateHook3["UseNavigation"] = "useNavigation";
  DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook3["UseMatches"] = "useMatches";
  DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook3["UseRouteId"] = "useRouteId";
  return DataRouterStateHook3;
}(DataRouterStateHook || {});
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = React.useContext(DataRouterContext);
  !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state = React.useContext(DataRouterStateContext);
  !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = React.useContext(RouteContext);
  !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(DataRouterStateHook.UseRouteId);
}
function useNavigation() {
  let state = useDataRouterState(DataRouterStateHook.UseNavigation);
  return state.navigation;
}
function useMatches() {
  let {
    matches,
    loaderData
  } = useDataRouterState(DataRouterStateHook.UseMatches);
  return React.useMemo(() => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
}
function useLoaderData() {
  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);
  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return void 0;
  }
  return state.loaderData[routeId];
}
function useRouteError() {
  var _state$errors;
  let error = React.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useNavigateStable() {
  let {
    router: router2
  } = useDataRouterContext(DataRouterHook.UseNavigateStable);
  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
  let activeRef = React.useRef(false);
  useIsomorphicLayoutEffect(() => {
    activeRef.current = true;
  });
  let navigate = React.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    true ? warning(activeRef.current, navigateEffectWarning) : void 0;
    if (!activeRef.current) return;
    if (typeof to === "number") {
      router2.navigate(to);
    } else {
      router2.navigate(to, _extends2({
        fromRouteId: id
      }, options));
    }
  }, [router2, id]);
  return navigate;
}
var alreadyWarned = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
    true ? warning(false, message) : void 0;
  }
}
var START_TRANSITION = "startTransition";
var startTransitionImpl = React[START_TRANSITION];
function Outlet(props) {
  return useOutlet(props.context);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
  let basename2 = basenameProp.replace(/^\/*/, "/");
  let navigationContext = React.useMemo(() => ({
    basename: basename2,
    navigator: navigator2,
    static: staticProp,
    future: _extends2({
      v7_relativeSplatPath: false
    }, future)
  }), [basename2, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search: search2 = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = React.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename2);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search: search2,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename2, pathname, search2, hash, state, key, navigationType]);
  true ? warning(locationContext != null, '<Router basename="' + basename2 + '"> is not able to match the URL ' + ('"' + pathname + search2 + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ React.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
var neverSettledPromise = new Promise(() => {
});
function mapRouteProperties(route) {
  let updates = {
    // Note: this check also occurs in createRoutesFromChildren so update
    // there if you change this -- please and thank you!
    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
  };
  if (route.Component) {
    if (true) {
      if (route.element) {
        true ? warning(false, "You should not include both `Component` and `element` on your route - `Component` will be used.") : void 0;
      }
    }
    Object.assign(updates, {
      element: /* @__PURE__ */ React.createElement(route.Component),
      Component: void 0
    });
  }
  if (route.HydrateFallback) {
    if (true) {
      if (route.hydrateFallbackElement) {
        true ? warning(false, "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.") : void 0;
      }
    }
    Object.assign(updates, {
      hydrateFallbackElement: /* @__PURE__ */ React.createElement(route.HydrateFallback),
      HydrateFallback: void 0
    });
  }
  if (route.ErrorBoundary) {
    if (true) {
      if (route.errorElement) {
        true ? warning(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.") : void 0;
      }
    }
    Object.assign(updates, {
      errorElement: /* @__PURE__ */ React.createElement(route.ErrorBoundary),
      ErrorBoundary: void 0
    });
  }
  return updates;
}

// node_modules/react-router-dom/dist/index.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var defaultMethod = "get";
var defaultEncType = "application/x-www-form-urlencoded";
function isHtmlElement(object) {
  return object != null && typeof object.tagName === "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
var _formDataSupportsSubmitter = null;
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    true ? warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename2) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename2) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename2) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let {
        name: name2,
        type,
        value
      } = target;
      if (type === "image") {
        let prefix2 = name2 ? name2 + "." : "";
        formData.append(prefix2 + "x", "0");
        formData.append(prefix2 + "y", "0");
      } else if (name2) {
        formData.append(name2, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return {
    action,
    method: method.toLowerCase(),
    encType,
    formData,
    body
  };
}
var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"];
var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"];
var _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"];
var REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e) {
}
function createBrowserRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends3({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createBrowserHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes,
    mapRouteProperties,
    unstable_dataStrategy: opts == null ? void 0 : opts.unstable_dataStrategy,
    unstable_patchRoutesOnMiss: opts == null ? void 0 : opts.unstable_patchRoutesOnMiss,
    window: opts == null ? void 0 : opts.window
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  if (state && state.errors) {
    state = _extends3({}, state, {
      errors: deserializeErrors(state.errors)
    });
  }
  return state;
}
function deserializeErrors(errors) {
  if (!errors) return null;
  let entries = Object.entries(errors);
  let serialized = {};
  for (let [key, val] of entries) {
    if (val && val.__type === "RouteErrorResponse") {
      serialized[key] = new ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
    } else if (val && val.__type === "Error") {
      if (val.__subType) {
        let ErrorConstructor = window[val.__subType];
        if (typeof ErrorConstructor === "function") {
          try {
            let error = new ErrorConstructor(val.message);
            error.stack = "";
            serialized[key] = error;
          } catch (e) {
          }
        }
      }
      if (serialized[key] == null) {
        let error = new Error(val.message);
        error.stack = "";
        serialized[key] = error;
      }
    } else {
      serialized[key] = val;
    }
  }
  return serialized;
}
var ViewTransitionContext = /* @__PURE__ */ React2.createContext({
  isTransitioning: false
});
if (true) {
  ViewTransitionContext.displayName = "ViewTransition";
}
var FetchersContext = /* @__PURE__ */ React2.createContext(/* @__PURE__ */ new Map());
if (true) {
  FetchersContext.displayName = "Fetchers";
}
var START_TRANSITION2 = "startTransition";
var startTransitionImpl2 = React2[START_TRANSITION2];
var FLUSH_SYNC = "flushSync";
var flushSyncImpl = ReactDOM[FLUSH_SYNC];
var USE_ID = "useId";
var useIdImpl = React2[USE_ID];
function startTransitionSafe(cb) {
  if (startTransitionImpl2) {
    startTransitionImpl2(cb);
  } else {
    cb();
  }
}
function flushSyncSafe(cb) {
  if (flushSyncImpl) {
    flushSyncImpl(cb);
  } else {
    cb();
  }
}
var Deferred = class {
  constructor() {
    this.status = "pending";
    this.promise = new Promise((resolve, reject) => {
      this.resolve = (value) => {
        if (this.status === "pending") {
          this.status = "resolved";
          resolve(value);
        }
      };
      this.reject = (reason) => {
        if (this.status === "pending") {
          this.status = "rejected";
          reject(reason);
        }
      };
    });
  }
};
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router: router2,
    future
  } = _ref;
  let [state, setStateImpl] = React2.useState(router2.state);
  let [pendingState, setPendingState] = React2.useState();
  let [vtContext, setVtContext] = React2.useState({
    isTransitioning: false
  });
  let [renderDfd, setRenderDfd] = React2.useState();
  let [transition, setTransition] = React2.useState();
  let [interruption, setInterruption] = React2.useState();
  let fetcherData = React2.useRef(/* @__PURE__ */ new Map());
  let {
    v7_startTransition
  } = future || {};
  let optInStartTransition = React2.useCallback((cb) => {
    if (v7_startTransition) {
      startTransitionSafe(cb);
    } else {
      cb();
    }
  }, [v7_startTransition]);
  let setState = React2.useCallback((newState, _ref2) => {
    let {
      deletedFetchers,
      unstable_flushSync: flushSync,
      unstable_viewTransitionOpts: viewTransitionOpts
    } = _ref2;
    deletedFetchers.forEach((key) => fetcherData.current.delete(key));
    newState.fetchers.forEach((fetcher, key) => {
      if (fetcher.data !== void 0) {
        fetcherData.current.set(key, fetcher.data);
      }
    });
    let isViewTransitionUnavailable = router2.window == null || router2.window.document == null || typeof router2.window.document.startViewTransition !== "function";
    if (!viewTransitionOpts || isViewTransitionUnavailable) {
      if (flushSync) {
        flushSyncSafe(() => setStateImpl(newState));
      } else {
        optInStartTransition(() => setStateImpl(newState));
      }
      return;
    }
    if (flushSync) {
      flushSyncSafe(() => {
        if (transition) {
          renderDfd && renderDfd.resolve();
          transition.skipTransition();
        }
        setVtContext({
          isTransitioning: true,
          flushSync: true,
          currentLocation: viewTransitionOpts.currentLocation,
          nextLocation: viewTransitionOpts.nextLocation
        });
      });
      let t = router2.window.document.startViewTransition(() => {
        flushSyncSafe(() => setStateImpl(newState));
      });
      t.finished.finally(() => {
        flushSyncSafe(() => {
          setRenderDfd(void 0);
          setTransition(void 0);
          setPendingState(void 0);
          setVtContext({
            isTransitioning: false
          });
        });
      });
      flushSyncSafe(() => setTransition(t));
      return;
    }
    if (transition) {
      renderDfd && renderDfd.resolve();
      transition.skipTransition();
      setInterruption({
        state: newState,
        currentLocation: viewTransitionOpts.currentLocation,
        nextLocation: viewTransitionOpts.nextLocation
      });
    } else {
      setPendingState(newState);
      setVtContext({
        isTransitioning: true,
        flushSync: false,
        currentLocation: viewTransitionOpts.currentLocation,
        nextLocation: viewTransitionOpts.nextLocation
      });
    }
  }, [router2.window, transition, renderDfd, fetcherData, optInStartTransition]);
  React2.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]);
  React2.useEffect(() => {
    if (vtContext.isTransitioning && !vtContext.flushSync) {
      setRenderDfd(new Deferred());
    }
  }, [vtContext]);
  React2.useEffect(() => {
    if (renderDfd && pendingState && router2.window) {
      let newState = pendingState;
      let renderPromise = renderDfd.promise;
      let transition2 = router2.window.document.startViewTransition(async () => {
        optInStartTransition(() => setStateImpl(newState));
        await renderPromise;
      });
      transition2.finished.finally(() => {
        setRenderDfd(void 0);
        setTransition(void 0);
        setPendingState(void 0);
        setVtContext({
          isTransitioning: false
        });
      });
      setTransition(transition2);
    }
  }, [optInStartTransition, pendingState, renderDfd, router2.window]);
  React2.useEffect(() => {
    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {
      renderDfd.resolve();
    }
  }, [renderDfd, transition, state.location, pendingState]);
  React2.useEffect(() => {
    if (!vtContext.isTransitioning && interruption) {
      setPendingState(interruption.state);
      setVtContext({
        isTransitioning: true,
        flushSync: false,
        currentLocation: interruption.currentLocation,
        nextLocation: interruption.nextLocation
      });
      setInterruption(void 0);
    }
  }, [vtContext.isTransitioning, interruption]);
  React2.useEffect(() => {
    true ? warning(fallbackElement == null || !router2.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead") : void 0;
  }, []);
  let navigator2 = React2.useMemo(() => {
    return {
      createHref: router2.createHref,
      encodeLocation: router2.encodeLocation,
      go: (n) => router2.navigate(n),
      push: (to, state2, opts) => router2.navigate(to, {
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      }),
      replace: (to, state2, opts) => router2.navigate(to, {
        replace: true,
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      })
    };
  }, [router2]);
  let basename2 = router2.basename || "/";
  let dataRouterContext = React2.useMemo(() => ({
    router: router2,
    navigator: navigator2,
    static: false,
    basename: basename2
  }), [router2, navigator2, basename2]);
  let routerFuture = React2.useMemo(() => ({
    v7_relativeSplatPath: router2.future.v7_relativeSplatPath
  }), [router2.future.v7_relativeSplatPath]);
  return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, /* @__PURE__ */ React2.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ React2.createElement(FetchersContext.Provider, {
    value: fetcherData.current
  }, /* @__PURE__ */ React2.createElement(ViewTransitionContext.Provider, {
    value: vtContext
  }, /* @__PURE__ */ React2.createElement(Router, {
    basename: basename2,
    location: state.location,
    navigationType: state.historyAction,
    navigator: navigator2,
    future: routerFuture
  }, state.initialized || router2.future.v7_partialHydration ? /* @__PURE__ */ React2.createElement(MemoizedDataRoutes, {
    routes: router2.routes,
    future: router2.future,
    state
  }) : fallbackElement))))), null);
}
var MemoizedDataRoutes = /* @__PURE__ */ React2.memo(DataRoutes);
function DataRoutes(_ref3) {
  let {
    routes,
    future,
    state
  } = _ref3;
  return useRoutesImpl(routes, void 0, state, future);
}
function HistoryRouter(_ref6) {
  let {
    basename: basename2,
    children,
    future,
    history
  } = _ref6;
  let [state, setStateImpl] = React2.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React2.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React2.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return /* @__PURE__ */ React2.createElement(Router, {
    basename: basename2,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
if (true) {
  HistoryRouter.displayName = "unstable_HistoryRouter";
}
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
var Link = /* @__PURE__ */ React2.forwardRef(function LinkWithRef(_ref7, ref2) {
  let {
    onClick,
    relative,
    reloadDocument,
    replace: replace3,
    state,
    target,
    to,
    preventScrollReset,
    unstable_viewTransition
  } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
  let {
    basename: basename2
  } = React2.useContext(NavigationContext);
  let absoluteHref;
  let isExternal = false;
  if (typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to)) {
    absoluteHref = to;
    if (isBrowser) {
      try {
        let currentUrl = new URL(window.location.href);
        let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
        let path2 = stripBasename(targetUrl.pathname, basename2);
        if (targetUrl.origin === currentUrl.origin && path2 != null) {
          to = path2 + targetUrl.search + targetUrl.hash;
        } else {
          isExternal = true;
        }
      } catch (e) {
        true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
      }
    }
  }
  let href = useHref(to, {
    relative
  });
  let internalOnClick = useLinkClickHandler(to, {
    replace: replace3,
    state,
    target,
    preventScrollReset,
    relative,
    unstable_viewTransition
  });
  function handleClick(event) {
    if (onClick) onClick(event);
    if (!event.defaultPrevented) {
      internalOnClick(event);
    }
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ React2.createElement("a", _extends3({}, rest, {
      href: absoluteHref || href,
      onClick: isExternal || reloadDocument ? onClick : handleClick,
      ref: ref2,
      target
    }))
  );
});
if (true) {
  Link.displayName = "Link";
}
var NavLink = /* @__PURE__ */ React2.forwardRef(function NavLinkWithRef(_ref8, ref2) {
  let {
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to,
    unstable_viewTransition,
    children
  } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
  let path2 = useResolvedPath(to, {
    relative: rest.relative
  });
  let location = useLocation();
  let routerState = React2.useContext(DataRouterStateContext);
  let {
    navigator: navigator2,
    basename: basename2
  } = React2.useContext(NavigationContext);
  let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useViewTransitionState(path2) && unstable_viewTransition === true;
  let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname;
  let locationPathname = location.pathname;
  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
  if (!caseSensitive) {
    locationPathname = locationPathname.toLowerCase();
    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
    toPathname = toPathname.toLowerCase();
  }
  if (nextLocationPathname && basename2) {
    nextLocationPathname = stripBasename(nextLocationPathname, basename2) || nextLocationPathname;
  }
  const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
  let renderProps = {
    isActive,
    isPending,
    isTransitioning
  };
  let ariaCurrent = isActive ? ariaCurrentProp : void 0;
  let className;
  if (typeof classNameProp === "function") {
    className = classNameProp(renderProps);
  } else {
    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
  }
  let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
  return /* @__PURE__ */ React2.createElement(Link, _extends3({}, rest, {
    "aria-current": ariaCurrent,
    className,
    ref: ref2,
    style,
    to,
    unstable_viewTransition
  }), typeof children === "function" ? children(renderProps) : children);
});
if (true) {
  NavLink.displayName = "NavLink";
}
var Form = /* @__PURE__ */ React2.forwardRef((_ref9, forwardedRef) => {
  let {
    fetcherKey,
    navigate,
    reloadDocument,
    replace: replace3,
    state,
    method = defaultMethod,
    action,
    onSubmit,
    relative,
    preventScrollReset,
    unstable_viewTransition
  } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
  let submit = useSubmit();
  let formAction = useFormAction(action, {
    relative
  });
  let formMethod = method.toLowerCase() === "get" ? "get" : "post";
  let submitHandler = (event) => {
    onSubmit && onSubmit(event);
    if (event.defaultPrevented) return;
    event.preventDefault();
    let submitter = event.nativeEvent.submitter;
    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
    submit(submitter || event.currentTarget, {
      fetcherKey,
      method: submitMethod,
      navigate,
      replace: replace3,
      state,
      relative,
      preventScrollReset,
      unstable_viewTransition
    });
  };
  return /* @__PURE__ */ React2.createElement("form", _extends3({
    ref: forwardedRef,
    method: formMethod,
    action: formAction,
    onSubmit: reloadDocument ? onSubmit : submitHandler
  }, props));
});
if (true) {
  Form.displayName = "Form";
}
function ScrollRestoration(_ref10) {
  let {
    getKey,
    storageKey
  } = _ref10;
  useScrollRestoration({
    getKey,
    storageKey
  });
  return null;
}
if (true) {
  ScrollRestoration.displayName = "ScrollRestoration";
}
var DataRouterHook2;
(function(DataRouterHook3) {
  DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook3["UseSubmit"] = "useSubmit";
  DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook3["UseFetcher"] = "useFetcher";
  DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook2 || (DataRouterHook2 = {}));
var DataRouterStateHook2;
(function(DataRouterStateHook3) {
  DataRouterStateHook3["UseFetcher"] = "useFetcher";
  DataRouterStateHook3["UseFetchers"] = "useFetchers";
  DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
function getDataRouterConsoleError2(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext2(hookName) {
  let ctx = React2.useContext(DataRouterContext);
  !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
  return ctx;
}
function useDataRouterState2(hookName) {
  let state = React2.useContext(DataRouterStateContext);
  !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
  return state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    unstable_viewTransition
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location = useLocation();
  let path2 = useResolvedPath(to, {
    relative
  });
  return React2.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace3 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path2);
      navigate(to, {
        replace: replace3,
        state,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
    }
  }, [location, navigate, path2, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);
}
function validateClientSideSubmission() {
  if (typeof document === "undefined") {
    throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
  }
}
var fetcherId = 0;
var getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
function useSubmit() {
  let {
    router: router2
  } = useDataRouterContext2(DataRouterHook2.UseSubmit);
  let {
    basename: basename2
  } = React2.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return React2.useCallback(function(target, options) {
    if (options === void 0) {
      options = {};
    }
    validateClientSideSubmission();
    let {
      action,
      method,
      encType,
      formData,
      body
    } = getFormSubmissionInfo(target, basename2);
    if (options.navigate === false) {
      let key = options.fetcherKey || getUniqueFetcherId();
      router2.fetch(key, currentRouteId, options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        unstable_flushSync: options.unstable_flushSync
      });
    } else {
      router2.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId,
        unstable_flushSync: options.unstable_flushSync,
        unstable_viewTransition: options.unstable_viewTransition
      });
    }
  }, [router2, basename2, currentRouteId]);
}
function useFormAction(action, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    basename: basename2
  } = React2.useContext(NavigationContext);
  let routeContext = React2.useContext(RouteContext);
  !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
  let [match] = routeContext.matches.slice(-1);
  let path2 = _extends3({}, useResolvedPath(action ? action : ".", {
    relative
  }));
  let location = useLocation();
  if (action == null) {
    path2.search = location.search;
    let params = new URLSearchParams(path2.search);
    if (params.has("index") && params.get("index") === "") {
      params.delete("index");
      path2.search = params.toString() ? "?" + params.toString() : "";
    }
  }
  if ((!action || action === ".") && match.route.index) {
    path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename2 !== "/") {
    path2.pathname = path2.pathname === "/" ? basename2 : joinPaths([basename2, path2.pathname]);
  }
  return createPath(path2);
}
var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
var savedScrollPositions = {};
function useScrollRestoration(_temp4) {
  let {
    getKey,
    storageKey
  } = _temp4 === void 0 ? {} : _temp4;
  let {
    router: router2
  } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
  let {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
  let {
    basename: basename2
  } = React2.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  React2.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(React2.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location, matches) : null) || location.key;
      savedScrollPositions[key] = window.scrollY;
    }
    try {
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
    } catch (error) {
      true ? warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
    }
    window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location, matches]));
  if (typeof document !== "undefined") {
    React2.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e) {
      }
    }, [storageKey]);
    React2.useLayoutEffect(() => {
      let getKeyWithoutBasename = getKey && basename2 !== "/" ? (location2, matches2) => getKey(
        // Strip the basename to match useLocation()
        _extends3({}, location2, {
          pathname: stripBasename(location2.pathname, basename2) || location2.pathname
        }),
        matches2
      ) : getKey;
      let disableScrollRestoration = router2 == null ? void 0 : router2.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router2, basename2, getKey]);
    React2.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  React2.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function useViewTransitionState(to, opts) {
  if (opts === void 0) {
    opts = {};
  }
  let vtContext = React2.useContext(ViewTransitionContext);
  !(vtContext != null) ? true ? invariant(false, "`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant(false) : void 0;
  let {
    basename: basename2
  } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
  let path2 = useResolvedPath(to, {
    relative: opts.relative
  });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename2) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename2) || vtContext.nextLocation.pathname;
  return matchPath(path2.pathname, nextPath) != null || matchPath(path2.pathname, currentPath) != null;
}

// src/components/Header.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
function Header() {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "w-full p-3 border-b-2 border-gray-300 dark:border-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "flex", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "text-2xl", children: "Flashpoint Database" }) }) });
}

// src/App.tsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
function App() {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "w-full h-full", children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Header, {}),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "h-full", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Outlet, {}) })
  ] });
}

// src/util.ts
function toCamelCase(str) {
  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
}
function toSnakeCase(str) {
  return str.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`);
}
function convertKeysToSnakeCase(obj) {
  if (Array.isArray(obj)) {
    return obj.map((item) => convertKeysToSnakeCase(item));
  } else if (obj !== null && typeof obj === "object") {
    return Object.keys(obj).reduce((acc, key) => {
      const snakeCaseKey = toSnakeCase(key);
      const value = obj[key];
      acc[snakeCaseKey] = convertKeysToSnakeCase(value);
      return acc;
    }, {});
  } else {
    return obj;
  }
}
function convertKeysToCamelCase(obj) {
  if (Array.isArray(obj)) {
    return obj.map((item) => convertKeysToCamelCase(item));
  } else if (obj !== null && typeof obj === "object") {
    return Object.keys(obj).reduce((acc, key) => {
      const camelCaseKey = toCamelCase(key);
      const value = obj[key];
      acc[camelCaseKey] = convertKeysToCamelCase(value);
      return acc;
    }, {});
  } else {
    return obj;
  }
}

// src/components/StripedTable.tsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function StripedHTable(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("table", { className: "table-auto fp-table w-full border-2 border-gray-300 dark:border-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("tbody", { children: Object.entries(props.items).map((item, index2) => {
    const even = index2 % 2 === 0;
    const rowClass = even ? "bg-red-100 dark:bg-zinc-800" : "bg-red-50 dark:bg-zinc-700";
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("tr", { className: rowClass, children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("td", { className: "w-1 whitespace-nowrap p-2", children: item[0] }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("td", { className: "pr-2", children: item[1] })
    ] }, index2);
  }) }) });
}

// src/components/Dropdown.tsx
var import_react3 = __toESM(require_react());

// node_modules/react-icons/lib/iconBase.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/react-icons/lib/iconContext.mjs
var import_react = __toESM(require_react(), 1);
var DefaultContext = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var IconContext = import_react.default.createContext && /* @__PURE__ */ import_react.default.createContext(DefaultContext);

// node_modules/react-icons/lib/iconBase.mjs
var _excluded4 = ["attr", "size", "title"];
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function Tree2Element(tree) {
  return tree && tree.map((node2, i) => /* @__PURE__ */ import_react2.default.createElement(node2.tag, _objectSpread({
    key: i
  }, node2.attr), Tree2Element(node2.child)));
}
function GenIcon(data2) {
  return (props) => /* @__PURE__ */ import_react2.default.createElement(IconBase, _extends4({
    attr: _objectSpread({}, data2.attr)
  }, props), Tree2Element(data2.child));
}
function IconBase(props) {
  var elem = (conf) => {
    var {
      attr,
      size,
      title
    } = props, svgProps = _objectWithoutProperties(props, _excluded4);
    var computedSize = size || conf.size || "1em";
    var className;
    if (conf.className) className = conf.className;
    if (props.className) className = (className ? className + " " : "") + props.className;
    return /* @__PURE__ */ import_react2.default.createElement("svg", _extends4({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, conf.attr, attr, svgProps, {
      className,
      style: _objectSpread(_objectSpread({
        color: props.color || conf.color
      }, conf.style), props.style),
      height: computedSize,
      width: computedSize,
      xmlns: "http://www.w3.org/2000/svg"
    }), title && /* @__PURE__ */ import_react2.default.createElement("title", null, title), props.children);
  };
  return IconContext !== void 0 ? /* @__PURE__ */ import_react2.default.createElement(IconContext.Consumer, null, (conf) => elem(conf)) : elem(DefaultContext);
}

// node_modules/react-icons/im/index.mjs
function ImCross(props) {
  return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M15.854 12.854c-0-0-0-0-0-0l-4.854-4.854 4.854-4.854c0-0 0-0 0-0 0.052-0.052 0.090-0.113 0.114-0.178 0.066-0.178 0.028-0.386-0.114-0.529l-2.293-2.293c-0.143-0.143-0.351-0.181-0.529-0.114-0.065 0.024-0.126 0.062-0.178 0.114 0 0-0 0-0 0l-4.854 4.854-4.854-4.854c-0-0-0-0-0-0-0.052-0.052-0.113-0.090-0.178-0.114-0.178-0.066-0.386-0.029-0.529 0.114l-2.293 2.293c-0.143 0.143-0.181 0.351-0.114 0.529 0.024 0.065 0.062 0.126 0.114 0.178 0 0 0 0 0 0l4.854 4.854-4.854 4.854c-0 0-0 0-0 0-0.052 0.052-0.090 0.113-0.114 0.178-0.066 0.178-0.029 0.386 0.114 0.529l2.293 2.293c0.143 0.143 0.351 0.181 0.529 0.114 0.065-0.024 0.126-0.062 0.178-0.114 0-0 0-0 0-0l4.854-4.854 4.854 4.854c0 0 0 0 0 0 0.052 0.052 0.113 0.090 0.178 0.114 0.178 0.066 0.386 0.029 0.529-0.114l2.293-2.293c0.143-0.143 0.181-0.351 0.114-0.529-0.024-0.065-0.062-0.126-0.114-0.178z" }, "child": [] }] })(props);
}
function ImCheckmark(props) {
  return GenIcon({ "tag": "svg", "attr": { "version": "1.1", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M13.5 2l-7.5 7.5-3.5-3.5-2.5 2.5 6 6 10-10z" }, "child": [] }] })(props);
}

// src/components/Dropdown.tsx
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
function MultiSelectDropdown(props) {
  const [isOpen, setIsOpen] = (0, import_react3.useState)(false);
  const [searchTerm, setSearchTerm] = (0, import_react3.useState)("");
  const toggleDropdown = () => {
    setIsOpen(!isOpen);
    return false;
  };
  const handleOptionClick = (option) => {
    if (props.onChange) {
      if (props.selected.includes(option)) {
        props.onChange(props.selected.filter((item) => item !== option));
      } else {
        props.onChange([...props.selected, option]);
      }
    }
  };
  const handleRemoveSelected = (option) => {
    if (props.onChange) {
      props.onChange(props.selected.filter((item) => item !== option));
    }
  };
  const filteredOptions = props.options ? props.options.filter(
    (option) => option.toLowerCase().includes(searchTerm.toLowerCase())
  ) : [];
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "w-full h-full py-1", children: [
    /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "flex flex-wrap", children: props.selected.map((item) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
      "div",
      {
        className: "flex items-center bg-blue-500 dark:bg-blue-700 text-white text-sm rounded-md px-2 py-1 mr-2 mb-2",
        children: [
          item,
          !props.locked && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "div",
            {
              className: "p-0.5 ml-1 cursor-pointer group",
              onClick: () => handleRemoveSelected(item),
              children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ImCross, { className: "group-hover:text-red-400" })
            }
          )
        ]
      },
      item
    )) }),
    !props.locked && /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "relative w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "w-full border-2 border-gray-300 bg-white dark:bg-gray-800 dark:border-gray-600 rounded-md  p-2 flex items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "input",
          {
            className: "w-full bg-white text-black placeholder-gray-500 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 focus:outline-none",
            type: "text",
            placeholder: props.placeholder,
            value: searchTerm,
            onChange: (event) => setSearchTerm(event.target.value),
            onClick: toggleDropdown
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "div",
          {
            className: `w-5 h-5 ml-2 transform ${isOpen ? "rotate-180" : ""} cursor-pointer`,
            onClick: toggleDropdown
          }
        )
      ] }),
      isOpen && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "absolute z-10 w-full bg-white dark:bg-gray-800 border-2 border-gray-300 dark:border-gray-600 rounded-md mt-1 max-h-40 overflow-y-auto", children: filteredOptions.length > 0 ? filteredOptions.map((option) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
        "div",
        {
          className: `p-2 cursor-pointer flex flex-row items-center hover:bg-blue-100 dark:hover:bg-gray-700`,
          onClick: () => handleOptionClick(option),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "flex-shrink-0 w-auto mr-1 h-full", children: props.selected.includes(option) && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ImCheckmark, { className: "w-full h-full" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "flex-grow", children: option })
          ]
        },
        option
      )) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "p-2 text-gray-500 dark:text-gray-400", children: "No options found" }) })
    ] })
  ] });
}

// src/pages/GamePage.tsx
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
async function getGame(gameId) {
  const res = await fetch(`/api/game/${gameId}`);
  if (res.status === 404) {
    throw new Response("Not Found", { status: 404 });
  }
  return convertKeysToCamelCase(await res.json());
}
async function loader({ params }) {
  const game = await getGame(params.gameId);
  return game;
}
function GamePage() {
  const game = useLoaderData();
  const playModes = game.playMode.split(";").map((s) => s.trim());
  const tableItems = {
    "Library": game.library,
    "Title": game.title,
    "Alternate Titles": game.alternateTitles,
    "Developer": game.developer,
    "Publisher": game.publisher,
    "Series": game.series,
    "Platform": /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Link, { to: `/platform/${game.primaryPlatform}`, children: game.primaryPlatform }),
    "Date Added": game.dateAdded,
    "Play Mode": /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(MultiSelectDropdown, { selected: playModes, locked: true }),
    "Status": game.status,
    "Source": game.source,
    "Release Date": game.releaseDate,
    "Version": game.version,
    "Original Description": game.originalDescription,
    "Language": game.language,
    "Notes": game.notes
  };
  const addAppItems = game.addApps ? game.addApps.map((addApp) => {
    return {
      "Name": addApp.name,
      "Application Path": addApp.applicationPath,
      "Launch Command": addApp.launchCommand,
      "Auto Run Before": addApp.autoRunBefore,
      "Wait For Exit": addApp.waitForExit
    };
  }) : [];
  const gameDataItems = game.gameData ? game.gameData.map((gd) => {
    return {
      "Date Added": gd.dateAdded,
      "SHA256": /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "font-mono", children: gd.sha256.toUpperCase() }),
      "Size": gd.size,
      "Parameters": gd.parameters,
      "Application Path": gd.applicationPath,
      "Launch Command": gd.launchCommand
    };
  }) : [];
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "w-full p-5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "text-lg italic text-gray-500", children: game.id }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "text-2xl my-5 font-bold", children: game.title }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "text-lg font-bold", children: "Metadata" }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      StripedHTable,
      {
        items: tableItems
      }
    ) }),
    addAppItems.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "text-lg font-bold", children: "Additional Apps" }),
      addAppItems.map((items, index2) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        StripedHTable,
        {
          items
        }
      ) }, index2))
    ] }) : void 0,
    gameDataItems.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "text-lg font-bold", children: "Game Data" }),
      gameDataItems.map((items, index2) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        StripedHTable,
        {
          items
        }
      ) }, index2))
    ] }) : void 0
  ] });
}

// src/pages/EditGamePage.tsx
var import_react6 = __toESM(require_react());

// src/components/RowEditors.tsx
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
function RowEditorInput(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "w-full border-2 border-gray-300 dark:border-gray-600 rounded-md mt-1 mb-1", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    "input",
    {
      className: "w-full bg-white text-black placeholder-gray-500 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400",
      type: "text",
      value: props.value,
      placeholder: props.placeholder,
      onChange: (event) => props.onChange(event.target.value)
    }
  ) });
}
function RowEditorTextArea(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "w-full border-2 border-gray-300 dark:border-gray-600 rounded-md mt-1 mb-1", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
    "textarea",
    {
      className: "w-full bg-white text-black placeholder-gray-500 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400",
      value: props.value,
      placeholder: props.placeholder,
      onChange: (event) => props.onChange(event.target.value),
      rows: props.rows || 5,
      style: { minHeight: "3rem", overflowY: "auto" }
    }
  ) });
}

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position(value.position);
  }
  if ("start" in value || "end" in value) {
    return position(value);
  }
  if ("line" in value || "column" in value) {
    return point(value);
  }
  return "";
}
function point(point4) {
  return index(point4 && point4.line) + ":" + index(point4 && point4.column);
}
function position(pos) {
  return point(pos && pos.start) + "-" + point(pos && pos.end);
}
function index(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
    super();
    if (typeof optionsOrParentOrPlace === "string") {
      origin = optionsOrParentOrPlace;
      optionsOrParentOrPlace = void 0;
    }
    let reason = "";
    let options = {};
    let legacyCause = false;
    if (optionsOrParentOrPlace) {
      if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("type" in optionsOrParentOrPlace) {
        options = {
          ancestors: [optionsOrParentOrPlace],
          place: optionsOrParentOrPlace.position
        };
      } else {
        options = { ...optionsOrParentOrPlace };
      }
    }
    if (typeof causeOrReason === "string") {
      reason = causeOrReason;
    } else if (!options.cause && causeOrReason) {
      legacyCause = true;
      reason = causeOrReason.message;
      options.cause = causeOrReason;
    }
    if (!options.ruleId && !options.source && typeof origin === "string") {
      const index2 = origin.indexOf(":");
      if (index2 === -1) {
        options.ruleId = origin;
      } else {
        options.source = origin.slice(0, index2);
        options.ruleId = origin.slice(index2 + 1);
      }
    }
    if (!options.place && options.ancestors && options.ancestors) {
      const parent = options.ancestors[options.ancestors.length - 1];
      if (parent) {
        options.place = parent.position;
      }
    }
    const start2 = options.place && "start" in options.place ? options.place.start : options.place;
    this.ancestors = options.ancestors || void 0;
    this.cause = options.cause || void 0;
    this.column = start2 ? start2.column : void 0;
    this.fatal = void 0;
    this.file;
    this.message = reason;
    this.line = start2 ? start2.line : void 0;
    this.name = stringifyPosition(options.place) || "1:1";
    this.place = options.place || void 0;
    this.reason = this.message;
    this.ruleId = options.ruleId || void 0;
    this.source = options.source || void 0;
    this.stack = legacyCause && options.cause && typeof options.cause.stack === "string" ? options.cause.stack : "";
    this.actual;
    this.expected;
    this.note;
    this.url;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.column = void 0;
VFileMessage.prototype.line = void 0;
VFileMessage.prototype.ancestors = void 0;
VFileMessage.prototype.cause = void 0;
VFileMessage.prototype.fatal = void 0;
VFileMessage.prototype.place = void 0;
VFileMessage.prototype.ruleId = void 0;
VFileMessage.prototype.source = void 0;

// node_modules/vfile/lib/minpath.browser.js
var minpath = { basename, dirname, extname, join, sep: "/" };
function basename(path2, extname2) {
  if (extname2 !== void 0 && typeof extname2 !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path2);
  let start2 = 0;
  let end = -1;
  let index2 = path2.length;
  let seenNonSlash;
  if (extname2 === void 0 || extname2.length === 0 || extname2.length > path2.length) {
    while (index2--) {
      if (path2.codePointAt(index2) === 47) {
        if (seenNonSlash) {
          start2 = index2 + 1;
          break;
        }
      } else if (end < 0) {
        seenNonSlash = true;
        end = index2 + 1;
      }
    }
    return end < 0 ? "" : path2.slice(start2, end);
  }
  if (extname2 === path2) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extnameIndex = extname2.length - 1;
  while (index2--) {
    if (path2.codePointAt(index2) === 47) {
      if (seenNonSlash) {
        start2 = index2 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index2 + 1;
      }
      if (extnameIndex > -1) {
        if (path2.codePointAt(index2) === extname2.codePointAt(extnameIndex--)) {
          if (extnameIndex < 0) {
            end = index2;
          }
        } else {
          extnameIndex = -1;
          end = firstNonSlashEnd;
        }
      }
    }
  }
  if (start2 === end) {
    end = firstNonSlashEnd;
  } else if (end < 0) {
    end = path2.length;
  }
  return path2.slice(start2, end);
}
function dirname(path2) {
  assertPath(path2);
  if (path2.length === 0) {
    return ".";
  }
  let end = -1;
  let index2 = path2.length;
  let unmatchedSlash;
  while (--index2) {
    if (path2.codePointAt(index2) === 47) {
      if (unmatchedSlash) {
        end = index2;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end < 0 ? path2.codePointAt(0) === 47 ? "/" : "." : end === 1 && path2.codePointAt(0) === 47 ? "//" : path2.slice(0, end);
}
function extname(path2) {
  assertPath(path2);
  let index2 = path2.length;
  let end = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index2--) {
    const code4 = path2.codePointAt(index2);
    if (code4 === 47) {
      if (unmatchedSlash) {
        startPart = index2 + 1;
        break;
      }
      continue;
    }
    if (end < 0) {
      unmatchedSlash = true;
      end = index2 + 1;
    }
    if (code4 === 46) {
      if (startDot < 0) {
        startDot = index2;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path2.slice(startDot, end);
}
function join(...segments) {
  let index2 = -1;
  let joined;
  while (++index2 < segments.length) {
    assertPath(segments[index2]);
    if (segments[index2]) {
      joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
    }
  }
  return joined === void 0 ? "." : normalize(joined);
}
function normalize(path2) {
  assertPath(path2);
  const absolute = path2.codePointAt(0) === 47;
  let value = normalizeString(path2, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path2.codePointAt(path2.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path2, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index2 = -1;
  let code4;
  let lastSlashIndex;
  while (++index2 <= path2.length) {
    if (index2 < path2.length) {
      code4 = path2.codePointAt(index2);
    } else if (code4 === 47) {
      break;
    } else {
      code4 = 47;
    }
    if (code4 === 47) {
      if (lastSlash === index2 - 1 || dots === 1) {
      } else if (lastSlash !== index2 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 || result.codePointAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index2;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index2;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path2.slice(lastSlash + 1, index2);
        } else {
          result = path2.slice(lastSlash + 1, index2);
        }
        lastSegmentLength = index2 - lastSlash - 1;
      }
      lastSlash = index2;
      dots = 0;
    } else if (code4 === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path2) {
  if (typeof path2 !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path2)
    );
  }
}

// node_modules/vfile/lib/minproc.browser.js
var minproc = { cwd };
function cwd() {
  return "/";
}

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return Boolean(
    fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === void 0
  );
}

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path2) {
  if (typeof path2 === "string") {
    path2 = new URL(path2);
  } else if (!isUrl(path2)) {
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path2 + "`"
    );
    error.code = "ERR_INVALID_ARG_TYPE";
    throw error;
  }
  if (path2.protocol !== "file:") {
    const error = new TypeError("The URL must be of scheme file");
    error.code = "ERR_INVALID_URL_SCHEME";
    throw error;
  }
  return getPathFromURLPosix(path2);
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error.code = "ERR_INVALID_FILE_URL_HOST";
    throw error;
  }
  const pathname = url.pathname;
  let index2 = -1;
  while (++index2 < pathname.length) {
    if (pathname.codePointAt(index2) === 37 && pathname.codePointAt(index2 + 1) === 50) {
      const third = pathname.codePointAt(index2 + 2);
      if (third === 70 || third === 102) {
        const error = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error.code = "ERR_INVALID_FILE_URL_PATH";
        throw error;
      }
    }
  }
  return decodeURIComponent(pathname);
}

// node_modules/vfile/lib/index.js
var order = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
var VFile = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    let options;
    if (!value) {
      options = {};
    } else if (isUrl(value)) {
      options = { path: value };
    } else if (typeof value === "string" || isUint8Array(value)) {
      options = { value };
    } else {
      options = value;
    }
    this.cwd = "cwd" in options ? "" : minproc.cwd();
    this.data = {};
    this.history = [];
    this.messages = [];
    this.value;
    this.map;
    this.result;
    this.stored;
    let index2 = -1;
    while (++index2 < order.length) {
      const field2 = order[index2];
      if (field2 in options && options[field2] !== void 0 && options[field2] !== null) {
        this[field2] = field2 === "history" ? [...options[field2]] : options[field2];
      }
    }
    let field;
    for (field in options) {
      if (!order.includes(field)) {
        this[field] = options[field];
      }
    }
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path === "string" ? minpath.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(basename2) {
    assertNonEmpty(basename2, "basename");
    assertPart(basename2, "basename");
    this.path = minpath.join(this.dirname || "", basename2);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path === "string" ? minpath.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(dirname2) {
    assertPath2(this.basename, "dirname");
    this.path = minpath.join(dirname2 || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path === "string" ? minpath.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(extname2) {
    assertPart(extname2, "extname");
    assertPath2(this.dirname, "extname");
    if (extname2) {
      if (extname2.codePointAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname2.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = minpath.join(this.dirname, this.stem + (extname2 || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(path2) {
    if (isUrl(path2)) {
      path2 = urlToPath(path2);
    }
    assertNonEmpty(path2, "path");
    if (this.path !== path2) {
      this.history.push(path2);
    }
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path === "string" ? minpath.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = minpath.join(this.dirname || "", stem + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = true;
    throw message;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = void 0;
    return message;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = new VFileMessage(
      // @ts-expect-error: the overloads are fine.
      causeOrReason,
      optionsOrParentOrPlace,
      origin
    );
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    if (this.value === void 0) {
      return "";
    }
    if (typeof this.value === "string") {
      return this.value;
    }
    const decoder = new TextDecoder(encoding || void 0);
    return decoder.decode(this.value);
  }
};
function assertPart(part, name2) {
  if (part && part.includes(minpath.sep)) {
    throw new Error(
      "`" + name2 + "` cannot be a path: did not expect `" + minpath.sep + "`"
    );
  }
}
function assertNonEmpty(part, name2) {
  if (!part) {
    throw new Error("`" + name2 + "` cannot be empty");
  }
}
function assertPath2(path2, name2) {
  if (!path2) {
    throw new Error("Setting `" + name2 + "` requires `path` to be set too");
  }
}
function isUint8Array(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/markdown-extensions/index.js
var markdownExtension = [
  "md",
  "markdown",
  "mdown",
  "mkdn",
  "mkd",
  "mdwn",
  "mkdown",
  "ron"
];
var markdown_extensions_default = markdownExtension;

// node_modules/@mdx-js/mdx/lib/util/extnames.js
var md = markdown_extensions_default.map(function(d) {
  return "." + d;
});

// node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js
function resolveFileAndOptions(vfileCompatible, options) {
  const file = looksLikeAVFile(vfileCompatible) ? vfileCompatible : new VFile(vfileCompatible);
  const { format, ...rest } = options || {};
  return {
    file,
    options: {
      format: format === "md" || format === "mdx" ? format : file.extname && (rest.mdExtensions || md).includes(file.extname) ? "md" : "mdx",
      ...rest
    }
  };
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}

// node_modules/devlop/lib/default.js
function ok() {
}
function unreachable() {
}

// node_modules/mdast-util-mdx-expression/lib/index.js
function mdxExpressionFromMarkdown() {
  return {
    enter: {
      mdxFlowExpression: enterMdxFlowExpression,
      mdxTextExpression: enterMdxTextExpression
    },
    exit: {
      mdxFlowExpression: exitMdxExpression,
      mdxFlowExpressionChunk: exitMdxExpressionData,
      mdxTextExpression: exitMdxExpression,
      mdxTextExpressionChunk: exitMdxExpressionData
    }
  };
}
function mdxExpressionToMarkdown() {
  return {
    handlers: {
      mdxFlowExpression: handleMdxExpression,
      mdxTextExpression: handleMdxExpression
    },
    unsafe: [
      { character: "{", inConstruct: ["phrasing"] },
      { atBreak: true, character: "{" }
    ]
  };
}
function enterMdxFlowExpression(token) {
  this.enter({ type: "mdxFlowExpression", value: "" }, token);
  this.buffer();
}
function enterMdxTextExpression(token) {
  this.enter({ type: "mdxTextExpression", value: "" }, token);
  this.buffer();
}
function exitMdxExpression(token) {
  const value = this.resume();
  const estree = token.estree;
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "mdxFlowExpression" || node2.type === "mdxTextExpression");
  this.exit(token);
  node2.value = value;
  if (estree) {
    node2.data = { estree };
  }
}
function exitMdxExpressionData(token) {
  this.config.enter.data.call(this, token);
  this.config.exit.data.call(this, token);
}
function handleMdxExpression(node2) {
  const value = node2.value || "";
  return "{" + value + "}";
}

// node_modules/ccount/index.js
function ccount(value, character) {
  const source = String(value);
  if (typeof character !== "string") {
    throw new TypeError("Expected character");
  }
  let count = 0;
  let index2 = source.indexOf(character);
  while (index2 !== -1) {
    count++;
    index2 = source.indexOf(character, index2 + character.length);
  }
  return count;
}

// node_modules/character-entities-legacy/index.js
var characterEntitiesLegacy = [
  "AElig",
  "AMP",
  "Aacute",
  "Acirc",
  "Agrave",
  "Aring",
  "Atilde",
  "Auml",
  "COPY",
  "Ccedil",
  "ETH",
  "Eacute",
  "Ecirc",
  "Egrave",
  "Euml",
  "GT",
  "Iacute",
  "Icirc",
  "Igrave",
  "Iuml",
  "LT",
  "Ntilde",
  "Oacute",
  "Ocirc",
  "Ograve",
  "Oslash",
  "Otilde",
  "Ouml",
  "QUOT",
  "REG",
  "THORN",
  "Uacute",
  "Ucirc",
  "Ugrave",
  "Uuml",
  "Yacute",
  "aacute",
  "acirc",
  "acute",
  "aelig",
  "agrave",
  "amp",
  "aring",
  "atilde",
  "auml",
  "brvbar",
  "ccedil",
  "cedil",
  "cent",
  "copy",
  "curren",
  "deg",
  "divide",
  "eacute",
  "ecirc",
  "egrave",
  "eth",
  "euml",
  "frac12",
  "frac14",
  "frac34",
  "gt",
  "iacute",
  "icirc",
  "iexcl",
  "igrave",
  "iquest",
  "iuml",
  "laquo",
  "lt",
  "macr",
  "micro",
  "middot",
  "nbsp",
  "not",
  "ntilde",
  "oacute",
  "ocirc",
  "ograve",
  "ordf",
  "ordm",
  "oslash",
  "otilde",
  "ouml",
  "para",
  "plusmn",
  "pound",
  "quot",
  "raquo",
  "reg",
  "sect",
  "shy",
  "sup1",
  "sup2",
  "sup3",
  "szlig",
  "thorn",
  "times",
  "uacute",
  "ucirc",
  "ugrave",
  "uml",
  "uuml",
  "yacute",
  "yen",
  "yuml"
];

// node_modules/character-reference-invalid/index.js
var characterReferenceInvalid = {
  0: "\uFFFD",
  128: "\u20AC",
  130: "\u201A",
  131: "\u0192",
  132: "\u201E",
  133: "\u2026",
  134: "\u2020",
  135: "\u2021",
  136: "\u02C6",
  137: "\u2030",
  138: "\u0160",
  139: "\u2039",
  140: "\u0152",
  142: "\u017D",
  145: "\u2018",
  146: "\u2019",
  147: "\u201C",
  148: "\u201D",
  149: "\u2022",
  150: "\u2013",
  151: "\u2014",
  152: "\u02DC",
  153: "\u2122",
  154: "\u0161",
  155: "\u203A",
  156: "\u0153",
  158: "\u017E",
  159: "\u0178"
};

// node_modules/is-decimal/index.js
function isDecimal(character) {
  const code4 = typeof character === "string" ? character.charCodeAt(0) : character;
  return code4 >= 48 && code4 <= 57;
}

// node_modules/is-hexadecimal/index.js
function isHexadecimal(character) {
  const code4 = typeof character === "string" ? character.charCodeAt(0) : character;
  return code4 >= 97 && code4 <= 102 || code4 >= 65 && code4 <= 70 || code4 >= 48 && code4 <= 57;
}

// node_modules/is-alphabetical/index.js
function isAlphabetical(character) {
  const code4 = typeof character === "string" ? character.charCodeAt(0) : character;
  return code4 >= 97 && code4 <= 122 || code4 >= 65 && code4 <= 90;
}

// node_modules/is-alphanumerical/index.js
function isAlphanumerical(character) {
  return isAlphabetical(character) || isDecimal(character);
}

// node_modules/decode-named-character-reference/index.dom.js
var element = document.createElement("i");
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element.innerHTML = characterReference2;
  const char = element.textContent;
  if (char.charCodeAt(char.length - 1) === 59 && value !== "semi") {
    return false;
  }
  return char === characterReference2 ? false : char;
}

// node_modules/parse-entities/lib/index.js
var fromCharCode = String.fromCharCode;
var messages = [
  "",
  /* 1: Non terminated (named) */
  "Named character references must be terminated by a semicolon",
  /* 2: Non terminated (numeric) */
  "Numeric character references must be terminated by a semicolon",
  /* 3: Empty (named) */
  "Named character references cannot be empty",
  /* 4: Empty (numeric) */
  "Numeric character references cannot be empty",
  /* 5: Unknown (named) */
  "Named character references must be known",
  /* 6: Disallowed (numeric) */
  "Numeric character references cannot be disallowed",
  /* 7: Prohibited (numeric) */
  "Numeric character references cannot be outside the permissible Unicode range"
];
function parseEntities(value, options = {}) {
  const additional = typeof options.additional === "string" ? options.additional.charCodeAt(0) : options.additional;
  const result = [];
  let index2 = 0;
  let lines = -1;
  let queue = "";
  let point4;
  let indent3;
  if (options.position) {
    if ("start" in options.position || "indent" in options.position) {
      indent3 = options.position.indent;
      point4 = options.position.start;
    } else {
      point4 = options.position;
    }
  }
  let line = (point4 ? point4.line : 0) || 1;
  let column = (point4 ? point4.column : 0) || 1;
  let previous3 = now();
  let character;
  index2--;
  while (++index2 <= value.length) {
    if (character === 10) {
      column = (indent3 ? indent3[lines] : 0) || 1;
    }
    character = value.charCodeAt(index2);
    if (character === 38) {
      const following = value.charCodeAt(index2 + 1);
      if (following === 9 || following === 10 || following === 12 || following === 32 || following === 38 || following === 60 || Number.isNaN(following) || additional && following === additional) {
        queue += fromCharCode(character);
        column++;
        continue;
      }
      const start2 = index2 + 1;
      let begin = start2;
      let end = start2;
      let type;
      if (following === 35) {
        end = ++begin;
        const following2 = value.charCodeAt(end);
        if (following2 === 88 || following2 === 120) {
          type = "hexadecimal";
          end = ++begin;
        } else {
          type = "decimal";
        }
      } else {
        type = "named";
      }
      let characterReferenceCharacters = "";
      let characterReference2 = "";
      let characters = "";
      const test = type === "named" ? isAlphanumerical : type === "decimal" ? isDecimal : isHexadecimal;
      end--;
      while (++end <= value.length) {
        const following2 = value.charCodeAt(end);
        if (!test(following2)) {
          break;
        }
        characters += fromCharCode(following2);
        if (type === "named" && characterEntitiesLegacy.includes(characters)) {
          characterReferenceCharacters = characters;
          characterReference2 = decodeNamedCharacterReference(characters);
        }
      }
      let terminated = value.charCodeAt(end) === 59;
      if (terminated) {
        end++;
        const namedReference = type === "named" ? decodeNamedCharacterReference(characters) : false;
        if (namedReference) {
          characterReferenceCharacters = characters;
          characterReference2 = namedReference;
        }
      }
      let diff = 1 + end - start2;
      let reference = "";
      if (!terminated && options.nonTerminated === false) {
      } else if (!characters) {
        if (type !== "named") {
          warning2(4, diff);
        }
      } else if (type === "named") {
        if (terminated && !characterReference2) {
          warning2(5, 1);
        } else {
          if (characterReferenceCharacters !== characters) {
            end = begin + characterReferenceCharacters.length;
            diff = 1 + end - begin;
            terminated = false;
          }
          if (!terminated) {
            const reason = characterReferenceCharacters ? 1 : 3;
            if (options.attribute) {
              const following2 = value.charCodeAt(end);
              if (following2 === 61) {
                warning2(reason, diff);
                characterReference2 = "";
              } else if (isAlphanumerical(following2)) {
                characterReference2 = "";
              } else {
                warning2(reason, diff);
              }
            } else {
              warning2(reason, diff);
            }
          }
        }
        reference = characterReference2;
      } else {
        if (!terminated) {
          warning2(2, diff);
        }
        let referenceCode = Number.parseInt(
          characters,
          type === "hexadecimal" ? 16 : 10
        );
        if (prohibited(referenceCode)) {
          warning2(7, diff);
          reference = fromCharCode(
            65533
            /* `�` */
          );
        } else if (referenceCode in characterReferenceInvalid) {
          warning2(6, diff);
          reference = characterReferenceInvalid[referenceCode];
        } else {
          let output = "";
          if (disallowed(referenceCode)) {
            warning2(6, diff);
          }
          if (referenceCode > 65535) {
            referenceCode -= 65536;
            output += fromCharCode(referenceCode >>> (10 & 1023) | 55296);
            referenceCode = 56320 | referenceCode & 1023;
          }
          reference = output + fromCharCode(referenceCode);
        }
      }
      if (reference) {
        flush();
        previous3 = now();
        index2 = end - 1;
        column += end - start2 + 1;
        result.push(reference);
        const next = now();
        next.offset++;
        if (options.reference) {
          options.reference.call(
            options.referenceContext,
            reference,
            { start: previous3, end: next },
            value.slice(start2 - 1, end)
          );
        }
        previous3 = next;
      } else {
        characters = value.slice(start2 - 1, end);
        queue += characters;
        column += characters.length;
        index2 = end - 1;
      }
    } else {
      if (character === 10) {
        line++;
        lines++;
        column = 0;
      }
      if (Number.isNaN(character)) {
        flush();
      } else {
        queue += fromCharCode(character);
        column++;
      }
    }
  }
  return result.join("");
  function now() {
    return {
      line,
      column,
      offset: index2 + ((point4 ? point4.offset : 0) || 0)
    };
  }
  function warning2(code4, offset2) {
    let position3;
    if (options.warning) {
      position3 = now();
      position3.column += offset2;
      position3.offset += offset2;
      options.warning.call(
        options.warningContext,
        messages[code4],
        position3,
        code4
      );
    }
  }
  function flush() {
    if (queue) {
      result.push(queue);
      if (options.text) {
        options.text.call(options.textContext, queue, {
          start: previous3,
          end: now()
        });
      }
      queue = "";
    }
  }
}
function prohibited(code4) {
  return code4 >= 55296 && code4 <= 57343 || code4 > 1114111;
}
function disallowed(code4) {
  return code4 >= 1 && code4 <= 8 || code4 === 11 || code4 >= 13 && code4 <= 31 || code4 >= 127 && code4 <= 159 || code4 >= 64976 && code4 <= 65007 || (code4 & 65535) === 65535 || (code4 & 65535) === 65534;
}

// node_modules/stringify-entities/lib/core.js
var defaultSubsetRegex = /["&'<>`]/g;
var surrogatePairsRegex = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var controlCharactersRegex = (
  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
  /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g
);
var regexEscapeRegex = /[|\\{}()[\]^$+*?.]/g;
var subsetToRegexCache = /* @__PURE__ */ new WeakMap();
function core(value, options) {
  value = value.replace(
    options.subset ? charactersToExpressionCached(options.subset) : defaultSubsetRegex,
    basic
  );
  if (options.subset || options.escapeOnly) {
    return value;
  }
  return value.replace(surrogatePairsRegex, surrogate).replace(controlCharactersRegex, basic);
  function surrogate(pair, index2, all4) {
    return options.format(
      (pair.charCodeAt(0) - 55296) * 1024 + pair.charCodeAt(1) - 56320 + 65536,
      all4.charCodeAt(index2 + 2),
      options
    );
  }
  function basic(character, index2, all4) {
    return options.format(
      character.charCodeAt(0),
      all4.charCodeAt(index2 + 1),
      options
    );
  }
}
function charactersToExpressionCached(subset) {
  let cached = subsetToRegexCache.get(subset);
  if (!cached) {
    cached = charactersToExpression(subset);
    subsetToRegexCache.set(subset, cached);
  }
  return cached;
}
function charactersToExpression(subset) {
  const groups = [];
  let index2 = -1;
  while (++index2 < subset.length) {
    groups.push(subset[index2].replace(regexEscapeRegex, "\\$&"));
  }
  return new RegExp("(?:" + groups.join("|") + ")", "g");
}

// node_modules/stringify-entities/lib/util/format-basic.js
function formatBasic(code4) {
  return "&#x" + code4.toString(16).toUpperCase() + ";";
}

// node_modules/stringify-entities/lib/index.js
function stringifyEntitiesLight(value, options) {
  return core(value, Object.assign({ format: formatBasic }, options));
}

// node_modules/mdast-util-mdx-jsx/lib/index.js
var indent = "  ";
function mdxJsxFromMarkdown() {
  return {
    canContainEols: ["mdxJsxTextElement"],
    enter: {
      mdxJsxFlowTag: enterMdxJsxTag,
      mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,
      mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,
      mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
      mdxJsxFlowTagAttributeValueLiteral: buffer,
      mdxJsxFlowTagAttributeValueExpression: buffer,
      mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,
      mdxJsxTextTag: enterMdxJsxTag,
      mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,
      mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,
      mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,
      mdxJsxTextTagAttributeValueLiteral: buffer,
      mdxJsxTextTagAttributeValueExpression: buffer,
      mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker
    },
    exit: {
      mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,
      mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,
      mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,
      mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,
      mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
      mdxJsxFlowTagExpressionAttributeValue: data2,
      mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
      mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
      mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
      mdxJsxFlowTagAttributeValueLiteralValue: data2,
      mdxJsxFlowTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
      mdxJsxFlowTagAttributeValueExpressionValue: data2,
      mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
      mdxJsxFlowTag: exitMdxJsxTag,
      mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,
      mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,
      mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,
      mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,
      mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,
      mdxJsxTextTagExpressionAttributeValue: data2,
      mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,
      mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,
      mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,
      mdxJsxTextTagAttributeValueLiteralValue: data2,
      mdxJsxTextTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,
      mdxJsxTextTagAttributeValueExpressionValue: data2,
      mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,
      mdxJsxTextTag: exitMdxJsxTag
    }
  };
  function buffer() {
    this.buffer();
  }
  function point4(d) {
    return { line: d.line, column: d.column, offset: d.offset };
  }
  function data2(token) {
    this.config.enter.data.call(this, token);
    this.config.exit.data.call(this, token);
  }
  function enterMdxJsxTag(token) {
    const tag = {
      name: void 0,
      attributes: [],
      close: false,
      selfClosing: false,
      start: token.start,
      end: token.end
    };
    if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = [];
    this.data.mdxJsxTag = tag;
    this.buffer();
  }
  function enterMdxJsxTagClosingMarker(token) {
    const stack = this.data.mdxJsxTagStack;
    ok(stack, "expected `mdxJsxTagStack`");
    if (stack.length === 0) {
      throw new VFileMessage(
        "Unexpected closing slash `/` in tag, expected an open tag first",
        { start: token.start, end: token.end },
        "mdast-util-mdx-jsx:unexpected-closing-slash"
      );
    }
  }
  function enterMdxJsxTagAnyAttribute(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    if (tag.close) {
      throw new VFileMessage(
        "Unexpected attribute in closing tag, expected the end of the tag",
        { start: token.start, end: token.end },
        "mdast-util-mdx-jsx:unexpected-attribute"
      );
    }
  }
  function enterMdxJsxTagSelfClosingMarker(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    if (tag.close) {
      throw new VFileMessage(
        "Unexpected self-closing slash `/` in closing tag, expected the end of the tag",
        { start: token.start, end: token.end },
        "mdast-util-mdx-jsx:unexpected-self-closing-slash"
      );
    }
  }
  function exitMdxJsxTagClosingMarker() {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    tag.close = true;
  }
  function exitMdxJsxTagNamePrimary(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    tag.name = this.sliceSerialize(token);
  }
  function exitMdxJsxTagNameMember(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    tag.name += "." + this.sliceSerialize(token);
  }
  function exitMdxJsxTagNameLocal(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    tag.name += ":" + this.sliceSerialize(token);
  }
  function enterMdxJsxTagAttribute(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    enterMdxJsxTagAnyAttribute.call(this, token);
    tag.attributes.push({
      type: "mdxJsxAttribute",
      name: "",
      value: null,
      position: {
        start: point4(token.start),
        // @ts-expect-error: `end` will be patched later.
        end: void 0
      }
    });
  }
  function enterMdxJsxTagExpressionAttribute(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    enterMdxJsxTagAnyAttribute.call(this, token);
    tag.attributes.push({ type: "mdxJsxExpressionAttribute", value: "" });
    this.buffer();
  }
  function exitMdxJsxTagExpressionAttribute(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    const tail = tag.attributes[tag.attributes.length - 1];
    ok(tail.type === "mdxJsxExpressionAttribute");
    const estree = token.estree;
    tail.value = this.resume();
    if (estree) {
      tail.data = { estree };
    }
  }
  function exitMdxJsxTagAttributeNamePrimary(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    const node2 = tag.attributes[tag.attributes.length - 1];
    ok(node2.type === "mdxJsxAttribute");
    node2.name = this.sliceSerialize(token);
    ok(node2.position !== void 0);
    node2.position.end = point4(token.end);
  }
  function exitMdxJsxTagAttributeNameLocal(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    const node2 = tag.attributes[tag.attributes.length - 1];
    ok(node2.type === "mdxJsxAttribute");
    node2.name += ":" + this.sliceSerialize(token);
    ok(node2.position !== void 0);
    node2.position.end = point4(token.end);
  }
  function exitMdxJsxTagAttributeValueLiteral(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    const node2 = tag.attributes[tag.attributes.length - 1];
    node2.value = parseEntities(this.resume(), { nonTerminated: false });
    ok(node2.position !== void 0);
    node2.position.end = point4(token.end);
  }
  function exitMdxJsxTagAttributeValueExpression(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    const tail = tag.attributes[tag.attributes.length - 1];
    ok(tail.type === "mdxJsxAttribute");
    const node2 = { type: "mdxJsxAttributeValueExpression", value: this.resume() };
    const estree = token.estree;
    if (estree) {
      node2.data = { estree };
    }
    tail.value = node2;
    ok(tail.position !== void 0);
    tail.position.end = point4(token.end);
  }
  function exitMdxJsxTagSelfClosingMarker() {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    tag.selfClosing = true;
  }
  function exitMdxJsxTag(token) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    const stack = this.data.mdxJsxTagStack;
    ok(stack, "expected `mdxJsxTagStack`");
    const tail = stack[stack.length - 1];
    if (tag.close && tail.name !== tag.name) {
      throw new VFileMessage(
        "Unexpected closing tag `" + serializeAbbreviatedTag(tag) + "`, expected corresponding closing tag for `" + serializeAbbreviatedTag(tail) + "` (" + stringifyPosition(tail) + ")",
        { start: token.start, end: token.end },
        "mdast-util-mdx-jsx:end-tag-mismatch"
      );
    }
    this.resume();
    if (tag.close) {
      stack.pop();
    } else {
      this.enter(
        {
          type: token.type === "mdxJsxTextTag" ? "mdxJsxTextElement" : "mdxJsxFlowElement",
          name: tag.name || null,
          attributes: tag.attributes,
          children: []
        },
        token,
        onErrorRightIsTag
      );
    }
    if (tag.selfClosing || tag.close) {
      this.exit(token, onErrorLeftIsTag);
    } else {
      stack.push(tag);
    }
  }
  function onErrorRightIsTag(closing, open) {
    const stack = this.data.mdxJsxTagStack;
    ok(stack, "expected `mdxJsxTagStack`");
    const tag = stack[stack.length - 1];
    ok(tag, "expected `mdxJsxTag`");
    const place = closing ? " before the end of `" + closing.type + "`" : "";
    const position3 = closing ? { start: closing.start, end: closing.end } : void 0;
    throw new VFileMessage(
      "Expected a closing tag for `" + serializeAbbreviatedTag(tag) + "` (" + stringifyPosition({ start: open.start, end: open.end }) + ")" + place,
      position3,
      "mdast-util-mdx-jsx:end-tag-mismatch"
    );
  }
  function onErrorLeftIsTag(a, b) {
    const tag = this.data.mdxJsxTag;
    ok(tag, "expected `mdxJsxTag`");
    throw new VFileMessage(
      "Expected the closing tag `" + serializeAbbreviatedTag(tag) + "` either after the end of `" + b.type + "` (" + stringifyPosition(b.end) + ") or another opening tag after the start of `" + b.type + "` (" + stringifyPosition(b.start) + ")",
      { start: a.start, end: a.end },
      "mdast-util-mdx-jsx:end-tag-mismatch"
    );
  }
  function serializeAbbreviatedTag(tag) {
    return "<" + (tag.close ? "/" : "") + (tag.name || "") + ">";
  }
}
function mdxJsxToMarkdown(options) {
  const options_ = options || {};
  const quote = options_.quote || '"';
  const quoteSmart = options_.quoteSmart || false;
  const tightSelfClosing = options_.tightSelfClosing || false;
  const printWidth = options_.printWidth || Number.POSITIVE_INFINITY;
  const alternative = quote === '"' ? "'" : '"';
  if (quote !== '"' && quote !== "'") {
    throw new Error(
      "Cannot serialize attribute values with `" + quote + "` for `options.quote`, expected `\"`, or `'`"
    );
  }
  mdxElement.peek = peekElement;
  return {
    handlers: {
      mdxJsxFlowElement: mdxElement,
      mdxJsxTextElement: mdxElement
    },
    unsafe: [
      { character: "<", inConstruct: ["phrasing"] },
      { atBreak: true, character: "<" }
    ],
    // Always generate fenced code (never indented code).
    fences: true,
    // Always generate links with resources (never autolinks).
    resourceLink: true
  };
  function mdxElement(node2, _, state, info) {
    const flow3 = node2.type === "mdxJsxFlowElement";
    const selfClosing = node2.name ? !node2.children || node2.children.length === 0 : false;
    const depth = inferDepth(state);
    const currentIndent = createIndent(depth);
    const trackerOneLine = state.createTracker(info);
    const trackerMultiLine = state.createTracker(info);
    const serializedAttributes = [];
    const prefix2 = (flow3 ? currentIndent : "") + "<" + (node2.name || "");
    const exit3 = state.enter(node2.type);
    trackerOneLine.move(prefix2);
    trackerMultiLine.move(prefix2);
    if (node2.attributes && node2.attributes.length > 0) {
      if (!node2.name) {
        throw new Error("Cannot serialize fragment w/ attributes");
      }
      let index2 = -1;
      while (++index2 < node2.attributes.length) {
        const attribute = node2.attributes[index2];
        let result;
        if (attribute.type === "mdxJsxExpressionAttribute") {
          result = "{" + (attribute.value || "") + "}";
        } else {
          if (!attribute.name) {
            throw new Error("Cannot serialize attribute w/o name");
          }
          const value2 = attribute.value;
          const left = attribute.name;
          let right = "";
          if (value2 === null || value2 === void 0) {
          } else if (typeof value2 === "object") {
            right = "{" + (value2.value || "") + "}";
          } else {
            const appliedQuote = quoteSmart && ccount(value2, quote) > ccount(value2, alternative) ? alternative : quote;
            right = appliedQuote + stringifyEntitiesLight(value2, { subset: [appliedQuote] }) + appliedQuote;
          }
          result = left + (right ? "=" : "") + right;
        }
        serializedAttributes.push(result);
      }
    }
    let attributesOnTheirOwnLine = false;
    const attributesOnOneLine = serializedAttributes.join(" ");
    if (
      // Block:
      flow3 && // Including a line ending (expressions).
      (/\r?\n|\r/.test(attributesOnOneLine) || // Current position (including `<tag`).
      trackerOneLine.current().now.column + // -1 because columns, +1 for ` ` before attributes.
      // Attributes joined by spaces.
      attributesOnOneLine.length + // ` />`.
      (selfClosing ? tightSelfClosing ? 2 : 3 : 1) > printWidth)
    ) {
      attributesOnTheirOwnLine = true;
    }
    let tracker = trackerOneLine;
    let value = prefix2;
    if (attributesOnTheirOwnLine) {
      tracker = trackerMultiLine;
      let index2 = -1;
      while (++index2 < serializedAttributes.length) {
        serializedAttributes[index2] = currentIndent + indent + serializedAttributes[index2];
      }
      value += tracker.move(
        "\n" + serializedAttributes.join("\n") + "\n" + currentIndent
      );
    } else if (attributesOnOneLine) {
      value += tracker.move(" " + attributesOnOneLine);
    }
    if (selfClosing) {
      value += tracker.move(
        (tightSelfClosing || attributesOnTheirOwnLine ? "" : " ") + "/"
      );
    }
    value += tracker.move(">");
    if (node2.children && node2.children.length > 0) {
      if (node2.type === "mdxJsxTextElement") {
        value += tracker.move(
          // @ts-expect-error: `containerPhrasing` is typed correctly, but TS
          // generates *hardcoded* types, which means that our dynamically added
          // directives are not present.
          // At some point, TS should fix that, and `from-markdown` should be fine.
          state.containerPhrasing(node2, {
            ...tracker.current(),
            before: ">",
            after: "<"
          })
        );
      } else {
        tracker.shift(2);
        value += tracker.move("\n");
        value += tracker.move(containerFlow(node2, state, tracker.current()));
        value += tracker.move("\n");
      }
    }
    if (!selfClosing) {
      value += tracker.move(
        (flow3 ? currentIndent : "") + "</" + (node2.name || "") + ">"
      );
    }
    exit3();
    return value;
  }
}
function containerFlow(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children;
  const tracker = state.createTracker(info);
  const currentIndent = createIndent(inferDepth(state));
  const results = [];
  let index2 = -1;
  indexStack.push(-1);
  while (++index2 < children.length) {
    const child = children[index2];
    indexStack[indexStack.length - 1] = index2;
    const childInfo = { before: "\n", after: "\n", ...tracker.current() };
    const result = state.handle(child, parent, state, childInfo);
    const serializedChild = child.type === "mdxJsxFlowElement" ? result : state.indentLines(result, function(line, _, blank) {
      return (blank ? "" : currentIndent) + line;
    });
    results.push(tracker.move(serializedChild));
    if (child.type !== "list") {
      state.bulletLastUsed = void 0;
    }
    if (index2 < children.length - 1) {
      results.push(tracker.move("\n\n"));
    }
  }
  indexStack.pop();
  return results.join("");
}
function inferDepth(state) {
  let depth = 0;
  let index2 = state.stack.length;
  while (--index2 > -1) {
    const name2 = state.stack[index2];
    if (name2 === "blockquote" || name2 === "listItem") break;
    if (name2 === "mdxJsxFlowElement") depth++;
  }
  return depth;
}
function createIndent(depth) {
  return indent.repeat(depth);
}
function peekElement() {
  return "<";
}

// node_modules/mdast-util-mdxjs-esm/lib/index.js
function mdxjsEsmFromMarkdown() {
  return {
    enter: { mdxjsEsm: enterMdxjsEsm },
    exit: { mdxjsEsm: exitMdxjsEsm, mdxjsEsmData: exitMdxjsEsmData }
  };
}
function mdxjsEsmToMarkdown() {
  return { handlers: { mdxjsEsm: handleMdxjsEsm } };
}
function enterMdxjsEsm(token) {
  this.enter({ type: "mdxjsEsm", value: "" }, token);
  this.buffer();
}
function exitMdxjsEsm(token) {
  const value = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "mdxjsEsm");
  this.exit(token);
  const estree = token.estree;
  node2.value = value;
  if (estree) {
    node2.data = { estree };
  }
}
function exitMdxjsEsmData(token) {
  this.config.enter.data.call(this, token);
  this.config.exit.data.call(this, token);
}
function handleMdxjsEsm(node2) {
  return node2.value || "";
}

// node_modules/mdast-util-mdx/lib/index.js
function mdxFromMarkdown() {
  return [
    mdxExpressionFromMarkdown(),
    mdxJsxFromMarkdown(),
    mdxjsEsmFromMarkdown()
  ];
}
function mdxToMarkdown(options) {
  return {
    extensions: [
      mdxExpressionToMarkdown(),
      mdxJsxToMarkdown(options),
      mdxjsEsmToMarkdown()
    ]
  };
}

// node_modules/acorn/dist/acorn.mjs
var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
var reservedWords = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
};
var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var keywords$1 = {
  5: ecma5AndLessKeywords,
  "5module": ecma5AndLessKeywords + " export import",
  6: ecma5AndLessKeywords + " const class extends export import super"
};
var keywordRelationalOperator = /^in(stanceof)?$/;
var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
function isInAstralSet(code4, set) {
  var pos = 65536;
  for (var i = 0; i < set.length; i += 2) {
    pos += set[i];
    if (pos > code4) {
      return false;
    }
    pos += set[i + 1];
    if (pos >= code4) {
      return true;
    }
  }
  return false;
}
function isIdentifierStart(code4, astral) {
  if (code4 < 65) {
    return code4 === 36;
  }
  if (code4 < 91) {
    return true;
  }
  if (code4 < 97) {
    return code4 === 95;
  }
  if (code4 < 123) {
    return true;
  }
  if (code4 <= 65535) {
    return code4 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code4));
  }
  if (astral === false) {
    return false;
  }
  return isInAstralSet(code4, astralIdentifierStartCodes);
}
function isIdentifierChar(code4, astral) {
  if (code4 < 48) {
    return code4 === 36;
  }
  if (code4 < 58) {
    return true;
  }
  if (code4 < 65) {
    return false;
  }
  if (code4 < 91) {
    return true;
  }
  if (code4 < 97) {
    return code4 === 95;
  }
  if (code4 < 123) {
    return true;
  }
  if (code4 <= 65535) {
    return code4 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code4));
  }
  if (astral === false) {
    return false;
  }
  return isInAstralSet(code4, astralIdentifierStartCodes) || isInAstralSet(code4, astralIdentifierCodes);
}
var TokenType = function TokenType2(label, conf) {
  if (conf === void 0) conf = {};
  this.label = label;
  this.keyword = conf.keyword;
  this.beforeExpr = !!conf.beforeExpr;
  this.startsExpr = !!conf.startsExpr;
  this.isLoop = !!conf.isLoop;
  this.isAssign = !!conf.isAssign;
  this.prefix = !!conf.prefix;
  this.postfix = !!conf.postfix;
  this.binop = conf.binop || null;
  this.updateContext = null;
};
function binop(name2, prec) {
  return new TokenType(name2, { beforeExpr: true, binop: prec });
}
var beforeExpr = { beforeExpr: true };
var startsExpr = { startsExpr: true };
var keywords = {};
function kw(name2, options) {
  if (options === void 0) options = {};
  options.keyword = name2;
  return keywords[name2] = new TokenType(name2, options);
}
var types$1 = {
  num: new TokenType("num", startsExpr),
  regexp: new TokenType("regexp", startsExpr),
  string: new TokenType("string", startsExpr),
  name: new TokenType("name", startsExpr),
  privateId: new TokenType("privateId", startsExpr),
  eof: new TokenType("eof"),
  // Punctuation token types.
  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
  bracketR: new TokenType("]"),
  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
  braceR: new TokenType("}"),
  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
  parenR: new TokenType(")"),
  comma: new TokenType(",", beforeExpr),
  semi: new TokenType(";", beforeExpr),
  colon: new TokenType(":", beforeExpr),
  dot: new TokenType("."),
  question: new TokenType("?", beforeExpr),
  questionDot: new TokenType("?."),
  arrow: new TokenType("=>", beforeExpr),
  template: new TokenType("template"),
  invalidTemplate: new TokenType("invalidTemplate"),
  ellipsis: new TokenType("...", beforeExpr),
  backQuote: new TokenType("`", startsExpr),
  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.
  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
  prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
  logicalOR: binop("||", 1),
  logicalAND: binop("&&", 2),
  bitwiseOR: binop("|", 3),
  bitwiseXOR: binop("^", 4),
  bitwiseAND: binop("&", 5),
  equality: binop("==/!=/===/!==", 6),
  relational: binop("</>/<=/>=", 7),
  bitShift: binop("<</>>/>>>", 8),
  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
  modulo: binop("%", 10),
  star: binop("*", 10),
  slash: binop("/", 10),
  starstar: new TokenType("**", { beforeExpr: true }),
  coalesce: binop("??", 1),
  // Keyword token types.
  _break: kw("break"),
  _case: kw("case", beforeExpr),
  _catch: kw("catch"),
  _continue: kw("continue"),
  _debugger: kw("debugger"),
  _default: kw("default", beforeExpr),
  _do: kw("do", { isLoop: true, beforeExpr: true }),
  _else: kw("else", beforeExpr),
  _finally: kw("finally"),
  _for: kw("for", { isLoop: true }),
  _function: kw("function", startsExpr),
  _if: kw("if"),
  _return: kw("return", beforeExpr),
  _switch: kw("switch"),
  _throw: kw("throw", beforeExpr),
  _try: kw("try"),
  _var: kw("var"),
  _const: kw("const"),
  _while: kw("while", { isLoop: true }),
  _with: kw("with"),
  _new: kw("new", { beforeExpr: true, startsExpr: true }),
  _this: kw("this", startsExpr),
  _super: kw("super", startsExpr),
  _class: kw("class", startsExpr),
  _extends: kw("extends", beforeExpr),
  _export: kw("export"),
  _import: kw("import", startsExpr),
  _null: kw("null", startsExpr),
  _true: kw("true", startsExpr),
  _false: kw("false", startsExpr),
  _in: kw("in", { beforeExpr: true, binop: 7 }),
  _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
  _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
  _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
  _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
};
var lineBreak = /\r\n?|\n|\u2028|\u2029/;
var lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code4) {
  return code4 === 10 || code4 === 13 || code4 === 8232 || code4 === 8233;
}
function nextLineBreak(code4, from, end) {
  if (end === void 0) end = code4.length;
  for (var i = from; i < end; i++) {
    var next = code4.charCodeAt(i);
    if (isNewLine(next)) {
      return i < end - 1 && next === 13 && code4.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;
    }
  }
  return -1;
}
var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var ref = Object.prototype;
var hasOwnProperty = ref.hasOwnProperty;
var toString = ref.toString;
var hasOwn = Object.hasOwn || function(obj, propName) {
  return hasOwnProperty.call(obj, propName);
};
var isArray = Array.isArray || function(obj) {
  return toString.call(obj) === "[object Array]";
};
var regexpCache = /* @__PURE__ */ Object.create(null);
function wordsRegexp(words) {
  return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
}
function codePointToString(code4) {
  if (code4 <= 65535) {
    return String.fromCharCode(code4);
  }
  code4 -= 65536;
  return String.fromCharCode((code4 >> 10) + 55296, (code4 & 1023) + 56320);
}
var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
var Position = function Position2(line, col) {
  this.line = line;
  this.column = col;
};
Position.prototype.offset = function offset(n) {
  return new Position(this.line, this.column + n);
};
var SourceLocation = function SourceLocation2(p, start2, end) {
  this.start = start2;
  this.end = end;
  if (p.sourceFile !== null) {
    this.source = p.sourceFile;
  }
};
function getLineInfo(input, offset2) {
  for (var line = 1, cur = 0; ; ) {
    var nextBreak = nextLineBreak(input, cur, offset2);
    if (nextBreak < 0) {
      return new Position(line, offset2 - cur);
    }
    ++line;
    cur = nextBreak;
  }
}
var defaultOptions = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must be
  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
  // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
  // (the latest version the library supports). This influences
  // support for strict mode, the set of reserved words, and support
  // for new syntax features.
  ecmaVersion: null,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called when
  // a semicolon is automatically inserted. It will be passed the
  // position of the inserted semicolon as an offset, and if
  // `locations` is enabled, it is given the location as a `{line,
  // column}` object as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program, and an import.meta expression
  // in a script isn't considered an error.
  allowImportExportEverywhere: false,
  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
  // When enabled, await identifiers are allowed to appear at the top-level scope,
  // but they are still not allowed in non-async functions.
  allowAwaitOutsideFunction: null,
  // When enabled, super identifiers are not constrained to
  // appearing in methods and do not raise an error when they appear elsewhere.
  allowSuperOutsideMethod: null,
  // When enabled, hashbang directive in the beginning of file is
  // allowed and treated as a line comment. Enabled by default when
  // `ecmaVersion` >= 2023.
  allowHashBang: false,
  // By default, the parser will verify that private properties are
  // only used in places where they are valid and have been declared.
  // Set this to false to turn such checks off.
  checkPrivateFields: true,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: false,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  // When this option has an array as value, objects representing the
  // comments are pushed to it.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: false
};
var warnedAboutEcmaVersion = false;
function getOptions(opts) {
  var options = {};
  for (var opt in defaultOptions) {
    options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
  }
  if (options.ecmaVersion === "latest") {
    options.ecmaVersion = 1e8;
  } else if (options.ecmaVersion == null) {
    if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
      warnedAboutEcmaVersion = true;
      console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
    }
    options.ecmaVersion = 11;
  } else if (options.ecmaVersion >= 2015) {
    options.ecmaVersion -= 2009;
  }
  if (options.allowReserved == null) {
    options.allowReserved = options.ecmaVersion < 5;
  }
  if (!opts || opts.allowHashBang == null) {
    options.allowHashBang = options.ecmaVersion >= 14;
  }
  if (isArray(options.onToken)) {
    var tokens = options.onToken;
    options.onToken = function(token) {
      return tokens.push(token);
    };
  }
  if (isArray(options.onComment)) {
    options.onComment = pushComment(options, options.onComment);
  }
  return options;
}
function pushComment(options, array) {
  return function(block, text7, start2, end, startLoc, endLoc) {
    var comment2 = {
      type: block ? "Block" : "Line",
      value: text7,
      start: start2,
      end
    };
    if (options.locations) {
      comment2.loc = new SourceLocation(this, startLoc, endLoc);
    }
    if (options.ranges) {
      comment2.range = [start2, end];
    }
    array.push(comment2);
  };
}
var SCOPE_TOP = 1;
var SCOPE_FUNCTION = 2;
var SCOPE_ASYNC = 4;
var SCOPE_GENERATOR = 8;
var SCOPE_ARROW = 16;
var SCOPE_SIMPLE_CATCH = 32;
var SCOPE_SUPER = 64;
var SCOPE_DIRECT_SUPER = 128;
var SCOPE_CLASS_STATIC_BLOCK = 256;
var SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;
function functionFlags(async, generator) {
  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
}
var BIND_NONE = 0;
var BIND_VAR = 1;
var BIND_LEXICAL = 2;
var BIND_FUNCTION = 3;
var BIND_SIMPLE_CATCH = 4;
var BIND_OUTSIDE = 5;
var Parser = function Parser2(options, input, startPos) {
  this.options = options = getOptions(options);
  this.sourceFile = options.sourceFile;
  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
  var reserved = "";
  if (options.allowReserved !== true) {
    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
    if (options.sourceType === "module") {
      reserved += " await";
    }
  }
  this.reservedWords = wordsRegexp(reserved);
  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
  this.reservedWordsStrict = wordsRegexp(reservedStrict);
  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
  this.input = String(input);
  this.containsEsc = false;
  if (startPos) {
    this.pos = startPos;
    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
  } else {
    this.pos = this.lineStart = 0;
    this.curLine = 1;
  }
  this.type = types$1.eof;
  this.value = null;
  this.start = this.end = this.pos;
  this.startLoc = this.endLoc = this.curPosition();
  this.lastTokEndLoc = this.lastTokStartLoc = null;
  this.lastTokStart = this.lastTokEnd = this.pos;
  this.context = this.initialContext();
  this.exprAllowed = true;
  this.inModule = options.sourceType === "module";
  this.strict = this.inModule || this.strictDirective(this.pos);
  this.potentialArrowAt = -1;
  this.potentialArrowInForAwait = false;
  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
  this.labels = [];
  this.undefinedExports = /* @__PURE__ */ Object.create(null);
  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
    this.skipLineComment(2);
  }
  this.scopeStack = [];
  this.enterScope(SCOPE_TOP);
  this.regexpState = null;
  this.privateNameStack = [];
};
var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
Parser.prototype.parse = function parse() {
  var node2 = this.options.program || this.startNode();
  this.nextToken();
  return this.parseTopLevel(node2);
};
prototypeAccessors.inFunction.get = function() {
  return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
};
prototypeAccessors.inGenerator.get = function() {
  return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
};
prototypeAccessors.inAsync.get = function() {
  return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
};
prototypeAccessors.canAwait.get = function() {
  for (var i = this.scopeStack.length - 1; i >= 0; i--) {
    var scope = this.scopeStack[i];
    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {
      return false;
    }
    if (scope.flags & SCOPE_FUNCTION) {
      return (scope.flags & SCOPE_ASYNC) > 0;
    }
  }
  return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
};
prototypeAccessors.allowSuper.get = function() {
  var ref2 = this.currentThisScope();
  var flags = ref2.flags;
  var inClassFieldInit = ref2.inClassFieldInit;
  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
};
prototypeAccessors.allowDirectSuper.get = function() {
  return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
};
prototypeAccessors.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
};
prototypeAccessors.allowNewDotTarget.get = function() {
  var ref2 = this.currentThisScope();
  var flags = ref2.flags;
  var inClassFieldInit = ref2.inClassFieldInit;
  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;
};
prototypeAccessors.inClassStaticBlock.get = function() {
  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;
};
Parser.extend = function extend() {
  var plugins = [], len = arguments.length;
  while (len--) plugins[len] = arguments[len];
  var cls = this;
  for (var i = 0; i < plugins.length; i++) {
    cls = plugins[i](cls);
  }
  return cls;
};
Parser.parse = function parse2(input, options) {
  return new this(options, input).parse();
};
Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
  var parser = new this(options, input, pos);
  parser.nextToken();
  return parser.parseExpression();
};
Parser.tokenizer = function tokenizer(input, options) {
  return new this(options, input);
};
Object.defineProperties(Parser.prototype, prototypeAccessors);
var pp$9 = Parser.prototype;
var literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
pp$9.strictDirective = function(start2) {
  if (this.options.ecmaVersion < 5) {
    return false;
  }
  for (; ; ) {
    skipWhiteSpace.lastIndex = start2;
    start2 += skipWhiteSpace.exec(this.input)[0].length;
    var match = literal.exec(this.input.slice(start2));
    if (!match) {
      return false;
    }
    if ((match[1] || match[2]) === "use strict") {
      skipWhiteSpace.lastIndex = start2 + match[0].length;
      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
      var next = this.input.charAt(end);
      return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
    }
    start2 += match[0].length;
    skipWhiteSpace.lastIndex = start2;
    start2 += skipWhiteSpace.exec(this.input)[0].length;
    if (this.input[start2] === ";") {
      start2++;
    }
  }
};
pp$9.eat = function(type) {
  if (this.type === type) {
    this.next();
    return true;
  } else {
    return false;
  }
};
pp$9.isContextual = function(name2) {
  return this.type === types$1.name && this.value === name2 && !this.containsEsc;
};
pp$9.eatContextual = function(name2) {
  if (!this.isContextual(name2)) {
    return false;
  }
  this.next();
  return true;
};
pp$9.expectContextual = function(name2) {
  if (!this.eatContextual(name2)) {
    this.unexpected();
  }
};
pp$9.canInsertSemicolon = function() {
  return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};
pp$9.insertSemicolon = function() {
  if (this.canInsertSemicolon()) {
    if (this.options.onInsertedSemicolon) {
      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
    }
    return true;
  }
};
pp$9.semicolon = function() {
  if (!this.eat(types$1.semi) && !this.insertSemicolon()) {
    this.unexpected();
  }
};
pp$9.afterTrailingComma = function(tokType, notNext) {
  if (this.type === tokType) {
    if (this.options.onTrailingComma) {
      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
    }
    if (!notNext) {
      this.next();
    }
    return true;
  }
};
pp$9.expect = function(type) {
  this.eat(type) || this.unexpected();
};
pp$9.unexpected = function(pos) {
  this.raise(pos != null ? pos : this.start, "Unexpected token");
};
var DestructuringErrors = function DestructuringErrors2() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
};
pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
  if (!refDestructuringErrors) {
    return;
  }
  if (refDestructuringErrors.trailingComma > -1) {
    this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
  }
  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
  if (parens > -1) {
    this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
  }
};
pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
  if (!refDestructuringErrors) {
    return false;
  }
  var shorthandAssign = refDestructuringErrors.shorthandAssign;
  var doubleProto = refDestructuringErrors.doubleProto;
  if (!andThrow) {
    return shorthandAssign >= 0 || doubleProto >= 0;
  }
  if (shorthandAssign >= 0) {
    this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
  }
  if (doubleProto >= 0) {
    this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
  }
};
pp$9.checkYieldAwaitInDefaultParams = function() {
  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
    this.raise(this.yieldPos, "Yield expression cannot be a default value");
  }
  if (this.awaitPos) {
    this.raise(this.awaitPos, "Await expression cannot be a default value");
  }
};
pp$9.isSimpleAssignTarget = function(expr) {
  if (expr.type === "ParenthesizedExpression") {
    return this.isSimpleAssignTarget(expr.expression);
  }
  return expr.type === "Identifier" || expr.type === "MemberExpression";
};
var pp$8 = Parser.prototype;
pp$8.parseTopLevel = function(node2) {
  var exports = /* @__PURE__ */ Object.create(null);
  if (!node2.body) {
    node2.body = [];
  }
  while (this.type !== types$1.eof) {
    var stmt = this.parseStatement(null, true, exports);
    node2.body.push(stmt);
  }
  if (this.inModule) {
    for (var i = 0, list4 = Object.keys(this.undefinedExports); i < list4.length; i += 1) {
      var name2 = list4[i];
      this.raiseRecoverable(this.undefinedExports[name2].start, "Export '" + name2 + "' is not defined");
    }
  }
  this.adaptDirectivePrologue(node2.body);
  this.next();
  node2.sourceType = this.options.sourceType;
  return this.finishNode(node2, "Program");
};
var loopLabel = { kind: "loop" };
var switchLabel = { kind: "switch" };
pp$8.isLet = function(context) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
    return false;
  }
  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
  if (nextCh === 91 || nextCh === 92) {
    return true;
  }
  if (context) {
    return false;
  }
  if (nextCh === 123 || nextCh > 55295 && nextCh < 56320) {
    return true;
  }
  if (isIdentifierStart(nextCh, true)) {
    var pos = next + 1;
    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) {
      ++pos;
    }
    if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
      return true;
    }
    var ident = this.input.slice(next, pos);
    if (!keywordRelationalOperator.test(ident)) {
      return true;
    }
  }
  return false;
};
pp$8.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
    return false;
  }
  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, after;
  return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
};
pp$8.parseStatement = function(context, topLevel, exports) {
  var starttype = this.type, node2 = this.startNode(), kind;
  if (this.isLet(context)) {
    starttype = types$1._var;
    kind = "let";
  }
  switch (starttype) {
    case types$1._break:
    case types$1._continue:
      return this.parseBreakContinueStatement(node2, starttype.keyword);
    case types$1._debugger:
      return this.parseDebuggerStatement(node2);
    case types$1._do:
      return this.parseDoStatement(node2);
    case types$1._for:
      return this.parseForStatement(node2);
    case types$1._function:
      if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
        this.unexpected();
      }
      return this.parseFunctionStatement(node2, false, !context);
    case types$1._class:
      if (context) {
        this.unexpected();
      }
      return this.parseClass(node2, true);
    case types$1._if:
      return this.parseIfStatement(node2);
    case types$1._return:
      return this.parseReturnStatement(node2);
    case types$1._switch:
      return this.parseSwitchStatement(node2);
    case types$1._throw:
      return this.parseThrowStatement(node2);
    case types$1._try:
      return this.parseTryStatement(node2);
    case types$1._const:
    case types$1._var:
      kind = kind || this.value;
      if (context && kind !== "var") {
        this.unexpected();
      }
      return this.parseVarStatement(node2, kind);
    case types$1._while:
      return this.parseWhileStatement(node2);
    case types$1._with:
      return this.parseWithStatement(node2);
    case types$1.braceL:
      return this.parseBlock(true, node2);
    case types$1.semi:
      return this.parseEmptyStatement(node2);
    case types$1._export:
    case types$1._import:
      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 40 || nextCh === 46) {
          return this.parseExpressionStatement(node2, this.parseExpression());
        }
      }
      if (!this.options.allowImportExportEverywhere) {
        if (!topLevel) {
          this.raise(this.start, "'import' and 'export' may only appear at the top level");
        }
        if (!this.inModule) {
          this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
        }
      }
      return starttype === types$1._import ? this.parseImport(node2) : this.parseExport(node2, exports);
    default:
      if (this.isAsyncFunction()) {
        if (context) {
          this.unexpected();
        }
        this.next();
        return this.parseFunctionStatement(node2, true, !context);
      }
      var maybeName = this.value, expr = this.parseExpression();
      if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) {
        return this.parseLabeledStatement(node2, maybeName, expr, context);
      } else {
        return this.parseExpressionStatement(node2, expr);
      }
  }
};
pp$8.parseBreakContinueStatement = function(node2, keyword) {
  var isBreak = keyword === "break";
  this.next();
  if (this.eat(types$1.semi) || this.insertSemicolon()) {
    node2.label = null;
  } else if (this.type !== types$1.name) {
    this.unexpected();
  } else {
    node2.label = this.parseIdent();
    this.semicolon();
  }
  var i = 0;
  for (; i < this.labels.length; ++i) {
    var lab = this.labels[i];
    if (node2.label == null || lab.name === node2.label.name) {
      if (lab.kind != null && (isBreak || lab.kind === "loop")) {
        break;
      }
      if (node2.label && isBreak) {
        break;
      }
    }
  }
  if (i === this.labels.length) {
    this.raise(node2.start, "Unsyntactic " + keyword);
  }
  return this.finishNode(node2, isBreak ? "BreakStatement" : "ContinueStatement");
};
pp$8.parseDebuggerStatement = function(node2) {
  this.next();
  this.semicolon();
  return this.finishNode(node2, "DebuggerStatement");
};
pp$8.parseDoStatement = function(node2) {
  this.next();
  this.labels.push(loopLabel);
  node2.body = this.parseStatement("do");
  this.labels.pop();
  this.expect(types$1._while);
  node2.test = this.parseParenExpression();
  if (this.options.ecmaVersion >= 6) {
    this.eat(types$1.semi);
  } else {
    this.semicolon();
  }
  return this.finishNode(node2, "DoWhileStatement");
};
pp$8.parseForStatement = function(node2) {
  this.next();
  var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
  this.labels.push(loopLabel);
  this.enterScope(0);
  this.expect(types$1.parenL);
  if (this.type === types$1.semi) {
    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }
    return this.parseFor(node2, null);
  }
  var isLet = this.isLet();
  if (this.type === types$1._var || this.type === types$1._const || isLet) {
    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
    this.next();
    this.parseVar(init$1, true, kind);
    this.finishNode(init$1, "VariableDeclaration");
    if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === types$1._in) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
        } else {
          node2.await = awaitAt > -1;
        }
      }
      return this.parseForIn(node2, init$1);
    }
    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }
    return this.parseFor(node2, init$1);
  }
  var startsWithLet = this.isContextual("let"), isForOf = false;
  var containsEsc = this.containsEsc;
  var refDestructuringErrors = new DestructuringErrors();
  var initPos = this.start;
  var init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
    if (awaitAt > -1) {
      if (this.type === types$1._in) {
        this.unexpected(awaitAt);
      }
      node2.await = true;
    } else if (isForOf && this.options.ecmaVersion >= 8) {
      if (init.start === initPos && !containsEsc && init.type === "Identifier" && init.name === "async") {
        this.unexpected();
      } else if (this.options.ecmaVersion >= 9) {
        node2.await = false;
      }
    }
    if (startsWithLet && isForOf) {
      this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
    }
    this.toAssignable(init, false, refDestructuringErrors);
    this.checkLValPattern(init);
    return this.parseForIn(node2, init);
  } else {
    this.checkExpressionErrors(refDestructuringErrors, true);
  }
  if (awaitAt > -1) {
    this.unexpected(awaitAt);
  }
  return this.parseFor(node2, init);
};
pp$8.parseFunctionStatement = function(node2, isAsync, declarationPosition) {
  this.next();
  return this.parseFunction(node2, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
};
pp$8.parseIfStatement = function(node2) {
  this.next();
  node2.test = this.parseParenExpression();
  node2.consequent = this.parseStatement("if");
  node2.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
  return this.finishNode(node2, "IfStatement");
};
pp$8.parseReturnStatement = function(node2) {
  if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
    this.raise(this.start, "'return' outside of function");
  }
  this.next();
  if (this.eat(types$1.semi) || this.insertSemicolon()) {
    node2.argument = null;
  } else {
    node2.argument = this.parseExpression();
    this.semicolon();
  }
  return this.finishNode(node2, "ReturnStatement");
};
pp$8.parseSwitchStatement = function(node2) {
  this.next();
  node2.discriminant = this.parseParenExpression();
  node2.cases = [];
  this.expect(types$1.braceL);
  this.labels.push(switchLabel);
  this.enterScope(0);
  var cur;
  for (var sawDefault = false; this.type !== types$1.braceR; ) {
    if (this.type === types$1._case || this.type === types$1._default) {
      var isCase = this.type === types$1._case;
      if (cur) {
        this.finishNode(cur, "SwitchCase");
      }
      node2.cases.push(cur = this.startNode());
      cur.consequent = [];
      this.next();
      if (isCase) {
        cur.test = this.parseExpression();
      } else {
        if (sawDefault) {
          this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
        }
        sawDefault = true;
        cur.test = null;
      }
      this.expect(types$1.colon);
    } else {
      if (!cur) {
        this.unexpected();
      }
      cur.consequent.push(this.parseStatement(null));
    }
  }
  this.exitScope();
  if (cur) {
    this.finishNode(cur, "SwitchCase");
  }
  this.next();
  this.labels.pop();
  return this.finishNode(node2, "SwitchStatement");
};
pp$8.parseThrowStatement = function(node2) {
  this.next();
  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
    this.raise(this.lastTokEnd, "Illegal newline after throw");
  }
  node2.argument = this.parseExpression();
  this.semicolon();
  return this.finishNode(node2, "ThrowStatement");
};
var empty$1 = [];
pp$8.parseCatchClauseParam = function() {
  var param = this.parseBindingAtom();
  var simple = param.type === "Identifier";
  this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
  this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
  this.expect(types$1.parenR);
  return param;
};
pp$8.parseTryStatement = function(node2) {
  this.next();
  node2.block = this.parseBlock();
  node2.handler = null;
  if (this.type === types$1._catch) {
    var clause = this.startNode();
    this.next();
    if (this.eat(types$1.parenL)) {
      clause.param = this.parseCatchClauseParam();
    } else {
      if (this.options.ecmaVersion < 10) {
        this.unexpected();
      }
      clause.param = null;
      this.enterScope(0);
    }
    clause.body = this.parseBlock(false);
    this.exitScope();
    node2.handler = this.finishNode(clause, "CatchClause");
  }
  node2.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
  if (!node2.handler && !node2.finalizer) {
    this.raise(node2.start, "Missing catch or finally clause");
  }
  return this.finishNode(node2, "TryStatement");
};
pp$8.parseVarStatement = function(node2, kind, allowMissingInitializer) {
  this.next();
  this.parseVar(node2, false, kind, allowMissingInitializer);
  this.semicolon();
  return this.finishNode(node2, "VariableDeclaration");
};
pp$8.parseWhileStatement = function(node2) {
  this.next();
  node2.test = this.parseParenExpression();
  this.labels.push(loopLabel);
  node2.body = this.parseStatement("while");
  this.labels.pop();
  return this.finishNode(node2, "WhileStatement");
};
pp$8.parseWithStatement = function(node2) {
  if (this.strict) {
    this.raise(this.start, "'with' in strict mode");
  }
  this.next();
  node2.object = this.parseParenExpression();
  node2.body = this.parseStatement("with");
  return this.finishNode(node2, "WithStatement");
};
pp$8.parseEmptyStatement = function(node2) {
  this.next();
  return this.finishNode(node2, "EmptyStatement");
};
pp$8.parseLabeledStatement = function(node2, maybeName, expr, context) {
  for (var i$1 = 0, list4 = this.labels; i$1 < list4.length; i$1 += 1) {
    var label = list4[i$1];
    if (label.name === maybeName) {
      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
    }
  }
  var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
  for (var i = this.labels.length - 1; i >= 0; i--) {
    var label$1 = this.labels[i];
    if (label$1.statementStart === node2.start) {
      label$1.statementStart = this.start;
      label$1.kind = kind;
    } else {
      break;
    }
  }
  this.labels.push({ name: maybeName, kind, statementStart: this.start });
  node2.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
  this.labels.pop();
  node2.label = expr;
  return this.finishNode(node2, "LabeledStatement");
};
pp$8.parseExpressionStatement = function(node2, expr) {
  node2.expression = expr;
  this.semicolon();
  return this.finishNode(node2, "ExpressionStatement");
};
pp$8.parseBlock = function(createNewLexicalScope, node2, exitStrict) {
  if (createNewLexicalScope === void 0) createNewLexicalScope = true;
  if (node2 === void 0) node2 = this.startNode();
  node2.body = [];
  this.expect(types$1.braceL);
  if (createNewLexicalScope) {
    this.enterScope(0);
  }
  while (this.type !== types$1.braceR) {
    var stmt = this.parseStatement(null);
    node2.body.push(stmt);
  }
  if (exitStrict) {
    this.strict = false;
  }
  this.next();
  if (createNewLexicalScope) {
    this.exitScope();
  }
  return this.finishNode(node2, "BlockStatement");
};
pp$8.parseFor = function(node2, init) {
  node2.init = init;
  this.expect(types$1.semi);
  node2.test = this.type === types$1.semi ? null : this.parseExpression();
  this.expect(types$1.semi);
  node2.update = this.type === types$1.parenR ? null : this.parseExpression();
  this.expect(types$1.parenR);
  node2.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node2, "ForStatement");
};
pp$8.parseForIn = function(node2, init) {
  var isForIn = this.type === types$1._in;
  this.next();
  if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
    this.raise(
      init.start,
      (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
    );
  }
  node2.left = init;
  node2.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
  this.expect(types$1.parenR);
  node2.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node2, isForIn ? "ForInStatement" : "ForOfStatement");
};
pp$8.parseVar = function(node2, isFor, kind, allowMissingInitializer) {
  node2.declarations = [];
  node2.kind = kind;
  for (; ; ) {
    var decl = this.startNode();
    this.parseVarId(decl, kind);
    if (this.eat(types$1.eq)) {
      decl.init = this.parseMaybeAssign(isFor);
    } else if (!allowMissingInitializer && kind === "const" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
      this.unexpected();
    } else if (!allowMissingInitializer && decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
    } else {
      decl.init = null;
    }
    node2.declarations.push(this.finishNode(decl, "VariableDeclarator"));
    if (!this.eat(types$1.comma)) {
      break;
    }
  }
  return node2;
};
pp$8.parseVarId = function(decl, kind) {
  decl.id = this.parseBindingAtom();
  this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
};
var FUNC_STATEMENT = 1;
var FUNC_HANGING_STATEMENT = 2;
var FUNC_NULLABLE_ID = 4;
pp$8.parseFunction = function(node2, statement, allowExpressionBody, isAsync, forInit) {
  this.initFunction(node2);
  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
    if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {
      this.unexpected();
    }
    node2.generator = this.eat(types$1.star);
  }
  if (this.options.ecmaVersion >= 8) {
    node2.async = !!isAsync;
  }
  if (statement & FUNC_STATEMENT) {
    node2.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();
    if (node2.id && !(statement & FUNC_HANGING_STATEMENT)) {
      this.checkLValSimple(node2.id, this.strict || node2.generator || node2.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
    }
  }
  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(node2.async, node2.generator));
  if (!(statement & FUNC_STATEMENT)) {
    node2.id = this.type === types$1.name ? this.parseIdent() : null;
  }
  this.parseFunctionParams(node2);
  this.parseFunctionBody(node2, allowExpressionBody, false, forInit);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node2, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
};
pp$8.parseFunctionParams = function(node2) {
  this.expect(types$1.parenL);
  node2.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
};
pp$8.parseClass = function(node2, isStatement) {
  this.next();
  var oldStrict = this.strict;
  this.strict = true;
  this.parseClassId(node2, isStatement);
  this.parseClassSuper(node2);
  var privateNameMap = this.enterClassBody();
  var classBody = this.startNode();
  var hadConstructor = false;
  classBody.body = [];
  this.expect(types$1.braceL);
  while (this.type !== types$1.braceR) {
    var element3 = this.parseClassElement(node2.superClass !== null);
    if (element3) {
      classBody.body.push(element3);
      if (element3.type === "MethodDefinition" && element3.kind === "constructor") {
        if (hadConstructor) {
          this.raiseRecoverable(element3.start, "Duplicate constructor in the same class");
        }
        hadConstructor = true;
      } else if (element3.key && element3.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element3)) {
        this.raiseRecoverable(element3.key.start, "Identifier '#" + element3.key.name + "' has already been declared");
      }
    }
  }
  this.strict = oldStrict;
  this.next();
  node2.body = this.finishNode(classBody, "ClassBody");
  this.exitClassBody();
  return this.finishNode(node2, isStatement ? "ClassDeclaration" : "ClassExpression");
};
pp$8.parseClassElement = function(constructorAllowsSuper) {
  if (this.eat(types$1.semi)) {
    return null;
  }
  var ecmaVersion = this.options.ecmaVersion;
  var node2 = this.startNode();
  var keyName = "";
  var isGenerator = false;
  var isAsync = false;
  var kind = "method";
  var isStatic = false;
  if (this.eatContextual("static")) {
    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
      this.parseClassStaticBlock(node2);
      return node2;
    }
    if (this.isClassElementNameStart() || this.type === types$1.star) {
      isStatic = true;
    } else {
      keyName = "static";
    }
  }
  node2.static = isStatic;
  if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
      isAsync = true;
    } else {
      keyName = "async";
    }
  }
  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {
    isGenerator = true;
  }
  if (!keyName && !isAsync && !isGenerator) {
    var lastValue = this.value;
    if (this.eatContextual("get") || this.eatContextual("set")) {
      if (this.isClassElementNameStart()) {
        kind = lastValue;
      } else {
        keyName = lastValue;
      }
    }
  }
  if (keyName) {
    node2.computed = false;
    node2.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
    node2.key.name = keyName;
    this.finishNode(node2.key, "Identifier");
  } else {
    this.parseClassElementName(node2);
  }
  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
    var isConstructor = !node2.static && checkKeyName(node2, "constructor");
    var allowsDirectSuper = isConstructor && constructorAllowsSuper;
    if (isConstructor && kind !== "method") {
      this.raise(node2.key.start, "Constructor can't have get/set modifier");
    }
    node2.kind = isConstructor ? "constructor" : kind;
    this.parseClassMethod(node2, isGenerator, isAsync, allowsDirectSuper);
  } else {
    this.parseClassField(node2);
  }
  return node2;
};
pp$8.isClassElementNameStart = function() {
  return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
};
pp$8.parseClassElementName = function(element3) {
  if (this.type === types$1.privateId) {
    if (this.value === "constructor") {
      this.raise(this.start, "Classes can't have an element named '#constructor'");
    }
    element3.computed = false;
    element3.key = this.parsePrivateIdent();
  } else {
    this.parsePropertyName(element3);
  }
};
pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
  var key = method.key;
  if (method.kind === "constructor") {
    if (isGenerator) {
      this.raise(key.start, "Constructor can't be a generator");
    }
    if (isAsync) {
      this.raise(key.start, "Constructor can't be an async method");
    }
  } else if (method.static && checkKeyName(method, "prototype")) {
    this.raise(key.start, "Classes may not have a static property named prototype");
  }
  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
  if (method.kind === "get" && value.params.length !== 0) {
    this.raiseRecoverable(value.start, "getter should have no params");
  }
  if (method.kind === "set" && value.params.length !== 1) {
    this.raiseRecoverable(value.start, "setter should have exactly one param");
  }
  if (method.kind === "set" && value.params[0].type === "RestElement") {
    this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
  }
  return this.finishNode(method, "MethodDefinition");
};
pp$8.parseClassField = function(field) {
  if (checkKeyName(field, "constructor")) {
    this.raise(field.key.start, "Classes can't have a field named 'constructor'");
  } else if (field.static && checkKeyName(field, "prototype")) {
    this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
  }
  if (this.eat(types$1.eq)) {
    var scope = this.currentThisScope();
    var inClassFieldInit = scope.inClassFieldInit;
    scope.inClassFieldInit = true;
    field.value = this.parseMaybeAssign();
    scope.inClassFieldInit = inClassFieldInit;
  } else {
    field.value = null;
  }
  this.semicolon();
  return this.finishNode(field, "PropertyDefinition");
};
pp$8.parseClassStaticBlock = function(node2) {
  node2.body = [];
  var oldLabels = this.labels;
  this.labels = [];
  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
  while (this.type !== types$1.braceR) {
    var stmt = this.parseStatement(null);
    node2.body.push(stmt);
  }
  this.next();
  this.exitScope();
  this.labels = oldLabels;
  return this.finishNode(node2, "StaticBlock");
};
pp$8.parseClassId = function(node2, isStatement) {
  if (this.type === types$1.name) {
    node2.id = this.parseIdent();
    if (isStatement) {
      this.checkLValSimple(node2.id, BIND_LEXICAL, false);
    }
  } else {
    if (isStatement === true) {
      this.unexpected();
    }
    node2.id = null;
  }
};
pp$8.parseClassSuper = function(node2) {
  node2.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
};
pp$8.enterClassBody = function() {
  var element3 = { declared: /* @__PURE__ */ Object.create(null), used: [] };
  this.privateNameStack.push(element3);
  return element3.declared;
};
pp$8.exitClassBody = function() {
  var ref2 = this.privateNameStack.pop();
  var declared = ref2.declared;
  var used = ref2.used;
  if (!this.options.checkPrivateFields) {
    return;
  }
  var len = this.privateNameStack.length;
  var parent = len === 0 ? null : this.privateNameStack[len - 1];
  for (var i = 0; i < used.length; ++i) {
    var id = used[i];
    if (!hasOwn(declared, id.name)) {
      if (parent) {
        parent.used.push(id);
      } else {
        this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class");
      }
    }
  }
};
function isPrivateNameConflicted(privateNameMap, element3) {
  var name2 = element3.key.name;
  var curr = privateNameMap[name2];
  var next = "true";
  if (element3.type === "MethodDefinition" && (element3.kind === "get" || element3.kind === "set")) {
    next = (element3.static ? "s" : "i") + element3.kind;
  }
  if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
    privateNameMap[name2] = "true";
    return false;
  } else if (!curr) {
    privateNameMap[name2] = next;
    return false;
  } else {
    return true;
  }
}
function checkKeyName(node2, name2) {
  var computed = node2.computed;
  var key = node2.key;
  return !computed && (key.type === "Identifier" && key.name === name2 || key.type === "Literal" && key.value === name2);
}
pp$8.parseExportAllDeclaration = function(node2, exports) {
  if (this.options.ecmaVersion >= 11) {
    if (this.eatContextual("as")) {
      node2.exported = this.parseModuleExportName();
      this.checkExport(exports, node2.exported, this.lastTokStart);
    } else {
      node2.exported = null;
    }
  }
  this.expectContextual("from");
  if (this.type !== types$1.string) {
    this.unexpected();
  }
  node2.source = this.parseExprAtom();
  this.semicolon();
  return this.finishNode(node2, "ExportAllDeclaration");
};
pp$8.parseExport = function(node2, exports) {
  this.next();
  if (this.eat(types$1.star)) {
    return this.parseExportAllDeclaration(node2, exports);
  }
  if (this.eat(types$1._default)) {
    this.checkExport(exports, "default", this.lastTokStart);
    node2.declaration = this.parseExportDefaultDeclaration();
    return this.finishNode(node2, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement()) {
    node2.declaration = this.parseExportDeclaration(node2);
    if (node2.declaration.type === "VariableDeclaration") {
      this.checkVariableExport(exports, node2.declaration.declarations);
    } else {
      this.checkExport(exports, node2.declaration.id, node2.declaration.id.start);
    }
    node2.specifiers = [];
    node2.source = null;
  } else {
    node2.declaration = null;
    node2.specifiers = this.parseExportSpecifiers(exports);
    if (this.eatContextual("from")) {
      if (this.type !== types$1.string) {
        this.unexpected();
      }
      node2.source = this.parseExprAtom();
    } else {
      for (var i = 0, list4 = node2.specifiers; i < list4.length; i += 1) {
        var spec = list4[i];
        this.checkUnreserved(spec.local);
        this.checkLocalExport(spec.local);
        if (spec.local.type === "Literal") {
          this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
        }
      }
      node2.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(node2, "ExportNamedDeclaration");
};
pp$8.parseExportDeclaration = function(node2) {
  return this.parseStatement(null);
};
pp$8.parseExportDefaultDeclaration = function() {
  var isAsync;
  if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
    var fNode = this.startNode();
    this.next();
    if (isAsync) {
      this.next();
    }
    return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
  } else if (this.type === types$1._class) {
    var cNode = this.startNode();
    return this.parseClass(cNode, "nullableID");
  } else {
    var declaration = this.parseMaybeAssign();
    this.semicolon();
    return declaration;
  }
};
pp$8.checkExport = function(exports, name2, pos) {
  if (!exports) {
    return;
  }
  if (typeof name2 !== "string") {
    name2 = name2.type === "Identifier" ? name2.name : name2.value;
  }
  if (hasOwn(exports, name2)) {
    this.raiseRecoverable(pos, "Duplicate export '" + name2 + "'");
  }
  exports[name2] = true;
};
pp$8.checkPatternExport = function(exports, pat) {
  var type = pat.type;
  if (type === "Identifier") {
    this.checkExport(exports, pat, pat.start);
  } else if (type === "ObjectPattern") {
    for (var i = 0, list4 = pat.properties; i < list4.length; i += 1) {
      var prop = list4[i];
      this.checkPatternExport(exports, prop);
    }
  } else if (type === "ArrayPattern") {
    for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
      var elt = list$1[i$1];
      if (elt) {
        this.checkPatternExport(exports, elt);
      }
    }
  } else if (type === "Property") {
    this.checkPatternExport(exports, pat.value);
  } else if (type === "AssignmentPattern") {
    this.checkPatternExport(exports, pat.left);
  } else if (type === "RestElement") {
    this.checkPatternExport(exports, pat.argument);
  }
};
pp$8.checkVariableExport = function(exports, decls) {
  if (!exports) {
    return;
  }
  for (var i = 0, list4 = decls; i < list4.length; i += 1) {
    var decl = list4[i];
    this.checkPatternExport(exports, decl.id);
  }
};
pp$8.shouldParseExportStatement = function() {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
};
pp$8.parseExportSpecifier = function(exports) {
  var node2 = this.startNode();
  node2.local = this.parseModuleExportName();
  node2.exported = this.eatContextual("as") ? this.parseModuleExportName() : node2.local;
  this.checkExport(
    exports,
    node2.exported,
    node2.exported.start
  );
  return this.finishNode(node2, "ExportSpecifier");
};
pp$8.parseExportSpecifiers = function(exports) {
  var nodes = [], first = true;
  this.expect(types$1.braceL);
  while (!this.eat(types$1.braceR)) {
    if (!first) {
      this.expect(types$1.comma);
      if (this.afterTrailingComma(types$1.braceR)) {
        break;
      }
    } else {
      first = false;
    }
    nodes.push(this.parseExportSpecifier(exports));
  }
  return nodes;
};
pp$8.parseImport = function(node2) {
  this.next();
  if (this.type === types$1.string) {
    node2.specifiers = empty$1;
    node2.source = this.parseExprAtom();
  } else {
    node2.specifiers = this.parseImportSpecifiers();
    this.expectContextual("from");
    node2.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
  }
  this.semicolon();
  return this.finishNode(node2, "ImportDeclaration");
};
pp$8.parseImportSpecifier = function() {
  var node2 = this.startNode();
  node2.imported = this.parseModuleExportName();
  if (this.eatContextual("as")) {
    node2.local = this.parseIdent();
  } else {
    this.checkUnreserved(node2.imported);
    node2.local = node2.imported;
  }
  this.checkLValSimple(node2.local, BIND_LEXICAL);
  return this.finishNode(node2, "ImportSpecifier");
};
pp$8.parseImportDefaultSpecifier = function() {
  var node2 = this.startNode();
  node2.local = this.parseIdent();
  this.checkLValSimple(node2.local, BIND_LEXICAL);
  return this.finishNode(node2, "ImportDefaultSpecifier");
};
pp$8.parseImportNamespaceSpecifier = function() {
  var node2 = this.startNode();
  this.next();
  this.expectContextual("as");
  node2.local = this.parseIdent();
  this.checkLValSimple(node2.local, BIND_LEXICAL);
  return this.finishNode(node2, "ImportNamespaceSpecifier");
};
pp$8.parseImportSpecifiers = function() {
  var nodes = [], first = true;
  if (this.type === types$1.name) {
    nodes.push(this.parseImportDefaultSpecifier());
    if (!this.eat(types$1.comma)) {
      return nodes;
    }
  }
  if (this.type === types$1.star) {
    nodes.push(this.parseImportNamespaceSpecifier());
    return nodes;
  }
  this.expect(types$1.braceL);
  while (!this.eat(types$1.braceR)) {
    if (!first) {
      this.expect(types$1.comma);
      if (this.afterTrailingComma(types$1.braceR)) {
        break;
      }
    } else {
      first = false;
    }
    nodes.push(this.parseImportSpecifier());
  }
  return nodes;
};
pp$8.parseModuleExportName = function() {
  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
    var stringLiteral = this.parseLiteral(this.value);
    if (loneSurrogate.test(stringLiteral.value)) {
      this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
    }
    return stringLiteral;
  }
  return this.parseIdent(true);
};
pp$8.adaptDirectivePrologue = function(statements) {
  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
    statements[i].directive = statements[i].expression.raw.slice(1, -1);
  }
};
pp$8.isDirectiveCandidate = function(statement) {
  return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && // Reject parenthesized strings.
  (this.input[statement.start] === '"' || this.input[statement.start] === "'");
};
var pp$7 = Parser.prototype;
pp$7.toAssignable = function(node2, isBinding, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 6 && node2) {
    switch (node2.type) {
      case "Identifier":
        if (this.inAsync && node2.name === "await") {
          this.raise(node2.start, "Cannot use 'await' as identifier inside an async function");
        }
        break;
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        node2.type = "ObjectPattern";
        if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        for (var i = 0, list4 = node2.properties; i < list4.length; i += 1) {
          var prop = list4[i];
          this.toAssignable(prop, isBinding);
          if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
            this.raise(prop.argument.start, "Unexpected token");
          }
        }
        break;
      case "Property":
        if (node2.kind !== "init") {
          this.raise(node2.key.start, "Object pattern can't contain getter or setter");
        }
        this.toAssignable(node2.value, isBinding);
        break;
      case "ArrayExpression":
        node2.type = "ArrayPattern";
        if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        this.toAssignableList(node2.elements, isBinding);
        break;
      case "SpreadElement":
        node2.type = "RestElement";
        this.toAssignable(node2.argument, isBinding);
        if (node2.argument.type === "AssignmentPattern") {
          this.raise(node2.argument.start, "Rest elements cannot have a default value");
        }
        break;
      case "AssignmentExpression":
        if (node2.operator !== "=") {
          this.raise(node2.left.end, "Only '=' operator can be used for specifying default value.");
        }
        node2.type = "AssignmentPattern";
        delete node2.operator;
        this.toAssignable(node2.left, isBinding);
        break;
      case "ParenthesizedExpression":
        this.toAssignable(node2.expression, isBinding, refDestructuringErrors);
        break;
      case "ChainExpression":
        this.raiseRecoverable(node2.start, "Optional chaining cannot appear in left-hand side");
        break;
      case "MemberExpression":
        if (!isBinding) {
          break;
        }
      default:
        this.raise(node2.start, "Assigning to rvalue");
    }
  } else if (refDestructuringErrors) {
    this.checkPatternErrors(refDestructuringErrors, true);
  }
  return node2;
};
pp$7.toAssignableList = function(exprList, isBinding) {
  var end = exprList.length;
  for (var i = 0; i < end; i++) {
    var elt = exprList[i];
    if (elt) {
      this.toAssignable(elt, isBinding);
    }
  }
  if (end) {
    var last = exprList[end - 1];
    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
      this.unexpected(last.argument.start);
    }
  }
  return exprList;
};
pp$7.parseSpread = function(refDestructuringErrors) {
  var node2 = this.startNode();
  this.next();
  node2.argument = this.parseMaybeAssign(false, refDestructuringErrors);
  return this.finishNode(node2, "SpreadElement");
};
pp$7.parseRestBinding = function() {
  var node2 = this.startNode();
  this.next();
  if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {
    this.unexpected();
  }
  node2.argument = this.parseBindingAtom();
  return this.finishNode(node2, "RestElement");
};
pp$7.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6) {
    switch (this.type) {
      case types$1.bracketL:
        var node2 = this.startNode();
        this.next();
        node2.elements = this.parseBindingList(types$1.bracketR, true, true);
        return this.finishNode(node2, "ArrayPattern");
      case types$1.braceL:
        return this.parseObj(true);
    }
  }
  return this.parseIdent();
};
pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
  var elts = [], first = true;
  while (!this.eat(close)) {
    if (first) {
      first = false;
    } else {
      this.expect(types$1.comma);
    }
    if (allowEmpty && this.type === types$1.comma) {
      elts.push(null);
    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
      break;
    } else if (this.type === types$1.ellipsis) {
      var rest = this.parseRestBinding();
      this.parseBindingListItem(rest);
      elts.push(rest);
      if (this.type === types$1.comma) {
        this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
      }
      this.expect(close);
      break;
    } else {
      elts.push(this.parseAssignableListItem(allowModifiers));
    }
  }
  return elts;
};
pp$7.parseAssignableListItem = function(allowModifiers) {
  var elem = this.parseMaybeDefault(this.start, this.startLoc);
  this.parseBindingListItem(elem);
  return elem;
};
pp$7.parseBindingListItem = function(param) {
  return param;
};
pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
  left = left || this.parseBindingAtom();
  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {
    return left;
  }
  var node2 = this.startNodeAt(startPos, startLoc);
  node2.left = left;
  node2.right = this.parseMaybeAssign();
  return this.finishNode(node2, "AssignmentPattern");
};
pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
  if (bindingType === void 0) bindingType = BIND_NONE;
  var isBind = bindingType !== BIND_NONE;
  switch (expr.type) {
    case "Identifier":
      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
        this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
      }
      if (isBind) {
        if (bindingType === BIND_LEXICAL && expr.name === "let") {
          this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
        }
        if (checkClashes) {
          if (hasOwn(checkClashes, expr.name)) {
            this.raiseRecoverable(expr.start, "Argument name clash");
          }
          checkClashes[expr.name] = true;
        }
        if (bindingType !== BIND_OUTSIDE) {
          this.declareName(expr.name, bindingType, expr.start);
        }
      }
      break;
    case "ChainExpression":
      this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
      break;
    case "MemberExpression":
      if (isBind) {
        this.raiseRecoverable(expr.start, "Binding member expression");
      }
      break;
    case "ParenthesizedExpression":
      if (isBind) {
        this.raiseRecoverable(expr.start, "Binding parenthesized expression");
      }
      return this.checkLValSimple(expr.expression, bindingType, checkClashes);
    default:
      this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
  }
};
pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
  if (bindingType === void 0) bindingType = BIND_NONE;
  switch (expr.type) {
    case "ObjectPattern":
      for (var i = 0, list4 = expr.properties; i < list4.length; i += 1) {
        var prop = list4[i];
        this.checkLValInnerPattern(prop, bindingType, checkClashes);
      }
      break;
    case "ArrayPattern":
      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
        var elem = list$1[i$1];
        if (elem) {
          this.checkLValInnerPattern(elem, bindingType, checkClashes);
        }
      }
      break;
    default:
      this.checkLValSimple(expr, bindingType, checkClashes);
  }
};
pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
  if (bindingType === void 0) bindingType = BIND_NONE;
  switch (expr.type) {
    case "Property":
      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
      break;
    case "AssignmentPattern":
      this.checkLValPattern(expr.left, bindingType, checkClashes);
      break;
    case "RestElement":
      this.checkLValPattern(expr.argument, bindingType, checkClashes);
      break;
    default:
      this.checkLValPattern(expr, bindingType, checkClashes);
  }
};
var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
  this.token = token;
  this.isExpr = !!isExpr;
  this.preserveSpace = !!preserveSpace;
  this.override = override;
  this.generator = !!generator;
};
var types = {
  b_stat: new TokContext("{", false),
  b_expr: new TokContext("{", true),
  b_tmpl: new TokContext("${", false),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, function(p) {
    return p.tryReadTemplateToken();
  }),
  f_stat: new TokContext("function", false),
  f_expr: new TokContext("function", true),
  f_expr_gen: new TokContext("function", true, false, null, true),
  f_gen: new TokContext("function", false, false, null, true)
};
var pp$6 = Parser.prototype;
pp$6.initialContext = function() {
  return [types.b_stat];
};
pp$6.curContext = function() {
  return this.context[this.context.length - 1];
};
pp$6.braceIsBlock = function(prevType) {
  var parent = this.curContext();
  if (parent === types.f_expr || parent === types.f_stat) {
    return true;
  }
  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {
    return !parent.isExpr;
  }
  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {
    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
  }
  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {
    return true;
  }
  if (prevType === types$1.braceL) {
    return parent === types.b_stat;
  }
  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {
    return false;
  }
  return !this.exprAllowed;
};
pp$6.inGeneratorContext = function() {
  for (var i = this.context.length - 1; i >= 1; i--) {
    var context = this.context[i];
    if (context.token === "function") {
      return context.generator;
    }
  }
  return false;
};
pp$6.updateContext = function(prevType) {
  var update, type = this.type;
  if (type.keyword && prevType === types$1.dot) {
    this.exprAllowed = false;
  } else if (update = type.updateContext) {
    update.call(this, prevType);
  } else {
    this.exprAllowed = type.beforeExpr;
  }
};
pp$6.overrideContext = function(tokenCtx) {
  if (this.curContext() !== tokenCtx) {
    this.context[this.context.length - 1] = tokenCtx;
  }
};
types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
  if (this.context.length === 1) {
    this.exprAllowed = true;
    return;
  }
  var out = this.context.pop();
  if (out === types.b_stat && this.curContext().token === "function") {
    out = this.context.pop();
  }
  this.exprAllowed = !out.isExpr;
};
types$1.braceL.updateContext = function(prevType) {
  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
  this.exprAllowed = true;
};
types$1.dollarBraceL.updateContext = function() {
  this.context.push(types.b_tmpl);
  this.exprAllowed = true;
};
types$1.parenL.updateContext = function(prevType) {
  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
  this.context.push(statementParens ? types.p_stat : types.p_expr);
  this.exprAllowed = true;
};
types$1.incDec.updateContext = function() {
};
types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
  if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {
    this.context.push(types.f_expr);
  } else {
    this.context.push(types.f_stat);
  }
  this.exprAllowed = false;
};
types$1.colon.updateContext = function() {
  if (this.curContext().token === "function") {
    this.context.pop();
  }
  this.exprAllowed = true;
};
types$1.backQuote.updateContext = function() {
  if (this.curContext() === types.q_tmpl) {
    this.context.pop();
  } else {
    this.context.push(types.q_tmpl);
  }
  this.exprAllowed = false;
};
types$1.star.updateContext = function(prevType) {
  if (prevType === types$1._function) {
    var index2 = this.context.length - 1;
    if (this.context[index2] === types.f_expr) {
      this.context[index2] = types.f_expr_gen;
    } else {
      this.context[index2] = types.f_gen;
    }
  }
  this.exprAllowed = true;
};
types$1.name.updateContext = function(prevType) {
  var allowed = false;
  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
    if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
      allowed = true;
    }
  }
  this.exprAllowed = allowed;
};
var pp$5 = Parser.prototype;
pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
    return;
  }
  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
    return;
  }
  var key = prop.key;
  var name2;
  switch (key.type) {
    case "Identifier":
      name2 = key.name;
      break;
    case "Literal":
      name2 = String(key.value);
      break;
    default:
      return;
  }
  var kind = prop.kind;
  if (this.options.ecmaVersion >= 6) {
    if (name2 === "__proto__" && kind === "init") {
      if (propHash.proto) {
        if (refDestructuringErrors) {
          if (refDestructuringErrors.doubleProto < 0) {
            refDestructuringErrors.doubleProto = key.start;
          }
        } else {
          this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
        }
      }
      propHash.proto = true;
    }
    return;
  }
  name2 = "$" + name2;
  var other = propHash[name2];
  if (other) {
    var redefinition;
    if (kind === "init") {
      redefinition = this.strict && other.init || other.get || other.set;
    } else {
      redefinition = other.init || other[kind];
    }
    if (redefinition) {
      this.raiseRecoverable(key.start, "Redefinition of property");
    }
  } else {
    other = propHash[name2] = {
      init: false,
      get: false,
      set: false
    };
  }
  other[kind] = true;
};
pp$5.parseExpression = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
  if (this.type === types$1.comma) {
    var node2 = this.startNodeAt(startPos, startLoc);
    node2.expressions = [expr];
    while (this.eat(types$1.comma)) {
      node2.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
    }
    return this.finishNode(node2, "SequenceExpression");
  }
  return expr;
};
pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
  if (this.isContextual("yield")) {
    if (this.inGenerator) {
      return this.parseYield(forInit);
    } else {
      this.exprAllowed = false;
    }
  }
  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
  if (refDestructuringErrors) {
    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
    oldTrailingComma = refDestructuringErrors.trailingComma;
    oldDoubleProto = refDestructuringErrors.doubleProto;
    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
  } else {
    refDestructuringErrors = new DestructuringErrors();
    ownDestructuringErrors = true;
  }
  var startPos = this.start, startLoc = this.startLoc;
  if (this.type === types$1.parenL || this.type === types$1.name) {
    this.potentialArrowAt = this.start;
    this.potentialArrowInForAwait = forInit === "await";
  }
  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
  if (afterLeftParse) {
    left = afterLeftParse.call(this, left, startPos, startLoc);
  }
  if (this.type.isAssign) {
    var node2 = this.startNodeAt(startPos, startLoc);
    node2.operator = this.value;
    if (this.type === types$1.eq) {
      left = this.toAssignable(left, false, refDestructuringErrors);
    }
    if (!ownDestructuringErrors) {
      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
    }
    if (refDestructuringErrors.shorthandAssign >= left.start) {
      refDestructuringErrors.shorthandAssign = -1;
    }
    if (this.type === types$1.eq) {
      this.checkLValPattern(left);
    } else {
      this.checkLValSimple(left);
    }
    node2.left = left;
    this.next();
    node2.right = this.parseMaybeAssign(forInit);
    if (oldDoubleProto > -1) {
      refDestructuringErrors.doubleProto = oldDoubleProto;
    }
    return this.finishNode(node2, "AssignmentExpression");
  } else {
    if (ownDestructuringErrors) {
      this.checkExpressionErrors(refDestructuringErrors, true);
    }
  }
  if (oldParenAssign > -1) {
    refDestructuringErrors.parenthesizedAssign = oldParenAssign;
  }
  if (oldTrailingComma > -1) {
    refDestructuringErrors.trailingComma = oldTrailingComma;
  }
  return left;
};
pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprOps(forInit, refDestructuringErrors);
  if (this.checkExpressionErrors(refDestructuringErrors)) {
    return expr;
  }
  if (this.eat(types$1.question)) {
    var node2 = this.startNodeAt(startPos, startLoc);
    node2.test = expr;
    node2.consequent = this.parseMaybeAssign();
    this.expect(types$1.colon);
    node2.alternate = this.parseMaybeAssign(forInit);
    return this.finishNode(node2, "ConditionalExpression");
  }
  return expr;
};
pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
  if (this.checkExpressionErrors(refDestructuringErrors)) {
    return expr;
  }
  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
};
pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
  var prec = this.type.binop;
  if (prec != null && (!forInit || this.type !== types$1._in)) {
    if (prec > minPrec) {
      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
      var coalesce = this.type === types$1.coalesce;
      if (coalesce) {
        prec = types$1.logicalAND.binop;
      }
      var op = this.value;
      this.next();
      var startPos = this.start, startLoc = this.startLoc;
      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
      var node2 = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
      if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {
        this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
      }
      return this.parseExprOp(node2, leftStartPos, leftStartLoc, minPrec, forInit);
    }
  }
  return left;
};
pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
  if (right.type === "PrivateIdentifier") {
    this.raise(right.start, "Private identifier can only be left side of binary expression");
  }
  var node2 = this.startNodeAt(startPos, startLoc);
  node2.left = left;
  node2.operator = op;
  node2.right = right;
  return this.finishNode(node2, logical ? "LogicalExpression" : "BinaryExpression");
};
pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
  var startPos = this.start, startLoc = this.startLoc, expr;
  if (this.isContextual("await") && this.canAwait) {
    expr = this.parseAwait(forInit);
    sawUnary = true;
  } else if (this.type.prefix) {
    var node2 = this.startNode(), update = this.type === types$1.incDec;
    node2.operator = this.value;
    node2.prefix = true;
    this.next();
    node2.argument = this.parseMaybeUnary(null, true, update, forInit);
    this.checkExpressionErrors(refDestructuringErrors, true);
    if (update) {
      this.checkLValSimple(node2.argument);
    } else if (this.strict && node2.operator === "delete" && isLocalVariableAccess(node2.argument)) {
      this.raiseRecoverable(node2.start, "Deleting local variable in strict mode");
    } else if (node2.operator === "delete" && isPrivateFieldAccess(node2.argument)) {
      this.raiseRecoverable(node2.start, "Private fields can not be deleted");
    } else {
      sawUnary = true;
    }
    expr = this.finishNode(node2, update ? "UpdateExpression" : "UnaryExpression");
  } else if (!sawUnary && this.type === types$1.privateId) {
    if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) {
      this.unexpected();
    }
    expr = this.parsePrivateIdent();
    if (this.type !== types$1._in) {
      this.unexpected();
    }
  } else {
    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
    if (this.checkExpressionErrors(refDestructuringErrors)) {
      return expr;
    }
    while (this.type.postfix && !this.canInsertSemicolon()) {
      var node$1 = this.startNodeAt(startPos, startLoc);
      node$1.operator = this.value;
      node$1.prefix = false;
      node$1.argument = expr;
      this.checkLValSimple(expr);
      this.next();
      expr = this.finishNode(node$1, "UpdateExpression");
    }
  }
  if (!incDec && this.eat(types$1.starstar)) {
    if (sawUnary) {
      this.unexpected(this.lastTokStart);
    } else {
      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
    }
  } else {
    return expr;
  }
};
function isLocalVariableAccess(node2) {
  return node2.type === "Identifier" || node2.type === "ParenthesizedExpression" && isLocalVariableAccess(node2.expression);
}
function isPrivateFieldAccess(node2) {
  return node2.type === "MemberExpression" && node2.property.type === "PrivateIdentifier" || node2.type === "ChainExpression" && isPrivateFieldAccess(node2.expression) || node2.type === "ParenthesizedExpression" && isPrivateFieldAccess(node2.expression);
}
pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprAtom(refDestructuringErrors, forInit);
  if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
    return expr;
  }
  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
  if (refDestructuringErrors && result.type === "MemberExpression") {
    if (refDestructuringErrors.parenthesizedAssign >= result.start) {
      refDestructuringErrors.parenthesizedAssign = -1;
    }
    if (refDestructuringErrors.parenthesizedBind >= result.start) {
      refDestructuringErrors.parenthesizedBind = -1;
    }
    if (refDestructuringErrors.trailingComma >= result.start) {
      refDestructuringErrors.trailingComma = -1;
    }
  }
  return result;
};
pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
  var optionalChained = false;
  while (true) {
    var element3 = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
    if (element3.optional) {
      optionalChained = true;
    }
    if (element3 === base || element3.type === "ArrowFunctionExpression") {
      if (optionalChained) {
        var chainNode = this.startNodeAt(startPos, startLoc);
        chainNode.expression = element3;
        element3 = this.finishNode(chainNode, "ChainExpression");
      }
      return element3;
    }
    base = element3;
  }
};
pp$5.shouldParseAsyncArrow = function() {
  return !this.canInsertSemicolon() && this.eat(types$1.arrow);
};
pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
};
pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
  var optionalSupported = this.options.ecmaVersion >= 11;
  var optional = optionalSupported && this.eat(types$1.questionDot);
  if (noCalls && optional) {
    this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
  }
  var computed = this.eat(types$1.bracketL);
  if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
    var node2 = this.startNodeAt(startPos, startLoc);
    node2.object = base;
    if (computed) {
      node2.property = this.parseExpression();
      this.expect(types$1.bracketR);
    } else if (this.type === types$1.privateId && base.type !== "Super") {
      node2.property = this.parsePrivateIdent();
    } else {
      node2.property = this.parseIdent(this.options.allowReserved !== "never");
    }
    node2.computed = !!computed;
    if (optionalSupported) {
      node2.optional = optional;
    }
    base = this.finishNode(node2, "MemberExpression");
  } else if (!noCalls && this.eat(types$1.parenL)) {
    var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
    if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      if (this.awaitIdentPos > 0) {
        this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
      }
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
    }
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;
    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
    var node$1 = this.startNodeAt(startPos, startLoc);
    node$1.callee = base;
    node$1.arguments = exprList;
    if (optionalSupported) {
      node$1.optional = optional;
    }
    base = this.finishNode(node$1, "CallExpression");
  } else if (this.type === types$1.backQuote) {
    if (optional || optionalChained) {
      this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
    }
    var node$2 = this.startNodeAt(startPos, startLoc);
    node$2.tag = base;
    node$2.quasi = this.parseTemplate({ isTagged: true });
    base = this.finishNode(node$2, "TaggedTemplateExpression");
  }
  return base;
};
pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
  if (this.type === types$1.slash) {
    this.readRegexp();
  }
  var node2, canBeArrow = this.potentialArrowAt === this.start;
  switch (this.type) {
    case types$1._super:
      if (!this.allowSuper) {
        this.raise(this.start, "'super' keyword outside a method");
      }
      node2 = this.startNode();
      this.next();
      if (this.type === types$1.parenL && !this.allowDirectSuper) {
        this.raise(node2.start, "super() call outside constructor of a subclass");
      }
      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {
        this.unexpected();
      }
      return this.finishNode(node2, "Super");
    case types$1._this:
      node2 = this.startNode();
      this.next();
      return this.finishNode(node2, "ThisExpression");
    case types$1.name:
      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
      var id = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
        this.overrideContext(types.f_expr);
        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
      }
      if (canBeArrow && !this.canInsertSemicolon()) {
        if (this.eat(types$1.arrow)) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
        }
        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
          id = this.parseIdent(false);
          if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {
            this.unexpected();
          }
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
        }
      }
      return id;
    case types$1.regexp:
      var value = this.value;
      node2 = this.parseLiteral(value.value);
      node2.regex = { pattern: value.pattern, flags: value.flags };
      return node2;
    case types$1.num:
    case types$1.string:
      return this.parseLiteral(this.value);
    case types$1._null:
    case types$1._true:
    case types$1._false:
      node2 = this.startNode();
      node2.value = this.type === types$1._null ? null : this.type === types$1._true;
      node2.raw = this.type.keyword;
      this.next();
      return this.finishNode(node2, "Literal");
    case types$1.parenL:
      var start2 = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
      if (refDestructuringErrors) {
        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
          refDestructuringErrors.parenthesizedAssign = start2;
        }
        if (refDestructuringErrors.parenthesizedBind < 0) {
          refDestructuringErrors.parenthesizedBind = start2;
        }
      }
      return expr;
    case types$1.bracketL:
      node2 = this.startNode();
      this.next();
      node2.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
      return this.finishNode(node2, "ArrayExpression");
    case types$1.braceL:
      this.overrideContext(types.b_expr);
      return this.parseObj(false, refDestructuringErrors);
    case types$1._function:
      node2 = this.startNode();
      this.next();
      return this.parseFunction(node2, 0);
    case types$1._class:
      return this.parseClass(this.startNode(), false);
    case types$1._new:
      return this.parseNew();
    case types$1.backQuote:
      return this.parseTemplate();
    case types$1._import:
      if (this.options.ecmaVersion >= 11) {
        return this.parseExprImport(forNew);
      } else {
        return this.unexpected();
      }
    default:
      return this.parseExprAtomDefault();
  }
};
pp$5.parseExprAtomDefault = function() {
  this.unexpected();
};
pp$5.parseExprImport = function(forNew) {
  var node2 = this.startNode();
  if (this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword import");
  }
  this.next();
  if (this.type === types$1.parenL && !forNew) {
    return this.parseDynamicImport(node2);
  } else if (this.type === types$1.dot) {
    var meta = this.startNodeAt(node2.start, node2.loc && node2.loc.start);
    meta.name = "import";
    node2.meta = this.finishNode(meta, "Identifier");
    return this.parseImportMeta(node2);
  } else {
    this.unexpected();
  }
};
pp$5.parseDynamicImport = function(node2) {
  this.next();
  node2.source = this.parseMaybeAssign();
  if (!this.eat(types$1.parenR)) {
    var errorPos = this.start;
    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
      this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
    } else {
      this.unexpected(errorPos);
    }
  }
  return this.finishNode(node2, "ImportExpression");
};
pp$5.parseImportMeta = function(node2) {
  this.next();
  var containsEsc = this.containsEsc;
  node2.property = this.parseIdent(true);
  if (node2.property.name !== "meta") {
    this.raiseRecoverable(node2.property.start, "The only valid meta property for import is 'import.meta'");
  }
  if (containsEsc) {
    this.raiseRecoverable(node2.start, "'import.meta' must not contain escaped characters");
  }
  if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
    this.raiseRecoverable(node2.start, "Cannot use 'import.meta' outside a module");
  }
  return this.finishNode(node2, "MetaProperty");
};
pp$5.parseLiteral = function(value) {
  var node2 = this.startNode();
  node2.value = value;
  node2.raw = this.input.slice(this.start, this.end);
  if (node2.raw.charCodeAt(node2.raw.length - 1) === 110) {
    node2.bigint = node2.raw.slice(0, -1).replace(/_/g, "");
  }
  this.next();
  return this.finishNode(node2, "Literal");
};
pp$5.parseParenExpression = function() {
  this.expect(types$1.parenL);
  var val = this.parseExpression();
  this.expect(types$1.parenR);
  return val;
};
pp$5.shouldParseArrow = function(exprList) {
  return !this.canInsertSemicolon();
};
pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var innerStartPos = this.start, innerStartLoc = this.startLoc;
    var exprList = [], first = true, lastIsComma = false;
    var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
    this.yieldPos = 0;
    this.awaitPos = 0;
    while (this.type !== types$1.parenR) {
      first ? first = false : this.expect(types$1.comma);
      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
        lastIsComma = true;
        break;
      } else if (this.type === types$1.ellipsis) {
        spreadStart = this.start;
        exprList.push(this.parseParenItem(this.parseRestBinding()));
        if (this.type === types$1.comma) {
          this.raiseRecoverable(
            this.start,
            "Comma is not permitted after the rest element"
          );
        }
        break;
      } else {
        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
      }
    }
    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
    this.expect(types$1.parenR);
    if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
    }
    if (!exprList.length || lastIsComma) {
      this.unexpected(this.lastTokStart);
    }
    if (spreadStart) {
      this.unexpected(spreadStart);
    }
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;
    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    } else {
      val = exprList[0];
    }
  } else {
    val = this.parseParenExpression();
  }
  if (this.options.preserveParens) {
    var par = this.startNodeAt(startPos, startLoc);
    par.expression = val;
    return this.finishNode(par, "ParenthesizedExpression");
  } else {
    return val;
  }
};
pp$5.parseParenItem = function(item) {
  return item;
};
pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
};
var empty = [];
pp$5.parseNew = function() {
  if (this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword new");
  }
  var node2 = this.startNode();
  this.next();
  if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
    var meta = this.startNodeAt(node2.start, node2.loc && node2.loc.start);
    meta.name = "new";
    node2.meta = this.finishNode(meta, "Identifier");
    this.next();
    var containsEsc = this.containsEsc;
    node2.property = this.parseIdent(true);
    if (node2.property.name !== "target") {
      this.raiseRecoverable(node2.property.start, "The only valid meta property for new is 'new.target'");
    }
    if (containsEsc) {
      this.raiseRecoverable(node2.start, "'new.target' must not contain escaped characters");
    }
    if (!this.allowNewDotTarget) {
      this.raiseRecoverable(node2.start, "'new.target' can only be used in functions and class static block");
    }
    return this.finishNode(node2, "MetaProperty");
  }
  var startPos = this.start, startLoc = this.startLoc;
  node2.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);
  if (this.eat(types$1.parenL)) {
    node2.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);
  } else {
    node2.arguments = empty;
  }
  return this.finishNode(node2, "NewExpression");
};
pp$5.parseTemplateElement = function(ref2) {
  var isTagged = ref2.isTagged;
  var elem = this.startNode();
  if (this.type === types$1.invalidTemplate) {
    if (!isTagged) {
      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
    }
    elem.value = {
      raw: this.value.replace(/\r\n?/g, "\n"),
      cooked: null
    };
  } else {
    elem.value = {
      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
      cooked: this.value
    };
  }
  this.next();
  elem.tail = this.type === types$1.backQuote;
  return this.finishNode(elem, "TemplateElement");
};
pp$5.parseTemplate = function(ref2) {
  if (ref2 === void 0) ref2 = {};
  var isTagged = ref2.isTagged;
  if (isTagged === void 0) isTagged = false;
  var node2 = this.startNode();
  this.next();
  node2.expressions = [];
  var curElt = this.parseTemplateElement({ isTagged });
  node2.quasis = [curElt];
  while (!curElt.tail) {
    if (this.type === types$1.eof) {
      this.raise(this.pos, "Unterminated template literal");
    }
    this.expect(types$1.dollarBraceL);
    node2.expressions.push(this.parseExpression());
    this.expect(types$1.braceR);
    node2.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
  }
  this.next();
  return this.finishNode(node2, "TemplateLiteral");
};
pp$5.isAsyncProp = function(prop) {
  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};
pp$5.parseObj = function(isPattern, refDestructuringErrors) {
  var node2 = this.startNode(), first = true, propHash = {};
  node2.properties = [];
  this.next();
  while (!this.eat(types$1.braceR)) {
    if (!first) {
      this.expect(types$1.comma);
      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {
        break;
      }
    } else {
      first = false;
    }
    var prop = this.parseProperty(isPattern, refDestructuringErrors);
    if (!isPattern) {
      this.checkPropClash(prop, propHash, refDestructuringErrors);
    }
    node2.properties.push(prop);
  }
  return this.finishNode(node2, isPattern ? "ObjectPattern" : "ObjectExpression");
};
pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
    if (isPattern) {
      prop.argument = this.parseIdent(false);
      if (this.type === types$1.comma) {
        this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
      }
      return this.finishNode(prop, "RestElement");
    }
    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
      refDestructuringErrors.trailingComma = this.start;
    }
    return this.finishNode(prop, "SpreadElement");
  }
  if (this.options.ecmaVersion >= 6) {
    prop.method = false;
    prop.shorthand = false;
    if (isPattern || refDestructuringErrors) {
      startPos = this.start;
      startLoc = this.startLoc;
    }
    if (!isPattern) {
      isGenerator = this.eat(types$1.star);
    }
  }
  var containsEsc = this.containsEsc;
  this.parsePropertyName(prop);
  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
    isAsync = true;
    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
    this.parsePropertyName(prop);
  } else {
    isAsync = false;
  }
  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
  return this.finishNode(prop, "Property");
};
pp$5.parseGetterSetter = function(prop) {
  prop.kind = prop.key.name;
  this.parsePropertyName(prop);
  prop.value = this.parseMethod(false);
  var paramCount = prop.kind === "get" ? 0 : 1;
  if (prop.value.params.length !== paramCount) {
    var start2 = prop.value.start;
    if (prop.kind === "get") {
      this.raiseRecoverable(start2, "getter should have no params");
    } else {
      this.raiseRecoverable(start2, "setter should have exactly one param");
    }
  } else {
    if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
      this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
    }
  }
};
pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
  if ((isGenerator || isAsync) && this.type === types$1.colon) {
    this.unexpected();
  }
  if (this.eat(types$1.colon)) {
    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
    prop.kind = "init";
  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
    if (isPattern) {
      this.unexpected();
    }
    prop.kind = "init";
    prop.method = true;
    prop.value = this.parseMethod(isGenerator, isAsync);
  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
    if (isGenerator || isAsync) {
      this.unexpected();
    }
    this.parseGetterSetter(prop);
  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
    if (isGenerator || isAsync) {
      this.unexpected();
    }
    this.checkUnreserved(prop.key);
    if (prop.key.name === "await" && !this.awaitIdentPos) {
      this.awaitIdentPos = startPos;
    }
    prop.kind = "init";
    if (isPattern) {
      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
    } else if (this.type === types$1.eq && refDestructuringErrors) {
      if (refDestructuringErrors.shorthandAssign < 0) {
        refDestructuringErrors.shorthandAssign = this.start;
      }
      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
    } else {
      prop.value = this.copyNode(prop.key);
    }
    prop.shorthand = true;
  } else {
    this.unexpected();
  }
};
pp$5.parsePropertyName = function(prop) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(types$1.bracketL)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(types$1.bracketR);
      return prop.key;
    } else {
      prop.computed = false;
    }
  }
  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
};
pp$5.initFunction = function(node2) {
  node2.id = null;
  if (this.options.ecmaVersion >= 6) {
    node2.generator = node2.expression = false;
  }
  if (this.options.ecmaVersion >= 8) {
    node2.async = false;
  }
};
pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
  var node2 = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.initFunction(node2);
  if (this.options.ecmaVersion >= 6) {
    node2.generator = isGenerator;
  }
  if (this.options.ecmaVersion >= 8) {
    node2.async = !!isAsync;
  }
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(isAsync, node2.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
  this.expect(types$1.parenL);
  node2.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
  this.parseFunctionBody(node2, false, true, false);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node2, "FunctionExpression");
};
pp$5.parseArrowExpression = function(node2, params, isAsync, forInit) {
  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
  this.initFunction(node2);
  if (this.options.ecmaVersion >= 8) {
    node2.async = !!isAsync;
  }
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  node2.params = this.toAssignableList(params, true);
  this.parseFunctionBody(node2, true, false, forInit);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node2, "ArrowFunctionExpression");
};
pp$5.parseFunctionBody = function(node2, isArrowFunction, isMethod, forInit) {
  var isExpression = isArrowFunction && this.type !== types$1.braceL;
  var oldStrict = this.strict, useStrict = false;
  if (isExpression) {
    node2.body = this.parseMaybeAssign(forInit);
    node2.expression = true;
    this.checkParams(node2, false);
  } else {
    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node2.params);
    if (!oldStrict || nonSimple) {
      useStrict = this.strictDirective(this.end);
      if (useStrict && nonSimple) {
        this.raiseRecoverable(node2.start, "Illegal 'use strict' directive in function with non-simple parameter list");
      }
    }
    var oldLabels = this.labels;
    this.labels = [];
    if (useStrict) {
      this.strict = true;
    }
    this.checkParams(node2, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node2.params));
    if (this.strict && node2.id) {
      this.checkLValSimple(node2.id, BIND_OUTSIDE);
    }
    node2.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
    node2.expression = false;
    this.adaptDirectivePrologue(node2.body.body);
    this.labels = oldLabels;
  }
  this.exitScope();
};
pp$5.isSimpleParamList = function(params) {
  for (var i = 0, list4 = params; i < list4.length; i += 1) {
    var param = list4[i];
    if (param.type !== "Identifier") {
      return false;
    }
  }
  return true;
};
pp$5.checkParams = function(node2, allowDuplicates) {
  var nameHash = /* @__PURE__ */ Object.create(null);
  for (var i = 0, list4 = node2.params; i < list4.length; i += 1) {
    var param = list4[i];
    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
  }
};
pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
  var elts = [], first = true;
  while (!this.eat(close)) {
    if (!first) {
      this.expect(types$1.comma);
      if (allowTrailingComma && this.afterTrailingComma(close)) {
        break;
      }
    } else {
      first = false;
    }
    var elt = void 0;
    if (allowEmpty && this.type === types$1.comma) {
      elt = null;
    } else if (this.type === types$1.ellipsis) {
      elt = this.parseSpread(refDestructuringErrors);
      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {
        refDestructuringErrors.trailingComma = this.start;
      }
    } else {
      elt = this.parseMaybeAssign(false, refDestructuringErrors);
    }
    elts.push(elt);
  }
  return elts;
};
pp$5.checkUnreserved = function(ref2) {
  var start2 = ref2.start;
  var end = ref2.end;
  var name2 = ref2.name;
  if (this.inGenerator && name2 === "yield") {
    this.raiseRecoverable(start2, "Cannot use 'yield' as identifier inside a generator");
  }
  if (this.inAsync && name2 === "await") {
    this.raiseRecoverable(start2, "Cannot use 'await' as identifier inside an async function");
  }
  if (this.currentThisScope().inClassFieldInit && name2 === "arguments") {
    this.raiseRecoverable(start2, "Cannot use 'arguments' in class field initializer");
  }
  if (this.inClassStaticBlock && (name2 === "arguments" || name2 === "await")) {
    this.raise(start2, "Cannot use " + name2 + " in class static initialization block");
  }
  if (this.keywords.test(name2)) {
    this.raise(start2, "Unexpected keyword '" + name2 + "'");
  }
  if (this.options.ecmaVersion < 6 && this.input.slice(start2, end).indexOf("\\") !== -1) {
    return;
  }
  var re2 = this.strict ? this.reservedWordsStrict : this.reservedWords;
  if (re2.test(name2)) {
    if (!this.inAsync && name2 === "await") {
      this.raiseRecoverable(start2, "Cannot use keyword 'await' outside an async function");
    }
    this.raiseRecoverable(start2, "The keyword '" + name2 + "' is reserved");
  }
};
pp$5.parseIdent = function(liberal) {
  var node2 = this.parseIdentNode();
  this.next(!!liberal);
  this.finishNode(node2, "Identifier");
  if (!liberal) {
    this.checkUnreserved(node2);
    if (node2.name === "await" && !this.awaitIdentPos) {
      this.awaitIdentPos = node2.start;
    }
  }
  return node2;
};
pp$5.parseIdentNode = function() {
  var node2 = this.startNode();
  if (this.type === types$1.name) {
    node2.name = this.value;
  } else if (this.type.keyword) {
    node2.name = this.type.keyword;
    if ((node2.name === "class" || node2.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
      this.context.pop();
    }
    this.type = types$1.name;
  } else {
    this.unexpected();
  }
  return node2;
};
pp$5.parsePrivateIdent = function() {
  var node2 = this.startNode();
  if (this.type === types$1.privateId) {
    node2.name = this.value;
  } else {
    this.unexpected();
  }
  this.next();
  this.finishNode(node2, "PrivateIdentifier");
  if (this.options.checkPrivateFields) {
    if (this.privateNameStack.length === 0) {
      this.raise(node2.start, "Private field '#" + node2.name + "' must be declared in an enclosing class");
    } else {
      this.privateNameStack[this.privateNameStack.length - 1].used.push(node2);
    }
  }
  return node2;
};
pp$5.parseYield = function(forInit) {
  if (!this.yieldPos) {
    this.yieldPos = this.start;
  }
  var node2 = this.startNode();
  this.next();
  if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {
    node2.delegate = false;
    node2.argument = null;
  } else {
    node2.delegate = this.eat(types$1.star);
    node2.argument = this.parseMaybeAssign(forInit);
  }
  return this.finishNode(node2, "YieldExpression");
};
pp$5.parseAwait = function(forInit) {
  if (!this.awaitPos) {
    this.awaitPos = this.start;
  }
  var node2 = this.startNode();
  this.next();
  node2.argument = this.parseMaybeUnary(null, true, false, forInit);
  return this.finishNode(node2, "AwaitExpression");
};
var pp$4 = Parser.prototype;
pp$4.raise = function(pos, message) {
  var loc = getLineInfo(this.input, pos);
  message += " (" + loc.line + ":" + loc.column + ")";
  var err = new SyntaxError(message);
  err.pos = pos;
  err.loc = loc;
  err.raisedAt = this.pos;
  throw err;
};
pp$4.raiseRecoverable = pp$4.raise;
pp$4.curPosition = function() {
  if (this.options.locations) {
    return new Position(this.curLine, this.pos - this.lineStart);
  }
};
var pp$3 = Parser.prototype;
var Scope = function Scope2(flags) {
  this.flags = flags;
  this.var = [];
  this.lexical = [];
  this.functions = [];
  this.inClassFieldInit = false;
};
pp$3.enterScope = function(flags) {
  this.scopeStack.push(new Scope(flags));
};
pp$3.exitScope = function() {
  this.scopeStack.pop();
};
pp$3.treatFunctionsAsVarInScope = function(scope) {
  return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
};
pp$3.declareName = function(name2, bindingType, pos) {
  var redeclared = false;
  if (bindingType === BIND_LEXICAL) {
    var scope = this.currentScope();
    redeclared = scope.lexical.indexOf(name2) > -1 || scope.functions.indexOf(name2) > -1 || scope.var.indexOf(name2) > -1;
    scope.lexical.push(name2);
    if (this.inModule && scope.flags & SCOPE_TOP) {
      delete this.undefinedExports[name2];
    }
  } else if (bindingType === BIND_SIMPLE_CATCH) {
    var scope$1 = this.currentScope();
    scope$1.lexical.push(name2);
  } else if (bindingType === BIND_FUNCTION) {
    var scope$2 = this.currentScope();
    if (this.treatFunctionsAsVar) {
      redeclared = scope$2.lexical.indexOf(name2) > -1;
    } else {
      redeclared = scope$2.lexical.indexOf(name2) > -1 || scope$2.var.indexOf(name2) > -1;
    }
    scope$2.functions.push(name2);
  } else {
    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
      var scope$3 = this.scopeStack[i];
      if (scope$3.lexical.indexOf(name2) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name2) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name2) > -1) {
        redeclared = true;
        break;
      }
      scope$3.var.push(name2);
      if (this.inModule && scope$3.flags & SCOPE_TOP) {
        delete this.undefinedExports[name2];
      }
      if (scope$3.flags & SCOPE_VAR) {
        break;
      }
    }
  }
  if (redeclared) {
    this.raiseRecoverable(pos, "Identifier '" + name2 + "' has already been declared");
  }
};
pp$3.checkLocalExport = function(id) {
  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
    this.undefinedExports[id.name] = id;
  }
};
pp$3.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
};
pp$3.currentVarScope = function() {
  for (var i = this.scopeStack.length - 1; ; i--) {
    var scope = this.scopeStack[i];
    if (scope.flags & SCOPE_VAR) {
      return scope;
    }
  }
};
pp$3.currentThisScope = function() {
  for (var i = this.scopeStack.length - 1; ; i--) {
    var scope = this.scopeStack[i];
    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
      return scope;
    }
  }
};
var Node = function Node2(parser, pos, loc) {
  this.type = "";
  this.start = pos;
  this.end = 0;
  if (parser.options.locations) {
    this.loc = new SourceLocation(parser, loc);
  }
  if (parser.options.directSourceFile) {
    this.sourceFile = parser.options.directSourceFile;
  }
  if (parser.options.ranges) {
    this.range = [pos, 0];
  }
};
var pp$2 = Parser.prototype;
pp$2.startNode = function() {
  return new Node(this, this.start, this.startLoc);
};
pp$2.startNodeAt = function(pos, loc) {
  return new Node(this, pos, loc);
};
function finishNodeAt(node2, type, pos, loc) {
  node2.type = type;
  node2.end = pos;
  if (this.options.locations) {
    node2.loc.end = loc;
  }
  if (this.options.ranges) {
    node2.range[1] = pos;
  }
  return node2;
}
pp$2.finishNode = function(node2, type) {
  return finishNodeAt.call(this, node2, type, this.lastTokEnd, this.lastTokEndLoc);
};
pp$2.finishNodeAt = function(node2, type, pos, loc) {
  return finishNodeAt.call(this, node2, type, pos, loc);
};
pp$2.copyNode = function(node2) {
  var newNode = new Node(this, node2.start, this.startLoc);
  for (var prop in node2) {
    newNode[prop] = node2[prop];
  }
  return newNode;
};
var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
var ecma11BinaryProperties = ecma10BinaryProperties;
var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
var ecma13BinaryProperties = ecma12BinaryProperties;
var ecma14BinaryProperties = ecma13BinaryProperties;
var unicodeBinaryProperties = {
  9: ecma9BinaryProperties,
  10: ecma10BinaryProperties,
  11: ecma11BinaryProperties,
  12: ecma12BinaryProperties,
  13: ecma13BinaryProperties,
  14: ecma14BinaryProperties
};
var ecma14BinaryPropertiesOfStrings = "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji";
var unicodeBinaryPropertiesOfStrings = {
  9: "",
  10: "",
  11: "",
  12: "",
  13: "",
  14: ecma14BinaryPropertiesOfStrings
};
var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
var ecma14ScriptValues = ecma13ScriptValues + " Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz";
var unicodeScriptValues = {
  9: ecma9ScriptValues,
  10: ecma10ScriptValues,
  11: ecma11ScriptValues,
  12: ecma12ScriptValues,
  13: ecma13ScriptValues,
  14: ecma14ScriptValues
};
var data = {};
function buildUnicodeData(ecmaVersion) {
  var d = data[ecmaVersion] = {
    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
    binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),
    nonBinary: {
      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
    }
  };
  d.nonBinary.Script_Extensions = d.nonBinary.Script;
  d.nonBinary.gc = d.nonBinary.General_Category;
  d.nonBinary.sc = d.nonBinary.Script;
  d.nonBinary.scx = d.nonBinary.Script_Extensions;
}
for (i = 0, list4 = [9, 10, 11, 12, 13, 14]; i < list4.length; i += 1) {
  ecmaVersion = list4[i];
  buildUnicodeData(ecmaVersion);
}
var ecmaVersion;
var i;
var list4;
var pp$1 = Parser.prototype;
var BranchID = function BranchID2(parent, base) {
  this.parent = parent;
  this.base = base || this;
};
BranchID.prototype.separatedFrom = function separatedFrom(alt) {
  for (var self2 = this; self2; self2 = self2.parent) {
    for (var other = alt; other; other = other.parent) {
      if (self2.base === other.base && self2 !== other) {
        return true;
      }
    }
  }
  return false;
};
BranchID.prototype.sibling = function sibling() {
  return new BranchID(this.parent, this.base);
};
var RegExpValidationState = function RegExpValidationState2(parser) {
  this.parser = parser;
  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : "");
  this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
  this.source = "";
  this.flags = "";
  this.start = 0;
  this.switchU = false;
  this.switchV = false;
  this.switchN = false;
  this.pos = 0;
  this.lastIntValue = 0;
  this.lastStringValue = "";
  this.lastAssertionIsQuantifiable = false;
  this.numCapturingParens = 0;
  this.maxBackReference = 0;
  this.groupNames = /* @__PURE__ */ Object.create(null);
  this.backReferenceNames = [];
  this.branchID = null;
};
RegExpValidationState.prototype.reset = function reset(start2, pattern, flags) {
  var unicodeSets = flags.indexOf("v") !== -1;
  var unicode = flags.indexOf("u") !== -1;
  this.start = start2 | 0;
  this.source = pattern + "";
  this.flags = flags;
  if (unicodeSets && this.parser.options.ecmaVersion >= 15) {
    this.switchU = true;
    this.switchV = true;
    this.switchN = true;
  } else {
    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
    this.switchV = false;
    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
  }
};
RegExpValidationState.prototype.raise = function raise(message) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
};
RegExpValidationState.prototype.at = function at(i, forceU) {
  if (forceU === void 0) forceU = false;
  var s = this.source;
  var l = s.length;
  if (i >= l) {
    return -1;
  }
  var c = s.charCodeAt(i);
  if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l) {
    return c;
  }
  var next = s.charCodeAt(i + 1);
  return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
};
RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
  if (forceU === void 0) forceU = false;
  var s = this.source;
  var l = s.length;
  if (i >= l) {
    return l;
  }
  var c = s.charCodeAt(i), next;
  if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
    return i + 1;
  }
  return i + 2;
};
RegExpValidationState.prototype.current = function current(forceU) {
  if (forceU === void 0) forceU = false;
  return this.at(this.pos, forceU);
};
RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
  if (forceU === void 0) forceU = false;
  return this.at(this.nextIndex(this.pos, forceU), forceU);
};
RegExpValidationState.prototype.advance = function advance(forceU) {
  if (forceU === void 0) forceU = false;
  this.pos = this.nextIndex(this.pos, forceU);
};
RegExpValidationState.prototype.eat = function eat(ch, forceU) {
  if (forceU === void 0) forceU = false;
  if (this.current(forceU) === ch) {
    this.advance(forceU);
    return true;
  }
  return false;
};
RegExpValidationState.prototype.eatChars = function eatChars(chs, forceU) {
  if (forceU === void 0) forceU = false;
  var pos = this.pos;
  for (var i = 0, list4 = chs; i < list4.length; i += 1) {
    var ch = list4[i];
    var current2 = this.at(pos, forceU);
    if (current2 === -1 || current2 !== ch) {
      return false;
    }
    pos = this.nextIndex(pos, forceU);
  }
  this.pos = pos;
  return true;
};
pp$1.validateRegExpFlags = function(state) {
  var validFlags = state.validFlags;
  var flags = state.flags;
  var u = false;
  var v = false;
  for (var i = 0; i < flags.length; i++) {
    var flag = flags.charAt(i);
    if (validFlags.indexOf(flag) === -1) {
      this.raise(state.start, "Invalid regular expression flag");
    }
    if (flags.indexOf(flag, i + 1) > -1) {
      this.raise(state.start, "Duplicate regular expression flag");
    }
    if (flag === "u") {
      u = true;
    }
    if (flag === "v") {
      v = true;
    }
  }
  if (this.options.ecmaVersion >= 15 && u && v) {
    this.raise(state.start, "Invalid regular expression flag");
  }
};
function hasProp(obj) {
  for (var _ in obj) {
    return true;
  }
  return false;
}
pp$1.validateRegExpPattern = function(state) {
  this.regexp_pattern(state);
  if (!state.switchN && this.options.ecmaVersion >= 9 && hasProp(state.groupNames)) {
    state.switchN = true;
    this.regexp_pattern(state);
  }
};
pp$1.regexp_pattern = function(state) {
  state.pos = 0;
  state.lastIntValue = 0;
  state.lastStringValue = "";
  state.lastAssertionIsQuantifiable = false;
  state.numCapturingParens = 0;
  state.maxBackReference = 0;
  state.groupNames = /* @__PURE__ */ Object.create(null);
  state.backReferenceNames.length = 0;
  state.branchID = null;
  this.regexp_disjunction(state);
  if (state.pos !== state.source.length) {
    if (state.eat(
      41
      /* ) */
    )) {
      state.raise("Unmatched ')'");
    }
    if (state.eat(
      93
      /* ] */
    ) || state.eat(
      125
      /* } */
    )) {
      state.raise("Lone quantifier brackets");
    }
  }
  if (state.maxBackReference > state.numCapturingParens) {
    state.raise("Invalid escape");
  }
  for (var i = 0, list4 = state.backReferenceNames; i < list4.length; i += 1) {
    var name2 = list4[i];
    if (!state.groupNames[name2]) {
      state.raise("Invalid named capture referenced");
    }
  }
};
pp$1.regexp_disjunction = function(state) {
  var trackDisjunction = this.options.ecmaVersion >= 16;
  if (trackDisjunction) {
    state.branchID = new BranchID(state.branchID, null);
  }
  this.regexp_alternative(state);
  while (state.eat(
    124
    /* | */
  )) {
    if (trackDisjunction) {
      state.branchID = state.branchID.sibling();
    }
    this.regexp_alternative(state);
  }
  if (trackDisjunction) {
    state.branchID = state.branchID.parent;
  }
  if (this.regexp_eatQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }
  if (state.eat(
    123
    /* { */
  )) {
    state.raise("Lone quantifier brackets");
  }
};
pp$1.regexp_alternative = function(state) {
  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
  }
};
pp$1.regexp_eatTerm = function(state) {
  if (this.regexp_eatAssertion(state)) {
    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
      if (state.switchU) {
        state.raise("Invalid quantifier");
      }
    }
    return true;
  }
  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
    this.regexp_eatQuantifier(state);
    return true;
  }
  return false;
};
pp$1.regexp_eatAssertion = function(state) {
  var start2 = state.pos;
  state.lastAssertionIsQuantifiable = false;
  if (state.eat(
    94
    /* ^ */
  ) || state.eat(
    36
    /* $ */
  )) {
    return true;
  }
  if (state.eat(
    92
    /* \ */
  )) {
    if (state.eat(
      66
      /* B */
    ) || state.eat(
      98
      /* b */
    )) {
      return true;
    }
    state.pos = start2;
  }
  if (state.eat(
    40
    /* ( */
  ) && state.eat(
    63
    /* ? */
  )) {
    var lookbehind = false;
    if (this.options.ecmaVersion >= 9) {
      lookbehind = state.eat(
        60
        /* < */
      );
    }
    if (state.eat(
      61
      /* = */
    ) || state.eat(
      33
      /* ! */
    )) {
      this.regexp_disjunction(state);
      if (!state.eat(
        41
        /* ) */
      )) {
        state.raise("Unterminated group");
      }
      state.lastAssertionIsQuantifiable = !lookbehind;
      return true;
    }
  }
  state.pos = start2;
  return false;
};
pp$1.regexp_eatQuantifier = function(state, noError) {
  if (noError === void 0) noError = false;
  if (this.regexp_eatQuantifierPrefix(state, noError)) {
    state.eat(
      63
      /* ? */
    );
    return true;
  }
  return false;
};
pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
  return state.eat(
    42
    /* * */
  ) || state.eat(
    43
    /* + */
  ) || state.eat(
    63
    /* ? */
  ) || this.regexp_eatBracedQuantifier(state, noError);
};
pp$1.regexp_eatBracedQuantifier = function(state, noError) {
  var start2 = state.pos;
  if (state.eat(
    123
    /* { */
  )) {
    var min = 0, max2 = -1;
    if (this.regexp_eatDecimalDigits(state)) {
      min = state.lastIntValue;
      if (state.eat(
        44
        /* , */
      ) && this.regexp_eatDecimalDigits(state)) {
        max2 = state.lastIntValue;
      }
      if (state.eat(
        125
        /* } */
      )) {
        if (max2 !== -1 && max2 < min && !noError) {
          state.raise("numbers out of order in {} quantifier");
        }
        return true;
      }
    }
    if (state.switchU && !noError) {
      state.raise("Incomplete quantifier");
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatAtom = function(state) {
  return this.regexp_eatPatternCharacters(state) || state.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
};
pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
  var start2 = state.pos;
  if (state.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatAtomEscape(state)) {
      return true;
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatUncapturingGroup = function(state) {
  var start2 = state.pos;
  if (state.eat(
    40
    /* ( */
  )) {
    if (state.eat(
      63
      /* ? */
    ) && state.eat(
      58
      /* : */
    )) {
      this.regexp_disjunction(state);
      if (state.eat(
        41
        /* ) */
      )) {
        return true;
      }
      state.raise("Unterminated group");
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatCapturingGroup = function(state) {
  if (state.eat(
    40
    /* ( */
  )) {
    if (this.options.ecmaVersion >= 9) {
      this.regexp_groupSpecifier(state);
    } else if (state.current() === 63) {
      state.raise("Invalid group");
    }
    this.regexp_disjunction(state);
    if (state.eat(
      41
      /* ) */
    )) {
      state.numCapturingParens += 1;
      return true;
    }
    state.raise("Unterminated group");
  }
  return false;
};
pp$1.regexp_eatExtendedAtom = function(state) {
  return state.eat(
    46
    /* . */
  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
};
pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
  if (this.regexp_eatBracedQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }
  return false;
};
pp$1.regexp_eatSyntaxCharacter = function(state) {
  var ch = state.current();
  if (isSyntaxCharacter(ch)) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
function isSyntaxCharacter(ch) {
  return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
}
pp$1.regexp_eatPatternCharacters = function(state) {
  var start2 = state.pos;
  var ch = 0;
  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
    state.advance();
  }
  return state.pos !== start2;
};
pp$1.regexp_eatExtendedPatternCharacter = function(state) {
  var ch = state.current();
  if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_groupSpecifier = function(state) {
  if (state.eat(
    63
    /* ? */
  )) {
    if (!this.regexp_eatGroupName(state)) {
      state.raise("Invalid group");
    }
    var trackDisjunction = this.options.ecmaVersion >= 16;
    var known = state.groupNames[state.lastStringValue];
    if (known) {
      if (trackDisjunction) {
        for (var i = 0, list4 = known; i < list4.length; i += 1) {
          var altID = list4[i];
          if (!altID.separatedFrom(state.branchID)) {
            state.raise("Duplicate capture group name");
          }
        }
      } else {
        state.raise("Duplicate capture group name");
      }
    }
    if (trackDisjunction) {
      (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID);
    } else {
      state.groupNames[state.lastStringValue] = true;
    }
  }
};
pp$1.regexp_eatGroupName = function(state) {
  state.lastStringValue = "";
  if (state.eat(
    60
    /* < */
  )) {
    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(
      62
      /* > */
    )) {
      return true;
    }
    state.raise("Invalid capture group name");
  }
  return false;
};
pp$1.regexp_eatRegExpIdentifierName = function(state) {
  state.lastStringValue = "";
  if (this.regexp_eatRegExpIdentifierStart(state)) {
    state.lastStringValue += codePointToString(state.lastIntValue);
    while (this.regexp_eatRegExpIdentifierPart(state)) {
      state.lastStringValue += codePointToString(state.lastIntValue);
    }
    return true;
  }
  return false;
};
pp$1.regexp_eatRegExpIdentifierStart = function(state) {
  var start2 = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);
  if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }
  if (isRegExpIdentifierStart(ch)) {
    state.lastIntValue = ch;
    return true;
  }
  state.pos = start2;
  return false;
};
function isRegExpIdentifierStart(ch) {
  return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
}
pp$1.regexp_eatRegExpIdentifierPart = function(state) {
  var start2 = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);
  if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }
  if (isRegExpIdentifierPart(ch)) {
    state.lastIntValue = ch;
    return true;
  }
  state.pos = start2;
  return false;
};
function isRegExpIdentifierPart(ch) {
  return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
}
pp$1.regexp_eatAtomEscape = function(state) {
  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
    return true;
  }
  if (state.switchU) {
    if (state.current() === 99) {
      state.raise("Invalid unicode escape");
    }
    state.raise("Invalid escape");
  }
  return false;
};
pp$1.regexp_eatBackReference = function(state) {
  var start2 = state.pos;
  if (this.regexp_eatDecimalEscape(state)) {
    var n = state.lastIntValue;
    if (state.switchU) {
      if (n > state.maxBackReference) {
        state.maxBackReference = n;
      }
      return true;
    }
    if (n <= state.numCapturingParens) {
      return true;
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatKGroupName = function(state) {
  if (state.eat(
    107
    /* k */
  )) {
    if (this.regexp_eatGroupName(state)) {
      state.backReferenceNames.push(state.lastStringValue);
      return true;
    }
    state.raise("Invalid named reference");
  }
  return false;
};
pp$1.regexp_eatCharacterEscape = function(state) {
  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
};
pp$1.regexp_eatCControlLetter = function(state) {
  var start2 = state.pos;
  if (state.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatControlLetter(state)) {
      return true;
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatZero = function(state) {
  if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
    state.lastIntValue = 0;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatControlEscape = function(state) {
  var ch = state.current();
  if (ch === 116) {
    state.lastIntValue = 9;
    state.advance();
    return true;
  }
  if (ch === 110) {
    state.lastIntValue = 10;
    state.advance();
    return true;
  }
  if (ch === 118) {
    state.lastIntValue = 11;
    state.advance();
    return true;
  }
  if (ch === 102) {
    state.lastIntValue = 12;
    state.advance();
    return true;
  }
  if (ch === 114) {
    state.lastIntValue = 13;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatControlLetter = function(state) {
  var ch = state.current();
  if (isControlLetter(ch)) {
    state.lastIntValue = ch % 32;
    state.advance();
    return true;
  }
  return false;
};
function isControlLetter(ch) {
  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
  if (forceU === void 0) forceU = false;
  var start2 = state.pos;
  var switchU = forceU || state.switchU;
  if (state.eat(
    117
    /* u */
  )) {
    if (this.regexp_eatFixedHexDigits(state, 4)) {
      var lead = state.lastIntValue;
      if (switchU && lead >= 55296 && lead <= 56319) {
        var leadSurrogateEnd = state.pos;
        if (state.eat(
          92
          /* \ */
        ) && state.eat(
          117
          /* u */
        ) && this.regexp_eatFixedHexDigits(state, 4)) {
          var trail2 = state.lastIntValue;
          if (trail2 >= 56320 && trail2 <= 57343) {
            state.lastIntValue = (lead - 55296) * 1024 + (trail2 - 56320) + 65536;
            return true;
          }
        }
        state.pos = leadSurrogateEnd;
        state.lastIntValue = lead;
      }
      return true;
    }
    if (switchU && state.eat(
      123
      /* { */
    ) && this.regexp_eatHexDigits(state) && state.eat(
      125
      /* } */
    ) && isValidUnicode(state.lastIntValue)) {
      return true;
    }
    if (switchU) {
      state.raise("Invalid unicode escape");
    }
    state.pos = start2;
  }
  return false;
};
function isValidUnicode(ch) {
  return ch >= 0 && ch <= 1114111;
}
pp$1.regexp_eatIdentityEscape = function(state) {
  if (state.switchU) {
    if (this.regexp_eatSyntaxCharacter(state)) {
      return true;
    }
    if (state.eat(
      47
      /* / */
    )) {
      state.lastIntValue = 47;
      return true;
    }
    return false;
  }
  var ch = state.current();
  if (ch !== 99 && (!state.switchN || ch !== 107)) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatDecimalEscape = function(state) {
  state.lastIntValue = 0;
  var ch = state.current();
  if (ch >= 49 && ch <= 57) {
    do {
      state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
      state.advance();
    } while ((ch = state.current()) >= 48 && ch <= 57);
    return true;
  }
  return false;
};
var CharSetNone = 0;
var CharSetOk = 1;
var CharSetString = 2;
pp$1.regexp_eatCharacterClassEscape = function(state) {
  var ch = state.current();
  if (isCharacterClassEscape(ch)) {
    state.lastIntValue = -1;
    state.advance();
    return CharSetOk;
  }
  var negate = false;
  if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 80) || ch === 112)) {
    state.lastIntValue = -1;
    state.advance();
    var result;
    if (state.eat(
      123
      /* { */
    ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(
      125
      /* } */
    )) {
      if (negate && result === CharSetString) {
        state.raise("Invalid property name");
      }
      return result;
    }
    state.raise("Invalid property name");
  }
  return CharSetNone;
};
function isCharacterClassEscape(ch) {
  return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
}
pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
  var start2 = state.pos;
  if (this.regexp_eatUnicodePropertyName(state) && state.eat(
    61
    /* = */
  )) {
    var name2 = state.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(state)) {
      var value = state.lastStringValue;
      this.regexp_validateUnicodePropertyNameAndValue(state, name2, value);
      return CharSetOk;
    }
  }
  state.pos = start2;
  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
    var nameOrValue = state.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
  }
  return CharSetNone;
};
pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name2, value) {
  if (!hasOwn(state.unicodeProperties.nonBinary, name2)) {
    state.raise("Invalid property name");
  }
  if (!state.unicodeProperties.nonBinary[name2].test(value)) {
    state.raise("Invalid property value");
  }
};
pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
  if (state.unicodeProperties.binary.test(nameOrValue)) {
    return CharSetOk;
  }
  if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) {
    return CharSetString;
  }
  state.raise("Invalid property name");
};
pp$1.regexp_eatUnicodePropertyName = function(state) {
  var ch = 0;
  state.lastStringValue = "";
  while (isUnicodePropertyNameCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }
  return state.lastStringValue !== "";
};
function isUnicodePropertyNameCharacter(ch) {
  return isControlLetter(ch) || ch === 95;
}
pp$1.regexp_eatUnicodePropertyValue = function(state) {
  var ch = 0;
  state.lastStringValue = "";
  while (isUnicodePropertyValueCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }
  return state.lastStringValue !== "";
};
function isUnicodePropertyValueCharacter(ch) {
  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
}
pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
  return this.regexp_eatUnicodePropertyValue(state);
};
pp$1.regexp_eatCharacterClass = function(state) {
  if (state.eat(
    91
    /* [ */
  )) {
    var negate = state.eat(
      94
      /* ^ */
    );
    var result = this.regexp_classContents(state);
    if (!state.eat(
      93
      /* ] */
    )) {
      state.raise("Unterminated character class");
    }
    if (negate && result === CharSetString) {
      state.raise("Negated character class may contain strings");
    }
    return true;
  }
  return false;
};
pp$1.regexp_classContents = function(state) {
  if (state.current() === 93) {
    return CharSetOk;
  }
  if (state.switchV) {
    return this.regexp_classSetExpression(state);
  }
  this.regexp_nonEmptyClassRanges(state);
  return CharSetOk;
};
pp$1.regexp_nonEmptyClassRanges = function(state) {
  while (this.regexp_eatClassAtom(state)) {
    var left = state.lastIntValue;
    if (state.eat(
      45
      /* - */
    ) && this.regexp_eatClassAtom(state)) {
      var right = state.lastIntValue;
      if (state.switchU && (left === -1 || right === -1)) {
        state.raise("Invalid character class");
      }
      if (left !== -1 && right !== -1 && left > right) {
        state.raise("Range out of order in character class");
      }
    }
  }
};
pp$1.regexp_eatClassAtom = function(state) {
  var start2 = state.pos;
  if (state.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatClassEscape(state)) {
      return true;
    }
    if (state.switchU) {
      var ch$1 = state.current();
      if (ch$1 === 99 || isOctalDigit(ch$1)) {
        state.raise("Invalid class escape");
      }
      state.raise("Invalid escape");
    }
    state.pos = start2;
  }
  var ch = state.current();
  if (ch !== 93) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatClassEscape = function(state) {
  var start2 = state.pos;
  if (state.eat(
    98
    /* b */
  )) {
    state.lastIntValue = 8;
    return true;
  }
  if (state.switchU && state.eat(
    45
    /* - */
  )) {
    state.lastIntValue = 45;
    return true;
  }
  if (!state.switchU && state.eat(
    99
    /* c */
  )) {
    if (this.regexp_eatClassControlLetter(state)) {
      return true;
    }
    state.pos = start2;
  }
  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
};
pp$1.regexp_classSetExpression = function(state) {
  var result = CharSetOk, subResult;
  if (this.regexp_eatClassSetRange(state)) ;
  else if (subResult = this.regexp_eatClassSetOperand(state)) {
    if (subResult === CharSetString) {
      result = CharSetString;
    }
    var start2 = state.pos;
    while (state.eatChars(
      [38, 38]
      /* && */
    )) {
      if (state.current() !== 38 && (subResult = this.regexp_eatClassSetOperand(state))) {
        if (subResult !== CharSetString) {
          result = CharSetOk;
        }
        continue;
      }
      state.raise("Invalid character in character class");
    }
    if (start2 !== state.pos) {
      return result;
    }
    while (state.eatChars(
      [45, 45]
      /* -- */
    )) {
      if (this.regexp_eatClassSetOperand(state)) {
        continue;
      }
      state.raise("Invalid character in character class");
    }
    if (start2 !== state.pos) {
      return result;
    }
  } else {
    state.raise("Invalid character in character class");
  }
  for (; ; ) {
    if (this.regexp_eatClassSetRange(state)) {
      continue;
    }
    subResult = this.regexp_eatClassSetOperand(state);
    if (!subResult) {
      return result;
    }
    if (subResult === CharSetString) {
      result = CharSetString;
    }
  }
};
pp$1.regexp_eatClassSetRange = function(state) {
  var start2 = state.pos;
  if (this.regexp_eatClassSetCharacter(state)) {
    var left = state.lastIntValue;
    if (state.eat(
      45
      /* - */
    ) && this.regexp_eatClassSetCharacter(state)) {
      var right = state.lastIntValue;
      if (left !== -1 && right !== -1 && left > right) {
        state.raise("Range out of order in character class");
      }
      return true;
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatClassSetOperand = function(state) {
  if (this.regexp_eatClassSetCharacter(state)) {
    return CharSetOk;
  }
  return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
};
pp$1.regexp_eatNestedClass = function(state) {
  var start2 = state.pos;
  if (state.eat(
    91
    /* [ */
  )) {
    var negate = state.eat(
      94
      /* ^ */
    );
    var result = this.regexp_classContents(state);
    if (state.eat(
      93
      /* ] */
    )) {
      if (negate && result === CharSetString) {
        state.raise("Negated character class may contain strings");
      }
      return result;
    }
    state.pos = start2;
  }
  if (state.eat(
    92
    /* \ */
  )) {
    var result$1 = this.regexp_eatCharacterClassEscape(state);
    if (result$1) {
      return result$1;
    }
    state.pos = start2;
  }
  return null;
};
pp$1.regexp_eatClassStringDisjunction = function(state) {
  var start2 = state.pos;
  if (state.eatChars(
    [92, 113]
    /* \q */
  )) {
    if (state.eat(
      123
      /* { */
    )) {
      var result = this.regexp_classStringDisjunctionContents(state);
      if (state.eat(
        125
        /* } */
      )) {
        return result;
      }
    } else {
      state.raise("Invalid escape");
    }
    state.pos = start2;
  }
  return null;
};
pp$1.regexp_classStringDisjunctionContents = function(state) {
  var result = this.regexp_classString(state);
  while (state.eat(
    124
    /* | */
  )) {
    if (this.regexp_classString(state) === CharSetString) {
      result = CharSetString;
    }
  }
  return result;
};
pp$1.regexp_classString = function(state) {
  var count = 0;
  while (this.regexp_eatClassSetCharacter(state)) {
    count++;
  }
  return count === 1 ? CharSetOk : CharSetString;
};
pp$1.regexp_eatClassSetCharacter = function(state) {
  var start2 = state.pos;
  if (state.eat(
    92
    /* \ */
  )) {
    if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) {
      return true;
    }
    if (state.eat(
      98
      /* b */
    )) {
      state.lastIntValue = 8;
      return true;
    }
    state.pos = start2;
    return false;
  }
  var ch = state.current();
  if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) {
    return false;
  }
  if (isClassSetSyntaxCharacter(ch)) {
    return false;
  }
  state.advance();
  state.lastIntValue = ch;
  return true;
};
function isClassSetReservedDoublePunctuatorCharacter(ch) {
  return ch === 33 || ch >= 35 && ch <= 38 || ch >= 42 && ch <= 44 || ch === 46 || ch >= 58 && ch <= 64 || ch === 94 || ch === 96 || ch === 126;
}
function isClassSetSyntaxCharacter(ch) {
  return ch === 40 || ch === 41 || ch === 45 || ch === 47 || ch >= 91 && ch <= 93 || ch >= 123 && ch <= 125;
}
pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
  var ch = state.current();
  if (isClassSetReservedPunctuator(ch)) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
function isClassSetReservedPunctuator(ch) {
  return ch === 33 || ch === 35 || ch === 37 || ch === 38 || ch === 44 || ch === 45 || ch >= 58 && ch <= 62 || ch === 64 || ch === 96 || ch === 126;
}
pp$1.regexp_eatClassControlLetter = function(state) {
  var ch = state.current();
  if (isDecimalDigit(ch) || ch === 95) {
    state.lastIntValue = ch % 32;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatHexEscapeSequence = function(state) {
  var start2 = state.pos;
  if (state.eat(
    120
    /* x */
  )) {
    if (this.regexp_eatFixedHexDigits(state, 2)) {
      return true;
    }
    if (state.switchU) {
      state.raise("Invalid escape");
    }
    state.pos = start2;
  }
  return false;
};
pp$1.regexp_eatDecimalDigits = function(state) {
  var start2 = state.pos;
  var ch = 0;
  state.lastIntValue = 0;
  while (isDecimalDigit(ch = state.current())) {
    state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
    state.advance();
  }
  return state.pos !== start2;
};
function isDecimalDigit(ch) {
  return ch >= 48 && ch <= 57;
}
pp$1.regexp_eatHexDigits = function(state) {
  var start2 = state.pos;
  var ch = 0;
  state.lastIntValue = 0;
  while (isHexDigit(ch = state.current())) {
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }
  return state.pos !== start2;
};
function isHexDigit(ch) {
  return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
}
function hexToInt(ch) {
  if (ch >= 65 && ch <= 70) {
    return 10 + (ch - 65);
  }
  if (ch >= 97 && ch <= 102) {
    return 10 + (ch - 97);
  }
  return ch - 48;
}
pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
  if (this.regexp_eatOctalDigit(state)) {
    var n1 = state.lastIntValue;
    if (this.regexp_eatOctalDigit(state)) {
      var n2 = state.lastIntValue;
      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
      } else {
        state.lastIntValue = n1 * 8 + n2;
      }
    } else {
      state.lastIntValue = n1;
    }
    return true;
  }
  return false;
};
pp$1.regexp_eatOctalDigit = function(state) {
  var ch = state.current();
  if (isOctalDigit(ch)) {
    state.lastIntValue = ch - 48;
    state.advance();
    return true;
  }
  state.lastIntValue = 0;
  return false;
};
function isOctalDigit(ch) {
  return ch >= 48 && ch <= 55;
}
pp$1.regexp_eatFixedHexDigits = function(state, length) {
  var start2 = state.pos;
  state.lastIntValue = 0;
  for (var i = 0; i < length; ++i) {
    var ch = state.current();
    if (!isHexDigit(ch)) {
      state.pos = start2;
      return false;
    }
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }
  return true;
};
var Token = function Token2(p) {
  this.type = p.type;
  this.value = p.value;
  this.start = p.start;
  this.end = p.end;
  if (p.options.locations) {
    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
  }
  if (p.options.ranges) {
    this.range = [p.start, p.end];
  }
};
var pp = Parser.prototype;
pp.next = function(ignoreEscapeSequenceInKeyword) {
  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
  }
  if (this.options.onToken) {
    this.options.onToken(new Token(this));
  }
  this.lastTokEnd = this.end;
  this.lastTokStart = this.start;
  this.lastTokEndLoc = this.endLoc;
  this.lastTokStartLoc = this.startLoc;
  this.nextToken();
};
pp.getToken = function() {
  this.next();
  return new Token(this);
};
if (typeof Symbol !== "undefined") {
  pp[Symbol.iterator] = function() {
    var this$1$1 = this;
    return {
      next: function() {
        var token = this$1$1.getToken();
        return {
          done: token.type === types$1.eof,
          value: token
        };
      }
    };
  };
}
pp.nextToken = function() {
  var curContext = this.curContext();
  if (!curContext || !curContext.preserveSpace) {
    this.skipSpace();
  }
  this.start = this.pos;
  if (this.options.locations) {
    this.startLoc = this.curPosition();
  }
  if (this.pos >= this.input.length) {
    return this.finishToken(types$1.eof);
  }
  if (curContext.override) {
    return curContext.override(this);
  } else {
    this.readToken(this.fullCharCodeAtPos());
  }
};
pp.readToken = function(code4) {
  if (isIdentifierStart(code4, this.options.ecmaVersion >= 6) || code4 === 92) {
    return this.readWord();
  }
  return this.getTokenFromCode(code4);
};
pp.fullCharCodeAtPos = function() {
  var code4 = this.input.charCodeAt(this.pos);
  if (code4 <= 55295 || code4 >= 56320) {
    return code4;
  }
  var next = this.input.charCodeAt(this.pos + 1);
  return next <= 56319 || next >= 57344 ? code4 : (code4 << 10) + next - 56613888;
};
pp.skipBlockComment = function() {
  var startLoc = this.options.onComment && this.curPosition();
  var start2 = this.pos, end = this.input.indexOf("*/", this.pos += 2);
  if (end === -1) {
    this.raise(this.pos - 2, "Unterminated comment");
  }
  this.pos = end + 2;
  if (this.options.locations) {
    for (var nextBreak = void 0, pos = start2; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) {
      ++this.curLine;
      pos = this.lineStart = nextBreak;
    }
  }
  if (this.options.onComment) {
    this.options.onComment(
      true,
      this.input.slice(start2 + 2, end),
      start2,
      this.pos,
      startLoc,
      this.curPosition()
    );
  }
};
pp.skipLineComment = function(startSkip) {
  var start2 = this.pos;
  var startLoc = this.options.onComment && this.curPosition();
  var ch = this.input.charCodeAt(this.pos += startSkip);
  while (this.pos < this.input.length && !isNewLine(ch)) {
    ch = this.input.charCodeAt(++this.pos);
  }
  if (this.options.onComment) {
    this.options.onComment(
      false,
      this.input.slice(start2 + startSkip, this.pos),
      start2,
      this.pos,
      startLoc,
      this.curPosition()
    );
  }
};
pp.skipSpace = function() {
  loop: while (this.pos < this.input.length) {
    var ch = this.input.charCodeAt(this.pos);
    switch (ch) {
      case 32:
      case 160:
        ++this.pos;
        break;
      case 13:
        if (this.input.charCodeAt(this.pos + 1) === 10) {
          ++this.pos;
        }
      case 10:
      case 8232:
      case 8233:
        ++this.pos;
        if (this.options.locations) {
          ++this.curLine;
          this.lineStart = this.pos;
        }
        break;
      case 47:
        switch (this.input.charCodeAt(this.pos + 1)) {
          case 42:
            this.skipBlockComment();
            break;
          case 47:
            this.skipLineComment(2);
            break;
          default:
            break loop;
        }
        break;
      default:
        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
          ++this.pos;
        } else {
          break loop;
        }
    }
  }
};
pp.finishToken = function(type, val) {
  this.end = this.pos;
  if (this.options.locations) {
    this.endLoc = this.curPosition();
  }
  var prevType = this.type;
  this.type = type;
  this.value = val;
  this.updateContext(prevType);
};
pp.readToken_dot = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next >= 48 && next <= 57) {
    return this.readNumber(true);
  }
  var next2 = this.input.charCodeAt(this.pos + 2);
  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
    this.pos += 3;
    return this.finishToken(types$1.ellipsis);
  } else {
    ++this.pos;
    return this.finishToken(types$1.dot);
  }
};
pp.readToken_slash = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (this.exprAllowed) {
    ++this.pos;
    return this.readRegexp();
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(types$1.slash, 1);
};
pp.readToken_mult_modulo_exp = function(code4) {
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  var tokentype = code4 === 42 ? types$1.star : types$1.modulo;
  if (this.options.ecmaVersion >= 7 && code4 === 42 && next === 42) {
    ++size;
    tokentype = types$1.starstar;
    next = this.input.charCodeAt(this.pos + 2);
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, size + 1);
  }
  return this.finishOp(tokentype, size);
};
pp.readToken_pipe_amp = function(code4) {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code4) {
    if (this.options.ecmaVersion >= 12) {
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (next2 === 61) {
        return this.finishOp(types$1.assign, 3);
      }
    }
    return this.finishOp(code4 === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(code4 === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
};
pp.readToken_caret = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(types$1.bitwiseXOR, 1);
};
pp.readToken_plus_min = function(code4) {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code4) {
    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
      this.skipLineComment(3);
      this.skipSpace();
      return this.nextToken();
    }
    return this.finishOp(types$1.incDec, 2);
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(types$1.plusMin, 1);
};
pp.readToken_lt_gt = function(code4) {
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  if (next === code4) {
    size = code4 === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
    if (this.input.charCodeAt(this.pos + size) === 61) {
      return this.finishOp(types$1.assign, size + 1);
    }
    return this.finishOp(types$1.bitShift, size);
  }
  if (next === 33 && code4 === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
    this.skipLineComment(4);
    this.skipSpace();
    return this.nextToken();
  }
  if (next === 61) {
    size = 2;
  }
  return this.finishOp(types$1.relational, size);
};
pp.readToken_eq_excl = function(code4) {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) {
    return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
  }
  if (code4 === 61 && next === 62 && this.options.ecmaVersion >= 6) {
    this.pos += 2;
    return this.finishToken(types$1.arrow);
  }
  return this.finishOp(code4 === 61 ? types$1.eq : types$1.prefix, 1);
};
pp.readToken_question = function() {
  var ecmaVersion = this.options.ecmaVersion;
  if (ecmaVersion >= 11) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 46) {
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (next2 < 48 || next2 > 57) {
        return this.finishOp(types$1.questionDot, 2);
      }
    }
    if (next === 63) {
      if (ecmaVersion >= 12) {
        var next2$1 = this.input.charCodeAt(this.pos + 2);
        if (next2$1 === 61) {
          return this.finishOp(types$1.assign, 3);
        }
      }
      return this.finishOp(types$1.coalesce, 2);
    }
  }
  return this.finishOp(types$1.question, 1);
};
pp.readToken_numberSign = function() {
  var ecmaVersion = this.options.ecmaVersion;
  var code4 = 35;
  if (ecmaVersion >= 13) {
    ++this.pos;
    code4 = this.fullCharCodeAtPos();
    if (isIdentifierStart(code4, true) || code4 === 92) {
      return this.finishToken(types$1.privateId, this.readWord1());
    }
  }
  this.raise(this.pos, "Unexpected character '" + codePointToString(code4) + "'");
};
pp.getTokenFromCode = function(code4) {
  switch (code4) {
    case 46:
      return this.readToken_dot();
    case 40:
      ++this.pos;
      return this.finishToken(types$1.parenL);
    case 41:
      ++this.pos;
      return this.finishToken(types$1.parenR);
    case 59:
      ++this.pos;
      return this.finishToken(types$1.semi);
    case 44:
      ++this.pos;
      return this.finishToken(types$1.comma);
    case 91:
      ++this.pos;
      return this.finishToken(types$1.bracketL);
    case 93:
      ++this.pos;
      return this.finishToken(types$1.bracketR);
    case 123:
      ++this.pos;
      return this.finishToken(types$1.braceL);
    case 125:
      ++this.pos;
      return this.finishToken(types$1.braceR);
    case 58:
      ++this.pos;
      return this.finishToken(types$1.colon);
    case 96:
      if (this.options.ecmaVersion < 6) {
        break;
      }
      ++this.pos;
      return this.finishToken(types$1.backQuote);
    case 48:
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 120 || next === 88) {
        return this.readRadixNumber(16);
      }
      if (this.options.ecmaVersion >= 6) {
        if (next === 111 || next === 79) {
          return this.readRadixNumber(8);
        }
        if (next === 98 || next === 66) {
          return this.readRadixNumber(2);
        }
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(false);
    case 34:
    case 39:
      return this.readString(code4);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(code4);
    case 124:
    case 38:
      return this.readToken_pipe_amp(code4);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(code4);
    case 60:
    case 62:
      return this.readToken_lt_gt(code4);
    case 61:
    case 33:
      return this.readToken_eq_excl(code4);
    case 63:
      return this.readToken_question();
    case 126:
      return this.finishOp(types$1.prefix, 1);
    case 35:
      return this.readToken_numberSign();
  }
  this.raise(this.pos, "Unexpected character '" + codePointToString(code4) + "'");
};
pp.finishOp = function(type, size) {
  var str = this.input.slice(this.pos, this.pos + size);
  this.pos += size;
  return this.finishToken(type, str);
};
pp.readRegexp = function() {
  var escaped, inClass, start2 = this.pos;
  for (; ; ) {
    if (this.pos >= this.input.length) {
      this.raise(start2, "Unterminated regular expression");
    }
    var ch = this.input.charAt(this.pos);
    if (lineBreak.test(ch)) {
      this.raise(start2, "Unterminated regular expression");
    }
    if (!escaped) {
      if (ch === "[") {
        inClass = true;
      } else if (ch === "]" && inClass) {
        inClass = false;
      } else if (ch === "/" && !inClass) {
        break;
      }
      escaped = ch === "\\";
    } else {
      escaped = false;
    }
    ++this.pos;
  }
  var pattern = this.input.slice(start2, this.pos);
  ++this.pos;
  var flagsStart = this.pos;
  var flags = this.readWord1();
  if (this.containsEsc) {
    this.unexpected(flagsStart);
  }
  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
  state.reset(start2, pattern, flags);
  this.validateRegExpFlags(state);
  this.validateRegExpPattern(state);
  var value = null;
  try {
    value = new RegExp(pattern, flags);
  } catch (e) {
  }
  return this.finishToken(types$1.regexp, { pattern, flags, value });
};
pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
  var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
  var start2 = this.pos, total = 0, lastCode = 0;
  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
    var code4 = this.input.charCodeAt(this.pos), val = void 0;
    if (allowSeparators && code4 === 95) {
      if (isLegacyOctalNumericLiteral) {
        this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
      }
      if (lastCode === 95) {
        this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
      }
      if (i === 0) {
        this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
      }
      lastCode = code4;
      continue;
    }
    if (code4 >= 97) {
      val = code4 - 97 + 10;
    } else if (code4 >= 65) {
      val = code4 - 65 + 10;
    } else if (code4 >= 48 && code4 <= 57) {
      val = code4 - 48;
    } else {
      val = Infinity;
    }
    if (val >= radix) {
      break;
    }
    lastCode = code4;
    total = total * radix + val;
  }
  if (allowSeparators && lastCode === 95) {
    this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
  }
  if (this.pos === start2 || len != null && this.pos - start2 !== len) {
    return null;
  }
  return total;
};
function stringToNumber(str, isLegacyOctalNumericLiteral) {
  if (isLegacyOctalNumericLiteral) {
    return parseInt(str, 8);
  }
  return parseFloat(str.replace(/_/g, ""));
}
function stringToBigInt(str) {
  if (typeof BigInt !== "function") {
    return null;
  }
  return BigInt(str.replace(/_/g, ""));
}
pp.readRadixNumber = function(radix) {
  var start2 = this.pos;
  this.pos += 2;
  var val = this.readInt(radix);
  if (val == null) {
    this.raise(this.start + 2, "Expected number in radix " + radix);
  }
  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
    val = stringToBigInt(this.input.slice(start2, this.pos));
    ++this.pos;
  } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
    this.raise(this.pos, "Identifier directly after number");
  }
  return this.finishToken(types$1.num, val);
};
pp.readNumber = function(startsWithDot) {
  var start2 = this.pos;
  if (!startsWithDot && this.readInt(10, void 0, true) === null) {
    this.raise(start2, "Invalid number");
  }
  var octal = this.pos - start2 >= 2 && this.input.charCodeAt(start2) === 48;
  if (octal && this.strict) {
    this.raise(start2, "Invalid number");
  }
  var next = this.input.charCodeAt(this.pos);
  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
    var val$1 = stringToBigInt(this.input.slice(start2, this.pos));
    ++this.pos;
    if (isIdentifierStart(this.fullCharCodeAtPos())) {
      this.raise(this.pos, "Identifier directly after number");
    }
    return this.finishToken(types$1.num, val$1);
  }
  if (octal && /[89]/.test(this.input.slice(start2, this.pos))) {
    octal = false;
  }
  if (next === 46 && !octal) {
    ++this.pos;
    this.readInt(10);
    next = this.input.charCodeAt(this.pos);
  }
  if ((next === 69 || next === 101) && !octal) {
    next = this.input.charCodeAt(++this.pos);
    if (next === 43 || next === 45) {
      ++this.pos;
    }
    if (this.readInt(10) === null) {
      this.raise(start2, "Invalid number");
    }
  }
  if (isIdentifierStart(this.fullCharCodeAtPos())) {
    this.raise(this.pos, "Identifier directly after number");
  }
  var val = stringToNumber(this.input.slice(start2, this.pos), octal);
  return this.finishToken(types$1.num, val);
};
pp.readCodePoint = function() {
  var ch = this.input.charCodeAt(this.pos), code4;
  if (ch === 123) {
    if (this.options.ecmaVersion < 6) {
      this.unexpected();
    }
    var codePos = ++this.pos;
    code4 = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
    ++this.pos;
    if (code4 > 1114111) {
      this.invalidStringToken(codePos, "Code point out of bounds");
    }
  } else {
    code4 = this.readHexChar(4);
  }
  return code4;
};
pp.readString = function(quote) {
  var out = "", chunkStart = ++this.pos;
  for (; ; ) {
    if (this.pos >= this.input.length) {
      this.raise(this.start, "Unterminated string constant");
    }
    var ch = this.input.charCodeAt(this.pos);
    if (ch === quote) {
      break;
    }
    if (ch === 92) {
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(false);
      chunkStart = this.pos;
    } else if (ch === 8232 || ch === 8233) {
      if (this.options.ecmaVersion < 10) {
        this.raise(this.start, "Unterminated string constant");
      }
      ++this.pos;
      if (this.options.locations) {
        this.curLine++;
        this.lineStart = this.pos;
      }
    } else {
      if (isNewLine(ch)) {
        this.raise(this.start, "Unterminated string constant");
      }
      ++this.pos;
    }
  }
  out += this.input.slice(chunkStart, this.pos++);
  return this.finishToken(types$1.string, out);
};
var INVALID_TEMPLATE_ESCAPE_ERROR = {};
pp.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (err) {
    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
      this.readInvalidTemplateToken();
    } else {
      throw err;
    }
  }
  this.inTemplateElement = false;
};
pp.invalidStringToken = function(position3, message) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
    throw INVALID_TEMPLATE_ESCAPE_ERROR;
  } else {
    this.raise(position3, message);
  }
};
pp.readTmplToken = function() {
  var out = "", chunkStart = this.pos;
  for (; ; ) {
    if (this.pos >= this.input.length) {
      this.raise(this.start, "Unterminated template");
    }
    var ch = this.input.charCodeAt(this.pos);
    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
        if (ch === 36) {
          this.pos += 2;
          return this.finishToken(types$1.dollarBraceL);
        } else {
          ++this.pos;
          return this.finishToken(types$1.backQuote);
        }
      }
      out += this.input.slice(chunkStart, this.pos);
      return this.finishToken(types$1.template, out);
    }
    if (ch === 92) {
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(true);
      chunkStart = this.pos;
    } else if (isNewLine(ch)) {
      out += this.input.slice(chunkStart, this.pos);
      ++this.pos;
      switch (ch) {
        case 13:
          if (this.input.charCodeAt(this.pos) === 10) {
            ++this.pos;
          }
        case 10:
          out += "\n";
          break;
        default:
          out += String.fromCharCode(ch);
          break;
      }
      if (this.options.locations) {
        ++this.curLine;
        this.lineStart = this.pos;
      }
      chunkStart = this.pos;
    } else {
      ++this.pos;
    }
  }
};
pp.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++) {
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;
      case "$":
        if (this.input[this.pos + 1] !== "{") {
          break;
        }
      case "`":
        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
      case "\r":
        if (this.input[this.pos + 1] === "\n") {
          ++this.pos;
        }
      case "\n":
      case "\u2028":
      case "\u2029":
        ++this.curLine;
        this.lineStart = this.pos + 1;
        break;
    }
  }
  this.raise(this.start, "Unterminated template");
};
pp.readEscapedChar = function(inTemplate) {
  var ch = this.input.charCodeAt(++this.pos);
  ++this.pos;
  switch (ch) {
    case 110:
      return "\n";
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return codePointToString(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      if (this.input.charCodeAt(this.pos) === 10) {
        ++this.pos;
      }
    case 10:
      if (this.options.locations) {
        this.lineStart = this.pos;
        ++this.curLine;
      }
      return "";
    case 56:
    case 57:
      if (this.strict) {
        this.invalidStringToken(
          this.pos - 1,
          "Invalid escape sequence"
        );
      }
      if (inTemplate) {
        var codePos = this.pos - 1;
        this.invalidStringToken(
          codePos,
          "Invalid escape sequence in template string"
        );
      }
    default:
      if (ch >= 48 && ch <= 55) {
        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
        var octal = parseInt(octalStr, 8);
        if (octal > 255) {
          octalStr = octalStr.slice(0, -1);
          octal = parseInt(octalStr, 8);
        }
        this.pos += octalStr.length - 1;
        ch = this.input.charCodeAt(this.pos);
        if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
          this.invalidStringToken(
            this.pos - 1 - octalStr.length,
            inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
          );
        }
        return String.fromCharCode(octal);
      }
      if (isNewLine(ch)) {
        if (this.options.locations) {
          this.lineStart = this.pos;
          ++this.curLine;
        }
        return "";
      }
      return String.fromCharCode(ch);
  }
};
pp.readHexChar = function(len) {
  var codePos = this.pos;
  var n = this.readInt(16, len);
  if (n === null) {
    this.invalidStringToken(codePos, "Bad character escape sequence");
  }
  return n;
};
pp.readWord1 = function() {
  this.containsEsc = false;
  var word = "", first = true, chunkStart = this.pos;
  var astral = this.options.ecmaVersion >= 6;
  while (this.pos < this.input.length) {
    var ch = this.fullCharCodeAtPos();
    if (isIdentifierChar(ch, astral)) {
      this.pos += ch <= 65535 ? 1 : 2;
    } else if (ch === 92) {
      this.containsEsc = true;
      word += this.input.slice(chunkStart, this.pos);
      var escStart = this.pos;
      if (this.input.charCodeAt(++this.pos) !== 117) {
        this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
      }
      ++this.pos;
      var esc = this.readCodePoint();
      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
        this.invalidStringToken(escStart, "Invalid Unicode escape");
      }
      word += codePointToString(esc);
      chunkStart = this.pos;
    } else {
      break;
    }
    first = false;
  }
  return word + this.input.slice(chunkStart, this.pos);
};
pp.readWord = function() {
  var word = this.readWord1();
  var type = types$1.name;
  if (this.keywords.test(word)) {
    type = keywords[word];
  }
  return this.finishToken(type, word);
};
var version = "8.12.1";
Parser.acorn = {
  Parser,
  version,
  defaultOptions,
  Position,
  SourceLocation,
  getLineInfo,
  Node,
  TokenType,
  tokTypes: types$1,
  keywordTypes: keywords,
  TokContext,
  tokContexts: types,
  isIdentifierChar,
  isIdentifierStart,
  Token,
  isNewLine,
  lineBreak,
  lineBreakG,
  nonASCIIwhitespace
};

// node_modules/micromark-extension-mdxjs/index.js
var import_acorn_jsx = __toESM(require_acorn_jsx(), 1);

// node_modules/micromark-util-character/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code4) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code4 !== null && (code4 < 32 || code4 === 127)
  );
}
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code4) {
  return code4 !== null && code4 < -2;
}
function markdownLineEndingOrSpace(code4) {
  return code4 !== null && (code4 < 0 || code4 === 32);
}
function markdownSpace(code4) {
  return code4 === -2 || code4 === -1 || code4 === 32;
}
var unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
var unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex2) {
  return check;
  function check(code4) {
    return code4 !== null && code4 > -1 && regex2.test(String.fromCharCode(code4));
  }
}

// node_modules/estree-util-visit/lib/color.default.js
function color(d) {
  return d;
}

// node_modules/estree-util-visit/lib/index.js
var own = {}.hasOwnProperty;
var CONTINUE = Symbol("continue");
var EXIT = Symbol("exit");
var SKIP = Symbol("skip");
function visit(tree, visitor) {
  let enter;
  let leave;
  if (typeof visitor === "function") {
    enter = visitor;
  } else if (visitor && typeof visitor === "object") {
    if (visitor.enter) enter = visitor.enter;
    if (visitor.leave) leave = visitor.leave;
  }
  build(tree, void 0, void 0, [])();
  function build(node2, key, index2, parents2) {
    if (nodelike(node2)) {
      visit3.displayName = "node (" + color(node2.type) + ")";
    }
    return visit3;
    function visit3() {
      const result = enter ? toResult(enter(node2, key, index2, parents2)) : [];
      if (result[0] === EXIT) {
        return result;
      }
      if (result[0] !== SKIP) {
        let cKey;
        for (cKey in node2) {
          if (own.call(node2, cKey) && node2[cKey] && typeof node2[cKey] === "object" && // @ts-expect-error: custom esast extension.
          cKey !== "data" && // @ts-expect-error: custom esast extension.
          cKey !== "position") {
            const grandparents2 = parents2.concat(node2);
            const value = node2[cKey];
            if (Array.isArray(value)) {
              const nodes = (
                /** @type {Array<unknown>} */
                value
              );
              let cIndex = 0;
              while (cIndex > -1 && cIndex < nodes.length) {
                const subvalue = nodes[cIndex];
                if (nodelike(subvalue)) {
                  const subresult = build(
                    subvalue,
                    cKey,
                    cIndex,
                    grandparents2
                  )();
                  if (subresult[0] === EXIT) return subresult;
                  cIndex = typeof subresult[1] === "number" ? subresult[1] : cIndex + 1;
                } else {
                  cIndex++;
                }
              }
            } else if (nodelike(value)) {
              const subresult = build(value, cKey, void 0, grandparents2)();
              if (subresult[0] === EXIT) return subresult;
            }
          }
        }
      }
      return leave ? toResult(leave(node2, key, index2, parents2)) : result;
    }
  }
}
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return [value];
}
function nodelike(value) {
  return Boolean(
    value && typeof value === "object" && "type" in value && typeof value.type === "string" && value.type.length > 0
  );
}

// node_modules/micromark-util-events-to-acorn/index.js
function eventsToAcorn(events, options) {
  const prefix2 = options.prefix || "";
  const suffix = options.suffix || "";
  const acornOptions = Object.assign({}, options.acornOptions);
  const comments = [];
  const tokens = [];
  const onComment = acornOptions.onComment;
  const onToken = acornOptions.onToken;
  let swallow = false;
  let estree;
  let exception;
  const acornConfig = Object.assign({}, acornOptions, {
    onComment: comments,
    preserveParens: true
  });
  if (onToken) {
    acornConfig.onToken = tokens;
  }
  const collection = collect(events, options.tokenTypes);
  const source = collection.value;
  const value = prefix2 + source + suffix;
  const isEmptyExpression = options.expression && empty2(source);
  if (isEmptyExpression && !options.allowEmpty) {
    throw new VFileMessage("Unexpected empty expression", {
      place: parseOffsetToUnistPoint(0),
      ruleId: "unexpected-empty-expression",
      source: "micromark-extension-mdx-expression"
    });
  }
  try {
    estree = options.expression && !isEmptyExpression ? options.acorn.parseExpressionAt(value, 0, acornConfig) : options.acorn.parse(value, acornConfig);
  } catch (error_) {
    const error = (
      /** @type {AcornError} */
      error_
    );
    const point4 = parseOffsetToUnistPoint(error.pos);
    error.message = String(error.message).replace(/ \(\d+:\d+\)$/, "");
    error.pos = point4.offset;
    error.loc = {
      line: point4.line,
      column: point4.column - 1
    };
    exception = error;
    swallow = error.raisedAt >= prefix2.length + source.length || // Broken comments are raised at their start, not their end.
    error.message === "Unterminated comment";
  }
  if (estree && options.expression && !isEmptyExpression) {
    if (empty2(value.slice(estree.end, value.length - suffix.length))) {
      estree = {
        type: "Program",
        start: 0,
        end: prefix2.length + source.length,
        // @ts-expect-error: It’s good.
        body: [{
          type: "ExpressionStatement",
          expression: estree,
          start: 0,
          end: prefix2.length + source.length
        }],
        sourceType: "module",
        comments: []
      };
    } else {
      const point4 = parseOffsetToUnistPoint(estree.end);
      const error = (
        /** @type {AcornError} */
        new Error("Unexpected content after expression")
      );
      error.pos = point4.offset;
      error.loc = {
        line: point4.line,
        column: point4.column - 1
      };
      exception = error;
      estree = void 0;
    }
  }
  if (estree) {
    estree.comments = comments;
    visit(estree, function(esnode, field, index2, parents2) {
      let context = (
        /** @type {AcornNode | Array<AcornNode>} */
        parents2[parents2.length - 1]
      );
      let prop = field;
      if (esnode.type === "ParenthesizedExpression" && context && prop) {
        if (typeof index2 === "number") {
          context = context[prop];
          prop = index2;
        }
        context[prop] = esnode.expression;
      }
      fixPosition(esnode);
    });
    if (Array.isArray(onComment)) {
      onComment.push(...comments);
    } else if (typeof onComment === "function") {
      for (const comment2 of comments) {
        onComment(comment2.type === "Block", comment2.value, comment2.start, comment2.end, comment2.loc.start, comment2.loc.end);
      }
    }
    for (const token of tokens) {
      if (token.end <= prefix2.length || token.start - prefix2.length >= source.length) {
        continue;
      }
      fixPosition(token);
      if (Array.isArray(onToken)) {
        onToken.push(token);
      } else {
        onToken(token);
      }
    }
  }
  return {
    estree,
    error: exception,
    swallow
  };
  function fixPosition(nodeOrToken) {
    const pointStart2 = parseOffsetToUnistPoint(nodeOrToken.start);
    const pointEnd2 = parseOffsetToUnistPoint(nodeOrToken.end);
    nodeOrToken.start = pointStart2.offset;
    nodeOrToken.end = pointEnd2.offset;
    nodeOrToken.loc = {
      start: {
        line: pointStart2.line,
        column: pointStart2.column - 1,
        offset: pointStart2.offset
      },
      end: {
        line: pointEnd2.line,
        column: pointEnd2.column - 1,
        offset: pointEnd2.offset
      }
    };
    nodeOrToken.range = [nodeOrToken.start, nodeOrToken.end];
  }
  function parseOffsetToUnistPoint(acornOffset) {
    let sourceOffset = acornOffset - prefix2.length;
    if (sourceOffset < 0) {
      sourceOffset = 0;
    } else if (sourceOffset > source.length) {
      sourceOffset = source.length;
    }
    let point4 = relativeToPoint(collection.stops, sourceOffset);
    if (!point4) {
      point4 = {
        line: options.start.line,
        column: options.start.column,
        offset: options.start.offset
      };
    }
    return point4;
  }
}
function empty2(value) {
  return /^\s*$/.test(value.replace(/\/\*[\s\S]*?\*\//g, "").replace(/\/\/[^\r\n]*(\r\n|\n|\r)/g, ""));
}
function collect(events, tokenTypes) {
  const result = {
    value: "",
    stops: []
  };
  let index2 = -1;
  while (++index2 < events.length) {
    const event = events[index2];
    if (event[0] === "enter") {
      const type = event[1].type;
      if (type === "lineEnding" || tokenTypes.includes(type)) {
        const chunks = event[2].sliceStream(event[1]);
        while (chunks.length > 0 && chunks[0] === -1) {
          chunks.shift();
        }
        const value = serializeChunks(chunks);
        result.stops.push([result.value.length, event[1].start]);
        result.value += value;
        result.stops.push([result.value.length, event[1].end]);
      }
    }
  }
  return result;
}
function relativeToPoint(stops, relative) {
  let index2 = 0;
  while (index2 < stops.length && stops[index2][0] <= relative) {
    index2 += 1;
  }
  if (index2 === 0) {
    return void 0;
  }
  const [stopRelative, stopAbsolute] = stops[index2 - 1];
  const rest = relative - stopRelative;
  return {
    line: stopAbsolute.line,
    column: stopAbsolute.column + rest,
    offset: stopAbsolute.offset + rest
  };
}
function serializeChunks(chunks) {
  let index2 = -1;
  const result = [];
  let atTab;
  while (++index2 < chunks.length) {
    const chunk = chunks[index2];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else switch (chunk) {
      case -5: {
        value = "\r";
        break;
      }
      case -4: {
        value = "\n";
        break;
      }
      case -3: {
        value = "\r\n";
        break;
      }
      case -2: {
        value = "	";
        break;
      }
      case -1: {
        if (atTab) continue;
        value = " ";
        break;
      }
      default: {
        value = String.fromCharCode(chunk);
      }
    }
    atTab = chunk === -2;
    result.push(value);
  }
  return result.join("");
}

// node_modules/unist-util-position-from-estree/lib/index.js
function positionFromEstree(node2) {
  const nodeLike = node2 || {};
  const loc = nodeLike.loc || {};
  const range = nodeLike.range || [void 0, void 0];
  const start2 = pointOrUndefined(loc.start, range[0] || nodeLike.start);
  const end = pointOrUndefined(loc.end, range[1] || nodeLike.end);
  if (start2 && end) {
    return { start: start2, end };
  }
}
function pointOrUndefined(estreePoint, estreeOffset) {
  if (estreePoint && typeof estreePoint === "object") {
    const line = "line" in estreePoint ? numberOrUndefined(estreePoint.line) : void 0;
    const column = "column" in estreePoint ? numberOrUndefined(estreePoint.column) : void 0;
    if (line && column !== void 0) {
      return {
        line,
        column: column + 1,
        offset: numberOrUndefined(estreeOffset)
      };
    }
  }
}
function numberOrUndefined(value) {
  return typeof value === "number" && value > -1 ? value : void 0;
}

// node_modules/micromark-factory-mdx-expression/index.js
var trouble = "https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression";
var unexpectedEofHash = "#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-";
var unexpectedLazyHash = "#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed";
var nonSpreadHash = "#unexpected-type-in-code-expected-an-object-spread-spread";
var spreadExtraHash = "#unexpected-extra-content-in-spread-only-a-single-spread-is-supported";
var acornHash = "#could-not-parse-expression-with-acorn";
function factoryMdxExpression(effects, ok3, type, markerType, chunkType, acorn, acornOptions, addResult, spread, allowEmpty, allowLazy) {
  const self2 = this;
  const eventStart = this.events.length + 3;
  let size = 0;
  let pointStart2;
  let lastCrash;
  return start2;
  function start2(code4) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code4);
    effects.exit(markerType);
    pointStart2 = self2.now();
    return before;
  }
  function before(code4) {
    if (code4 === null) {
      if (lastCrash) throw lastCrash;
      const error = new VFileMessage(
        "Unexpected end of file in expression, expected a corresponding closing brace for `{`",
        {
          place: self2.now(),
          ruleId: "unexpected-eof",
          source: "micromark-extension-mdx-expression"
        }
      );
      error.url = trouble + unexpectedEofHash;
      throw error;
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return eolAfter;
    }
    if (code4 === 125 && size === 0) {
      const next = acorn ? mdxExpressionParse.call(
        self2,
        acorn,
        acornOptions,
        chunkType,
        eventStart,
        pointStart2,
        allowEmpty || false,
        spread || false
      ) : {
        type: "ok",
        estree: void 0
      };
      if (next.type === "ok") {
        effects.enter(markerType);
        effects.consume(code4);
        effects.exit(markerType);
        const token = effects.exit(type);
        if (addResult && next.estree) {
          Object.assign(token, {
            estree: next.estree
          });
        }
        return ok3;
      }
      lastCrash = next.message;
      effects.enter(chunkType);
      effects.consume(code4);
      return inside;
    }
    effects.enter(chunkType);
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === 125 && size === 0 || code4 === null || markdownLineEnding(code4)) {
      effects.exit(chunkType);
      return before(code4);
    }
    if (code4 === 123 && !acorn) {
      size += 1;
    } else if (code4 === 125) {
      size -= 1;
    }
    effects.consume(code4);
    return inside;
  }
  function eolAfter(code4) {
    const now = self2.now();
    if (now.line !== pointStart2.line && !allowLazy && self2.parser.lazy[now.line]) {
      const error = new VFileMessage(
        "Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc",
        {
          place: self2.now(),
          ruleId: "unexpected-lazy",
          source: "micromark-extension-mdx-expression"
        }
      );
      error.url = trouble + unexpectedLazyHash;
      throw error;
    }
    return before(code4);
  }
}
function mdxExpressionParse(acorn, acornOptions, chunkType, eventStart, pointStart2, allowEmpty, spread) {
  const result = eventsToAcorn(this.events.slice(eventStart), {
    acorn,
    tokenTypes: [chunkType],
    acornOptions,
    start: pointStart2,
    expression: true,
    allowEmpty,
    prefix: spread ? "({" : "",
    suffix: spread ? "})" : ""
  });
  const estree = result.estree;
  if (spread && estree) {
    const head = estree.body[0];
    if (head.type !== "ExpressionStatement" || head.expression.type !== "ObjectExpression") {
      const place = positionFromEstree(head);
      const error = new VFileMessage(
        "Unexpected `" + head.type + "` in code: expected an object spread (`{...spread}`)",
        {
          place: place.start,
          ruleId: "non-spread",
          source: "micromark-extension-mdx-expression"
        }
      );
      error.url = trouble + nonSpreadHash;
      throw error;
    }
    if (head.expression.properties[1]) {
      const place = positionFromEstree(head.expression.properties[1]);
      const error = new VFileMessage(
        "Unexpected extra content in spread: only a single spread is supported",
        {
          place: place.start,
          ruleId: "spread-extra",
          source: "micromark-extension-mdx-expression"
        }
      );
      error.url = trouble + spreadExtraHash;
      throw error;
    }
    if (head.expression.properties[0] && head.expression.properties[0].type !== "SpreadElement") {
      const place = positionFromEstree(head.expression.properties[0]);
      const error = new VFileMessage(
        "Unexpected `" + head.expression.properties[0].type + "` in code: only spread elements are supported",
        {
          place: place.start,
          ruleId: "non-spread",
          source: "micromark-extension-mdx-expression"
        }
      );
      error.url = trouble + nonSpreadHash;
      throw error;
    }
  }
  if (result.error) {
    const error = new VFileMessage("Could not parse expression with acorn", {
      cause: result.error,
      place: {
        line: result.error.loc.line,
        column: result.error.loc.column + 1,
        offset: result.error.pos
      },
      ruleId: "acorn",
      source: "micromark-extension-mdx-expression"
    });
    error.url = trouble + acornHash;
    return {
      type: "nok",
      message: error
    };
  }
  return {
    type: "ok",
    estree
  };
}

// node_modules/micromark-factory-space/index.js
function factorySpace(effects, ok3, type, max2) {
  const limit = max2 ? max2 - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start2;
  function start2(code4) {
    if (markdownSpace(code4)) {
      effects.enter(type);
      return prefix2(code4);
    }
    return ok3(code4);
  }
  function prefix2(code4) {
    if (markdownSpace(code4) && size++ < limit) {
      effects.consume(code4);
      return prefix2;
    }
    effects.exit(type);
    return ok3(code4);
  }
}

// node_modules/micromark-extension-mdx-expression/lib/syntax.js
function mdxExpression(options) {
  const options_ = options || {};
  const addResult = options_.addResult;
  const acorn = options_.acorn;
  const spread = options_.spread;
  let allowEmpty = options_.allowEmpty;
  let acornOptions;
  if (allowEmpty === null || allowEmpty === void 0) {
    allowEmpty = true;
  }
  if (acorn) {
    if (!acorn.parseExpressionAt) {
      throw new Error("Expected a proper `acorn` instance passed in as `options.acorn`");
    }
    acornOptions = Object.assign({
      ecmaVersion: 2024,
      sourceType: "module"
    }, options_.acornOptions);
  } else if (options_.acornOptions || options_.addResult) {
    throw new Error("Expected an `acorn` instance passed in as `options.acorn`");
  }
  return {
    flow: {
      [123]: {
        name: "mdxFlowExpression",
        tokenize: tokenizeFlowExpression,
        concrete: true
      }
    },
    text: {
      [123]: {
        name: "mdxTextExpression",
        tokenize: tokenizeTextExpression
      }
    }
  };
  function tokenizeFlowExpression(effects, ok3, nok) {
    const self2 = this;
    return start2;
    function start2(code4) {
      return before(code4);
    }
    function before(code4) {
      return factoryMdxExpression.call(self2, effects, after, "mdxFlowExpression", "mdxFlowExpressionMarker", "mdxFlowExpressionChunk", acorn, acornOptions, addResult, spread, allowEmpty)(code4);
    }
    function after(code4) {
      return markdownSpace(code4) ? factorySpace(effects, end, "whitespace")(code4) : end(code4);
    }
    function end(code4) {
      const lessThanValue = self2.parser.constructs.flow[60];
      const constructs2 = Array.isArray(lessThanValue) ? lessThanValue : (
        /* c8 ignore next 3 -- always a list when normalized. */
        lessThanValue ? [lessThanValue] : []
      );
      const jsxTag = constructs2.find(function(d) {
        return d.name === "mdxJsxFlowTag";
      });
      if (code4 === 60 && jsxTag) {
        return effects.attempt(jsxTag, end, nok)(code4);
      }
      return code4 === null || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
    }
  }
  function tokenizeTextExpression(effects, ok3) {
    const self2 = this;
    return start2;
    function start2(code4) {
      return factoryMdxExpression.call(self2, effects, ok3, "mdxTextExpression", "mdxTextExpressionMarker", "mdxTextExpressionChunk", acorn, acornOptions, addResult, spread, allowEmpty, true)(code4);
    }
  }
}

// node_modules/estree-util-is-identifier-name/lib/index.js
var startRe = /[$_\p{ID_Start}]/u;
var contRe = /[$_\u{200C}\u{200D}\p{ID_Continue}]/u;
var contReJsx = /[-$_\u{200C}\u{200D}\p{ID_Continue}]/u;
var nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
var nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
var emptyOptions = {};
function start(code4) {
  return code4 ? startRe.test(String.fromCodePoint(code4)) : false;
}
function cont(code4, options) {
  const settings = options || emptyOptions;
  const re2 = settings.jsx ? contReJsx : contRe;
  return code4 ? re2.test(String.fromCodePoint(code4)) : false;
}
function name(name2, options) {
  const settings = options || emptyOptions;
  const re2 = settings.jsx ? nameReJsx : nameRe;
  return re2.test(name2);
}

// node_modules/micromark-extension-mdx-jsx/lib/factory-tag.js
var trouble2 = "https://github.com/micromark/micromark-extension-mdx-jsx";
function factoryTag(effects, ok3, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {
  const self2 = this;
  let returnState;
  let marker;
  return start2;
  function start2(code4) {
    effects.enter(tagType);
    effects.enter(tagMarkerType);
    effects.consume(code4);
    effects.exit(tagMarkerType);
    return startAfter;
  }
  function startAfter(code4) {
    if (markdownLineEndingOrSpace(code4)) {
      return nok(code4);
    }
    returnState = nameBefore;
    return esWhitespaceStart(code4);
  }
  function nameBefore(code4) {
    if (code4 === 47) {
      effects.enter(tagClosingMarkerType);
      effects.consume(code4);
      effects.exit(tagClosingMarkerType);
      returnState = closingTagNameBefore;
      return esWhitespaceStart;
    }
    if (code4 === 62) {
      return tagEnd(code4);
    }
    if (code4 !== null && code4 >= 0 && start(code4)) {
      effects.enter(tagNameType);
      effects.enter(tagNamePrimaryType);
      effects.consume(code4);
      return primaryName;
    }
    crash(code4, "before name", "a character that can start a name, such as a letter, `$`, or `_`" + (code4 === 33 ? " (note: to create a comment in MDX, use `{/* text */}`)" : ""));
  }
  function closingTagNameBefore(code4) {
    if (code4 === 62) {
      return tagEnd(code4);
    }
    if (code4 !== null && code4 >= 0 && start(code4)) {
      effects.enter(tagNameType);
      effects.enter(tagNamePrimaryType);
      effects.consume(code4);
      return primaryName;
    }
    crash(code4, "before name", "a character that can start a name, such as a letter, `$`, or `_`" + (code4 === 42 || code4 === 47 ? " (note: JS comments in JSX tags are not supported in MDX)" : ""));
  }
  function primaryName(code4) {
    if (code4 !== null && code4 >= 0 && cont(code4, {
      jsx: true
    })) {
      effects.consume(code4);
      return primaryName;
    }
    if (code4 === 46 || code4 === 47 || code4 === 58 || code4 === 62 || code4 === 123 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      effects.exit(tagNamePrimaryType);
      returnState = primaryNameAfter;
      return esWhitespaceStart(code4);
    }
    crash(code4, "in name", "a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag" + (code4 === 64 ? " (note: to create a link in MDX, use `[text](url)`)" : ""));
  }
  function primaryNameAfter(code4) {
    if (code4 === 46) {
      effects.enter(tagNameMemberMarkerType);
      effects.consume(code4);
      effects.exit(tagNameMemberMarkerType);
      returnState = memberNameBefore;
      return esWhitespaceStart;
    }
    if (code4 === 58) {
      effects.enter(tagNamePrefixMarkerType);
      effects.consume(code4);
      effects.exit(tagNamePrefixMarkerType);
      returnState = localNameBefore;
      return esWhitespaceStart;
    }
    if (code4 === 47 || code4 === 62 || code4 === 123 || code4 !== null && code4 >= 0 && start(code4)) {
      effects.exit(tagNameType);
      return attributeBefore(code4);
    }
    crash(code4, "after name", "a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag");
  }
  function memberNameBefore(code4) {
    if (code4 !== null && code4 >= 0 && start(code4)) {
      effects.enter(tagNameMemberType);
      effects.consume(code4);
      return memberName;
    }
    crash(code4, "before member name", "a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag");
  }
  function memberName(code4) {
    if (code4 !== null && code4 >= 0 && cont(code4, {
      jsx: true
    })) {
      effects.consume(code4);
      return memberName;
    }
    if (code4 === 46 || code4 === 47 || code4 === 62 || code4 === 123 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      effects.exit(tagNameMemberType);
      returnState = memberNameAfter;
      return esWhitespaceStart(code4);
    }
    crash(code4, "in member name", "a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag" + (code4 === 64 ? " (note: to create a link in MDX, use `[text](url)`)" : ""));
  }
  function memberNameAfter(code4) {
    if (code4 === 46) {
      effects.enter(tagNameMemberMarkerType);
      effects.consume(code4);
      effects.exit(tagNameMemberMarkerType);
      returnState = memberNameBefore;
      return esWhitespaceStart;
    }
    if (code4 === 47 || code4 === 62 || code4 === 123 || code4 !== null && code4 >= 0 && start(code4)) {
      effects.exit(tagNameType);
      return attributeBefore(code4);
    }
    crash(code4, "after member name", "a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag");
  }
  function localNameBefore(code4) {
    if (code4 !== null && code4 >= 0 && start(code4)) {
      effects.enter(tagNameLocalType);
      effects.consume(code4);
      return localName;
    }
    crash(code4, "before local name", "a character that can start a name, such as a letter, `$`, or `_`" + (code4 === 43 || code4 !== null && code4 > 46 && code4 < 58 ? " (note: to create a link in MDX, use `[text](url)`)" : ""));
  }
  function localName(code4) {
    if (code4 !== null && code4 >= 0 && cont(code4, {
      jsx: true
    })) {
      effects.consume(code4);
      return localName;
    }
    if (code4 === 47 || code4 === 62 || code4 === 123 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      effects.exit(tagNameLocalType);
      returnState = localNameAfter;
      return esWhitespaceStart(code4);
    }
    crash(code4, "in local name", "a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag");
  }
  function localNameAfter(code4) {
    if (code4 === 47 || code4 === 62 || code4 === 123 || code4 !== null && code4 >= 0 && start(code4)) {
      effects.exit(tagNameType);
      return attributeBefore(code4);
    }
    crash(code4, "after local name", "a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag");
  }
  function attributeBefore(code4) {
    if (code4 === 47) {
      effects.enter(tagSelfClosingMarker);
      effects.consume(code4);
      effects.exit(tagSelfClosingMarker);
      returnState = selfClosing;
      return esWhitespaceStart;
    }
    if (code4 === 62) {
      return tagEnd(code4);
    }
    if (code4 === 123) {
      return factoryMdxExpression.call(self2, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code4);
    }
    if (code4 !== null && code4 >= 0 && start(code4)) {
      effects.enter(tagAttributeType);
      effects.enter(tagAttributeNameType);
      effects.enter(tagAttributeNamePrimaryType);
      effects.consume(code4);
      return attributePrimaryName;
    }
    crash(code4, "before attribute name", "a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag");
  }
  function attributeExpressionAfter(code4) {
    returnState = attributeBefore;
    return esWhitespaceStart(code4);
  }
  function attributePrimaryName(code4) {
    if (code4 !== null && code4 >= 0 && cont(code4, {
      jsx: true
    })) {
      effects.consume(code4);
      return attributePrimaryName;
    }
    if (code4 === 47 || code4 === 58 || code4 === 61 || code4 === 62 || code4 === 123 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      effects.exit(tagAttributeNamePrimaryType);
      returnState = attributePrimaryNameAfter;
      return esWhitespaceStart(code4);
    }
    crash(code4, "in attribute name", "an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag");
  }
  function attributePrimaryNameAfter(code4) {
    if (code4 === 58) {
      effects.enter(tagAttributeNamePrefixMarkerType);
      effects.consume(code4);
      effects.exit(tagAttributeNamePrefixMarkerType);
      returnState = attributeLocalNameBefore;
      return esWhitespaceStart;
    }
    if (code4 === 61) {
      effects.exit(tagAttributeNameType);
      effects.enter(tagAttributeInitializerMarkerType);
      effects.consume(code4);
      effects.exit(tagAttributeInitializerMarkerType);
      returnState = attributeValueBefore;
      return esWhitespaceStart;
    }
    if (code4 === 47 || code4 === 62 || code4 === 123 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || code4 !== null && code4 >= 0 && start(code4)) {
      effects.exit(tagAttributeNameType);
      effects.exit(tagAttributeType);
      returnState = attributeBefore;
      return esWhitespaceStart(code4);
    }
    crash(code4, "after attribute name", "a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag");
  }
  function attributeLocalNameBefore(code4) {
    if (code4 !== null && code4 >= 0 && start(code4)) {
      effects.enter(tagAttributeNameLocalType);
      effects.consume(code4);
      return attributeLocalName;
    }
    crash(code4, "before local attribute name", "a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag");
  }
  function attributeLocalName(code4) {
    if (code4 !== null && code4 >= 0 && cont(code4, {
      jsx: true
    })) {
      effects.consume(code4);
      return attributeLocalName;
    }
    if (code4 === 47 || code4 === 61 || code4 === 62 || code4 === 123 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      effects.exit(tagAttributeNameLocalType);
      effects.exit(tagAttributeNameType);
      returnState = attributeLocalNameAfter;
      return esWhitespaceStart(code4);
    }
    crash(code4, "in local attribute name", "an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag");
  }
  function attributeLocalNameAfter(code4) {
    if (code4 === 61) {
      effects.enter(tagAttributeInitializerMarkerType);
      effects.consume(code4);
      effects.exit(tagAttributeInitializerMarkerType);
      returnState = attributeValueBefore;
      return esWhitespaceStart;
    }
    if (code4 === 47 || code4 === 62 || code4 === 123 || code4 !== null && code4 >= 0 && start(code4)) {
      effects.exit(tagAttributeType);
      return attributeBefore(code4);
    }
    crash(code4, "after local attribute name", "a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag");
  }
  function attributeValueBefore(code4) {
    if (code4 === 34 || code4 === 39) {
      effects.enter(tagAttributeValueLiteralType);
      effects.enter(tagAttributeValueLiteralMarkerType);
      effects.consume(code4);
      effects.exit(tagAttributeValueLiteralMarkerType);
      marker = code4;
      return attributeValueQuotedStart;
    }
    if (code4 === 123) {
      return factoryMdxExpression.call(self2, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code4);
    }
    crash(code4, "before attribute value", "a character that can start an attribute value, such as `\"`, `'`, or `{`" + (code4 === 60 ? " (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)" : ""));
  }
  function attributeValueExpressionAfter(code4) {
    effects.exit(tagAttributeType);
    returnState = attributeBefore;
    return esWhitespaceStart(code4);
  }
  function attributeValueQuotedStart(code4) {
    if (code4 === null) {
      crash(code4, "in attribute value", "a corresponding closing quote `" + String.fromCodePoint(marker) + "`");
    }
    if (code4 === marker) {
      effects.enter(tagAttributeValueLiteralMarkerType);
      effects.consume(code4);
      effects.exit(tagAttributeValueLiteralMarkerType);
      effects.exit(tagAttributeValueLiteralType);
      effects.exit(tagAttributeType);
      marker = void 0;
      returnState = attributeBefore;
      return esWhitespaceStart;
    }
    if (markdownLineEnding(code4)) {
      returnState = attributeValueQuotedStart;
      return esWhitespaceStart(code4);
    }
    effects.enter(tagAttributeValueLiteralValueType);
    return attributeValueQuoted(code4);
  }
  function attributeValueQuoted(code4) {
    if (code4 === null || code4 === marker || markdownLineEnding(code4)) {
      effects.exit(tagAttributeValueLiteralValueType);
      return attributeValueQuotedStart(code4);
    }
    effects.consume(code4);
    return attributeValueQuoted;
  }
  function selfClosing(code4) {
    if (code4 === 62) {
      return tagEnd(code4);
    }
    crash(code4, "after self-closing slash", "`>` to end the tag" + (code4 === 42 || code4 === 47 ? " (note: JS comments in JSX tags are not supported in MDX)" : ""));
  }
  function tagEnd(code4) {
    effects.enter(tagMarkerType);
    effects.consume(code4);
    effects.exit(tagMarkerType);
    effects.exit(tagType);
    return ok3;
  }
  function esWhitespaceStart(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return esWhitespaceEolAfter;
    }
    if (markdownSpace(code4) || unicodeWhitespace(code4)) {
      effects.enter("esWhitespace");
      return esWhitespaceInside(code4);
    }
    return returnState(code4);
  }
  function esWhitespaceInside(code4) {
    if (markdownLineEnding(code4)) {
      effects.exit("esWhitespace");
      return esWhitespaceStart(code4);
    }
    if (markdownSpace(code4) || unicodeWhitespace(code4)) {
      effects.consume(code4);
      return esWhitespaceInside;
    }
    effects.exit("esWhitespace");
    return returnState(code4);
  }
  function esWhitespaceEolAfter(code4) {
    if (!allowLazy && self2.parser.lazy[self2.now().line]) {
      const error = new VFileMessage("Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc", self2.now(), "micromark-extension-mdx-jsx:unexpected-lazy");
      error.url = trouble2 + "#unexpected-lazy-line-in-container-expected-line-to-be";
      throw error;
    }
    return esWhitespaceStart(code4);
  }
  function crash(code4, at2, expect) {
    const error = new VFileMessage("Unexpected " + (code4 === null ? "end of file" : "character `" + (code4 === 96 ? "` ` `" : String.fromCodePoint(code4)) + "` (" + serializeCharCode(code4) + ")") + " " + at2 + ", expected " + expect, self2.now(), "micromark-extension-mdx-jsx:unexpected-" + (code4 === null ? "eof" : "character"));
    error.url = trouble2 + (code4 === null ? "#unexpected-end-of-file-at-expected-expect" : "#unexpected-character-at-expected-expect");
    throw error;
  }
}
function serializeCharCode(code4) {
  return "U+" + code4.toString(16).toUpperCase().padStart(4, "0");
}

// node_modules/micromark-extension-mdx-jsx/lib/jsx-text.js
function jsxText(acorn, options) {
  return {
    name: "mdxJsxTextTag",
    tokenize: tokenizeJsxText
  };
  function tokenizeJsxText(effects, ok3, nok) {
    return factoryTag.call(this, effects, ok3, nok, acorn, options.acornOptions, options.addResult, true, "mdxJsxTextTag", "mdxJsxTextTagMarker", "mdxJsxTextTagClosingMarker", "mdxJsxTextTagSelfClosingMarker", "mdxJsxTextTagName", "mdxJsxTextTagNamePrimary", "mdxJsxTextTagNameMemberMarker", "mdxJsxTextTagNameMember", "mdxJsxTextTagNamePrefixMarker", "mdxJsxTextTagNameLocal", "mdxJsxTextTagExpressionAttribute", "mdxJsxTextTagExpressionAttributeMarker", "mdxJsxTextTagExpressionAttributeValue", "mdxJsxTextTagAttribute", "mdxJsxTextTagAttributeName", "mdxJsxTextTagAttributeNamePrimary", "mdxJsxTextTagAttributeNamePrefixMarker", "mdxJsxTextTagAttributeNameLocal", "mdxJsxTextTagAttributeInitializerMarker", "mdxJsxTextTagAttributeValueLiteral", "mdxJsxTextTagAttributeValueLiteralMarker", "mdxJsxTextTagAttributeValueLiteralValue", "mdxJsxTextTagAttributeValueExpression", "mdxJsxTextTagAttributeValueExpressionMarker", "mdxJsxTextTagAttributeValueExpressionValue");
  }
}

// node_modules/micromark-extension-mdx-jsx/lib/jsx-flow.js
function jsxFlow(acorn, options) {
  return {
    name: "mdxJsxFlowTag",
    tokenize: tokenizeJsxFlow,
    concrete: true
  };
  function tokenizeJsxFlow(effects, ok3, nok) {
    const self2 = this;
    return start2;
    function start2(code4) {
      return before(code4);
    }
    function before(code4) {
      return factoryTag.call(self2, effects, after, nok, acorn, options.acornOptions, options.addResult, false, "mdxJsxFlowTag", "mdxJsxFlowTagMarker", "mdxJsxFlowTagClosingMarker", "mdxJsxFlowTagSelfClosingMarker", "mdxJsxFlowTagName", "mdxJsxFlowTagNamePrimary", "mdxJsxFlowTagNameMemberMarker", "mdxJsxFlowTagNameMember", "mdxJsxFlowTagNamePrefixMarker", "mdxJsxFlowTagNameLocal", "mdxJsxFlowTagExpressionAttribute", "mdxJsxFlowTagExpressionAttributeMarker", "mdxJsxFlowTagExpressionAttributeValue", "mdxJsxFlowTagAttribute", "mdxJsxFlowTagAttributeName", "mdxJsxFlowTagAttributeNamePrimary", "mdxJsxFlowTagAttributeNamePrefixMarker", "mdxJsxFlowTagAttributeNameLocal", "mdxJsxFlowTagAttributeInitializerMarker", "mdxJsxFlowTagAttributeValueLiteral", "mdxJsxFlowTagAttributeValueLiteralMarker", "mdxJsxFlowTagAttributeValueLiteralValue", "mdxJsxFlowTagAttributeValueExpression", "mdxJsxFlowTagAttributeValueExpressionMarker", "mdxJsxFlowTagAttributeValueExpressionValue")(code4);
    }
    function after(code4) {
      return markdownSpace(code4) ? factorySpace(effects, end, "whitespace")(code4) : end(code4);
    }
    function end(code4) {
      const leftBraceValue = self2.parser.constructs.flow[123];
      const constructs2 = Array.isArray(leftBraceValue) ? leftBraceValue : leftBraceValue ? [leftBraceValue] : [];
      const expression = constructs2.find((d) => d.name === "mdxFlowExpression");
      return code4 === 60 ? (
        // We can’t just say: fine. Lines of blocks have to be parsed until an eol/eof.
        start2(code4)
      ) : code4 === 123 && expression ? effects.attempt(expression, end, nok)(code4) : code4 === null || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
    }
  }
}

// node_modules/micromark-extension-mdx-jsx/lib/syntax.js
function mdxJsx(options) {
  const settings = options || {};
  const acorn = settings.acorn;
  let acornOptions;
  if (acorn) {
    if (!acorn.parse || !acorn.parseExpressionAt) {
      throw new Error("Expected a proper `acorn` instance passed in as `options.acorn`");
    }
    acornOptions = Object.assign({
      ecmaVersion: 2024,
      sourceType: "module"
    }, settings.acornOptions, {
      locations: true
    });
  } else if (settings.acornOptions || settings.addResult) {
    throw new Error("Expected an `acorn` instance passed in as `options.acorn`");
  }
  return {
    flow: {
      [60]: jsxFlow(acorn || void 0, {
        acornOptions,
        addResult: settings.addResult || void 0
      })
    },
    text: {
      [60]: jsxText(acorn || void 0, {
        acornOptions,
        addResult: settings.addResult || void 0
      })
    }
  };
}

// node_modules/micromark-extension-mdx-md/index.js
function mdxMd() {
  return {
    disable: { null: ["autolink", "codeIndented", "htmlFlow", "htmlText"] }
  };
}

// node_modules/micromark-util-chunked/index.js
function splice(list4, start2, remove, items) {
  const end = list4.length;
  let chunkStart = 0;
  let parameters;
  if (start2 < 0) {
    start2 = -start2 > end ? 0 : end + start2;
  } else {
    start2 = start2 > end ? end : start2;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < 1e4) {
    parameters = Array.from(items);
    parameters.unshift(start2, remove);
    list4.splice(...parameters);
  } else {
    if (remove) list4.splice(start2, remove);
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 1e4);
      parameters.unshift(start2, 0);
      list4.splice(...parameters);
      chunkStart += 1e4;
      start2 += 1e4;
    }
  }
}
function push(list4, items) {
  if (list4.length > 0) {
    splice(list4, list4.length, 0, items);
    return list4;
  }
  return items;
}

// node_modules/micromark-util-classify-character/index.js
function classifyCharacter(code4) {
  if (code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
    return 1;
  }
  if (unicodePunctuation(code4)) {
    return 2;
  }
}

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index2 = -1;
  while (++index2 < constructs2.length) {
    const resolve = constructs2[index2].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}

// node_modules/micromark-core-commonmark/lib/attention.js
var attention = {
  name: "attention",
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention
};
function resolveAllAttention(events, context) {
  let index2 = -1;
  let open;
  let group;
  let text7;
  let openingSequence;
  let closingSequence;
  let use;
  let nextEvents;
  let offset2;
  while (++index2 < events.length) {
    if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
      open = index2;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
            continue;
          }
          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
          const start2 = Object.assign({}, events[open][1].end);
          const end = Object.assign({}, events[index2][1].start);
          movePoint(start2, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: start2,
            end: Object.assign({}, events[open][1].end)
          };
          closingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: Object.assign({}, events[index2][1].start),
            end
          };
          text7 = {
            type: use > 1 ? "strongText" : "emphasisText",
            start: Object.assign({}, events[open][1].end),
            end: Object.assign({}, events[index2][1].start)
          };
          group = {
            type: use > 1 ? "strong" : "emphasis",
            start: Object.assign({}, openingSequence.start),
            end: Object.assign({}, closingSequence.end)
          };
          events[open][1].end = Object.assign({}, openingSequence.start);
          events[index2][1].start = Object.assign({}, closingSequence.end);
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [["enter", events[open][1], context], ["exit", events[open][1], context]]);
          }
          nextEvents = push(nextEvents, [["enter", group, context], ["enter", openingSequence, context], ["exit", openingSequence, context], ["enter", text7, context]]);
          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index2), context));
          nextEvents = push(nextEvents, [["exit", text7, context], ["enter", closingSequence, context], ["exit", closingSequence, context], ["exit", group, context]]);
          if (events[index2][1].end.offset - events[index2][1].start.offset) {
            offset2 = 2;
            nextEvents = push(nextEvents, [["enter", events[index2][1], context], ["exit", events[index2][1], context]]);
          } else {
            offset2 = 0;
          }
          splice(events, open - 1, index2 - open + 3, nextEvents);
          index2 = open + nextEvents.length - offset2 - 2;
          break;
        }
      }
    }
  }
  index2 = -1;
  while (++index2 < events.length) {
    if (events[index2][1].type === "attentionSequence") {
      events[index2][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok3) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous3 = this.previous;
  const before = classifyCharacter(previous3);
  let marker;
  return start2;
  function start2(code4) {
    marker = code4;
    effects.enter("attentionSequence");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code4);
    const open = !after || after === 2 && before || attentionMarkers2.includes(code4);
    const close = !before || before === 2 && after || attentionMarkers2.includes(previous3);
    token._open = Boolean(marker === 42 ? open : open && (before || !close));
    token._close = Boolean(marker === 42 ? close : close && (after || !open));
    return ok3(code4);
  }
}
function movePoint(point4, offset2) {
  point4.column += offset2;
  point4.offset += offset2;
  point4._bufferIndex += offset2;
}

// node_modules/micromark-core-commonmark/lib/autolink.js
var autolink = {
  name: "autolink",
  tokenize: tokenizeAutolink
};
function tokenizeAutolink(effects, ok3, nok) {
  let size = 0;
  return start2;
  function start2(code4) {
    effects.enter("autolink");
    effects.enter("autolinkMarker");
    effects.consume(code4);
    effects.exit("autolinkMarker");
    effects.enter("autolinkProtocol");
    return open;
  }
  function open(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return schemeOrEmailAtext;
    }
    if (code4 === 64) {
      return nok(code4);
    }
    return emailAtext(code4);
  }
  function schemeOrEmailAtext(code4) {
    if (code4 === 43 || code4 === 45 || code4 === 46 || asciiAlphanumeric(code4)) {
      size = 1;
      return schemeInsideOrEmailAtext(code4);
    }
    return emailAtext(code4);
  }
  function schemeInsideOrEmailAtext(code4) {
    if (code4 === 58) {
      effects.consume(code4);
      size = 0;
      return urlInside;
    }
    if ((code4 === 43 || code4 === 45 || code4 === 46 || asciiAlphanumeric(code4)) && size++ < 32) {
      effects.consume(code4);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code4);
  }
  function urlInside(code4) {
    if (code4 === 62) {
      effects.exit("autolinkProtocol");
      effects.enter("autolinkMarker");
      effects.consume(code4);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    if (code4 === null || code4 === 32 || code4 === 60 || asciiControl(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return urlInside;
  }
  function emailAtext(code4) {
    if (code4 === 64) {
      effects.consume(code4);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code4)) {
      effects.consume(code4);
      return emailAtext;
    }
    return nok(code4);
  }
  function emailAtSignOrDot(code4) {
    return asciiAlphanumeric(code4) ? emailLabel(code4) : nok(code4);
  }
  function emailLabel(code4) {
    if (code4 === 46) {
      effects.consume(code4);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code4 === 62) {
      effects.exit("autolinkProtocol").type = "autolinkEmail";
      effects.enter("autolinkMarker");
      effects.consume(code4);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    return emailValue(code4);
  }
  function emailValue(code4) {
    if ((code4 === 45 || asciiAlphanumeric(code4)) && size++ < 63) {
      const next = code4 === 45 ? emailValue : emailLabel;
      effects.consume(code4);
      return next;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/blank-line.js
var blankLine = {
  tokenize: tokenizeBlankLine,
  partial: true
};
function tokenizeBlankLine(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    return markdownSpace(code4) ? factorySpace(effects, after, "linePrefix")(code4) : after(code4);
  }
  function after(code4) {
    return code4 === null || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/block-quote.js
var blockQuote = {
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart,
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit
};
function tokenizeBlockQuoteStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    if (code4 === 62) {
      const state = self2.containerState;
      if (!state.open) {
        effects.enter("blockQuote", {
          _container: true
        });
        state.open = true;
      }
      effects.enter("blockQuotePrefix");
      effects.enter("blockQuoteMarker");
      effects.consume(code4);
      effects.exit("blockQuoteMarker");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    if (markdownSpace(code4)) {
      effects.enter("blockQuotePrefixWhitespace");
      effects.consume(code4);
      effects.exit("blockQuotePrefixWhitespace");
      effects.exit("blockQuotePrefix");
      return ok3;
    }
    effects.exit("blockQuotePrefix");
    return ok3(code4);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
  const self2 = this;
  return contStart;
  function contStart(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(effects, contBefore, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4);
    }
    return contBefore(code4);
  }
  function contBefore(code4) {
    return effects.attempt(blockQuote, ok3, nok)(code4);
  }
}
function exit(effects) {
  effects.exit("blockQuote");
}

// node_modules/micromark-core-commonmark/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("characterEscape");
    effects.enter("escapeMarker");
    effects.consume(code4);
    effects.exit("escapeMarker");
    return inside;
  }
  function inside(code4) {
    if (asciiPunctuation(code4)) {
      effects.enter("characterEscapeValue");
      effects.consume(code4);
      effects.exit("characterEscapeValue");
      effects.exit("characterEscape");
      return ok3;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let max2;
  let test;
  return start2;
  function start2(code4) {
    effects.enter("characterReference");
    effects.enter("characterReferenceMarker");
    effects.consume(code4);
    effects.exit("characterReferenceMarker");
    return open;
  }
  function open(code4) {
    if (code4 === 35) {
      effects.enter("characterReferenceMarkerNumeric");
      effects.consume(code4);
      effects.exit("characterReferenceMarkerNumeric");
      return numeric;
    }
    effects.enter("characterReferenceValue");
    max2 = 31;
    test = asciiAlphanumeric;
    return value(code4);
  }
  function numeric(code4) {
    if (code4 === 88 || code4 === 120) {
      effects.enter("characterReferenceMarkerHexadecimal");
      effects.consume(code4);
      effects.exit("characterReferenceMarkerHexadecimal");
      effects.enter("characterReferenceValue");
      max2 = 6;
      test = asciiHexDigit;
      return value;
    }
    effects.enter("characterReferenceValue");
    max2 = 7;
    test = asciiDigit;
    return value(code4);
  }
  function value(code4) {
    if (code4 === 59 && size) {
      const token = effects.exit("characterReferenceValue");
      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
        return nok(code4);
      }
      effects.enter("characterReferenceMarker");
      effects.consume(code4);
      effects.exit("characterReferenceMarker");
      effects.exit("characterReference");
      return ok3;
    }
    if (test(code4) && size++ < max2) {
      effects.consume(code4);
      return value;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/code-fenced.js
var nonLazyContinuation = {
  tokenize: tokenizeNonLazyContinuation,
  partial: true
};
var codeFenced = {
  name: "codeFenced",
  tokenize: tokenizeCodeFenced,
  concrete: true
};
function tokenizeCodeFenced(effects, ok3, nok) {
  const self2 = this;
  const closeStart = {
    tokenize: tokenizeCloseStart,
    partial: true
  };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start2;
  function start2(code4) {
    return beforeSequenceOpen(code4);
  }
  function beforeSequenceOpen(code4) {
    const tail = self2.events[self2.events.length - 1];
    initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code4;
    effects.enter("codeFenced");
    effects.enter("codeFencedFence");
    effects.enter("codeFencedFenceSequence");
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === marker) {
      sizeOpen++;
      effects.consume(code4);
      return sequenceOpen;
    }
    if (sizeOpen < 3) {
      return nok(code4);
    }
    effects.exit("codeFencedFenceSequence");
    return markdownSpace(code4) ? factorySpace(effects, infoBefore, "whitespace")(code4) : infoBefore(code4);
  }
  function infoBefore(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("codeFencedFence");
      return self2.interrupt ? ok3(code4) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code4);
    }
    effects.enter("codeFencedFenceInfo");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return info(code4);
  }
  function info(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return infoBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return factorySpace(effects, metaBefore, "whitespace")(code4);
    }
    if (code4 === 96 && code4 === marker) {
      return nok(code4);
    }
    effects.consume(code4);
    return info;
  }
  function metaBefore(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return infoBefore(code4);
    }
    effects.enter("codeFencedFenceMeta");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return meta(code4);
  }
  function meta(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceMeta");
      return infoBefore(code4);
    }
    if (code4 === 96 && code4 === marker) {
      return nok(code4);
    }
    effects.consume(code4);
    return meta;
  }
  function atNonLazyBreak(code4) {
    return effects.attempt(closeStart, after, contentBefore)(code4);
  }
  function contentBefore(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return contentStart;
  }
  function contentStart(code4) {
    return initialPrefix > 0 && markdownSpace(code4) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code4) : beforeContentChunk(code4);
  }
  function beforeContentChunk(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code4);
    }
    effects.enter("codeFlowValue");
    return contentChunk(code4);
  }
  function contentChunk(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("codeFlowValue");
      return beforeContentChunk(code4);
    }
    effects.consume(code4);
    return contentChunk;
  }
  function after(code4) {
    effects.exit("codeFenced");
    return ok3(code4);
  }
  function tokenizeCloseStart(effects2, ok4, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code4) {
      effects2.enter("lineEnding");
      effects2.consume(code4);
      effects2.exit("lineEnding");
      return start3;
    }
    function start3(code4) {
      effects2.enter("codeFencedFence");
      return markdownSpace(code4) ? factorySpace(effects2, beforeSequenceClose, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4) : beforeSequenceClose(code4);
    }
    function beforeSequenceClose(code4) {
      if (code4 === marker) {
        effects2.enter("codeFencedFenceSequence");
        return sequenceClose(code4);
      }
      return nok2(code4);
    }
    function sequenceClose(code4) {
      if (code4 === marker) {
        size++;
        effects2.consume(code4);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit("codeFencedFenceSequence");
        return markdownSpace(code4) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code4) : sequenceCloseAfter(code4);
      }
      return nok2(code4);
    }
    function sequenceCloseAfter(code4) {
      if (code4 === null || markdownLineEnding(code4)) {
        effects2.exit("codeFencedFence");
        return ok4(code4);
      }
      return nok2(code4);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return lineStart;
  }
  function lineStart(code4) {
    return self2.parser.lazy[self2.now().line] ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/code-indented.js
var codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
var furtherStart = {
  tokenize: tokenizeFurtherStart,
  partial: true
};
function tokenizeCodeIndented(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    effects.enter("codeIndented");
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code4);
  }
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code4) : nok(code4);
  }
  function atBreak(code4) {
    if (code4 === null) {
      return after(code4);
    }
    if (markdownLineEnding(code4)) {
      return effects.attempt(furtherStart, atBreak, after)(code4);
    }
    effects.enter("codeFlowValue");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("codeFlowValue");
      return atBreak(code4);
    }
    effects.consume(code4);
    return inside;
  }
  function after(code4) {
    effects.exit("codeIndented");
    return ok3(code4);
  }
}
function tokenizeFurtherStart(effects, ok3, nok) {
  const self2 = this;
  return furtherStart2;
  function furtherStart2(code4) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return furtherStart2;
    }
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code4);
  }
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok3(code4) : markdownLineEnding(code4) ? furtherStart2(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/code-text.js
var codeText = {
  name: "codeText",
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index2;
  let enter;
  if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
    index2 = headEnterIndex;
    while (++index2 < tailExitIndex) {
      if (events[index2][1].type === "codeTextData") {
        events[headEnterIndex][1].type = "codeTextPadding";
        events[tailExitIndex][1].type = "codeTextPadding";
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index2 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index2 <= tailExitIndex) {
    if (enter === void 0) {
      if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
        enter = index2;
      }
    } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
      events[enter][1].type = "codeTextData";
      if (index2 !== enter + 2) {
        events[enter][1].end = events[index2 - 1][1].end;
        events.splice(enter + 2, index2 - enter - 2);
        tailExitIndex -= index2 - enter - 2;
        index2 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events;
}
function previous(code4) {
  return code4 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function tokenizeCodeText(effects, ok3, nok) {
  const self2 = this;
  let sizeOpen = 0;
  let size;
  let token;
  return start2;
  function start2(code4) {
    effects.enter("codeText");
    effects.enter("codeTextSequence");
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === 96) {
      effects.consume(code4);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit("codeTextSequence");
    return between(code4);
  }
  function between(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 32) {
      effects.enter("space");
      effects.consume(code4);
      effects.exit("space");
      return between;
    }
    if (code4 === 96) {
      token = effects.enter("codeTextSequence");
      size = 0;
      return sequenceClose(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return between;
    }
    effects.enter("codeTextData");
    return data2(code4);
  }
  function data2(code4) {
    if (code4 === null || code4 === 32 || code4 === 96 || markdownLineEnding(code4)) {
      effects.exit("codeTextData");
      return between(code4);
    }
    effects.consume(code4);
    return data2;
  }
  function sequenceClose(code4) {
    if (code4 === 96) {
      effects.consume(code4);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit("codeTextSequence");
      effects.exit("codeText");
      return ok3(code4);
    }
    token.type = "codeTextData";
    return data2(code4);
  }
}

// node_modules/micromark-util-subtokenize/lib/splice-buffer.js
var SpliceBuffer = class {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(initial) {
    this.left = initial ? [...initial] : [];
    this.right = [];
  }
  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(index2) {
    if (index2 < 0 || index2 >= this.left.length + this.right.length) {
      throw new RangeError("Cannot access index `" + index2 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
    }
    if (index2 < this.left.length) return this.left[index2];
    return this.right[this.right.length - index2 + this.left.length - 1];
  }
  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }
  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    this.setCursor(0);
    return this.right.pop();
  }
  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(start2, end) {
    const stop = end === null || end === void 0 ? Number.POSITIVE_INFINITY : end;
    if (stop < this.left.length) {
      return this.left.slice(start2, stop);
    }
    if (start2 > this.left.length) {
      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start2 + this.left.length).reverse();
    }
    return this.left.slice(start2).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
  }
  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(start2, deleteCount, items) {
    const count = deleteCount || 0;
    this.setCursor(Math.trunc(start2));
    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
    if (items) chunkedPush(this.left, items);
    return removed.reverse();
  }
  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    this.setCursor(Number.POSITIVE_INFINITY);
    return this.left.pop();
  }
  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(item) {
    this.setCursor(Number.POSITIVE_INFINITY);
    this.left.push(item);
  }
  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(items) {
    this.setCursor(Number.POSITIVE_INFINITY);
    chunkedPush(this.left, items);
  }
  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(item) {
    this.setCursor(0);
    this.right.push(item);
  }
  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(items) {
    this.setCursor(0);
    chunkedPush(this.right, items.reverse());
  }
  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(n) {
    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;
    if (n < this.left.length) {
      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
      chunkedPush(this.right, removed.reverse());
    } else {
      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);
      chunkedPush(this.left, removed.reverse());
    }
  }
};
function chunkedPush(list4, right) {
  let chunkStart = 0;
  if (right.length < 1e4) {
    list4.push(...right);
  } else {
    while (chunkStart < right.length) {
      list4.push(...right.slice(chunkStart, chunkStart + 1e4));
      chunkStart += 1e4;
    }
  }
}

// node_modules/micromark-util-subtokenize/index.js
function subtokenize(eventsArray) {
  const jumps = {};
  let index2 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  const events = new SpliceBuffer(eventsArray);
  while (++index2 < events.length) {
    while (index2 in jumps) {
      index2 = jumps[index2];
    }
    event = events.get(index2);
    if (index2 && event[1].type === "chunkFlow" && events.get(index2 - 1)[1].type === "listItemPrefix") {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === "content") {
            break;
          }
          if (subevents[otherIndex][1].type === "chunkText") {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index2));
        index2 = jumps[index2];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index2;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events.get(otherIndex);
        if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events.get(lineIndex)[1].type = "lineEndingBlank";
            }
            otherEvent[1].type = "lineEnding";
            lineIndex = otherIndex;
          }
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);
        parameters = events.slice(lineIndex, index2);
        parameters.unshift(event);
        events.splice(lineIndex, index2 - lineIndex + 1, parameters);
      }
    }
  }
  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
  return !more;
}
function subcontent(events, eventIndex) {
  const token = events.get(eventIndex)[1];
  const context = events.get(eventIndex)[2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  const tokenizer2 = token._tokenizer || context.parser[token.contentType](token.start);
  const childEvents = tokenizer2.events;
  const jumps = [];
  const gaps = {};
  let stream;
  let previous3;
  let index2 = -1;
  let current2 = token;
  let adjust = 0;
  let start2 = 0;
  const breaks = [start2];
  while (current2) {
    while (events.get(++startPosition)[1] !== current2) {
    }
    startPositions.push(startPosition);
    if (!current2._tokenizer) {
      stream = context.sliceStream(current2);
      if (!current2.next) {
        stream.push(null);
      }
      if (previous3) {
        tokenizer2.defineSkip(current2.start);
      }
      if (current2._isInFirstContentOfListItem) {
        tokenizer2._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer2.write(stream);
      if (current2._isInFirstContentOfListItem) {
        tokenizer2._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous3 = current2;
    current2 = current2.next;
  }
  current2 = token;
  while (++index2 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
    ) {
      start2 = index2 + 1;
      breaks.push(start2);
      current2._tokenizer = void 0;
      current2.previous = void 0;
      current2 = current2.next;
    }
  }
  tokenizer2.events = [];
  if (current2) {
    current2._tokenizer = void 0;
    current2.previous = void 0;
  } else {
    breaks.pop();
  }
  index2 = breaks.length;
  while (index2--) {
    const slice2 = childEvents.slice(breaks[index2], breaks[index2 + 1]);
    const start3 = startPositions.pop();
    jumps.push([start3, start3 + slice2.length - 1]);
    events.splice(start3, 2, slice2);
  }
  jumps.reverse();
  index2 = -1;
  while (++index2 < jumps.length) {
    gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
    adjust += jumps[index2][1] - jumps[index2][0] - 1;
  }
  return gaps;
}

// node_modules/micromark-core-commonmark/lib/content.js
var content = {
  tokenize: tokenizeContent,
  resolve: resolveContent
};
var continuationConstruct = {
  tokenize: tokenizeContinuation,
  partial: true
};
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok3) {
  let previous3;
  return chunkStart;
  function chunkStart(code4) {
    effects.enter("content");
    previous3 = effects.enter("chunkContent", {
      contentType: "content"
    });
    return chunkInside(code4);
  }
  function chunkInside(code4) {
    if (code4 === null) {
      return contentEnd(code4);
    }
    if (markdownLineEnding(code4)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code4);
    }
    effects.consume(code4);
    return chunkInside;
  }
  function contentEnd(code4) {
    effects.exit("chunkContent");
    effects.exit("content");
    return ok3(code4);
  }
  function contentContinue(code4) {
    effects.consume(code4);
    effects.exit("chunkContent");
    previous3.next = effects.enter("chunkContent", {
      contentType: "content",
      previous: previous3
    });
    previous3 = previous3.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok3, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code4) {
    effects.exit("chunkContent");
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return factorySpace(effects, prefixed, "linePrefix");
  }
  function prefixed(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return nok(code4);
    }
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok3(code4);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code4);
  }
}

// node_modules/micromark-factory-destination/index.js
function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max2) {
  const limit = max2 || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start2;
  function start2(code4) {
    if (code4 === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code4);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code4 === null || code4 === 32 || code4 === 41 || asciiControl(code4)) {
      return nok(code4);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return raw(code4);
  }
  function enclosedBefore(code4) {
    if (code4 === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code4);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return enclosed(code4);
  }
  function enclosed(code4) {
    if (code4 === 62) {
      effects.exit("chunkString");
      effects.exit(stringType);
      return enclosedBefore(code4);
    }
    if (code4 === null || code4 === 60 || markdownLineEnding(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code4) {
    if (code4 === 60 || code4 === 62 || code4 === 92) {
      effects.consume(code4);
      return enclosed;
    }
    return enclosed(code4);
  }
  function raw(code4) {
    if (!balance && (code4 === null || code4 === 41 || markdownLineEndingOrSpace(code4))) {
      effects.exit("chunkString");
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok3(code4);
    }
    if (balance < limit && code4 === 40) {
      effects.consume(code4);
      balance++;
      return raw;
    }
    if (code4 === 41) {
      effects.consume(code4);
      balance--;
      return raw;
    }
    if (code4 === null || code4 === 32 || code4 === 40 || asciiControl(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? rawEscape : raw;
  }
  function rawEscape(code4) {
    if (code4 === 40 || code4 === 41 || code4 === 92) {
      effects.consume(code4);
      return raw;
    }
    return raw(code4);
  }
}

// node_modules/micromark-factory-label/index.js
function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
  const self2 = this;
  let size = 0;
  let seen;
  return start2;
  function start2(code4) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code4);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code4) {
    if (size > 999 || code4 === null || code4 === 91 || code4 === 93 && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code4 === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return atBreak;
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return labelInside(code4);
  }
  function labelInside(code4) {
    if (code4 === null || code4 === 91 || code4 === 93 || markdownLineEnding(code4) || size++ > 999) {
      effects.exit("chunkString");
      return atBreak(code4);
    }
    effects.consume(code4);
    if (!seen) seen = !markdownSpace(code4);
    return code4 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code4) {
    if (code4 === 91 || code4 === 92 || code4 === 93) {
      effects.consume(code4);
      size++;
      return labelInside;
    }
    return labelInside(code4);
  }
}

// node_modules/micromark-factory-title/index.js
function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
  let marker;
  return start2;
  function start2(code4) {
    if (code4 === 34 || code4 === 39 || code4 === 40) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      marker = code4 === 40 ? 41 : code4;
      return begin;
    }
    return nok(code4);
  }
  function begin(code4) {
    if (code4 === marker) {
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    return atBreak(code4);
  }
  function atBreak(code4) {
    if (code4 === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code4 === null) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return factorySpace(effects, atBreak, "linePrefix");
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker || code4 === null || markdownLineEnding(code4)) {
      effects.exit("chunkString");
      return atBreak(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? escape : inside;
  }
  function escape(code4) {
    if (code4 === marker || code4 === 92) {
      effects.consume(code4);
      return inside;
    }
    return inside(code4);
  }
}

// node_modules/micromark-factory-whitespace/index.js
function factoryWhitespace(effects, ok3) {
  let seen;
  return start2;
  function start2(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      seen = true;
      return start2;
    }
    if (markdownSpace(code4)) {
      return factorySpace(
        effects,
        start2,
        seen ? "linePrefix" : "lineSuffix"
      )(code4);
    }
    return ok3(code4);
  }
}

// node_modules/micromark-util-normalize-identifier/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

// node_modules/micromark-core-commonmark/lib/definition.js
var definition = {
  name: "definition",
  tokenize: tokenizeDefinition
};
var titleBefore = {
  tokenize: tokenizeTitleBefore,
  partial: true
};
function tokenizeDefinition(effects, ok3, nok) {
  const self2 = this;
  let identifier;
  return start2;
  function start2(code4) {
    effects.enter("definition");
    return before(code4);
  }
  function before(code4) {
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(code4);
  }
  function labelAfter(code4) {
    identifier = normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1));
    if (code4 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code4);
      effects.exit("definitionMarker");
      return markerAfter;
    }
    return nok(code4);
  }
  function markerAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, destinationBefore)(code4) : destinationBefore(code4);
  }
  function destinationBefore(code4) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(code4);
  }
  function destinationAfter(code4) {
    return effects.attempt(titleBefore, after, after)(code4);
  }
  function after(code4) {
    return markdownSpace(code4) ? factorySpace(effects, afterWhitespace, "whitespace")(code4) : afterWhitespace(code4);
  }
  function afterWhitespace(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("definition");
      self2.parser.defined.push(identifier);
      return ok3(code4);
    }
    return nok(code4);
  }
}
function tokenizeTitleBefore(effects, ok3, nok) {
  return titleBefore2;
  function titleBefore2(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, beforeMarker)(code4) : nok(code4);
  }
  function beforeMarker(code4) {
    return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code4);
  }
  function titleAfter(code4) {
    return markdownSpace(code4) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code4) : titleAfterOptionalWhitespace(code4);
  }
  function titleAfterOptionalWhitespace(code4) {
    return code4 === null || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("hardBreakEscape");
    effects.consume(code4);
    return after;
  }
  function after(code4) {
    if (markdownLineEnding(code4)) {
      effects.exit("hardBreakEscape");
      return ok3(code4);
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content3;
  let text7;
  if (events[contentStart][1].type === "whitespace") {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content3 = {
      type: "atxHeadingText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text7 = {
      type: "chunkText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: "text"
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [["enter", content3, context], ["enter", text7, context], ["exit", text7, context], ["exit", content3, context]]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok3, nok) {
  let size = 0;
  return start2;
  function start2(code4) {
    effects.enter("atxHeading");
    return before(code4);
  }
  function before(code4) {
    effects.enter("atxHeadingSequence");
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === 35 && size++ < 6) {
      effects.consume(code4);
      return sequenceOpen;
    }
    if (code4 === null || markdownLineEndingOrSpace(code4)) {
      effects.exit("atxHeadingSequence");
      return atBreak(code4);
    }
    return nok(code4);
  }
  function atBreak(code4) {
    if (code4 === 35) {
      effects.enter("atxHeadingSequence");
      return sequenceFurther(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("atxHeading");
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, atBreak, "whitespace")(code4);
    }
    effects.enter("atxHeadingText");
    return data2(code4);
  }
  function sequenceFurther(code4) {
    if (code4 === 35) {
      effects.consume(code4);
      return sequenceFurther;
    }
    effects.exit("atxHeadingSequence");
    return atBreak(code4);
  }
  function data2(code4) {
    if (code4 === null || code4 === 35 || markdownLineEndingOrSpace(code4)) {
      effects.exit("atxHeadingText");
      return atBreak(code4);
    }
    effects.consume(code4);
    return data2;
  }
}

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var htmlRawNames = ["pre", "script", "style", "textarea"];

// node_modules/micromark-core-commonmark/lib/html-flow.js
var htmlFlow = {
  name: "htmlFlow",
  tokenize: tokenizeHtmlFlow,
  resolveTo: resolveToHtmlFlow,
  concrete: true
};
var blankLineBefore = {
  tokenize: tokenizeBlankLineBefore,
  partial: true
};
var nonLazyContinuationStart = {
  tokenize: tokenizeNonLazyContinuationStart,
  partial: true
};
function resolveToHtmlFlow(events) {
  let index2 = events.length;
  while (index2--) {
    if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
      break;
    }
  }
  if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
    events[index2][1].start = events[index2 - 2][1].start;
    events[index2 + 1][1].start = events[index2 - 2][1].start;
    events.splice(index2 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let closingTag;
  let buffer;
  let index2;
  let markerB;
  return start2;
  function start2(code4) {
    return before(code4);
  }
  function before(code4) {
    effects.enter("htmlFlow");
    effects.enter("htmlFlowData");
    effects.consume(code4);
    return open;
  }
  function open(code4) {
    if (code4 === 33) {
      effects.consume(code4);
      return declarationOpen;
    }
    if (code4 === 47) {
      effects.consume(code4);
      closingTag = true;
      return tagCloseStart;
    }
    if (code4 === 63) {
      effects.consume(code4);
      marker = 3;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      buffer = String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function declarationOpen(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      marker = 2;
      return commentOpenInside;
    }
    if (code4 === 91) {
      effects.consume(code4);
      marker = 5;
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      marker = 4;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code4);
  }
  function commentOpenInside(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code4);
  }
  function cdataOpenInside(code4) {
    const value = "CDATA[";
    if (code4 === value.charCodeAt(index2++)) {
      effects.consume(code4);
      if (index2 === value.length) {
        return self2.interrupt ? ok3 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code4);
  }
  function tagCloseStart(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      buffer = String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function tagName(code4) {
    if (code4 === null || code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      const slash = code4 === 47;
      const name2 = buffer.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name2)) {
        marker = 1;
        return self2.interrupt ? ok3(code4) : continuation(code4);
      }
      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        marker = 6;
        if (slash) {
          effects.consume(code4);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok3(code4) : continuation(code4);
      }
      marker = 7;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code4) : closingTag ? completeClosingTagAfter(code4) : completeAttributeNameBefore(code4);
    }
    if (code4 === 45 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function basicSelfClosing(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      return self2.interrupt ? ok3 : continuation;
    }
    return nok(code4);
  }
  function completeClosingTagAfter(code4) {
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeClosingTagAfter;
    }
    return completeEnd(code4);
  }
  function completeAttributeNameBefore(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      return completeEnd;
    }
    if (code4 === 58 || code4 === 95 || asciiAlpha(code4)) {
      effects.consume(code4);
      return completeAttributeName;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeNameBefore;
    }
    return completeEnd(code4);
  }
  function completeAttributeName(code4) {
    if (code4 === 45 || code4 === 46 || code4 === 58 || code4 === 95 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code4);
  }
  function completeAttributeNameAfter(code4) {
    if (code4 === 61) {
      effects.consume(code4);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code4);
  }
  function completeAttributeValueBefore(code4) {
    if (code4 === null || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96) {
      return nok(code4);
    }
    if (code4 === 34 || code4 === 39) {
      effects.consume(code4);
      markerB = code4;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code4);
  }
  function completeAttributeValueQuoted(code4) {
    if (code4 === markerB) {
      effects.consume(code4);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code4 === null || markdownLineEnding(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code4) {
    if (code4 === null || code4 === 34 || code4 === 39 || code4 === 47 || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96 || markdownLineEndingOrSpace(code4)) {
      return completeAttributeNameAfter(code4);
    }
    effects.consume(code4);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code4) {
    if (code4 === 47 || code4 === 62 || markdownSpace(code4)) {
      return completeAttributeNameBefore(code4);
    }
    return nok(code4);
  }
  function completeEnd(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      return completeAfter;
    }
    return nok(code4);
  }
  function completeAfter(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return continuation(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAfter;
    }
    return nok(code4);
  }
  function continuation(code4) {
    if (code4 === 45 && marker === 2) {
      effects.consume(code4);
      return continuationCommentInside;
    }
    if (code4 === 60 && marker === 1) {
      effects.consume(code4);
      return continuationRawTagOpen;
    }
    if (code4 === 62 && marker === 4) {
      effects.consume(code4);
      return continuationClose;
    }
    if (code4 === 63 && marker === 3) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    if (code4 === 93 && marker === 5) {
      effects.consume(code4);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code4) && (marker === 6 || marker === 7)) {
      effects.exit("htmlFlowData");
      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("htmlFlowData");
      return continuationStart(code4);
    }
    effects.consume(code4);
    return continuation;
  }
  function continuationStart(code4) {
    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code4);
  }
  function continuationStartNonLazy(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return continuationBefore;
  }
  function continuationBefore(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return continuationStart(code4);
    }
    effects.enter("htmlFlowData");
    return continuation(code4);
  }
  function continuationCommentInside(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationRawTagOpen(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      buffer = "";
      return continuationRawEndTag;
    }
    return continuation(code4);
  }
  function continuationRawEndTag(code4) {
    if (code4 === 62) {
      const name2 = buffer.toLowerCase();
      if (htmlRawNames.includes(name2)) {
        effects.consume(code4);
        return continuationClose;
      }
      return continuation(code4);
    }
    if (asciiAlpha(code4) && buffer.length < 8) {
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return continuationRawEndTag;
    }
    return continuation(code4);
  }
  function continuationCdataInside(code4) {
    if (code4 === 93) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationDeclarationInside(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      return continuationClose;
    }
    if (code4 === 45 && marker === 2) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationClose(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("htmlFlowData");
      return continuationAfter(code4);
    }
    effects.consume(code4);
    return continuationClose;
  }
  function continuationAfter(code4) {
    effects.exit("htmlFlow");
    return ok3(code4);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    return self2.parser.lazy[self2.now().line] ? nok(code4) : ok3(code4);
  }
}
function tokenizeBlankLineBefore(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return effects.attempt(blankLine, ok3, nok);
  }
}

// node_modules/micromark-core-commonmark/lib/html-text.js
var htmlText = {
  name: "htmlText",
  tokenize: tokenizeHtmlText
};
function tokenizeHtmlText(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let index2;
  let returnState;
  return start2;
  function start2(code4) {
    effects.enter("htmlText");
    effects.enter("htmlTextData");
    effects.consume(code4);
    return open;
  }
  function open(code4) {
    if (code4 === 33) {
      effects.consume(code4);
      return declarationOpen;
    }
    if (code4 === 47) {
      effects.consume(code4);
      return tagCloseStart;
    }
    if (code4 === 63) {
      effects.consume(code4);
      return instruction;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return tagOpen;
    }
    return nok(code4);
  }
  function declarationOpen(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return commentOpenInside;
    }
    if (code4 === 91) {
      effects.consume(code4);
      index2 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return declaration;
    }
    return nok(code4);
  }
  function commentOpenInside(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return commentEnd;
    }
    return nok(code4);
  }
  function comment2(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 45) {
      effects.consume(code4);
      return commentClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = comment2;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return comment2;
  }
  function commentClose(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return commentEnd;
    }
    return comment2(code4);
  }
  function commentEnd(code4) {
    return code4 === 62 ? end(code4) : code4 === 45 ? commentClose(code4) : comment2(code4);
  }
  function cdataOpenInside(code4) {
    const value = "CDATA[";
    if (code4 === value.charCodeAt(index2++)) {
      effects.consume(code4);
      return index2 === value.length ? cdata : cdataOpenInside;
    }
    return nok(code4);
  }
  function cdata(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.consume(code4);
      return cdataClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = cdata;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return cdata;
  }
  function cdataClose(code4) {
    if (code4 === 93) {
      effects.consume(code4);
      return cdataEnd;
    }
    return cdata(code4);
  }
  function cdataEnd(code4) {
    if (code4 === 62) {
      return end(code4);
    }
    if (code4 === 93) {
      effects.consume(code4);
      return cdataEnd;
    }
    return cdata(code4);
  }
  function declaration(code4) {
    if (code4 === null || code4 === 62) {
      return end(code4);
    }
    if (markdownLineEnding(code4)) {
      returnState = declaration;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return declaration;
  }
  function instruction(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 63) {
      effects.consume(code4);
      return instructionClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = instruction;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return instruction;
  }
  function instructionClose(code4) {
    return code4 === 62 ? end(code4) : instruction(code4);
  }
  function tagCloseStart(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return tagClose;
    }
    return nok(code4);
  }
  function tagClose(code4) {
    if (code4 === 45 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagClose;
    }
    return tagCloseBetween(code4);
  }
  function tagCloseBetween(code4) {
    if (markdownLineEnding(code4)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagCloseBetween;
    }
    return end(code4);
  }
  function tagOpen(code4) {
    if (code4 === 45 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagOpen;
    }
    if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    return nok(code4);
  }
  function tagOpenBetween(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      return end;
    }
    if (code4 === 58 || code4 === 95 || asciiAlpha(code4)) {
      effects.consume(code4);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenBetween;
    }
    return end(code4);
  }
  function tagOpenAttributeName(code4) {
    if (code4 === 45 || code4 === 46 || code4 === 58 || code4 === 95 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code4);
  }
  function tagOpenAttributeNameAfter(code4) {
    if (code4 === 61) {
      effects.consume(code4);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code4);
  }
  function tagOpenAttributeValueBefore(code4) {
    if (code4 === null || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96) {
      return nok(code4);
    }
    if (code4 === 34 || code4 === 39) {
      effects.consume(code4);
      marker = code4;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code4);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code4 === null) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code4) {
    if (code4 === null || code4 === 34 || code4 === 39 || code4 === 60 || code4 === 61 || code4 === 96) {
      return nok(code4);
    }
    if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    effects.consume(code4);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code4) {
    if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    return nok(code4);
  }
  function end(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      effects.exit("htmlTextData");
      effects.exit("htmlText");
      return ok3;
    }
    return nok(code4);
  }
  function lineEndingBefore(code4) {
    effects.exit("htmlTextData");
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return lineEndingAfter;
  }
  function lineEndingAfter(code4) {
    return markdownSpace(code4) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4) : lineEndingAfterPrefix(code4);
  }
  function lineEndingAfterPrefix(code4) {
    effects.enter("htmlTextData");
    return returnState(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/label-end.js
var labelEnd = {
  name: "labelEnd",
  tokenize: tokenizeLabelEnd,
  resolveTo: resolveToLabelEnd,
  resolveAll: resolveAllLabelEnd
};
var resourceConstruct = {
  tokenize: tokenizeResource
};
var referenceFullConstruct = {
  tokenize: tokenizeReferenceFull
};
var referenceCollapsedConstruct = {
  tokenize: tokenizeReferenceCollapsed
};
function resolveAllLabelEnd(events) {
  let index2 = -1;
  while (++index2 < events.length) {
    const token = events[index2][1];
    if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
      events.splice(index2 + 1, token.type === "labelImage" ? 4 : 2);
      token.type = "data";
      index2++;
    }
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index2 = events.length;
  let offset2 = 0;
  let token;
  let open;
  let close;
  let media;
  while (index2--) {
    token = events[index2][1];
    if (open) {
      if (token.type === "link" || token.type === "labelLink" && token._inactive) {
        break;
      }
      if (events[index2][0] === "enter" && token.type === "labelLink") {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
        open = index2;
        if (token.type !== "labelLink") {
          offset2 = 2;
          break;
        }
      }
    } else if (token.type === "labelEnd") {
      close = index2;
    }
  }
  const group = {
    type: events[open][1].type === "labelLink" ? "link" : "image",
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const label = {
    type: "label",
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[close][1].end)
  };
  const text7 = {
    type: "labelText",
    start: Object.assign({}, events[open + offset2 + 2][1].end),
    end: Object.assign({}, events[close - 2][1].start)
  };
  media = [["enter", group, context], ["enter", label, context]];
  media = push(media, events.slice(open + 1, open + offset2 + 3));
  media = push(media, [["enter", text7, context]]);
  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset2 + 4, close - 3), context));
  media = push(media, [["exit", text7, context], events[close - 2], events[close - 1], ["exit", label, context]]);
  media = push(media, events.slice(close + 1));
  media = push(media, [["exit", group, context]]);
  splice(events, open, events.length, media);
  return events;
}
function tokenizeLabelEnd(effects, ok3, nok) {
  const self2 = this;
  let index2 = self2.events.length;
  let labelStart;
  let defined;
  while (index2--) {
    if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
      labelStart = self2.events[index2][1];
      break;
    }
  }
  return start2;
  function start2(code4) {
    if (!labelStart) {
      return nok(code4);
    }
    if (labelStart._inactive) {
      return labelEndNok(code4);
    }
    defined = self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize({
      start: labelStart.end,
      end: self2.now()
    })));
    effects.enter("labelEnd");
    effects.enter("labelMarker");
    effects.consume(code4);
    effects.exit("labelMarker");
    effects.exit("labelEnd");
    return after;
  }
  function after(code4) {
    if (code4 === 40) {
      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code4);
    }
    if (code4 === 91) {
      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code4);
    }
    return defined ? labelEndOk(code4) : labelEndNok(code4);
  }
  function referenceNotFull(code4) {
    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code4);
  }
  function labelEndOk(code4) {
    return ok3(code4);
  }
  function labelEndNok(code4) {
    labelStart._balanced = true;
    return nok(code4);
  }
}
function tokenizeResource(effects, ok3, nok) {
  return resourceStart;
  function resourceStart(code4) {
    effects.enter("resource");
    effects.enter("resourceMarker");
    effects.consume(code4);
    effects.exit("resourceMarker");
    return resourceBefore;
  }
  function resourceBefore(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceOpen)(code4) : resourceOpen(code4);
  }
  function resourceOpen(code4) {
    if (code4 === 41) {
      return resourceEnd(code4);
    }
    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code4);
  }
  function resourceDestinationAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceBetween)(code4) : resourceEnd(code4);
  }
  function resourceDestinationMissing(code4) {
    return nok(code4);
  }
  function resourceBetween(code4) {
    if (code4 === 34 || code4 === 39 || code4 === 40) {
      return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code4);
    }
    return resourceEnd(code4);
  }
  function resourceTitleAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceEnd)(code4) : resourceEnd(code4);
  }
  function resourceEnd(code4) {
    if (code4 === 41) {
      effects.enter("resourceMarker");
      effects.consume(code4);
      effects.exit("resourceMarker");
      effects.exit("resource");
      return ok3;
    }
    return nok(code4);
  }
}
function tokenizeReferenceFull(effects, ok3, nok) {
  const self2 = this;
  return referenceFull;
  function referenceFull(code4) {
    return factoryLabel.call(self2, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code4);
  }
  function referenceFullAfter(code4) {
    return self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1))) ? ok3(code4) : nok(code4);
  }
  function referenceFullMissing(code4) {
    return nok(code4);
  }
}
function tokenizeReferenceCollapsed(effects, ok3, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code4) {
    effects.enter("reference");
    effects.enter("referenceMarker");
    effects.consume(code4);
    effects.exit("referenceMarker");
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code4) {
    if (code4 === 93) {
      effects.enter("referenceMarker");
      effects.consume(code4);
      effects.exit("referenceMarker");
      effects.exit("reference");
      return ok3;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  tokenize: tokenizeLabelStartImage,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartImage(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    effects.enter("labelImage");
    effects.enter("labelImageMarker");
    effects.consume(code4);
    effects.exit("labelImageMarker");
    return open;
  }
  function open(code4) {
    if (code4 === 91) {
      effects.enter("labelMarker");
      effects.consume(code4);
      effects.exit("labelMarker");
      effects.exit("labelImage");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    return code4 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  tokenize: tokenizeLabelStartLink,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartLink(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    effects.enter("labelLink");
    effects.enter("labelMarker");
    effects.consume(code4);
    effects.exit("labelMarker");
    effects.exit("labelLink");
    return after;
  }
  function after(code4) {
    return code4 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/line-ending.js
var lineEnding = {
  name: "lineEnding",
  tokenize: tokenizeLineEnding
};
function tokenizeLineEnding(effects, ok3) {
  return start2;
  function start2(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return factorySpace(effects, ok3, "linePrefix");
  }
}

// node_modules/micromark-core-commonmark/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok3, nok) {
  let size = 0;
  let marker;
  return start2;
  function start2(code4) {
    effects.enter("thematicBreak");
    return before(code4);
  }
  function before(code4) {
    marker = code4;
    return atBreak(code4);
  }
  function atBreak(code4) {
    if (code4 === marker) {
      effects.enter("thematicBreakSequence");
      return sequence(code4);
    }
    if (size >= 3 && (code4 === null || markdownLineEnding(code4))) {
      effects.exit("thematicBreak");
      return ok3(code4);
    }
    return nok(code4);
  }
  function sequence(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      size++;
      return sequence;
    }
    effects.exit("thematicBreakSequence");
    return markdownSpace(code4) ? factorySpace(effects, atBreak, "whitespace")(code4) : atBreak(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/list.js
var list = {
  name: "list",
  tokenize: tokenizeListStart,
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd
};
var listItemPrefixWhitespaceConstruct = {
  tokenize: tokenizeListItemPrefixWhitespace,
  partial: true
};
var indentConstruct = {
  tokenize: tokenizeIndent,
  partial: true
};
function tokenizeListStart(effects, ok3, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start2;
  function start2(code4) {
    const kind = self2.containerState.type || (code4 === 42 || code4 === 43 || code4 === 45 ? "listUnordered" : "listOrdered");
    if (kind === "listUnordered" ? !self2.containerState.marker || code4 === self2.containerState.marker : asciiDigit(code4)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === "listUnordered") {
        effects.enter("listItemPrefix");
        return code4 === 42 || code4 === 45 ? effects.check(thematicBreak, nok, atMarker)(code4) : atMarker(code4);
      }
      if (!self2.interrupt || code4 === 49) {
        effects.enter("listItemPrefix");
        effects.enter("listItemValue");
        return inside(code4);
      }
    }
    return nok(code4);
  }
  function inside(code4) {
    if (asciiDigit(code4) && ++size < 10) {
      effects.consume(code4);
      return inside;
    }
    if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code4 === self2.containerState.marker : code4 === 41 || code4 === 46)) {
      effects.exit("listItemValue");
      return atMarker(code4);
    }
    return nok(code4);
  }
  function atMarker(code4) {
    effects.enter("listItemMarker");
    effects.consume(code4);
    effects.exit("listItemMarker");
    self2.containerState.marker = self2.containerState.marker || code4;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix)
    );
  }
  function onBlank(code4) {
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code4);
  }
  function otherPrefix(code4) {
    if (markdownSpace(code4)) {
      effects.enter("listItemPrefixWhitespace");
      effects.consume(code4);
      effects.exit("listItemPrefixWhitespace");
      return endOfPrefix;
    }
    return nok(code4);
  }
  function endOfPrefix(code4) {
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
    return ok3(code4);
  }
}
function tokenizeListContinuation(effects, ok3, nok) {
  const self2 = this;
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code4) {
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(effects, ok3, "listItemIndent", self2.containerState.size + 1)(code4);
  }
  function notBlank(code4) {
    if (self2.containerState.furtherBlankLines || !markdownSpace(code4)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code4);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code4);
  }
  function notInCurrentItem(code4) {
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    return factorySpace(effects, effects.attempt(list, ok3, nok), "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4);
  }
}
function tokenizeIndent(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "listItemIndent", self2.containerState.size + 1);
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok3(code4) : nok(code4);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1);
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code4) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline
};
function resolveToSetextUnderline(events, context) {
  let index2 = events.length;
  let content3;
  let text7;
  let definition3;
  while (index2--) {
    if (events[index2][0] === "enter") {
      if (events[index2][1].type === "content") {
        content3 = index2;
        break;
      }
      if (events[index2][1].type === "paragraph") {
        text7 = index2;
      }
    } else {
      if (events[index2][1].type === "content") {
        events.splice(index2, 1);
      }
      if (!definition3 && events[index2][1].type === "definition") {
        definition3 = index2;
      }
    }
  }
  const heading3 = {
    type: "setextHeading",
    start: Object.assign({}, events[text7][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  events[text7][1].type = "setextHeadingText";
  if (definition3) {
    events.splice(text7, 0, ["enter", heading3, context]);
    events.splice(definition3 + 1, 0, ["exit", events[content3][1], context]);
    events[content3][1].end = Object.assign({}, events[definition3][1].end);
  } else {
    events[content3][1] = heading3;
  }
  events.push(["exit", heading3, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok3, nok) {
  const self2 = this;
  let marker;
  return start2;
  function start2(code4) {
    let index2 = self2.events.length;
    let paragraph3;
    while (index2--) {
      if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
        paragraph3 = self2.events[index2][1].type === "paragraph";
        break;
      }
    }
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph3)) {
      effects.enter("setextHeadingLine");
      marker = code4;
      return before(code4);
    }
    return nok(code4);
  }
  function before(code4) {
    effects.enter("setextHeadingLineSequence");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      return inside;
    }
    effects.exit("setextHeadingLineSequence");
    return markdownSpace(code4) ? factorySpace(effects, after, "lineSuffix")(code4) : after(code4);
  }
  function after(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("setextHeadingLine");
      return ok3(code4);
    }
    return nok(code4);
  }
}

// node_modules/micromark-extension-mdxjs-esm/lib/syntax.js
var blankLineBefore2 = {
  tokenize: tokenizeNextBlank,
  partial: true
};
var trouble3 = "https://github.com/micromark/micromark-extension-mdxjs-esm";
var allowedAcornTypes = /* @__PURE__ */ new Set(["ExportAllDeclaration", "ExportDefaultDeclaration", "ExportNamedDeclaration", "ImportDeclaration"]);
function mdxjsEsm(options) {
  const exportImportConstruct = {
    tokenize: tokenizeExportImport,
    concrete: true
  };
  if (!options || !options.acorn || !options.acorn.parse) {
    throw new Error("Expected an `acorn` instance passed in as `options.acorn`");
  }
  const acorn = options.acorn;
  const acornOptions = Object.assign({
    ecmaVersion: 2024,
    sourceType: "module"
  }, options.acornOptions, {
    locations: true
  });
  return {
    flow: {
      [101]: exportImportConstruct,
      [105]: exportImportConstruct
    }
  };
  function tokenizeExportImport(effects, ok3, nok) {
    const self2 = this;
    const definedModuleSpecifiers = self2.parser.definedModuleSpecifiers || (self2.parser.definedModuleSpecifiers = []);
    const eventStart = this.events.length + 1;
    let buffer = "";
    return self2.interrupt ? nok : start2;
    function start2(code4) {
      if (self2.now().column > 1) return nok(code4);
      effects.enter("mdxjsEsm");
      effects.enter("mdxjsEsmData");
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return word;
    }
    function word(code4) {
      if (asciiAlpha(code4)) {
        effects.consume(code4);
        buffer += String.fromCharCode(code4);
        return word;
      }
      if ((buffer === "import" || buffer === "export") && code4 === 32) {
        effects.consume(code4);
        return inside;
      }
      return nok(code4);
    }
    function inside(code4) {
      if (code4 === null || markdownLineEnding(code4)) {
        effects.exit("mdxjsEsmData");
        return lineStart(code4);
      }
      effects.consume(code4);
      return inside;
    }
    function lineStart(code4) {
      if (code4 === null) {
        return atEnd(code4);
      }
      if (markdownLineEnding(code4)) {
        return effects.check(blankLineBefore2, atEnd, continuationStart)(code4);
      }
      effects.enter("mdxjsEsmData");
      return inside(code4);
    }
    function continuationStart(code4) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return lineStart;
    }
    function atEnd(code4) {
      const result = eventsToAcorn(self2.events.slice(eventStart), {
        acorn,
        acornOptions,
        tokenTypes: ["mdxjsEsmData"],
        prefix: definedModuleSpecifiers.length > 0 ? "var " + definedModuleSpecifiers.join(",") + "\n" : ""
      });
      if (result.error) {
        if (code4 !== null && result.swallow) {
          return continuationStart(code4);
        }
        const error = new VFileMessage("Could not parse import/exports with acorn", {
          cause: result.error,
          place: {
            line: result.error.loc.line,
            column: result.error.loc.column + 1,
            offset: result.error.pos
          },
          ruleId: "acorn",
          source: "micromark-extension-mdxjs-esm"
        });
        error.url = trouble3 + "#could-not-parse-importexports-with-acorn";
        throw error;
      }
      if (definedModuleSpecifiers.length > 0) {
        const declaration = result.estree.body.shift();
      }
      let index2 = -1;
      while (++index2 < result.estree.body.length) {
        const node2 = result.estree.body[index2];
        if (!allowedAcornTypes.has(node2.type)) {
          const error = new VFileMessage("Unexpected `" + node2.type + "` in code: only import/exports are supported", {
            place: positionFromEstree(node2),
            ruleId: "non-esm",
            source: "micromark-extension-mdxjs-esm"
          });
          error.url = trouble3 + "#unexpected-type-in-code-only-importexports-are-supported";
          throw error;
        }
        if (node2.type === "ImportDeclaration" && !self2.interrupt) {
          let index3 = -1;
          while (++index3 < node2.specifiers.length) {
            const specifier = node2.specifiers[index3];
            definedModuleSpecifiers.push(specifier.local.name);
          }
        }
      }
      Object.assign(effects.exit("mdxjsEsm"), options.addResult ? {
        estree: result.estree
      } : void 0);
      return ok3(code4);
    }
  }
}
function tokenizeNextBlank(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("lineEndingBlank");
    effects.consume(code4);
    effects.exit("lineEndingBlank");
    return effects.attempt(blankLine, ok3, nok);
  }
}

// node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty2 = {}.hasOwnProperty;
function combineExtensions(extensions) {
  const all4 = {};
  let index2 = -1;
  while (++index2 < extensions.length) {
    syntaxExtension(all4, extensions[index2]);
  }
  return all4;
}
function syntaxExtension(all4, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty2.call(all4, hook) ? all4[hook] : void 0;
    const left = maybe || (all4[hook] = {});
    const right = extension2[hook];
    let code4;
    if (right) {
      for (code4 in right) {
        if (!hasOwnProperty2.call(left, code4)) left[code4] = [];
        const value = right[code4];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code4],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}
function constructs(existing, list4) {
  let index2 = -1;
  const before = [];
  while (++index2 < list4.length) {
    ;
    (list4[index2].add === "after" ? existing : before).push(list4[index2]);
  }
  splice(existing, 0, 0, before);
}

// node_modules/micromark-extension-mdxjs/index.js
function mdxjs(options) {
  const settings = Object.assign(
    {
      acorn: Parser.extend((0, import_acorn_jsx.default)()),
      acornOptions: { ecmaVersion: 2024, sourceType: "module" },
      addResult: true
    },
    options
  );
  return combineExtensions([
    mdxjsEsm(settings),
    mdxExpression(settings),
    mdxJsx(settings),
    mdxMd()
  ]);
}

// node_modules/remark-mdx/lib/index.js
var emptyOptions2 = {};
function remarkMdx(options) {
  const self2 = (
    /** @type {Processor} */
    this
  );
  const settings = options || emptyOptions2;
  const data2 = self2.data();
  const micromarkExtensions = data2.micromarkExtensions || (data2.micromarkExtensions = []);
  const fromMarkdownExtensions = data2.fromMarkdownExtensions || (data2.fromMarkdownExtensions = []);
  const toMarkdownExtensions = data2.toMarkdownExtensions || (data2.toMarkdownExtensions = []);
  micromarkExtensions.push(mdxjs(settings));
  fromMarkdownExtensions.push(mdxFromMarkdown());
  toMarkdownExtensions.push(mdxToMarkdown(settings));
}

// node_modules/mdast-util-to-string/lib/index.js
var emptyOptions3 = {};
function toString2(value, options) {
  const settings = options || emptyOptions3;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one(value, includeImageAlt, includeHtml);
}
function one(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values, includeImageAlt, includeHtml) {
  const result = [];
  let index2 = -1;
  while (++index2 < values.length) {
    result[index2] = one(values[index2], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value) {
  return Boolean(value && typeof value === "object");
}

// node_modules/micromark-util-decode-numeric-character-reference/index.js
function decodeNumericCharacterReference(value, base) {
  const code4 = Number.parseInt(value, base);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code4 < 9 || code4 === 11 || code4 > 13 && code4 < 32 || // Control character (DEL) of C0, and C1 controls.
    code4 > 126 && code4 < 160 || // Lone high surrogates and low surrogates.
    code4 > 55295 && code4 < 57344 || // Noncharacters.
    code4 > 64975 && code4 < 65008 || /* eslint-disable no-bitwise */
    (code4 & 65535) === 65535 || (code4 & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    code4 > 1114111
  ) {
    return "\uFFFD";
  }
  return String.fromCodePoint(code4);
}

// node_modules/micromark-util-sanitize-uri/index.js
function normalizeUri(value) {
  const result = [];
  let index2 = -1;
  let start2 = 0;
  let skip = 0;
  while (++index2 < value.length) {
    const code4 = value.charCodeAt(index2);
    let replace3 = "";
    if (code4 === 37 && asciiAlphanumeric(value.charCodeAt(index2 + 1)) && asciiAlphanumeric(value.charCodeAt(index2 + 2))) {
      skip = 2;
    } else if (code4 < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code4))) {
        replace3 = String.fromCharCode(code4);
      }
    } else if (code4 > 55295 && code4 < 57344) {
      const next = value.charCodeAt(index2 + 1);
      if (code4 < 56320 && next > 56319 && next < 57344) {
        replace3 = String.fromCharCode(code4, next);
        skip = 1;
      } else {
        replace3 = "\uFFFD";
      }
    } else {
      replace3 = String.fromCharCode(code4);
    }
    if (replace3) {
      result.push(value.slice(start2, index2), encodeURIComponent(replace3));
      start2 = index2 + skip + 1;
      replace3 = "";
    }
    if (skip) {
      index2 += skip;
      skip = 0;
    }
  }
  return result.join("") + value.slice(start2);
}

// node_modules/micromark/lib/initialize/content.js
var content2 = {
  tokenize: initializeContent
};
function initializeContent(effects) {
  const contentStart = effects.attempt(
    this.parser.constructs.contentInitial,
    afterContentStartConstruct,
    paragraphInitial
  );
  let previous3;
  return contentStart;
  function afterContentStartConstruct(code4) {
    if (code4 === null) {
      effects.consume(code4);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return factorySpace(effects, contentStart, "linePrefix");
  }
  function paragraphInitial(code4) {
    effects.enter("paragraph");
    return lineStart(code4);
  }
  function lineStart(code4) {
    const token = effects.enter("chunkText", {
      contentType: "text",
      previous: previous3
    });
    if (previous3) {
      previous3.next = token;
    }
    previous3 = token;
    return data2(code4);
  }
  function data2(code4) {
    if (code4 === null) {
      effects.exit("chunkText");
      effects.exit("paragraph");
      effects.consume(code4);
      return;
    }
    if (markdownLineEnding(code4)) {
      effects.consume(code4);
      effects.exit("chunkText");
      return lineStart;
    }
    effects.consume(code4);
    return data2;
  }
}

// node_modules/micromark/lib/initialize/document.js
var document2 = {
  tokenize: initializeDocument
};
var containerConstruct = {
  tokenize: tokenizeContainer
};
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start2;
  function start2(code4) {
    if (continued < stack.length) {
      const item = stack[continued];
      self2.containerState = item[1];
      return effects.attempt(
        item[0].continuation,
        documentContinue,
        checkNewContainers
      )(code4);
    }
    return checkNewContainers(code4);
  }
  function documentContinue(code4) {
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          point4 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      exitContainers(continued);
      let index2 = indexBeforeExits;
      while (index2 < self2.events.length) {
        self2.events[index2][1].end = Object.assign({}, point4);
        index2++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index2;
      return checkNewContainers(code4);
    }
    return start2(code4);
  }
  function checkNewContainers(code4) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code4);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code4);
      }
      self2.interrupt = Boolean(
        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
      );
    }
    self2.containerState = {};
    return effects.check(
      containerConstruct,
      thereIsANewContainer,
      thereIsNoNewContainer
    )(code4);
  }
  function thereIsANewContainer(code4) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code4);
  }
  function thereIsNoNewContainer(code4) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code4);
  }
  function documentContinued(code4) {
    self2.containerState = {};
    return effects.attempt(
      containerConstruct,
      containerContinue,
      flowStart
    )(code4);
  }
  function containerContinue(code4) {
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code4);
  }
  function flowStart(code4) {
    if (code4 === null) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code4);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter("chunkFlow", {
      contentType: "flow",
      previous: childToken,
      _tokenizer: childFlow
    });
    return flowContinue(code4);
  }
  function flowContinue(code4) {
    if (code4 === null) {
      writeToChild(effects.exit("chunkFlow"), true);
      exitContainers(0);
      effects.consume(code4);
      return;
    }
    if (markdownLineEnding(code4)) {
      effects.consume(code4);
      writeToChild(effects.exit("chunkFlow"));
      continued = 0;
      self2.interrupt = void 0;
      return start2;
    }
    effects.consume(code4);
    return flowContinue;
  }
  function writeToChild(token, eof) {
    const stream = self2.sliceStream(token);
    if (eof) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);
    if (self2.parser.lazy[token.start.line]) {
      let index2 = childFlow.events.length;
      while (index2--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index2][1].end || // …or ends after it.
          childFlow.events[index2][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point4;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          if (seen) {
            point4 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      exitContainers(continued);
      index2 = indexBeforeExits;
      while (index2 < self2.events.length) {
        self2.events[index2][1].end = Object.assign({}, point4);
        index2++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index2;
    }
  }
  function exitContainers(size) {
    let index2 = stack.length;
    while (index2-- > size) {
      const entry = stack[index2];
      self2.containerState = entry[1];
      entry[0].exit.call(self2, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok3, nok) {
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok3, nok),
    "linePrefix",
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
  );
}

// node_modules/micromark/lib/initialize/flow.js
var flow = {
  tokenize: initializeFlow
};
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(
      this.parser.constructs.flowInitial,
      afterConstruct,
      factorySpace(
        effects,
        effects.attempt(
          this.parser.constructs.flow,
          afterConstruct,
          effects.attempt(content, afterConstruct)
        ),
        "linePrefix"
      )
    )
  );
  return initial;
  function atBlankEnding(code4) {
    if (code4 === null) {
      effects.consume(code4);
      return;
    }
    effects.enter("lineEndingBlank");
    effects.consume(code4);
    effects.exit("lineEndingBlank");
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code4) {
    if (code4 === null) {
      effects.consume(code4);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    self2.currentConstruct = void 0;
    return initial;
  }
}

// node_modules/micromark/lib/initialize/text.js
var resolver = {
  resolveAll: createResolver()
};
var string = initializeFactory("string");
var text = initializeFactory("text");
function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(
      field === "text" ? resolveAllLineSuffixes : void 0
    )
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text7 = effects.attempt(constructs2, start2, notText);
    return start2;
    function start2(code4) {
      return atBreak(code4) ? text7(code4) : notText(code4);
    }
    function notText(code4) {
      if (code4 === null) {
        effects.consume(code4);
        return;
      }
      effects.enter("data");
      effects.consume(code4);
      return data2;
    }
    function data2(code4) {
      if (atBreak(code4)) {
        effects.exit("data");
        return text7(code4);
      }
      effects.consume(code4);
      return data2;
    }
    function atBreak(code4) {
      if (code4 === null) {
        return true;
      }
      const list4 = constructs2[code4];
      let index2 = -1;
      if (list4) {
        while (++index2 < list4.length) {
          const item = list4[index2];
          if (!item.previous || item.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index2 = -1;
    let enter;
    while (++index2 <= events.length) {
      if (enter === void 0) {
        if (events[index2] && events[index2][1].type === "data") {
          enter = index2;
          index2++;
        }
      } else if (!events[index2] || events[index2][1].type !== "data") {
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
      const data2 = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data2);
      let index2 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index2--) {
        const chunk = chunks[index2];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) {
        } else {
          index2++;
          break;
        }
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            line: data2.end.line,
            column: data2.end.column - size,
            offset: data2.end.offset - size,
            _index: data2.start._index + index2,
            _bufferIndex: index2 ? bufferIndex : data2.start._bufferIndex + bufferIndex
          },
          end: Object.assign({}, data2.end)
        };
        data2.end = Object.assign({}, token.start);
        if (data2.start.offset === data2.end.offset) {
          Object.assign(data2, token);
        } else {
          events.splice(
            eventIndex,
            0,
            ["enter", token, context],
            ["exit", token, context]
          );
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

// node_modules/micromark/lib/create-tokenizer.js
function createTokenizer(parser, initialize, from) {
  let point4 = Object.assign(
    from ? Object.assign({}, from) : {
      line: 1,
      column: 1,
      offset: 0
    },
    {
      _index: 0,
      _bufferIndex: -1
    }
  );
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    consume,
    enter,
    exit: exit3,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };
  const context = {
    previous: null,
    code: null,
    containerState: {},
    events: [],
    parser,
    sliceStream,
    sliceSerialize,
    now,
    defineSkip,
    write
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write(slice2) {
    chunks = push(chunks, slice2);
    main();
    if (chunks[chunks.length - 1] !== null) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks2(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const { line, column, offset: offset2, _index, _bufferIndex } = point4;
    return {
      line,
      column,
      offset: offset2,
      _index,
      _bufferIndex
    };
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  }
  function main() {
    let chunkIndex;
    while (point4._index < chunks.length) {
      const chunk = chunks[point4._index];
      if (typeof chunk === "string") {
        chunkIndex = point4._index;
        if (point4._bufferIndex < 0) {
          point4._bufferIndex = 0;
        }
        while (point4._index === chunkIndex && point4._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point4._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code4) {
    consumed = void 0;
    expectedCode = code4;
    state = state(code4);
  }
  function consume(code4) {
    if (markdownLineEnding(code4)) {
      point4.line++;
      point4.column = 1;
      point4.offset += code4 === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code4 !== -1) {
      point4.column++;
      point4.offset++;
    }
    if (point4._bufferIndex < 0) {
      point4._index++;
    } else {
      point4._bufferIndex++;
      if (point4._bufferIndex === chunks[point4._index].length) {
        point4._bufferIndex = -1;
        point4._index++;
      }
    }
    context.previous = code4;
    consumed = true;
  }
  function enter(type, fields) {
    const token = fields || {};
    token.type = type;
    token.start = now();
    context.events.push(["enter", token, context]);
    stack.push(token);
    return token;
  }
  function exit3(type) {
    const token = stack.pop();
    token.end = now();
    context.events.push(["exit", token, context]);
    return token;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? (
        // @ts-expect-error Looks like a construct.
        handleListOfConstructs([constructs2])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map4) {
        return start2;
        function start2(code4) {
          const def = code4 !== null && map4[code4];
          const all4 = code4 !== null && map4.null;
          const list4 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(def) ? def : def ? [def] : [],
            ...Array.isArray(all4) ? all4 : all4 ? [all4] : []
          ];
          return handleListOfConstructs(list4)(code4);
        }
      }
      function handleListOfConstructs(list4) {
        listOfConstructs = list4;
        constructIndex = 0;
        if (list4.length === 0) {
          return bogusState;
        }
        return handleConstruct(list4[constructIndex]);
      }
      function handleConstruct(construct) {
        return start2;
        function start2(code4) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code4);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok3,
            nok
          )(code4);
        }
      }
      function ok3(code4) {
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code4) {
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from2) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(
        context.events,
        from2,
        context.events.length - from2,
        construct.resolve(context.events.slice(from2), context)
      );
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return {
      restore,
      from: startEventsIndex
    };
    function restore() {
      point4 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }
  function accountForPotentialSkip() {
    if (point4.line in columnStart && point4.column < 2) {
      point4.column = columnStart[point4.line];
      point4.offset += columnStart[point4.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks2(chunks, expandTabs) {
  let index2 = -1;
  const result = [];
  let atTab;
  while (++index2 < chunks.length) {
    const chunk = chunks[index2];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else
      switch (chunk) {
        case -5: {
          value = "\r";
          break;
        }
        case -4: {
          value = "\n";
          break;
        }
        case -3: {
          value = "\r\n";
          break;
        }
        case -2: {
          value = expandTabs ? " " : "	";
          break;
        }
        case -1: {
          if (!expandTabs && atTab) continue;
          value = " ";
          break;
        }
        default: {
          value = String.fromCharCode(chunk);
        }
      }
    atTab = chunk === -2;
    result.push(value);
  }
  return result.join("");
}

// node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text2
});
var document3 = {
  [42]: list,
  [43]: list,
  [45]: list,
  [48]: list,
  [49]: list,
  [50]: list,
  [51]: list,
  [52]: list,
  [53]: list,
  [54]: list,
  [55]: list,
  [56]: list,
  [57]: list,
  [62]: blockQuote
};
var contentInitial = {
  [91]: definition
};
var flowInitial = {
  [-2]: codeIndented,
  [-1]: codeIndented,
  [32]: codeIndented
};
var flow2 = {
  [35]: headingAtx,
  [42]: thematicBreak,
  [45]: [setextUnderline, thematicBreak],
  [60]: htmlFlow,
  [61]: setextUnderline,
  [95]: thematicBreak,
  [96]: codeFenced,
  [126]: codeFenced
};
var string2 = {
  [38]: characterReference,
  [92]: characterEscape
};
var text2 = {
  [-5]: lineEnding,
  [-4]: lineEnding,
  [-3]: lineEnding,
  [33]: labelStartImage,
  [38]: characterReference,
  [42]: attention,
  [60]: [autolink, htmlText],
  [91]: labelStartLink,
  [92]: [hardBreakEscape, characterEscape],
  [93]: labelEnd,
  [95]: attention,
  [96]: codeText
};
var insideSpan = {
  null: [attention, resolver]
};
var attentionMarkers = {
  null: [42, 95]
};
var disable = {
  null: []
};

// node_modules/micromark/lib/parse.js
function parse3(options) {
  const settings = options || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([constructs_exports, ...settings.extensions || []])
  );
  const parser = {
    defined: [],
    lazy: {},
    constructs: constructs2,
    content: create4(content2),
    document: create4(document2),
    flow: create4(flow),
    string: create4(string),
    text: create4(text)
  };
  return parser;
  function create4(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}

// node_modules/micromark/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}

// node_modules/micromark/lib/preprocess.js
var search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1;
  let buffer = "";
  let start2 = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code4;
    value = buffer + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || void 0).decode(value));
    startPosition = 0;
    buffer = "";
    if (start2) {
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }
      start2 = void 0;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== void 0 ? match.index : value.length;
      code4 = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code4 === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code4) {
          case 0: {
            chunks.push(65533);
            column++;
            break;
          }
          case 9: {
            next = Math.ceil(column / 4) * 4;
            chunks.push(-2);
            while (column++ < next) chunks.push(-1);
            break;
          }
          case 10: {
            chunks.push(-4);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }
    return chunks;
  }
}

// node_modules/micromark-util-decode-string/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) {
    return $1;
  }
  const head = $2.charCodeAt(0);
  if (head === 35) {
    const head2 = $2.charCodeAt(1);
    const hex = head2 === 120 || head2 === 88;
    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
  }
  return decodeNamedCharacterReference($2) || $0;
}

// node_modules/mdast-util-from-markdown/lib/index.js
var own2 = {}.hasOwnProperty;
function fromMarkdown(value, encoding, options) {
  if (typeof encoding !== "string") {
    options = encoding;
    encoding = void 0;
  }
  return compiler(options)(postprocess(parse3(options).document().write(preprocess()(value, encoding, true))));
}
function compiler(options) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link3),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading3),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText2, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition3),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis3),
      hardBreakEscape: opener(hardBreak3),
      hardBreakTrailing: opener(hardBreak3),
      htmlFlow: opener(html6, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html6, buffer),
      htmlTextData: onenterdata,
      image: opener(image3),
      label: buffer,
      link: opener(link3),
      listItem: opener(listItem3),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list4, onenterlistordered),
      listUnordered: opener(list4),
      paragraph: opener(paragraph3),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading3),
      strong: opener(strong3),
      thematicBreak: opener(thematicBreak4)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      characterReference: onexitcharacterreference,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options || {}).mdastExtensions || []);
  const data2 = {};
  return compile2;
  function compile2(events) {
    let tree = {
      type: "root",
      children: []
    };
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit: exit3,
      buffer,
      resume,
      data: data2
    };
    const listStack = [];
    let index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
        if (events[index2][0] === "enter") {
          listStack.push(index2);
        } else {
          const tail = listStack.pop();
          index2 = prepareList(events, tail, index2);
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      const handler = config[events[index2][0]];
      if (own2.call(handler, events[index2][1].type)) {
        handler[events[index2][1].type].call(Object.assign({
          sliceSerialize: events[index2][2].sliceSerialize
        }, context), events[index2][1]);
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point2(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point2(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };
    index2 = -1;
    while (++index2 < config.transforms.length) {
      tree = config.transforms[index2](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start2, length) {
    let index2 = start2 - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem4;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index2 <= length) {
      const event = events[index2];
      switch (event[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
          break;
        }
        case "lineEndingBlank": {
          if (event[0] === "enter") {
            if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index2;
            }
            atMarker = void 0;
          }
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace": {
          break;
        }
        default: {
          atMarker = void 0;
        }
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
        if (listItem4) {
          let tailIndex = index2;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
              if (tailEvent[0] === "exit") continue;
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
                listSpread = true;
              }
              tailEvent[1].type = "lineEnding";
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem4._spread = true;
          }
          listItem4.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index2, 0, ["exit", listItem4, event[2]]);
          index2++;
          length++;
        }
        if (event[1].type === "listItemPrefix") {
          const item = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          listItem4 = item;
          events.splice(index2, 0, ["enter", item, event[2]]);
          index2++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start2][1]._spread = listSpread;
    return length;
  }
  function opener(create4, and) {
    return open;
    function open(token) {
      enter.call(this, create4(token), token);
      if (and) and.call(this, token);
    }
  }
  function buffer() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    const siblings = parent.children;
    siblings.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler]);
    node2.position = {
      start: point2(token.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function closer(and) {
    return close;
    function close(token) {
      if (and) and.call(this, token);
      exit3.call(this, token);
    }
  }
  function exit3(token, onExitError) {
    const node2 = this.stack.pop();
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition({
        start: token.start,
        end: token.end
      }) + "): it\u2019s not open");
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    node2.position.end = point2(token.end);
  }
  function resume() {
    return toString2(this.stack.pop());
  }
  function onenterlistordered() {
    this.data.expectingFirstListItemValue = true;
  }
  function onenterlistitemvalue(token) {
    if (this.data.expectingFirstListItemValue) {
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      this.data.expectingFirstListItemValue = void 0;
    }
  }
  function onexitcodefencedfenceinfo() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.lang = data3;
  }
  function onexitcodefencedfencemeta() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.meta = data3;
  }
  function onexitcodefencedfence() {
    if (this.data.flowCodeInside) return;
    this.buffer();
    this.data.flowCodeInside = true;
  }
  function onexitcodefenced() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    this.data.flowCodeInside = void 0;
  }
  function onexitcodeindented() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data3;
  }
  function onexitdefinitiondestinationstring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data3;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    if (!node2.depth) {
      const depth = this.sliceSerialize(token).length;
      node2.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    this.data.setextHeadingSlurpLineEnding = true;
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    node2.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
  }
  function onexitsetextheading() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    const siblings = node2.children;
    let tail = siblings[siblings.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text7();
      tail.position = {
        start: point2(token.start),
        // @ts-expect-error: we’ll add `end` later.
        end: void 0
      };
      siblings.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point2(token.end);
  }
  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const tail = context.children[context.children.length - 1];
      tail.position.end = point2(token.end);
      this.data.atHardBreak = void 0;
      return;
    }
    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    this.data.atHardBreak = true;
  }
  function onexithtmlflow() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3;
  }
  function onexithtmltext() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3;
  }
  function onexitcodetext() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data3;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitlabeltext(token) {
    const string3 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ancestor.label = decodeString(string3);
    ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    const value = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    this.data.inReference = true;
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data3;
  }
  function onexitresourcetitlestring() {
    const data3 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data3;
  }
  function onexitresource() {
    this.data.inReference = void 0;
  }
  function onenterreference() {
    this.data.referenceType = "collapsed";
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    this.data.referenceType = "full";
  }
  function onexitcharacterreferencemarker(token) {
    this.data.characterReferenceType = token.type;
  }
  function onexitcharacterreferencevalue(token) {
    const data3 = this.sliceSerialize(token);
    const type = this.data.characterReferenceType;
    let value;
    if (type) {
      value = decodeNumericCharacterReference(data3, type === "characterReferenceMarkerNumeric" ? 10 : 16);
      this.data.characterReferenceType = void 0;
    } else {
      const result = decodeNamedCharacterReference(data3);
      value = result;
    }
    const tail = this.stack[this.stack.length - 1];
    tail.value += value;
  }
  function onexitcharacterreference(token) {
    const tail = this.stack.pop();
    tail.position.end = point2(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function codeFlow() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function codeText2() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function definition3() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis3() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function heading3() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function hardBreak3() {
    return {
      type: "break"
    };
  }
  function html6() {
    return {
      type: "html",
      value: ""
    };
  }
  function image3() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function link3() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function list4(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem3(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph3() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function strong3() {
    return {
      type: "strong",
      children: []
    };
  }
  function text7() {
    return {
      type: "text",
      value: ""
    };
  }
  function thematicBreak4() {
    return {
      type: "thematicBreak"
    };
  }
}
function point2(d) {
  return {
    line: d.line,
    column: d.column,
    offset: d.offset
  };
}
function configure(combined, extensions) {
  let index2 = -1;
  while (++index2 < extensions.length) {
    const value = extensions[index2];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own2.call(extension2, key)) {
      switch (key) {
        case "canContainEols": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "transforms": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "enter":
        case "exit": {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
          break;
        }
      }
    }
  }
}
function defaultOnError(left, right) {
  if (left) {
    throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition({
      start: left.start,
      end: left.end
    }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ") is open");
  } else {
    throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
      start: right.start,
      end: right.end
    }) + ") is still open");
  }
}

// node_modules/remark-parse/lib/index.js
function remarkParse(options) {
  const self2 = this;
  self2.parser = parser;
  function parser(doc) {
    return fromMarkdown(doc, {
      ...self2.data("settings"),
      ...options,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: self2.data("micromarkExtensions") || [],
      mdastExtensions: self2.data("fromMarkdownExtensions") || []
    });
  }
}

// node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote(state, node2) {
  const result = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: state.wrap(state.all(node2), true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(state, node2) {
  const result = { type: "element", tagName: "br", properties: {}, children: [] };
  state.patch(node2, result);
  return [state.applyData(node2, result), { type: "text", value: "\n" }];
}

// node_modules/mdast-util-to-hast/lib/handlers/code.js
function code(state, node2) {
  const value = node2.value ? node2.value + "\n" : "";
  const properties = {};
  if (node2.lang) {
    properties.className = ["language-" + node2.lang];
  }
  let result = {
    type: "element",
    tagName: "code",
    properties,
    children: [{ type: "text", value }]
  };
  if (node2.meta) {
    result.data = { meta: node2.meta };
  }
  state.patch(node2, result);
  result = state.applyData(node2, result);
  result = { type: "element", tagName: "pre", properties: {}, children: [result] };
  state.patch(node2, result);
  return result;
}

// node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(state, node2) {
  const result = {
    type: "element",
    tagName: "del",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(state, node2) {
  const result = {
    type: "element",
    tagName: "em",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference(state, node2) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const id = String(node2.identifier).toUpperCase();
  const safeId = normalizeUri(id.toLowerCase());
  const index2 = state.footnoteOrder.indexOf(id);
  let counter;
  let reuseCounter = state.footnoteCounts.get(id);
  if (reuseCounter === void 0) {
    reuseCounter = 0;
    state.footnoteOrder.push(id);
    counter = state.footnoteOrder.length;
  } else {
    counter = index2 + 1;
  }
  reuseCounter += 1;
  state.footnoteCounts.set(id, reuseCounter);
  const link3 = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + clobberPrefix + "fn-" + safeId,
      id: clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(counter) }]
  };
  state.patch(node2, link3);
  const sup = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [link3]
  };
  state.patch(node2, sup);
  return state.applyData(node2, sup);
}

// node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading(state, node2) {
  const result = {
    type: "element",
    tagName: "h" + node2.depth,
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/html.js
function html(state, node2) {
  if (state.options.allowDangerousHtml) {
    const result = { type: "raw", value: node2.value };
    state.patch(node2, result);
    return state.applyData(node2, result);
  }
  return void 0;
}

// node_modules/mdast-util-to-hast/lib/revert.js
function revert(state, node2) {
  const subtype = node2.referenceType;
  let suffix = "]";
  if (subtype === "collapsed") {
    suffix += "[]";
  } else if (subtype === "full") {
    suffix += "[" + (node2.label || node2.identifier) + "]";
  }
  if (node2.type === "imageReference") {
    return [{ type: "text", value: "![" + node2.alt + suffix }];
  }
  const contents = state.all(node2);
  const head = contents[0];
  if (head && head.type === "text") {
    head.value = "[" + head.value;
  } else {
    contents.unshift({ type: "text", value: "[" });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === "text") {
    tail.value += suffix;
  } else {
    contents.push({ type: "text", value: suffix });
  }
  return contents;
}

// node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const definition3 = state.definitionById.get(id);
  if (!definition3) {
    return revert(state, node2);
  }
  const properties = { src: normalizeUri(definition3.url || ""), alt: node2.alt };
  if (definition3.title !== null && definition3.title !== void 0) {
    properties.title = definition3.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/image.js
function image(state, node2) {
  const properties = { src: normalizeUri(node2.url) };
  if (node2.alt !== null && node2.alt !== void 0) {
    properties.alt = node2.alt;
  }
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode(state, node2) {
  const text7 = { type: "text", value: node2.value.replace(/\r?\n|\r/g, " ") };
  state.patch(node2, text7);
  const result = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [text7]
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
function linkReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const definition3 = state.definitionById.get(id);
  if (!definition3) {
    return revert(state, node2);
  }
  const properties = { href: normalizeUri(definition3.url || "") };
  if (definition3.title !== null && definition3.title !== void 0) {
    properties.title = definition3.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link.js
function link(state, node2) {
  const properties = { href: normalizeUri(node2.url) };
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem(state, node2, parent) {
  const results = state.all(node2);
  const loose = parent ? listLoose(parent) : listItemLoose(node2);
  const properties = {};
  const children = [];
  if (typeof node2.checked === "boolean") {
    const head = results[0];
    let paragraph3;
    if (head && head.type === "element" && head.tagName === "p") {
      paragraph3 = head;
    } else {
      paragraph3 = { type: "element", tagName: "p", properties: {}, children: [] };
      results.unshift(paragraph3);
    }
    if (paragraph3.children.length > 0) {
      paragraph3.children.unshift({ type: "text", value: " " });
    }
    paragraph3.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: node2.checked, disabled: true },
      children: []
    });
    properties.className = ["task-list-item"];
  }
  let index2 = -1;
  while (++index2 < results.length) {
    const child = results[index2];
    if (loose || index2 !== 0 || child.type !== "element" || child.tagName !== "p") {
      children.push({ type: "text", value: "\n" });
    }
    if (child.type === "element" && child.tagName === "p" && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];
  if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
    children.push({ type: "text", value: "\n" });
  }
  const result = { type: "element", tagName: "li", properties, children };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function listLoose(node2) {
  let loose = false;
  if (node2.type === "list") {
    loose = node2.spread || false;
    const children = node2.children;
    let index2 = -1;
    while (!loose && ++index2 < children.length) {
      loose = listItemLoose(children[index2]);
    }
  }
  return loose;
}
function listItemLoose(node2) {
  const spread = node2.spread;
  return spread === null || spread === void 0 ? node2.children.length > 1 : spread;
}

// node_modules/mdast-util-to-hast/lib/handlers/list.js
function list2(state, node2) {
  const properties = {};
  const results = state.all(node2);
  let index2 = -1;
  if (typeof node2.start === "number" && node2.start !== 1) {
    properties.start = node2.start;
  }
  while (++index2 < results.length) {
    const child = results[index2];
    if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
      properties.className = ["contains-task-list"];
      break;
    }
  }
  const result = {
    type: "element",
    tagName: node2.ordered ? "ol" : "ul",
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(state, node2) {
  const result = {
    type: "element",
    tagName: "p",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/root.js
function root(state, node2) {
  const result = { type: "root", children: state.wrap(state.all(node2)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong(state, node2) {
  const result = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/unist-util-position/lib/index.js
var pointEnd = point3("end");
var pointStart = point3("start");
function point3(type) {
  return point4;
  function point4(node2) {
    const point5 = node2 && node2.position && node2.position[type] || {};
    if (typeof point5.line === "number" && point5.line > 0 && typeof point5.column === "number" && point5.column > 0) {
      return {
        line: point5.line,
        column: point5.column,
        offset: typeof point5.offset === "number" && point5.offset > -1 ? point5.offset : void 0
      };
    }
  }
}
function position2(node2) {
  const start2 = pointStart(node2);
  const end = pointEnd(node2);
  if (start2 && end) {
    return { start: start2, end };
  }
}

// node_modules/mdast-util-to-hast/lib/handlers/table.js
function table(state, node2) {
  const rows = state.all(node2);
  const firstRow = rows.shift();
  const tableContent = [];
  if (firstRow) {
    const head = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node2.children[0], head);
    tableContent.push(head);
  }
  if (rows.length > 0) {
    const body = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: state.wrap(rows, true)
    };
    const start2 = pointStart(node2.children[1]);
    const end = pointEnd(node2.children[node2.children.length - 1]);
    if (start2 && end) body.position = { start: start2, end };
    tableContent.push(body);
  }
  const result = {
    type: "element",
    tagName: "table",
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-row.js
function tableRow(state, node2, parent) {
  const siblings = parent ? parent.children : void 0;
  const rowIndex = siblings ? siblings.indexOf(node2) : 1;
  const tagName = rowIndex === 0 ? "th" : "td";
  const align = parent && parent.type === "table" ? parent.align : void 0;
  const length = align ? align.length : node2.children.length;
  let cellIndex = -1;
  const cells = [];
  while (++cellIndex < length) {
    const cell = node2.children[cellIndex];
    const properties = {};
    const alignValue = align ? align[cellIndex] : void 0;
    if (alignValue) {
      properties.align = alignValue;
    }
    let result2 = { type: "element", tagName, properties, children: [] };
    if (cell) {
      result2.children = state.all(cell);
      state.patch(cell, result2);
      result2 = state.applyData(cell, result2);
    }
    cells.push(result2);
  }
  const result = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
function tableCell(state, node2) {
  const result = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/trim-lines/index.js
var tab = 9;
var space = 32;
function trimLines(value) {
  const source = String(value);
  const search2 = /\r?\n|\r/g;
  let match = search2.exec(source);
  let last = 0;
  const lines = [];
  while (match) {
    lines.push(
      trimLine(source.slice(last, match.index), last > 0, true),
      match[0]
    );
    last = match.index + match[0].length;
    match = search2.exec(source);
  }
  lines.push(trimLine(source.slice(last), last > 0, false));
  return lines.join("");
}
function trimLine(value, start2, end) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start2) {
    let code4 = value.codePointAt(startIndex);
    while (code4 === tab || code4 === space) {
      startIndex++;
      code4 = value.codePointAt(startIndex);
    }
  }
  if (end) {
    let code4 = value.codePointAt(endIndex - 1);
    while (code4 === tab || code4 === space) {
      endIndex--;
      code4 = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}

// node_modules/mdast-util-to-hast/lib/handlers/text.js
function text3(state, node2) {
  const result = { type: "text", value: trimLines(String(node2.value)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(state, node2) {
  const result = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/index.js
var handlers = {
  blockquote,
  break: hardBreak,
  code,
  delete: strikethrough,
  emphasis,
  footnoteReference,
  heading,
  html,
  imageReference,
  image,
  inlineCode,
  linkReference,
  link,
  listItem,
  list: list2,
  paragraph,
  // @ts-expect-error: root is different, but hard to type.
  root,
  strong,
  table,
  tableCell,
  tableRow,
  text: text3,
  thematicBreak: thematicBreak2,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};
function ignore() {
  return void 0;
}

// node_modules/@ungap/structured-clone/esm/types.js
var VOID = -1;
var PRIMITIVE = 0;
var ARRAY = 1;
var OBJECT = 2;
var DATE = 3;
var REGEXP = 4;
var MAP = 5;
var SET = 6;
var ERROR = 7;
var BIGINT = 8;

// node_modules/@ungap/structured-clone/esm/deserialize.js
var env = typeof self === "object" ? self : globalThis;
var deserializer = ($, _) => {
  const as = (out, index2) => {
    $.set(index2, out);
    return out;
  };
  const unpair = (index2) => {
    if ($.has(index2))
      return $.get(index2);
    const [type, value] = _[index2];
    switch (type) {
      case PRIMITIVE:
      case VOID:
        return as(value, index2);
      case ARRAY: {
        const arr = as([], index2);
        for (const index3 of value)
          arr.push(unpair(index3));
        return arr;
      }
      case OBJECT: {
        const object = as({}, index2);
        for (const [key, index3] of value)
          object[unpair(key)] = unpair(index3);
        return object;
      }
      case DATE:
        return as(new Date(value), index2);
      case REGEXP: {
        const { source, flags } = value;
        return as(new RegExp(source, flags), index2);
      }
      case MAP: {
        const map4 = as(/* @__PURE__ */ new Map(), index2);
        for (const [key, index3] of value)
          map4.set(unpair(key), unpair(index3));
        return map4;
      }
      case SET: {
        const set = as(/* @__PURE__ */ new Set(), index2);
        for (const index3 of value)
          set.add(unpair(index3));
        return set;
      }
      case ERROR: {
        const { name: name2, message } = value;
        return as(new env[name2](message), index2);
      }
      case BIGINT:
        return as(BigInt(value), index2);
      case "BigInt":
        return as(Object(BigInt(value)), index2);
    }
    return as(new env[type](value), index2);
  };
  return unpair;
};
var deserialize = (serialized) => deserializer(/* @__PURE__ */ new Map(), serialized)(0);

// node_modules/@ungap/structured-clone/esm/serialize.js
var EMPTY = "";
var { toString: toString3 } = {};
var { keys } = Object;
var typeOf = (value) => {
  const type = typeof value;
  if (type !== "object" || !value)
    return [PRIMITIVE, type];
  const asString = toString3.call(value).slice(8, -1);
  switch (asString) {
    case "Array":
      return [ARRAY, EMPTY];
    case "Object":
      return [OBJECT, EMPTY];
    case "Date":
      return [DATE, EMPTY];
    case "RegExp":
      return [REGEXP, EMPTY];
    case "Map":
      return [MAP, EMPTY];
    case "Set":
      return [SET, EMPTY];
  }
  if (asString.includes("Array"))
    return [ARRAY, asString];
  if (asString.includes("Error"))
    return [ERROR, asString];
  return [OBJECT, asString];
};
var shouldSkip = ([TYPE, type]) => TYPE === PRIMITIVE && (type === "function" || type === "symbol");
var serializer = (strict, json2, $, _) => {
  const as = (out, value) => {
    const index2 = _.push(out) - 1;
    $.set(value, index2);
    return index2;
  };
  const pair = (value) => {
    if ($.has(value))
      return $.get(value);
    let [TYPE, type] = typeOf(value);
    switch (TYPE) {
      case PRIMITIVE: {
        let entry = value;
        switch (type) {
          case "bigint":
            TYPE = BIGINT;
            entry = value.toString();
            break;
          case "function":
          case "symbol":
            if (strict)
              throw new TypeError("unable to serialize " + type);
            entry = null;
            break;
          case "undefined":
            return as([VOID], value);
        }
        return as([TYPE, entry], value);
      }
      case ARRAY: {
        if (type)
          return as([type, [...value]], value);
        const arr = [];
        const index2 = as([TYPE, arr], value);
        for (const entry of value)
          arr.push(pair(entry));
        return index2;
      }
      case OBJECT: {
        if (type) {
          switch (type) {
            case "BigInt":
              return as([type, value.toString()], value);
            case "Boolean":
            case "Number":
            case "String":
              return as([type, value.valueOf()], value);
          }
        }
        if (json2 && "toJSON" in value)
          return pair(value.toJSON());
        const entries = [];
        const index2 = as([TYPE, entries], value);
        for (const key of keys(value)) {
          if (strict || !shouldSkip(typeOf(value[key])))
            entries.push([pair(key), pair(value[key])]);
        }
        return index2;
      }
      case DATE:
        return as([TYPE, value.toISOString()], value);
      case REGEXP: {
        const { source, flags } = value;
        return as([TYPE, { source, flags }], value);
      }
      case MAP: {
        const entries = [];
        const index2 = as([TYPE, entries], value);
        for (const [key, entry] of value) {
          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
            entries.push([pair(key), pair(entry)]);
        }
        return index2;
      }
      case SET: {
        const entries = [];
        const index2 = as([TYPE, entries], value);
        for (const entry of value) {
          if (strict || !shouldSkip(typeOf(entry)))
            entries.push(pair(entry));
        }
        return index2;
      }
    }
    const { message } = value;
    return as([TYPE, { name: type, message }], value);
  };
  return pair;
};
var serialize = (value, { json: json2, lossy } = {}) => {
  const _ = [];
  return serializer(!(json2 || lossy), !!json2, /* @__PURE__ */ new Map(), _)(value), _;
};

// node_modules/@ungap/structured-clone/esm/index.js
var esm_default = typeof structuredClone === "function" ? (
  /* c8 ignore start */
  (any, options) => options && ("json" in options || "lossy" in options) ? deserialize(serialize(any, options)) : structuredClone(any)
) : (any, options) => deserialize(serialize(any, options));

// node_modules/mdast-util-to-hast/lib/footer.js
function defaultFootnoteBackContent(_, rereferenceIndex) {
  const result = [{ type: "text", value: "\u21A9" }];
  if (rereferenceIndex > 1) {
    result.push({
      type: "element",
      tagName: "sup",
      properties: {},
      children: [{ type: "text", value: String(rereferenceIndex) }]
    });
  }
  return result;
}
function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
  return "Back to reference " + (referenceIndex + 1) + (rereferenceIndex > 1 ? "-" + rereferenceIndex : "");
}
function footer(state) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const footnoteBackContent = state.options.footnoteBackContent || defaultFootnoteBackContent;
  const footnoteBackLabel = state.options.footnoteBackLabel || defaultFootnoteBackLabel;
  const footnoteLabel = state.options.footnoteLabel || "Footnotes";
  const footnoteLabelTagName = state.options.footnoteLabelTagName || "h2";
  const footnoteLabelProperties = state.options.footnoteLabelProperties || {
    className: ["sr-only"]
  };
  const listItems = [];
  let referenceIndex = -1;
  while (++referenceIndex < state.footnoteOrder.length) {
    const definition3 = state.footnoteById.get(
      state.footnoteOrder[referenceIndex]
    );
    if (!definition3) {
      continue;
    }
    const content3 = state.all(definition3);
    const id = String(definition3.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    let rereferenceIndex = 0;
    const backReferences = [];
    const counts = state.footnoteCounts.get(id);
    while (counts !== void 0 && ++rereferenceIndex <= counts) {
      if (backReferences.length > 0) {
        backReferences.push({ type: "text", value: " " });
      }
      let children = typeof footnoteBackContent === "string" ? footnoteBackContent : footnoteBackContent(referenceIndex, rereferenceIndex);
      if (typeof children === "string") {
        children = { type: "text", value: children };
      }
      backReferences.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + clobberPrefix + "fnref-" + safeId + (rereferenceIndex > 1 ? "-" + rereferenceIndex : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof footnoteBackLabel === "string" ? footnoteBackLabel : footnoteBackLabel(referenceIndex, rereferenceIndex),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(children) ? children : [children]
      });
    }
    const tail = content3[content3.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === "text") {
        tailTail.value += " ";
      } else {
        tail.children.push({ type: "text", value: " " });
      }
      tail.children.push(...backReferences);
    } else {
      content3.push(...backReferences);
    }
    const listItem3 = {
      type: "element",
      tagName: "li",
      properties: { id: clobberPrefix + "fn-" + safeId },
      children: state.wrap(content3, true)
    };
    state.patch(definition3, listItem3);
    listItems.push(listItem3);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: "element",
    tagName: "section",
    properties: { dataFootnotes: true, className: ["footnotes"] },
    children: [
      {
        type: "element",
        tagName: footnoteLabelTagName,
        properties: {
          ...esm_default(footnoteLabelProperties),
          id: "footnote-label"
        },
        children: [{ type: "text", value: footnoteLabel }]
      },
      { type: "text", value: "\n" },
      {
        type: "element",
        tagName: "ol",
        properties: {},
        children: state.wrap(listItems, true)
      },
      { type: "text", value: "\n" }
    ]
  };
}

// node_modules/unist-util-is/lib/index.js
var convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(test) {
    if (test === null || test === void 0) {
      return ok2;
    }
    if (typeof test === "function") {
      return castFactory(test);
    }
    if (typeof test === "object") {
      return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
    }
    if (typeof test === "string") {
      return typeFactory(test);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(tests) {
  const checks2 = [];
  let index2 = -1;
  while (++index2 < tests.length) {
    checks2[index2] = convert(tests[index2]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index3 = -1;
    while (++index3 < checks2.length) {
      if (checks2[index3].apply(this, parameters)) return true;
    }
    return false;
  }
}
function propsFactory(check) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check
  );
  return castFactory(all4);
  function all4(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value, index2, parent) {
    return Boolean(
      looksLikeANode(value) && testFunction.call(
        this,
        value,
        typeof index2 === "number" ? index2 : void 0,
        parent || void 0
      )
    );
  }
}
function ok2() {
  return true;
}
function looksLikeANode(value) {
  return value !== null && typeof value === "object" && "type" in value;
}

// node_modules/unist-util-visit-parents/lib/color.js
function color2(d) {
  return d;
}

// node_modules/unist-util-visit-parents/lib/index.js
var empty3 = [];
var CONTINUE2 = true;
var EXIT2 = false;
var SKIP2 = "skip";
function visitParents(tree, test, visitor, reverse) {
  let check;
  if (typeof test === "function" && typeof visitor !== "function") {
    reverse = visitor;
    visitor = test;
  } else {
    check = test;
  }
  const is2 = convert(check);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index2, parents2) {
    const value = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value.type === "string") {
      const name2 = (
        // `hast`
        typeof value.tagName === "string" ? value.tagName : (
          // `xast`
          typeof value.name === "string" ? value.name : void 0
        )
      );
      Object.defineProperty(visit3, "name", {
        value: "node (" + color2(node2.type + (name2 ? "<" + name2 + ">" : "")) + ")"
      });
    }
    return visit3;
    function visit3() {
      let result = empty3;
      let subresult;
      let offset2;
      let grandparents2;
      if (!test || is2(node2, index2, parents2[parents2.length - 1] || void 0)) {
        result = toResult2(visitor(node2, parents2));
        if (result[0] === EXIT2) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP2) {
          offset2 = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents2 = parents2.concat(nodeAsParent);
          while (offset2 > -1 && offset2 < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset2];
            subresult = factory(child, offset2, grandparents2)();
            if (subresult[0] === EXIT2) {
              return subresult;
            }
            offset2 = typeof subresult[1] === "number" ? subresult[1] : offset2 + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult2(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE2, value];
  }
  return value === null || value === void 0 ? empty3 : [value];
}

// node_modules/unist-util-visit/lib/index.js
function visit2(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test;
  let visitor;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test = void 0;
    visitor = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test = testOrVisitor;
    visitor = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents(tree, test, overload, reverse);
  function overload(node2, parents2) {
    const parent = parents2[parents2.length - 1];
    const index2 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor(node2, index2, parent);
  }
}

// node_modules/mdast-util-to-hast/lib/state.js
var own3 = {}.hasOwnProperty;
var emptyOptions4 = {};
function createState(tree, options) {
  const settings = options || emptyOptions4;
  const definitionById = /* @__PURE__ */ new Map();
  const footnoteById = /* @__PURE__ */ new Map();
  const footnoteCounts = /* @__PURE__ */ new Map();
  const handlers3 = { ...handlers, ...settings.handlers };
  const state = {
    all: all4,
    applyData,
    definitionById,
    footnoteById,
    footnoteCounts,
    footnoteOrder: [],
    handlers: handlers3,
    one: one3,
    options: settings,
    patch,
    wrap
  };
  visit2(tree, function(node2) {
    if (node2.type === "definition" || node2.type === "footnoteDefinition") {
      const map4 = node2.type === "definition" ? definitionById : footnoteById;
      const id = String(node2.identifier).toUpperCase();
      if (!map4.has(id)) {
        map4.set(id, node2);
      }
    }
  });
  return state;
  function one3(node2, parent) {
    const type = node2.type;
    const handle2 = state.handlers[type];
    if (own3.call(state.handlers, type) && handle2) {
      return handle2(state, node2, parent);
    }
    if (state.options.passThrough && state.options.passThrough.includes(type)) {
      if ("children" in node2) {
        const { children, ...shallow } = node2;
        const result = esm_default(shallow);
        result.children = state.all(node2);
        return result;
      }
      return esm_default(node2);
    }
    const unknown2 = state.options.unknownHandler || defaultUnknownHandler;
    return unknown2(state, node2, parent);
  }
  function all4(parent) {
    const values = [];
    if ("children" in parent) {
      const nodes = parent.children;
      let index2 = -1;
      while (++index2 < nodes.length) {
        const result = state.one(nodes[index2], parent);
        if (result) {
          if (index2 && nodes[index2 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = trimMarkdownSpaceStart(result.value);
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = trimMarkdownSpaceStart(head.value);
              }
            }
          }
          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }
    return values;
  }
}
function patch(from, to) {
  if (from.position) to.position = position2(from);
}
function applyData(from, to) {
  let result = to;
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;
    if (typeof hName === "string") {
      if (result.type === "element") {
        result.tagName = hName;
      } else {
        const children = "children" in result ? result.children : [result];
        result = { type: "element", tagName: hName, properties: {}, children };
      }
    }
    if (result.type === "element" && hProperties) {
      Object.assign(result.properties, esm_default(hProperties));
    }
    if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
      result.children = hChildren;
    }
  }
  return result;
}
function defaultUnknownHandler(state, node2) {
  const data2 = node2.data || {};
  const result = "value" in node2 && !(own3.call(data2, "hProperties") || own3.call(data2, "hChildren")) ? { type: "text", value: node2.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function wrap(nodes, loose) {
  const result = [];
  let index2 = -1;
  if (loose) {
    result.push({ type: "text", value: "\n" });
  }
  while (++index2 < nodes.length) {
    if (index2) result.push({ type: "text", value: "\n" });
    result.push(nodes[index2]);
  }
  if (loose && nodes.length > 0) {
    result.push({ type: "text", value: "\n" });
  }
  return result;
}
function trimMarkdownSpaceStart(value) {
  let index2 = 0;
  let code4 = value.charCodeAt(index2);
  while (code4 === 9 || code4 === 32) {
    index2++;
    code4 = value.charCodeAt(index2);
  }
  return value.slice(index2);
}

// node_modules/mdast-util-to-hast/lib/index.js
function toHast(tree, options) {
  const state = createState(tree, options);
  const node2 = state.one(tree, void 0);
  const foot = footer(state);
  const result = Array.isArray(node2) ? { type: "root", children: node2 } : node2 || { type: "root", children: [] };
  if (foot) {
    ok("children" in result);
    result.children.push({ type: "text", value: "\n" }, foot);
  }
  return result;
}

// node_modules/remark-rehype/lib/index.js
function remarkRehype(destination, options) {
  if (destination && "run" in destination) {
    return async function(tree, file) {
      const hastTree = (
        /** @type {HastRoot} */
        toHast(tree, { file, ...options })
      );
      await destination.run(hastTree, file);
    };
  }
  return function(tree, file) {
    return (
      /** @type {HastRoot} */
      toHast(tree, { file, ...options || destination })
    );
  };
}

// node_modules/bail/index.js
function bail(error) {
  if (error) {
    throw error;
  }
}

// node_modules/unified/lib/index.js
var import_extend = __toESM(require_extend(), 1);

// node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// node_modules/trough/lib/index.js
function trough() {
  const fns = [];
  const pipeline = { run: run2, use };
  return pipeline;
  function run2(...values) {
    let middlewareIndex = -1;
    const callback = values.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values);
    function next(error, ...output) {
      const fn = fns[++middlewareIndex];
      let index2 = -1;
      if (error) {
        callback(error);
        return;
      }
      while (++index2 < values.length) {
        if (output[index2] === null || output[index2] === void 0) {
          output[index2] = values[index2];
        }
      }
      values = output;
      if (fn) {
        wrap2(fn, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }
  function use(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap2(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      const exception = (
        /** @type {Error} */
        error
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result && result.then && typeof result.then === "function") {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error, ...output) {
    if (!called) {
      called = true;
      callback(error, ...output);
    }
  }
  function then(value) {
    done(null, value);
  }
}

// node_modules/unified/lib/callable-instance.js
var CallableInstance = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(property) {
    const self2 = this;
    const constr = self2.constructor;
    const proto = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      constr.prototype
    );
    const value = proto[property];
    const apply = function() {
      return value.apply(apply, arguments);
    };
    Object.setPrototypeOf(apply, proto);
    return apply;
  }
);

// node_modules/unified/lib/index.js
var own4 = {}.hasOwnProperty;
var Processor = class _Processor extends CallableInstance {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy");
    this.Compiler = void 0;
    this.Parser = void 0;
    this.attachers = [];
    this.compiler = void 0;
    this.freezeIndex = -1;
    this.frozen = void 0;
    this.namespace = {};
    this.parser = void 0;
    this.transformers = trough();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const destination = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new _Processor()
    );
    let index2 = -1;
    while (++index2 < this.attachers.length) {
      const attacher = this.attachers[index2];
      destination.use(...attacher);
    }
    destination.data((0, import_extend.default)(true, {}, this.namespace));
    return destination;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(key, value) {
    if (typeof key === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", this.frozen);
        this.namespace[key] = value;
        return this;
      }
      return own4.call(this.namespace, key) && this.namespace[key] || void 0;
    }
    if (key) {
      assertUnfrozen("data", this.frozen);
      this.namespace = key;
      return this;
    }
    return this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen) {
      return this;
    }
    const self2 = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    while (++this.freezeIndex < this.attachers.length) {
      const [attacher, ...options] = this.attachers[this.freezeIndex];
      if (options[0] === false) {
        continue;
      }
      if (options[0] === true) {
        options[0] = void 0;
      }
      const transformer = attacher.call(self2, ...options);
      if (typeof transformer === "function") {
        this.transformers.use(transformer);
      }
    }
    this.frozen = true;
    this.freezeIndex = Number.POSITIVE_INFINITY;
    return this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(file) {
    this.freeze();
    const realFile = vfile(file);
    const parser = this.parser || this.Parser;
    assertParser("parse", parser);
    return parser(String(realFile), realFile);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(file, done) {
    const self2 = this;
    this.freeze();
    assertParser("process", this.parser || this.Parser);
    assertCompiler("process", this.compiler || this.Compiler);
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      const realFile = vfile(file);
      const parseTree = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        self2.parse(realFile)
      );
      self2.run(parseTree, realFile, function(error, tree, file2) {
        if (error || !tree || !file2) {
          return realDone(error);
        }
        const compileTree = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          tree
        );
        const compileResult = self2.stringify(compileTree, file2);
        if (looksLikeAValue(compileResult)) {
          file2.value = compileResult;
        } else {
          file2.result = compileResult;
        }
        realDone(
          error,
          /** @type {VFileWithOutput<CompileResult>} */
          file2
        );
      });
      function realDone(error, file2) {
        if (error || !file2) {
          reject(error);
        } else if (resolve) {
          resolve(file2);
        } else {
          ok(done, "`done` is defined if `resolve` is not");
          done(void 0, file2);
        }
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(file) {
    let complete = false;
    let result;
    this.freeze();
    assertParser("processSync", this.parser || this.Parser);
    assertCompiler("processSync", this.compiler || this.Compiler);
    this.process(file, realDone);
    assertDone("processSync", "process", complete);
    ok(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, file2) {
      complete = true;
      bail(error);
      result = file2;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(tree, file, done) {
    assertNode(tree);
    this.freeze();
    const transformers = this.transformers;
    if (!done && typeof file === "function") {
      done = file;
      file = void 0;
    }
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      ok(
        typeof file !== "function",
        "`file` can\u2019t be a `done` anymore, we checked"
      );
      const realFile = vfile(file);
      transformers.run(tree, realFile, realDone);
      function realDone(error, outputTree, file2) {
        const resultingTree = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          outputTree || tree
        );
        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(resultingTree);
        } else {
          ok(done, "`done` is defined if `resolve` is not");
          done(void 0, resultingTree, file2);
        }
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(tree, file) {
    let complete = false;
    let result;
    this.run(tree, file, realDone);
    assertDone("runSync", "run", complete);
    ok(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, tree2) {
      bail(error);
      result = tree2;
      complete = true;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(tree, file) {
    this.freeze();
    const realFile = vfile(file);
    const compiler2 = this.compiler || this.Compiler;
    assertCompiler("stringify", compiler2);
    assertNode(tree);
    return compiler2(tree, realFile);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(value, ...parameters) {
    const attachers = this.attachers;
    const namespace = this.namespace;
    assertUnfrozen("use", this.frozen);
    if (value === null || value === void 0) {
    } else if (typeof value === "function") {
      addPlugin(value, parameters);
    } else if (typeof value === "object") {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value + "`");
    }
    return this;
    function add(value2) {
      if (typeof value2 === "function") {
        addPlugin(value2, []);
      } else if (typeof value2 === "object") {
        if (Array.isArray(value2)) {
          const [plugin, ...parameters2] = (
            /** @type {PluginTuple<Array<unknown>>} */
            value2
          );
          addPlugin(plugin, parameters2);
        } else {
          addPreset(value2);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value2 + "`");
      }
    }
    function addPreset(result) {
      if (!("plugins" in result) && !("settings" in result)) {
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      }
      addList(result.plugins);
      if (result.settings) {
        namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
      }
    }
    function addList(plugins) {
      let index2 = -1;
      if (plugins === null || plugins === void 0) {
      } else if (Array.isArray(plugins)) {
        while (++index2 < plugins.length) {
          const thing = plugins[index2];
          add(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, parameters2) {
      let index2 = -1;
      let entryIndex = -1;
      while (++index2 < attachers.length) {
        if (attachers[index2][0] === plugin) {
          entryIndex = index2;
          break;
        }
      }
      if (entryIndex === -1) {
        attachers.push([plugin, ...parameters2]);
      } else if (parameters2.length > 0) {
        let [primary, ...rest] = parameters2;
        const currentPrimary = attachers[entryIndex][1];
        if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
          primary = (0, import_extend.default)(true, currentPrimary, primary);
        }
        attachers[entryIndex] = [plugin, primary, ...rest];
      }
    }
  }
};
var unified = new Processor().freeze();
function assertParser(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `parser`");
  }
}
function assertCompiler(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `compiler`");
  }
}
function assertUnfrozen(name2, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name2 + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name2, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name2 + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile2(value) ? value : new VFile(value);
}
function looksLikeAVFile2(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAValue(value) {
  return typeof value === "string" || isUint8Array2(value);
}
function isUint8Array2(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/estree-walker/src/walker.js
var WalkerBase = class {
  constructor() {
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node2) => this.replacement = node2
    };
  }
  /**
   * @template {Node} Parent
   * @param {Parent | null | undefined} parent
   * @param {keyof Parent | null | undefined} prop
   * @param {number | null | undefined} index
   * @param {Node} node
   */
  replace(parent, prop, index2, node2) {
    if (parent && prop) {
      if (index2 != null) {
        parent[prop][index2] = node2;
      } else {
        parent[prop] = node2;
      }
    }
  }
  /**
   * @template {Node} Parent
   * @param {Parent | null | undefined} parent
   * @param {keyof Parent | null | undefined} prop
   * @param {number | null | undefined} index
   */
  remove(parent, prop, index2) {
    if (parent && prop) {
      if (index2 !== null && index2 !== void 0) {
        parent[prop].splice(index2, 1);
      } else {
        delete parent[prop];
      }
    }
  }
};

// node_modules/estree-walker/src/sync.js
var SyncWalker = class extends WalkerBase {
  /**
   *
   * @param {SyncHandler} [enter]
   * @param {SyncHandler} [leave]
   */
  constructor(enter, leave) {
    super();
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node2) => this.replacement = node2
    };
    this.enter = enter;
    this.leave = leave;
  }
  /**
   * @template {Node} Parent
   * @param {Node} node
   * @param {Parent | null} parent
   * @param {keyof Parent} [prop]
   * @param {number | null} [index]
   * @returns {Node | null}
   */
  visit(node2, parent, prop, index2) {
    if (node2) {
      if (this.enter) {
        const _should_skip = this.should_skip;
        const _should_remove = this.should_remove;
        const _replacement = this.replacement;
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.enter.call(this.context, node2, parent, prop, index2);
        if (this.replacement) {
          node2 = this.replacement;
          this.replace(parent, prop, index2, node2);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index2);
        }
        const skipped = this.should_skip;
        const removed = this.should_remove;
        this.should_skip = _should_skip;
        this.should_remove = _should_remove;
        this.replacement = _replacement;
        if (skipped) return node2;
        if (removed) return null;
      }
      let key;
      for (key in node2) {
        const value = node2[key];
        if (value && typeof value === "object") {
          if (Array.isArray(value)) {
            const nodes = (
              /** @type {Array<unknown>} */
              value
            );
            for (let i = 0; i < nodes.length; i += 1) {
              const item = nodes[i];
              if (isNode(item)) {
                if (!this.visit(item, node2, key, i)) {
                  i--;
                }
              }
            }
          } else if (isNode(value)) {
            this.visit(value, node2, key, null);
          }
        }
      }
      if (this.leave) {
        const _replacement = this.replacement;
        const _should_remove = this.should_remove;
        this.replacement = null;
        this.should_remove = false;
        this.leave.call(this.context, node2, parent, prop, index2);
        if (this.replacement) {
          node2 = this.replacement;
          this.replace(parent, prop, index2, node2);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index2);
        }
        const removed = this.should_remove;
        this.replacement = _replacement;
        this.should_remove = _should_remove;
        if (removed) return null;
      }
    }
    return node2;
  }
};
function isNode(value) {
  return value !== null && typeof value === "object" && "type" in value && typeof value.type === "string";
}

// node_modules/estree-walker/src/index.js
function walk(ast, { enter, leave }) {
  const instance = new SyncWalker(enter, leave);
  return instance.visit(ast, null);
}

// node_modules/is-reference/src/index.js
function is_reference(node2, parent) {
  if (node2.type === "MemberExpression") {
    return !node2.computed && is_reference(node2.object, node2);
  }
  if (node2.type === "Identifier") {
    if (!parent) return true;
    switch (parent.type) {
      case "MemberExpression":
        return parent.computed || node2 === parent.object;
      case "MethodDefinition":
        return parent.computed;
      case "PropertyDefinition":
        return parent.computed || node2 === parent.value;
      case "Property":
        return parent.computed || node2 === parent.value;
      case "ExportSpecifier":
      case "ImportSpecifier":
        return node2 === parent.local;
      case "LabeledStatement":
      case "BreakStatement":
      case "ContinueStatement":
        return false;
      default:
        return true;
    }
  }
  return false;
}

// node_modules/periscopic/src/index.js
function analyze(expression) {
  const map4 = /* @__PURE__ */ new WeakMap();
  const globals = /* @__PURE__ */ new Map();
  const scope = new Scope3(null, false);
  const references = [];
  let current_scope = scope;
  walk(expression, {
    enter(node2, parent) {
      switch (node2.type) {
        case "Identifier":
          if (parent && is_reference(node2, parent)) {
            references.push([current_scope, node2]);
          }
          break;
        case "ImportDeclaration":
          node2.specifiers.forEach((specifier) => {
            current_scope.declarations.set(specifier.local.name, specifier);
          });
          break;
        case "FunctionExpression":
        case "FunctionDeclaration":
        case "ArrowFunctionExpression":
          if (node2.type === "FunctionDeclaration") {
            if (node2.id) {
              current_scope.declarations.set(node2.id.name, node2);
            }
            map4.set(node2, current_scope = new Scope3(current_scope, false));
          } else {
            map4.set(node2, current_scope = new Scope3(current_scope, false));
            if (node2.type === "FunctionExpression" && node2.id) {
              current_scope.declarations.set(node2.id.name, node2);
            }
          }
          node2.params.forEach((param) => {
            extract_names(param).forEach((name2) => {
              current_scope.declarations.set(name2, node2);
            });
          });
          break;
        case "ForStatement":
        case "ForInStatement":
        case "ForOfStatement":
          map4.set(node2, current_scope = new Scope3(current_scope, true));
          break;
        case "BlockStatement":
          map4.set(node2, current_scope = new Scope3(current_scope, true));
          break;
        case "ClassDeclaration":
        case "VariableDeclaration":
          current_scope.add_declaration(node2);
          break;
        case "CatchClause":
          map4.set(node2, current_scope = new Scope3(current_scope, true));
          if (node2.param) {
            extract_names(node2.param).forEach((name2) => {
              if (node2.param) {
                current_scope.declarations.set(name2, node2.param);
              }
            });
          }
          break;
      }
    },
    leave(node2) {
      if (map4.has(node2) && current_scope !== null && current_scope.parent) {
        current_scope = current_scope.parent;
      }
    }
  });
  for (let i = references.length - 1; i >= 0; --i) {
    const [scope2, reference] = references[i];
    if (!scope2.references.has(reference.name)) {
      add_reference(scope2, reference.name);
    }
    if (!scope2.find_owner(reference.name)) {
      globals.set(reference.name, reference);
    }
  }
  return { map: map4, scope, globals };
}
function add_reference(scope, name2) {
  scope.references.add(name2);
  if (scope.parent) add_reference(scope.parent, name2);
}
var Scope3 = class {
  /**
   * @param {Scope | null} parent 
   * @param {boolean} block 
   */
  constructor(parent, block) {
    this.parent = parent;
    this.block = block;
    this.declarations = /* @__PURE__ */ new Map();
    this.initialised_declarations = /* @__PURE__ */ new Set();
    this.references = /* @__PURE__ */ new Set();
  }
  /**
   * @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node
   */
  add_declaration(node2) {
    if (node2.type === "VariableDeclaration") {
      if (node2.kind === "var" && this.block && this.parent) {
        this.parent.add_declaration(node2);
      } else {
        const handle_declarator = (declarator) => {
          extract_names(declarator.id).forEach((name2) => {
            this.declarations.set(name2, node2);
            if (declarator.init) this.initialised_declarations.add(name2);
          });
          ;
        };
        node2.declarations.forEach(handle_declarator);
      }
    } else if (node2.id) {
      this.declarations.set(node2.id.name, node2);
    }
  }
  /**
   * @param {string} name
   * @returns {Scope | null}
   */
  find_owner(name2) {
    if (this.declarations.has(name2)) return this;
    return this.parent && this.parent.find_owner(name2);
  }
  /**
   * @param {string} name
   * @returns {boolean}
   */
  has(name2) {
    return this.declarations.has(name2) || !!this.parent && this.parent.has(name2);
  }
};
function extract_names(param) {
  return extract_identifiers(param).map((node2) => node2.name);
}
function extract_identifiers(param, nodes = []) {
  switch (param.type) {
    case "Identifier":
      nodes.push(param);
      break;
    case "MemberExpression":
      let object = param;
      while (object.type === "MemberExpression") {
        object = /** @type {any} */
        object.object;
      }
      nodes.push(
        /** @type {any} */
        object
      );
      break;
    case "ObjectPattern":
      const handle_prop = (prop) => {
        if (prop.type === "RestElement") {
          extract_identifiers(prop.argument, nodes);
        } else {
          extract_identifiers(prop.value, nodes);
        }
      };
      param.properties.forEach(handle_prop);
      break;
    case "ArrayPattern":
      const handle_element = (element3) => {
        if (element3) extract_identifiers(element3, nodes);
      };
      param.elements.forEach((element3) => {
        if (element3) {
          handle_element(element3);
        }
      });
      break;
    case "RestElement":
      extract_identifiers(param.argument, nodes);
      break;
    case "AssignmentPattern":
      extract_identifiers(param.left, nodes);
      break;
  }
  return nodes;
}

// node_modules/@mdx-js/mdx/lib/util/estree-util-create.js
function create(from, to) {
  const fields = ["start", "end", "loc", "range", "comments"];
  let index2 = -1;
  while (++index2 < fields.length) {
    const field = fields[index2];
    if (field in from) {
      to[field] = from[field];
    }
  }
}

// node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js
function declarationToExpression(declaration) {
  if (declaration.type === "FunctionDeclaration") {
    return { ...declaration, type: "FunctionExpression" };
  }
  ok(declaration.type === "ClassDeclaration", "unexpected node type");
  return { ...declaration, type: "ClassExpression" };
}

// node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js
function isDeclaration(node2) {
  return Boolean(
    node2.type === "FunctionDeclaration" || node2.type === "ClassDeclaration" || node2.type === "VariableDeclaration"
  );
}

// node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js
function specifiersToDeclarations(specifiers, init) {
  let index2 = -1;
  const declarations = [];
  const otherSpecifiers = [];
  let importNamespaceSpecifier;
  while (++index2 < specifiers.length) {
    const specifier = specifiers[index2];
    if (specifier.type === "ImportNamespaceSpecifier") {
      importNamespaceSpecifier = specifier;
    } else {
      otherSpecifiers.push(specifier);
    }
  }
  if (importNamespaceSpecifier) {
    const declarator = {
      type: "VariableDeclarator",
      id: importNamespaceSpecifier.local,
      init
    };
    create(importNamespaceSpecifier, declarator);
    declarations.push(declarator);
  }
  declarations.push({
    type: "VariableDeclarator",
    id: {
      type: "ObjectPattern",
      properties: otherSpecifiers.map(function(specifier) {
        let key = specifier.type === "ImportSpecifier" ? specifier.imported : specifier.type === "ExportSpecifier" ? specifier.exported : { type: "Identifier", name: "default" };
        let value = specifier.local;
        if (specifier.type === "ExportSpecifier") {
          value = key;
          key = specifier.local;
        }
        const property = {
          type: "Property",
          kind: "init",
          shorthand: key.name === value.name,
          method: false,
          computed: false,
          key,
          value
        };
        create(specifier, property);
        return property;
      })
    },
    init: importNamespaceSpecifier ? { type: "Identifier", name: importNamespaceSpecifier.local.name } : init
  });
  return declarations;
}

// node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js
function toIdOrMemberExpression(ids) {
  let index2 = -1;
  let object;
  while (++index2 < ids.length) {
    const name2 = ids[index2];
    const id = typeof name2 === "string" && name(name2) ? { type: "Identifier", name: name2 } : { type: "Literal", value: name2 };
    object = object ? {
      type: "MemberExpression",
      object,
      property: id,
      computed: id.type === "Literal",
      optional: false
    } : id;
  }
  ok(object, "expected non-empty `ids` to be passed");
  ok(object.type !== "Literal", "expected identifier as left-most value");
  return object;
}
function toJsxIdOrMemberExpression(ids) {
  let index2 = -1;
  let object;
  while (++index2 < ids.length) {
    const name2 = ids[index2];
    ok(
      typeof name2 === "string" && name(name2, { jsx: true }),
      "expected valid jsx identifier, not `" + name2 + "`"
    );
    const id = { type: "JSXIdentifier", name: name2 };
    object = object ? { type: "JSXMemberExpression", object, property: id } : id;
  }
  ok(object, "expected non-empty `ids` to be passed");
  return object;
}

// node_modules/@mdx-js/mdx/lib/plugin/recma-document.js
function recmaDocument(options) {
  const baseUrl = options.baseUrl || void 0;
  const baseHref = typeof baseUrl === "object" ? baseUrl.href : baseUrl;
  const outputFormat = options.outputFormat || "program";
  const pragma = options.pragma === void 0 ? "React.createElement" : options.pragma;
  const pragmaFrag = options.pragmaFrag === void 0 ? "React.Fragment" : options.pragmaFrag;
  const pragmaImportSource = options.pragmaImportSource || "react";
  const jsxImportSource = options.jsxImportSource || "react";
  const jsxRuntime = options.jsxRuntime || "automatic";
  return function(tree, file) {
    const exportedIdentifiers = [];
    const replacement = [];
    let exportAllCount = 0;
    let layout;
    let content3;
    let child;
    if (jsxRuntime === "classic" && pragmaFrag) {
      injectPragma(tree, "@jsxFrag", pragmaFrag);
    }
    if (jsxRuntime === "classic" && pragma) {
      injectPragma(tree, "@jsx", pragma);
    }
    if (jsxRuntime === "automatic" && jsxImportSource) {
      injectPragma(tree, "@jsxImportSource", jsxImportSource);
    }
    if (jsxRuntime) {
      injectPragma(tree, "@jsxRuntime", jsxRuntime);
    }
    if (jsxRuntime === "classic" && pragmaImportSource) {
      if (!pragma) {
        throw new Error(
          "Missing `pragma` in classic runtime with `pragmaImportSource`"
        );
      }
      handleEsm({
        type: "ImportDeclaration",
        specifiers: [
          {
            type: "ImportDefaultSpecifier",
            local: { type: "Identifier", name: pragma.split(".")[0] }
          }
        ],
        source: { type: "Literal", value: pragmaImportSource }
      });
    }
    for (child of tree.body) {
      if (child.type === "ExportDefaultDeclaration") {
        if (layout) {
          file.fail(
            "Unexpected duplicate layout, expected a single layout (previous: " + stringifyPosition(positionFromEstree(layout)) + ")",
            {
              ancestors: [tree, child],
              place: positionFromEstree(child),
              ruleId: "duplicate-layout",
              source: "recma-document"
            }
          );
        }
        layout = child;
        replacement.push({
          type: "VariableDeclaration",
          kind: "const",
          declarations: [
            {
              type: "VariableDeclarator",
              id: { type: "Identifier", name: "MDXLayout" },
              init: isDeclaration(child.declaration) ? declarationToExpression(child.declaration) : child.declaration
            }
          ]
        });
      } else if (child.type === "ExportNamedDeclaration" && child.source) {
        const source = (
          /** @type {SimpleLiteral} */
          child.source
        );
        child.specifiers = child.specifiers.filter(function(specifier) {
          if (specifier.exported.name === "default") {
            if (layout) {
              file.fail(
                "Unexpected duplicate layout, expected a single layout (previous: " + stringifyPosition(positionFromEstree(layout)) + ")",
                {
                  ancestors: [tree, child, specifier],
                  place: positionFromEstree(child),
                  ruleId: "duplicate-layout",
                  source: "recma-document"
                }
              );
            }
            layout = specifier;
            const specifiers = [];
            if (specifier.local.name === "default") {
              specifiers.push({
                type: "ImportDefaultSpecifier",
                local: { type: "Identifier", name: "MDXLayout" }
              });
            } else {
              const importSpecifier = {
                type: "ImportSpecifier",
                imported: specifier.local,
                local: { type: "Identifier", name: "MDXLayout" }
              };
              create(specifier.local, importSpecifier);
              specifiers.push(importSpecifier);
            }
            const from = { type: "Literal", value: source.value };
            create(source, from);
            const declaration = {
              type: "ImportDeclaration",
              specifiers,
              source: from
            };
            create(specifier, declaration);
            handleEsm(declaration);
            return false;
          }
          return true;
        });
        if (child.specifiers.length > 0) {
          handleExport(child);
        }
      } else if (child.type === "ExportNamedDeclaration" || child.type === "ExportAllDeclaration") {
        handleExport(child);
      } else if (child.type === "ImportDeclaration") {
        handleEsm(child);
      } else if (child.type === "ExpressionStatement" && (child.expression.type === "JSXElement" || // @ts-expect-error: `estree-jsx` does not register `JSXFragment` as an expression.
      child.expression.type === "JSXFragment")) {
        content3 = true;
        replacement.push(
          ...createMdxContent(child.expression, outputFormat, Boolean(layout))
        );
      } else {
        replacement.push(child);
      }
    }
    if (!content3) {
      replacement.push(
        ...createMdxContent(void 0, outputFormat, Boolean(layout))
      );
    }
    exportedIdentifiers.push(["MDXContent", "default"]);
    if (outputFormat === "function-body") {
      replacement.push({
        type: "ReturnStatement",
        argument: {
          type: "ObjectExpression",
          properties: [
            ...Array.from({ length: exportAllCount }).map(
              /**
               * @param {undefined} _
               *   Nothing.
               * @param {number} index
               *   Index.
               * @returns {SpreadElement}
               *   Node.
               */
              function(_, index2) {
                return {
                  type: "SpreadElement",
                  argument: {
                    type: "Identifier",
                    name: "_exportAll" + (index2 + 1)
                  }
                };
              }
            ),
            ...exportedIdentifiers.map(function(d) {
              const property = {
                type: "Property",
                kind: "init",
                method: false,
                computed: false,
                shorthand: typeof d === "string",
                key: {
                  type: "Identifier",
                  name: typeof d === "string" ? d : d[1]
                },
                value: {
                  type: "Identifier",
                  name: typeof d === "string" ? d : d[0]
                }
              };
              return property;
            })
          ]
        }
      });
    }
    tree.body = replacement;
    let usesImportMetaUrlVariable = false;
    let usesResolveDynamicHelper = false;
    if (baseHref || outputFormat === "function-body") {
      walk(tree, {
        enter(node2) {
          if ((node2.type === "ExportAllDeclaration" || node2.type === "ExportNamedDeclaration" || node2.type === "ImportDeclaration") && node2.source) {
            ok(baseHref, "unexpected missing `baseHref` in branch");
            let value = node2.source.value;
            ok(typeof value === "string", "expected string source");
            try {
              new URL(value);
            } catch {
              if (value.startsWith("/") || value.startsWith("./") || value.startsWith("../")) {
                value = new URL(value, baseHref).href;
              } else {
              }
            }
            const replacement2 = { type: "Literal", value };
            create(node2.source, replacement2);
            node2.source = replacement2;
            return;
          }
          if (node2.type === "ImportExpression") {
            usesResolveDynamicHelper = true;
            const replacement2 = {
              type: "CallExpression",
              callee: { type: "Identifier", name: "_resolveDynamicMdxSpecifier" },
              arguments: [node2.source],
              optional: false
            };
            node2.source = replacement2;
            return;
          }
          if (node2.type === "MemberExpression" && "object" in node2 && node2.object.type === "MetaProperty" && node2.property.type === "Identifier" && node2.object.meta.name === "import" && node2.object.property.name === "meta" && node2.property.name === "url") {
            usesImportMetaUrlVariable = true;
            const replacement2 = { type: "Identifier", name: "_importMetaUrl" };
            create(node2, replacement2);
            this.replace(replacement2);
          }
        }
      });
    }
    if (usesResolveDynamicHelper) {
      if (!baseHref) {
        usesImportMetaUrlVariable = true;
      }
      tree.body.push(
        resolveDynamicMdxSpecifier(
          baseHref ? { type: "Literal", value: baseHref } : { type: "Identifier", name: "_importMetaUrl" }
        )
      );
    }
    if (usesImportMetaUrlVariable) {
      ok(
        outputFormat === "function-body",
        "expected `function-body` when using dynamic url injection"
      );
      tree.body.unshift(...createImportMetaUrlVariable());
    }
    function handleExport(node2) {
      if (node2.type === "ExportNamedDeclaration") {
        if (node2.declaration) {
          exportedIdentifiers.push(
            ...analyze(node2.declaration).scope.declarations.keys()
          );
        }
        for (child of node2.specifiers) {
          exportedIdentifiers.push(child.exported.name);
        }
      }
      handleEsm(node2);
    }
    function handleEsm(node2) {
      let replace3;
      let init;
      if (outputFormat === "function-body") {
        if (
          // Always have a source:
          node2.type === "ImportDeclaration" || node2.type === "ExportAllDeclaration" || // Source optional:
          node2.type === "ExportNamedDeclaration" && node2.source
        ) {
          ok(node2.source, "expected `node.source` to be defined");
          const argument = { type: "ImportExpression", source: node2.source };
          create(node2, argument);
          init = { type: "AwaitExpression", argument };
          if ((node2.type === "ImportDeclaration" || node2.type === "ExportNamedDeclaration") && node2.specifiers.length === 0) {
            replace3 = { type: "ExpressionStatement", expression: init };
          } else {
            replace3 = {
              type: "VariableDeclaration",
              kind: "const",
              declarations: node2.type === "ExportAllDeclaration" ? [
                {
                  type: "VariableDeclarator",
                  id: {
                    type: "Identifier",
                    name: "_exportAll" + ++exportAllCount
                  },
                  init
                }
              ] : specifiersToDeclarations(node2.specifiers, init)
            };
          }
        } else if (node2.declaration) {
          replace3 = node2.declaration;
        } else {
          const declarators = node2.specifiers.filter(function(specifier) {
            return specifier.local.name !== specifier.exported.name;
          }).map(function(specifier) {
            return {
              type: "VariableDeclarator",
              id: specifier.exported,
              init: specifier.local
            };
          });
          if (declarators.length > 0) {
            replace3 = {
              type: "VariableDeclaration",
              kind: "const",
              declarations: declarators
            };
          }
        }
      } else {
        replace3 = node2;
      }
      if (replace3) {
        replacement.push(replace3);
      }
    }
  };
  function createMdxContent(content3, outputFormat2, hasInternalLayout) {
    const element3 = {
      type: "JSXElement",
      openingElement: {
        type: "JSXOpeningElement",
        name: { type: "JSXIdentifier", name: "MDXLayout" },
        attributes: [
          {
            type: "JSXSpreadAttribute",
            argument: { type: "Identifier", name: "props" }
          }
        ],
        selfClosing: false
      },
      closingElement: {
        type: "JSXClosingElement",
        name: { type: "JSXIdentifier", name: "MDXLayout" }
      },
      children: [
        {
          type: "JSXElement",
          openingElement: {
            type: "JSXOpeningElement",
            name: { type: "JSXIdentifier", name: "_createMdxContent" },
            attributes: [
              {
                type: "JSXSpreadAttribute",
                argument: { type: "Identifier", name: "props" }
              }
            ],
            selfClosing: true
          },
          closingElement: null,
          children: []
        }
      ]
    };
    let result = (
      /** @type {Expression} */
      element3
    );
    if (!hasInternalLayout) {
      result = {
        type: "ConditionalExpression",
        test: { type: "Identifier", name: "MDXLayout" },
        consequent: result,
        alternate: {
          type: "CallExpression",
          callee: { type: "Identifier", name: "_createMdxContent" },
          arguments: [{ type: "Identifier", name: "props" }],
          optional: false
        }
      };
    }
    let argument = (
      // Cast because TS otherwise does not think `JSXFragment`s are expressions.
      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */
      content3 || { type: "Identifier", name: "undefined" }
    );
    if (argument.type === "JSXFragment" && argument.children.length === 1 && argument.children[0].type === "JSXElement") {
      argument = argument.children[0];
    }
    let awaitExpression = false;
    walk(argument, {
      enter(node2) {
        if (node2.type === "ArrowFunctionExpression" || node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression") {
          return this.skip();
        }
        if (node2.type === "AwaitExpression" || /* c8 ignore next 2 -- can only occur in a function (which then can
         * only be async, so skipped it) */
        node2.type === "ForOfStatement" && node2.await) {
          awaitExpression = true;
        }
      }
    });
    const declaration = {
      type: "FunctionDeclaration",
      id: { type: "Identifier", name: "MDXContent" },
      params: [
        {
          type: "AssignmentPattern",
          left: { type: "Identifier", name: "props" },
          right: { type: "ObjectExpression", properties: [] }
        }
      ],
      body: {
        type: "BlockStatement",
        body: [{ type: "ReturnStatement", argument: result }]
      }
    };
    return [
      {
        type: "FunctionDeclaration",
        async: awaitExpression,
        id: { type: "Identifier", name: "_createMdxContent" },
        params: [{ type: "Identifier", name: "props" }],
        body: {
          type: "BlockStatement",
          body: [
            {
              type: "ReturnStatement",
              // Cast because TS doesn’t think `JSXFragment` is an expression.
              // eslint-disable-next-line object-shorthand
              argument: (
                /** @type {Expression} */
                argument
              )
            }
          ]
        }
      },
      outputFormat2 === "program" ? { type: "ExportDefaultDeclaration", declaration } : declaration
    ];
  }
}
function injectPragma(tree, name2, value) {
  tree.comments?.unshift({
    type: "Block",
    value: name2 + " " + value,
    data: { _mdxIsPragmaComment: true }
  });
}
function resolveDynamicMdxSpecifier(importMetaUrl) {
  return {
    type: "FunctionDeclaration",
    id: { type: "Identifier", name: "_resolveDynamicMdxSpecifier" },
    generator: false,
    async: false,
    params: [{ type: "Identifier", name: "d" }],
    body: {
      type: "BlockStatement",
      body: [
        {
          type: "IfStatement",
          test: {
            type: "BinaryExpression",
            left: {
              type: "UnaryExpression",
              operator: "typeof",
              prefix: true,
              argument: { type: "Identifier", name: "d" }
            },
            operator: "!==",
            right: { type: "Literal", value: "string" }
          },
          consequent: {
            type: "ReturnStatement",
            argument: { type: "Identifier", name: "d" }
          },
          alternate: null
        },
        // To do: use `URL.canParse` when widely supported (see commented
        // out code below).
        {
          type: "TryStatement",
          block: {
            type: "BlockStatement",
            body: [
              {
                type: "ExpressionStatement",
                expression: {
                  type: "NewExpression",
                  callee: { type: "Identifier", name: "URL" },
                  arguments: [{ type: "Identifier", name: "d" }]
                }
              },
              {
                type: "ReturnStatement",
                argument: { type: "Identifier", name: "d" }
              }
            ]
          },
          handler: {
            type: "CatchClause",
            param: null,
            body: { type: "BlockStatement", body: [] }
          },
          finalizer: null
        },
        // To do: use `URL.canParse` when widely supported.
        // {
        //   type: 'IfStatement',
        //   test: {
        //     type: 'CallExpression',
        //     callee: toIdOrMemberExpression(['URL', 'canParse']),
        //     arguments: [{type: 'Identifier', name: 'd'}],
        //     optional: false
        //   },
        //   consequent: {
        //     type: 'ReturnStatement',
        //     argument: {type: 'Identifier', name: 'd'}
        //   },
        //   alternate: null
        // },
        {
          type: "IfStatement",
          test: {
            type: "LogicalExpression",
            left: {
              type: "LogicalExpression",
              left: {
                type: "CallExpression",
                callee: toIdOrMemberExpression(["d", "startsWith"]),
                arguments: [{ type: "Literal", value: "/" }],
                optional: false
              },
              operator: "||",
              right: {
                type: "CallExpression",
                callee: toIdOrMemberExpression(["d", "startsWith"]),
                arguments: [{ type: "Literal", value: "./" }],
                optional: false
              }
            },
            operator: "||",
            right: {
              type: "CallExpression",
              callee: toIdOrMemberExpression(["d", "startsWith"]),
              arguments: [{ type: "Literal", value: "../" }],
              optional: false
            }
          },
          consequent: {
            type: "ReturnStatement",
            argument: {
              type: "MemberExpression",
              object: {
                type: "NewExpression",
                callee: { type: "Identifier", name: "URL" },
                arguments: [{ type: "Identifier", name: "d" }, importMetaUrl]
              },
              property: { type: "Identifier", name: "href" },
              computed: false,
              optional: false
            }
          },
          alternate: null
        },
        {
          type: "ReturnStatement",
          argument: { type: "Identifier", name: "d" }
        }
      ]
    }
  };
}
function createImportMetaUrlVariable() {
  return [
    {
      type: "VariableDeclaration",
      declarations: [
        {
          type: "VariableDeclarator",
          id: { type: "Identifier", name: "_importMetaUrl" },
          init: toIdOrMemberExpression(["arguments", 0, "baseUrl"])
        }
      ],
      kind: "const"
    },
    {
      type: "IfStatement",
      test: {
        type: "UnaryExpression",
        operator: "!",
        prefix: true,
        argument: { type: "Identifier", name: "_importMetaUrl" }
      },
      consequent: {
        type: "ThrowStatement",
        argument: {
          type: "NewExpression",
          callee: { type: "Identifier", name: "Error" },
          arguments: [
            {
              type: "Literal",
              value: "Unexpected missing `options.baseUrl` needed to support `export \u2026 from`, `import`, or `import.meta.url` when generating `function-body`"
            }
          ]
        }
      },
      alternate: null
    }
  ];
}

// node_modules/estree-util-build-jsx/lib/index.js
var regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\s+(\S+)/g;
function buildJsx(tree, options) {
  const config = options || {};
  let automatic = config.runtime === "automatic";
  const annotations = {};
  const imports = {};
  walk(tree, {
    enter(node2) {
      if (node2.type === "Program") {
        const comments = node2.comments || [];
        let index2 = -1;
        while (++index2 < comments.length) {
          regex.lastIndex = 0;
          let match = regex.exec(comments[index2].value);
          while (match) {
            annotations[match[1]] = match[2];
            match = regex.exec(comments[index2].value);
          }
        }
        if (annotations.jsxRuntime) {
          if (annotations.jsxRuntime === "automatic") {
            automatic = true;
            if (annotations.jsx) {
              throw new Error("Unexpected `@jsx` pragma w/ automatic runtime");
            }
            if (annotations.jsxFrag) {
              throw new Error(
                "Unexpected `@jsxFrag` pragma w/ automatic runtime"
              );
            }
          } else if (annotations.jsxRuntime === "classic") {
            automatic = false;
            if (annotations.jsxImportSource) {
              throw new Error(
                "Unexpected `@jsxImportSource` w/ classic runtime"
              );
            }
          } else {
            throw new Error(
              "Unexpected `jsxRuntime` `" + annotations.jsxRuntime + "`, expected `automatic` or `classic`"
            );
          }
        }
      }
    },
    // eslint-disable-next-line complexity
    leave(node2) {
      if (node2.type === "Program") {
        const specifiers = [];
        if (imports.fragment) {
          specifiers.push({
            type: "ImportSpecifier",
            imported: { type: "Identifier", name: "Fragment" },
            local: { type: "Identifier", name: "_Fragment" }
          });
        }
        if (imports.jsx) {
          specifiers.push({
            type: "ImportSpecifier",
            imported: { type: "Identifier", name: "jsx" },
            local: { type: "Identifier", name: "_jsx" }
          });
        }
        if (imports.jsxs) {
          specifiers.push({
            type: "ImportSpecifier",
            imported: { type: "Identifier", name: "jsxs" },
            local: { type: "Identifier", name: "_jsxs" }
          });
        }
        if (imports.jsxDEV) {
          specifiers.push({
            type: "ImportSpecifier",
            imported: { type: "Identifier", name: "jsxDEV" },
            local: { type: "Identifier", name: "_jsxDEV" }
          });
        }
        if (specifiers.length > 0) {
          let injectIndex = 0;
          while (injectIndex < node2.body.length) {
            const child = node2.body[injectIndex];
            if ("directive" in child && child.directive) {
              injectIndex++;
            } else {
              break;
            }
          }
          node2.body.splice(injectIndex, 0, {
            type: "ImportDeclaration",
            specifiers,
            source: {
              type: "Literal",
              value: (annotations.jsxImportSource || config.importSource || "react") + (config.development ? "/jsx-dev-runtime" : "/jsx-runtime")
            }
          });
        }
      }
      if (node2.type !== "JSXElement" && node2.type !== "JSXFragment") {
        return;
      }
      const children = [];
      let index2 = -1;
      while (++index2 < node2.children.length) {
        const child = node2.children[index2];
        if (child.type === "JSXExpressionContainer") {
          if (child.expression.type !== "JSXEmptyExpression") {
            children.push(child.expression);
          }
        } else if (child.type === "JSXText") {
          const value = child.value.replace(/\t/g, " ").replace(/ *(\r?\n|\r) */g, "\n").replace(/\n+/g, "\n").replace(/\n+$/, "").replace(/^\n+/, "").replace(/\n/g, " ");
          if (value) {
            const text7 = { type: "Literal", value };
            create2(child, text7);
            children.push(text7);
          }
        } else {
          ok(
            child.type !== "JSXElement" && child.type !== "JSXFragment" && child.type !== "JSXSpreadChild"
          );
          children.push(child);
        }
      }
      let name2;
      const fields = [];
      let parameters = [];
      let key;
      if (node2.type === "JSXElement") {
        name2 = toIdentifier(node2.openingElement.name);
        if (name2.type === "Identifier" && /^[a-z]/.test(name2.name)) {
          const next = { type: "Literal", value: name2.name };
          create2(name2, next);
          name2 = next;
        }
        let spread;
        const attributes = node2.openingElement.attributes;
        let index3 = -1;
        while (++index3 < attributes.length) {
          const attribute = attributes[index3];
          if (attribute.type === "JSXSpreadAttribute") {
            if (attribute.argument.type === "ObjectExpression") {
              fields.push(...attribute.argument.properties);
            } else {
              fields.push({ type: "SpreadElement", argument: attribute.argument });
            }
            spread = true;
          } else {
            const prop = toProperty(attribute);
            if (automatic && prop.key.type === "Identifier" && prop.key.name === "key") {
              if (spread) {
                throw new Error(
                  "Expected `key` to come before any spread expressions"
                );
              }
              const value = prop.value;
              ok(
                value.type !== "AssignmentPattern" && value.type !== "ArrayPattern" && value.type !== "ObjectPattern" && value.type !== "RestElement"
              );
              key = value;
            } else {
              fields.push(prop);
            }
          }
        }
      } else if (automatic) {
        imports.fragment = true;
        name2 = { type: "Identifier", name: "_Fragment" };
      } else {
        name2 = toMemberExpression(
          annotations.jsxFrag || config.pragmaFrag || "React.Fragment"
        );
      }
      if (automatic) {
        if (children.length > 0) {
          fields.push({
            type: "Property",
            key: { type: "Identifier", name: "children" },
            value: children.length > 1 ? { type: "ArrayExpression", elements: children } : children[0],
            kind: "init",
            method: false,
            shorthand: false,
            computed: false
          });
        }
      } else {
        parameters = children;
      }
      let callee;
      if (automatic) {
        parameters.push({ type: "ObjectExpression", properties: fields });
        if (key) {
          parameters.push(key);
        } else if (config.development) {
          parameters.push({ type: "Identifier", name: "undefined" });
        }
        const isStaticChildren = children.length > 1;
        if (config.development) {
          imports.jsxDEV = true;
          callee = {
            type: "Identifier",
            name: "_jsxDEV"
          };
          parameters.push({ type: "Literal", value: isStaticChildren });
          const source = {
            type: "ObjectExpression",
            properties: [
              {
                type: "Property",
                method: false,
                shorthand: false,
                computed: false,
                kind: "init",
                key: { type: "Identifier", name: "fileName" },
                value: {
                  type: "Literal",
                  value: config.filePath || "<source.js>"
                }
              }
            ]
          };
          if (node2.loc) {
            source.properties.push(
              {
                type: "Property",
                method: false,
                shorthand: false,
                computed: false,
                kind: "init",
                key: { type: "Identifier", name: "lineNumber" },
                value: { type: "Literal", value: node2.loc.start.line }
              },
              {
                type: "Property",
                method: false,
                shorthand: false,
                computed: false,
                kind: "init",
                key: { type: "Identifier", name: "columnNumber" },
                value: { type: "Literal", value: node2.loc.start.column + 1 }
              }
            );
          }
          parameters.push(source, { type: "ThisExpression" });
        } else if (isStaticChildren) {
          imports.jsxs = true;
          callee = { type: "Identifier", name: "_jsxs" };
        } else {
          imports.jsx = true;
          callee = { type: "Identifier", name: "_jsx" };
        }
      } else {
        if (fields.length > 0) {
          parameters.unshift({ type: "ObjectExpression", properties: fields });
        } else if (parameters.length > 0) {
          parameters.unshift({ type: "Literal", value: null });
        }
        callee = toMemberExpression(
          annotations.jsx || config.pragma || "React.createElement"
        );
      }
      parameters.unshift(name2);
      const call = {
        type: "CallExpression",
        callee,
        arguments: parameters,
        optional: false
      };
      create2(node2, call);
      this.replace(call);
    }
  });
}
function toProperty(node2) {
  let value;
  if (node2.value) {
    if (node2.value.type === "JSXExpressionContainer") {
      const valueExpression = node2.value.expression;
      ok(
        valueExpression.type !== "JSXEmptyExpression",
        "`JSXEmptyExpression` is not allowed in props."
      );
      value = valueExpression;
    } else {
      const nodeValue = node2.value;
      ok(
        nodeValue.type !== "JSXElement" && nodeValue.type !== "JSXFragment",
        "JSX{Element,Fragment} are already compiled to `CallExpression`"
      );
      value = nodeValue;
      delete value.raw;
    }
  } else {
    value = { type: "Literal", value: true };
  }
  const replacement = {
    type: "Property",
    key: toIdentifier(node2.name),
    value,
    kind: "init",
    method: false,
    shorthand: false,
    computed: false
  };
  create2(node2, replacement);
  return replacement;
}
function toIdentifier(node2) {
  let replace3;
  if (node2.type === "JSXMemberExpression") {
    const id = toIdentifier(node2.property);
    replace3 = {
      type: "MemberExpression",
      object: toIdentifier(node2.object),
      property: id,
      computed: id.type === "Literal",
      optional: false
    };
  } else if (node2.type === "JSXNamespacedName") {
    replace3 = {
      type: "Literal",
      value: node2.namespace.name + ":" + node2.name.name
    };
  } else {
    replace3 = name(node2.name) ? { type: "Identifier", name: node2.name } : { type: "Literal", value: node2.name };
  }
  create2(node2, replace3);
  return replace3;
}
function toMemberExpression(id) {
  const identifiers = id.split(".");
  let index2 = -1;
  let result;
  while (++index2 < identifiers.length) {
    const prop = name(identifiers[index2]) ? { type: "Identifier", name: identifiers[index2] } : { type: "Literal", value: identifiers[index2] };
    result = result ? {
      type: "MemberExpression",
      object: result,
      property: prop,
      computed: Boolean(index2 && prop.type === "Literal"),
      optional: false
    } : prop;
  }
  ok(result, "always a result");
  return result;
}
function create2(from, to) {
  const fields = ["start", "end", "loc", "range", "comments"];
  let index2 = -1;
  while (++index2 < fields.length) {
    const field = fields[index2];
    if (field in from) {
      to[field] = from[field];
    }
  }
}

// node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js
function recmaJsxBuild(options) {
  const { development, outputFormat } = options || {};
  return function(tree, file) {
    buildJsx(tree, { development, filePath: file.history[0] });
    if (tree.comments) {
      tree.comments = tree.comments.filter(function(d) {
        return !d.data?._mdxIsPragmaComment;
      });
    }
    if (outputFormat === "function-body") {
      let index2 = 0;
      while (index2 < tree.body.length) {
        const child = tree.body[index2];
        if ("directive" in child && child.directive) {
          index2++;
        } else {
          break;
        }
      }
      const declaration = tree.body[index2];
      if (declaration && declaration.type === "ImportDeclaration" && typeof declaration.source.value === "string" && /\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {
        tree.body[index2] = {
          type: "VariableDeclaration",
          kind: "const",
          declarations: specifiersToDeclarations(
            declaration.specifiers,
            toIdOrMemberExpression(["arguments", 0])
          )
        };
      }
    }
  };
}

// node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js
function toBinaryAddition(expressions) {
  let index2 = -1;
  let left;
  while (++index2 < expressions.length) {
    const right = expressions[index2];
    left = left ? { type: "BinaryExpression", left, operator: "+", right } : right;
  }
  ok(left, "expected non-empty `expressions` to be passed");
  return left;
}

// node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js
function recmaJsxRewrite(options) {
  const { development, outputFormat, providerImportSource } = options;
  return function(tree, file) {
    const scopeInfo = analyze(tree);
    const functionStack = [];
    let importProvider = false;
    let createErrorHelper = false;
    let currentScope;
    walk(tree, {
      enter(node2) {
        const newScope = (
          /** @type {Scope | undefined} */
          scopeInfo.map.get(node2)
        );
        if (node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression" || node2.type === "ArrowFunctionExpression") {
          functionStack.push({
            components: [],
            idToInvalidComponentName: /* @__PURE__ */ new Map(),
            node: node2,
            objects: [],
            references: {},
            tags: []
          });
          if (isNamedFunction(node2, "MDXContent") && newScope && !inScope(newScope, "MDXLayout")) {
            functionStack[0].components.push("MDXLayout");
          }
        }
        const functionScope = functionStack[0];
        if (!functionScope || !isNamedFunction(functionScope.node, "_createMdxContent") && !providerImportSource) {
          return;
        }
        if (newScope) {
          newScope.node = node2;
          currentScope = newScope;
        }
        if (currentScope && node2.type === "JSXElement") {
          let name2 = node2.openingElement.name;
          if (name2.type === "JSXMemberExpression") {
            const ids = [];
            while (name2.type === "JSXMemberExpression") {
              ids.unshift(name2.property.name);
              name2 = name2.object;
            }
            ids.unshift(name2.name);
            const fullId = ids.join(".");
            const id = name2.name;
            const isInScope = inScope(currentScope, id);
            if (!Object.hasOwn(functionScope.references, fullId)) {
              const parentScope = (
                /** @type {Scope | undefined} */
                currentScope.parent
              );
              if (!isInScope || // If the parent scope is `_createMdxContent`, then this
              // references a component we can add a check statement for.
              parentScope && parentScope.node.type === "FunctionDeclaration" && isNamedFunction(parentScope.node, "_createMdxContent")) {
                functionScope.references[fullId] = { component: true, node: node2 };
              }
            }
            if (!functionScope.objects.includes(id) && !isInScope) {
              functionScope.objects.push(id);
            }
          } else if (name2.type === "JSXNamespacedName") {
          } else if (name(name2.name) && !/^[a-z]/.test(name2.name)) {
            const id = name2.name;
            if (!inScope(currentScope, id)) {
              if (id !== "MDXLayout" && !Object.hasOwn(functionScope.references, id)) {
                functionScope.references[id] = { component: true, node: node2 };
              }
              if (!functionScope.components.includes(id)) {
                functionScope.components.push(id);
              }
            }
          } else if (node2.data && node2.data._mdxExplicitJsx) {
          } else {
            const id = name2.name;
            if (!functionScope.tags.includes(id)) {
              functionScope.tags.push(id);
            }
            let jsxIdExpression = ["_components", id];
            if (name(id) === false) {
              let invalidComponentName = functionScope.idToInvalidComponentName.get(id);
              if (invalidComponentName === void 0) {
                invalidComponentName = `_component${functionScope.idToInvalidComponentName.size}`;
                functionScope.idToInvalidComponentName.set(
                  id,
                  invalidComponentName
                );
              }
              jsxIdExpression = [invalidComponentName];
            }
            node2.openingElement.name = toJsxIdOrMemberExpression(jsxIdExpression);
            if (node2.closingElement) {
              node2.closingElement.name = toJsxIdOrMemberExpression(jsxIdExpression);
            }
          }
        }
      },
      leave(node2) {
        const defaults = [];
        const actual = [];
        const parameters = [];
        const declarations = [];
        if (currentScope && currentScope.node === node2) {
          currentScope = /** @type {Scope} */
          currentScope.parent;
        }
        if (node2.type === "FunctionDeclaration" || node2.type === "FunctionExpression" || node2.type === "ArrowFunctionExpression") {
          const scopeNode = node2;
          const scope = functionStack[functionStack.length - 1];
          let name2;
          for (name2 of scope.tags.sort()) {
            defaults.push({
              type: "Property",
              kind: "init",
              key: name(name2) ? { type: "Identifier", name: name2 } : { type: "Literal", value: name2 },
              value: { type: "Literal", value: name2 },
              method: false,
              shorthand: false,
              computed: false
            });
          }
          actual.push(...scope.components);
          for (name2 of scope.objects) {
            if (!actual.includes(name2)) {
              actual.push(name2);
            }
          }
          actual.sort();
          const statements = [];
          if (defaults.length > 0 || actual.length > 0 || scope.idToInvalidComponentName.size > 0) {
            if (providerImportSource) {
              importProvider = true;
              parameters.push({
                type: "CallExpression",
                callee: { type: "Identifier", name: "_provideComponents" },
                arguments: [],
                optional: false
              });
            }
            if (isNamedFunction(scope.node, "MDXContent") || isNamedFunction(scope.node, "_createMdxContent")) {
              parameters.push(toIdOrMemberExpression(["props", "components"]));
            }
            if (defaults.length > 0 || parameters.length > 1) {
              for (const parameter of parameters) {
                defaults.push({ type: "SpreadElement", argument: parameter });
              }
            }
            let componentsInit = defaults.length > 0 ? { type: "ObjectExpression", properties: defaults } : (
              // If we’re only getting components from `props.components`,
              // make sure it’s defined.
              {
                type: "LogicalExpression",
                operator: "||",
                left: parameters[0],
                right: { type: "ObjectExpression", properties: [] }
              }
            );
            let componentsPattern;
            if (actual.length > 0) {
              componentsPattern = {
                type: "ObjectPattern",
                properties: actual.map(function(name3) {
                  return {
                    type: "Property",
                    kind: "init",
                    key: {
                      type: "Identifier",
                      name: name3 === "MDXLayout" ? "wrapper" : name3
                    },
                    value: { type: "Identifier", name: name3 },
                    method: false,
                    shorthand: name3 !== "MDXLayout",
                    computed: false
                  };
                })
              };
            }
            if (scope.tags.length > 0) {
              declarations.push({
                type: "VariableDeclarator",
                id: { type: "Identifier", name: "_components" },
                init: componentsInit
              });
              componentsInit = { type: "Identifier", name: "_components" };
            }
            if (isNamedFunction(scope.node, "_createMdxContent")) {
              for (const [id, componentName] of [
                ...scope.idToInvalidComponentName
              ].sort(function([a], [b]) {
                return a.localeCompare(b);
              })) {
                declarations.push({
                  type: "VariableDeclarator",
                  id: {
                    type: "Identifier",
                    name: componentName
                  },
                  init: {
                    type: "MemberExpression",
                    object: { type: "Identifier", name: "_components" },
                    property: { type: "Literal", value: id },
                    computed: true,
                    optional: false
                  }
                });
              }
            }
            if (componentsPattern) {
              declarations.push({
                type: "VariableDeclarator",
                id: componentsPattern,
                init: componentsInit
              });
            }
            if (declarations.length > 0) {
              statements.push({
                type: "VariableDeclaration",
                kind: "const",
                declarations
              });
            }
          }
          let key;
          for (key in scope.references) {
            if (Object.hasOwn(scope.references, key)) {
              const parts = key.split(".");
              let index3 = 0;
              while (++index3 < parts.length) {
                const partial = parts.slice(0, index3).join(".");
                if (!Object.hasOwn(scope.references, partial)) {
                  scope.references[partial] = {
                    component: false,
                    node: scope.references[key].node
                  };
                }
              }
            }
          }
          const references = Object.keys(scope.references).sort();
          let index2 = -1;
          while (++index2 < references.length) {
            const id = references[index2];
            const info = scope.references[id];
            const place = stringifyPosition(positionFromEstree(info.node));
            const parameters2 = [
              { type: "Literal", value: id },
              { type: "Literal", value: info.component }
            ];
            createErrorHelper = true;
            if (development && place) {
              parameters2.push({ type: "Literal", value: place });
            }
            statements.push({
              type: "IfStatement",
              test: {
                type: "UnaryExpression",
                operator: "!",
                prefix: true,
                argument: toIdOrMemberExpression(id.split("."))
              },
              consequent: {
                type: "ExpressionStatement",
                expression: {
                  type: "CallExpression",
                  callee: { type: "Identifier", name: "_missingMdxReference" },
                  arguments: parameters2,
                  optional: false
                }
              },
              alternate: void 0
            });
          }
          if (statements.length > 0) {
            if (scopeNode.body.type !== "BlockStatement") {
              scopeNode.body = {
                type: "BlockStatement",
                body: [{ type: "ReturnStatement", argument: scopeNode.body }]
              };
            }
            scopeNode.body.body.unshift(...statements);
          }
          functionStack.pop();
        }
      }
    });
    if (importProvider && providerImportSource) {
      tree.body.unshift(
        createImportProvider(providerImportSource, outputFormat)
      );
    }
    if (createErrorHelper) {
      const message = [
        { type: "Literal", value: "Expected " },
        {
          type: "ConditionalExpression",
          test: { type: "Identifier", name: "component" },
          consequent: { type: "Literal", value: "component" },
          alternate: { type: "Literal", value: "object" }
        },
        { type: "Literal", value: " `" },
        { type: "Identifier", name: "id" },
        {
          type: "Literal",
          value: "` to be defined: you likely forgot to import, pass, or provide it."
        }
      ];
      const parameters = [
        { type: "Identifier", name: "id" },
        { type: "Identifier", name: "component" }
      ];
      if (development) {
        message.push({
          type: "ConditionalExpression",
          test: { type: "Identifier", name: "place" },
          consequent: toBinaryAddition([
            { type: "Literal", value: "\nIt\u2019s referenced in your code at `" },
            { type: "Identifier", name: "place" },
            {
              type: "Literal",
              value: (file.path ? "` in `" + file.path : "") + "`"
            }
          ]),
          alternate: { type: "Literal", value: "" }
        });
        parameters.push({ type: "Identifier", name: "place" });
      }
      tree.body.push({
        type: "FunctionDeclaration",
        id: { type: "Identifier", name: "_missingMdxReference" },
        generator: false,
        async: false,
        params: parameters,
        body: {
          type: "BlockStatement",
          body: [
            {
              type: "ThrowStatement",
              argument: {
                type: "NewExpression",
                callee: { type: "Identifier", name: "Error" },
                arguments: [toBinaryAddition(message)]
              }
            }
          ]
        }
      });
    }
    if (outputFormat === "function-body") {
      tree.body.unshift({
        type: "ExpressionStatement",
        expression: { type: "Literal", value: "use strict" },
        directive: "use strict"
      });
    }
  };
}
function createImportProvider(providerImportSource, outputFormat) {
  const specifiers = [
    {
      type: "ImportSpecifier",
      imported: { type: "Identifier", name: "useMDXComponents" },
      local: { type: "Identifier", name: "_provideComponents" }
    }
  ];
  return outputFormat === "function-body" ? {
    type: "VariableDeclaration",
    kind: "const",
    declarations: specifiersToDeclarations(
      specifiers,
      toIdOrMemberExpression(["arguments", 0])
    )
  } : {
    type: "ImportDeclaration",
    specifiers,
    source: { type: "Literal", value: providerImportSource }
  };
}
function isNamedFunction(node2, name2) {
  return Boolean(node2 && "id" in node2 && node2.id && node2.id.name === name2);
}
function inScope(scope, id) {
  let currentScope = scope;
  while (currentScope) {
    if (currentScope.declarations.has(id)) {
      return true;
    }
    currentScope = /** @type {Scope | undefined} */
    currentScope.parent || void 0;
  }
  return false;
}

// node_modules/astring/dist/astring.mjs
var { stringify } = JSON;
if (!String.prototype.repeat) {
  throw new Error(
    "String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation"
  );
}
if (!String.prototype.endsWith) {
  throw new Error(
    "String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation"
  );
}
var OPERATOR_PRECEDENCE = {
  "||": 2,
  "??": 3,
  "&&": 4,
  "|": 5,
  "^": 6,
  "&": 7,
  "==": 8,
  "!=": 8,
  "===": 8,
  "!==": 8,
  "<": 9,
  ">": 9,
  "<=": 9,
  ">=": 9,
  in: 9,
  instanceof: 9,
  "<<": 10,
  ">>": 10,
  ">>>": 10,
  "+": 11,
  "-": 11,
  "*": 12,
  "%": 12,
  "/": 12,
  "**": 13
};
var NEEDS_PARENTHESES = 17;
var EXPRESSIONS_PRECEDENCE = {
  // Definitions
  ArrayExpression: 20,
  TaggedTemplateExpression: 20,
  ThisExpression: 20,
  Identifier: 20,
  PrivateIdentifier: 20,
  Literal: 18,
  TemplateLiteral: 20,
  Super: 20,
  SequenceExpression: 20,
  // Operations
  MemberExpression: 19,
  ChainExpression: 19,
  CallExpression: 19,
  NewExpression: 19,
  // Other definitions
  ArrowFunctionExpression: NEEDS_PARENTHESES,
  ClassExpression: NEEDS_PARENTHESES,
  FunctionExpression: NEEDS_PARENTHESES,
  ObjectExpression: NEEDS_PARENTHESES,
  // Other operations
  UpdateExpression: 16,
  UnaryExpression: 15,
  AwaitExpression: 15,
  BinaryExpression: 14,
  LogicalExpression: 13,
  ConditionalExpression: 4,
  AssignmentExpression: 3,
  YieldExpression: 2,
  RestElement: 1
};
function formatSequence(state, nodes) {
  const { generator } = state;
  state.write("(");
  if (nodes != null && nodes.length > 0) {
    generator[nodes[0].type](nodes[0], state);
    const { length } = nodes;
    for (let i = 1; i < length; i++) {
      const param = nodes[i];
      state.write(", ");
      generator[param.type](param, state);
    }
  }
  state.write(")");
}
function expressionNeedsParenthesis(state, node2, parentNode, isRightHand) {
  const nodePrecedence = state.expressionsPrecedence[node2.type];
  if (nodePrecedence === NEEDS_PARENTHESES) {
    return true;
  }
  const parentNodePrecedence = state.expressionsPrecedence[parentNode.type];
  if (nodePrecedence !== parentNodePrecedence) {
    return !isRightHand && nodePrecedence === 15 && parentNodePrecedence === 14 && parentNode.operator === "**" || nodePrecedence < parentNodePrecedence;
  }
  if (nodePrecedence !== 13 && nodePrecedence !== 14) {
    return false;
  }
  if (node2.operator === "**" && parentNode.operator === "**") {
    return !isRightHand;
  }
  if (nodePrecedence === 13 && parentNodePrecedence === 13 && (node2.operator === "??" || parentNode.operator === "??")) {
    return true;
  }
  if (isRightHand) {
    return OPERATOR_PRECEDENCE[node2.operator] <= OPERATOR_PRECEDENCE[parentNode.operator];
  }
  return OPERATOR_PRECEDENCE[node2.operator] < OPERATOR_PRECEDENCE[parentNode.operator];
}
function formatExpression(state, node2, parentNode, isRightHand) {
  const { generator } = state;
  if (expressionNeedsParenthesis(state, node2, parentNode, isRightHand)) {
    state.write("(");
    generator[node2.type](node2, state);
    state.write(")");
  } else {
    generator[node2.type](node2, state);
  }
}
function reindent(state, text7, indent3, lineEnd) {
  const lines = text7.split("\n");
  const end = lines.length - 1;
  state.write(lines[0].trim());
  if (end > 0) {
    state.write(lineEnd);
    for (let i = 1; i < end; i++) {
      state.write(indent3 + lines[i].trim() + lineEnd);
    }
    state.write(indent3 + lines[end].trim());
  }
}
function formatComments(state, comments, indent3, lineEnd) {
  const { length } = comments;
  for (let i = 0; i < length; i++) {
    const comment2 = comments[i];
    state.write(indent3);
    if (comment2.type[0] === "L") {
      state.write("// " + comment2.value.trim() + "\n", comment2);
    } else {
      state.write("/*");
      reindent(state, comment2.value, indent3, lineEnd);
      state.write("*/" + lineEnd);
    }
  }
}
function hasCallExpression(node2) {
  let currentNode = node2;
  while (currentNode != null) {
    const { type } = currentNode;
    if (type[0] === "C" && type[1] === "a") {
      return true;
    } else if (type[0] === "M" && type[1] === "e" && type[2] === "m") {
      currentNode = currentNode.object;
    } else {
      return false;
    }
  }
}
function formatVariableDeclaration(state, node2) {
  const { generator } = state;
  const { declarations } = node2;
  state.write(node2.kind + " ");
  const { length } = declarations;
  if (length > 0) {
    generator.VariableDeclarator(declarations[0], state);
    for (let i = 1; i < length; i++) {
      state.write(", ");
      generator.VariableDeclarator(declarations[i], state);
    }
  }
}
var ForInStatement;
var FunctionDeclaration;
var RestElement;
var BinaryExpression;
var ArrayExpression;
var BlockStatement;
var GENERATOR = {
  /*
  Default generator.
  */
  Program(node2, state) {
    const indent3 = state.indent.repeat(state.indentLevel);
    const { lineEnd, writeComments } = state;
    if (writeComments && node2.comments != null) {
      formatComments(state, node2.comments, indent3, lineEnd);
    }
    const statements = node2.body;
    const { length } = statements;
    for (let i = 0; i < length; i++) {
      const statement = statements[i];
      if (writeComments && statement.comments != null) {
        formatComments(state, statement.comments, indent3, lineEnd);
      }
      state.write(indent3);
      this[statement.type](statement, state);
      state.write(lineEnd);
    }
    if (writeComments && node2.trailingComments != null) {
      formatComments(state, node2.trailingComments, indent3, lineEnd);
    }
  },
  BlockStatement: BlockStatement = function(node2, state) {
    const indent3 = state.indent.repeat(state.indentLevel++);
    const { lineEnd, writeComments } = state;
    const statementIndent = indent3 + state.indent;
    state.write("{");
    const statements = node2.body;
    if (statements != null && statements.length > 0) {
      state.write(lineEnd);
      if (writeComments && node2.comments != null) {
        formatComments(state, node2.comments, statementIndent, lineEnd);
      }
      const { length } = statements;
      for (let i = 0; i < length; i++) {
        const statement = statements[i];
        if (writeComments && statement.comments != null) {
          formatComments(state, statement.comments, statementIndent, lineEnd);
        }
        state.write(statementIndent);
        this[statement.type](statement, state);
        state.write(lineEnd);
      }
      state.write(indent3);
    } else {
      if (writeComments && node2.comments != null) {
        state.write(lineEnd);
        formatComments(state, node2.comments, statementIndent, lineEnd);
        state.write(indent3);
      }
    }
    if (writeComments && node2.trailingComments != null) {
      formatComments(state, node2.trailingComments, statementIndent, lineEnd);
    }
    state.write("}");
    state.indentLevel--;
  },
  ClassBody: BlockStatement,
  StaticBlock(node2, state) {
    state.write("static ");
    this.BlockStatement(node2, state);
  },
  EmptyStatement(node2, state) {
    state.write(";");
  },
  ExpressionStatement(node2, state) {
    const precedence = state.expressionsPrecedence[node2.expression.type];
    if (precedence === NEEDS_PARENTHESES || precedence === 3 && node2.expression.left.type[0] === "O") {
      state.write("(");
      this[node2.expression.type](node2.expression, state);
      state.write(")");
    } else {
      this[node2.expression.type](node2.expression, state);
    }
    state.write(";");
  },
  IfStatement(node2, state) {
    state.write("if (");
    this[node2.test.type](node2.test, state);
    state.write(") ");
    this[node2.consequent.type](node2.consequent, state);
    if (node2.alternate != null) {
      state.write(" else ");
      this[node2.alternate.type](node2.alternate, state);
    }
  },
  LabeledStatement(node2, state) {
    this[node2.label.type](node2.label, state);
    state.write(": ");
    this[node2.body.type](node2.body, state);
  },
  BreakStatement(node2, state) {
    state.write("break");
    if (node2.label != null) {
      state.write(" ");
      this[node2.label.type](node2.label, state);
    }
    state.write(";");
  },
  ContinueStatement(node2, state) {
    state.write("continue");
    if (node2.label != null) {
      state.write(" ");
      this[node2.label.type](node2.label, state);
    }
    state.write(";");
  },
  WithStatement(node2, state) {
    state.write("with (");
    this[node2.object.type](node2.object, state);
    state.write(") ");
    this[node2.body.type](node2.body, state);
  },
  SwitchStatement(node2, state) {
    const indent3 = state.indent.repeat(state.indentLevel++);
    const { lineEnd, writeComments } = state;
    state.indentLevel++;
    const caseIndent = indent3 + state.indent;
    const statementIndent = caseIndent + state.indent;
    state.write("switch (");
    this[node2.discriminant.type](node2.discriminant, state);
    state.write(") {" + lineEnd);
    const { cases: occurences } = node2;
    const { length: occurencesCount } = occurences;
    for (let i = 0; i < occurencesCount; i++) {
      const occurence = occurences[i];
      if (writeComments && occurence.comments != null) {
        formatComments(state, occurence.comments, caseIndent, lineEnd);
      }
      if (occurence.test) {
        state.write(caseIndent + "case ");
        this[occurence.test.type](occurence.test, state);
        state.write(":" + lineEnd);
      } else {
        state.write(caseIndent + "default:" + lineEnd);
      }
      const { consequent } = occurence;
      const { length: consequentCount } = consequent;
      for (let i2 = 0; i2 < consequentCount; i2++) {
        const statement = consequent[i2];
        if (writeComments && statement.comments != null) {
          formatComments(state, statement.comments, statementIndent, lineEnd);
        }
        state.write(statementIndent);
        this[statement.type](statement, state);
        state.write(lineEnd);
      }
    }
    state.indentLevel -= 2;
    state.write(indent3 + "}");
  },
  ReturnStatement(node2, state) {
    state.write("return");
    if (node2.argument) {
      state.write(" ");
      this[node2.argument.type](node2.argument, state);
    }
    state.write(";");
  },
  ThrowStatement(node2, state) {
    state.write("throw ");
    this[node2.argument.type](node2.argument, state);
    state.write(";");
  },
  TryStatement(node2, state) {
    state.write("try ");
    this[node2.block.type](node2.block, state);
    if (node2.handler) {
      const { handler } = node2;
      if (handler.param == null) {
        state.write(" catch ");
      } else {
        state.write(" catch (");
        this[handler.param.type](handler.param, state);
        state.write(") ");
      }
      this[handler.body.type](handler.body, state);
    }
    if (node2.finalizer) {
      state.write(" finally ");
      this[node2.finalizer.type](node2.finalizer, state);
    }
  },
  WhileStatement(node2, state) {
    state.write("while (");
    this[node2.test.type](node2.test, state);
    state.write(") ");
    this[node2.body.type](node2.body, state);
  },
  DoWhileStatement(node2, state) {
    state.write("do ");
    this[node2.body.type](node2.body, state);
    state.write(" while (");
    this[node2.test.type](node2.test, state);
    state.write(");");
  },
  ForStatement(node2, state) {
    state.write("for (");
    if (node2.init != null) {
      const { init } = node2;
      if (init.type[0] === "V") {
        formatVariableDeclaration(state, init);
      } else {
        this[init.type](init, state);
      }
    }
    state.write("; ");
    if (node2.test) {
      this[node2.test.type](node2.test, state);
    }
    state.write("; ");
    if (node2.update) {
      this[node2.update.type](node2.update, state);
    }
    state.write(") ");
    this[node2.body.type](node2.body, state);
  },
  ForInStatement: ForInStatement = function(node2, state) {
    state.write(`for ${node2.await ? "await " : ""}(`);
    const { left } = node2;
    if (left.type[0] === "V") {
      formatVariableDeclaration(state, left);
    } else {
      this[left.type](left, state);
    }
    state.write(node2.type[3] === "I" ? " in " : " of ");
    this[node2.right.type](node2.right, state);
    state.write(") ");
    this[node2.body.type](node2.body, state);
  },
  ForOfStatement: ForInStatement,
  DebuggerStatement(node2, state) {
    state.write("debugger;", node2);
  },
  FunctionDeclaration: FunctionDeclaration = function(node2, state) {
    state.write(
      (node2.async ? "async " : "") + (node2.generator ? "function* " : "function ") + (node2.id ? node2.id.name : ""),
      node2
    );
    formatSequence(state, node2.params);
    state.write(" ");
    this[node2.body.type](node2.body, state);
  },
  FunctionExpression: FunctionDeclaration,
  VariableDeclaration(node2, state) {
    formatVariableDeclaration(state, node2);
    state.write(";");
  },
  VariableDeclarator(node2, state) {
    this[node2.id.type](node2.id, state);
    if (node2.init != null) {
      state.write(" = ");
      this[node2.init.type](node2.init, state);
    }
  },
  ClassDeclaration(node2, state) {
    state.write("class " + (node2.id ? `${node2.id.name} ` : ""), node2);
    if (node2.superClass) {
      state.write("extends ");
      const { superClass } = node2;
      const { type } = superClass;
      const precedence = state.expressionsPrecedence[type];
      if ((type[0] !== "C" || type[1] !== "l" || type[5] !== "E") && (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.ClassExpression)) {
        state.write("(");
        this[node2.superClass.type](superClass, state);
        state.write(")");
      } else {
        this[superClass.type](superClass, state);
      }
      state.write(" ");
    }
    this.ClassBody(node2.body, state);
  },
  ImportDeclaration(node2, state) {
    state.write("import ");
    const { specifiers } = node2;
    const { length } = specifiers;
    let i = 0;
    if (length > 0) {
      for (; i < length; ) {
        if (i > 0) {
          state.write(", ");
        }
        const specifier = specifiers[i];
        const type = specifier.type[6];
        if (type === "D") {
          state.write(specifier.local.name, specifier);
          i++;
        } else if (type === "N") {
          state.write("* as " + specifier.local.name, specifier);
          i++;
        } else {
          break;
        }
      }
      if (i < length) {
        state.write("{");
        for (; ; ) {
          const specifier = specifiers[i];
          const { name: name2 } = specifier.imported;
          state.write(name2, specifier);
          if (name2 !== specifier.local.name) {
            state.write(" as " + specifier.local.name);
          }
          if (++i < length) {
            state.write(", ");
          } else {
            break;
          }
        }
        state.write("}");
      }
      state.write(" from ");
    }
    this.Literal(node2.source, state);
    state.write(";");
  },
  ImportExpression(node2, state) {
    state.write("import(");
    this[node2.source.type](node2.source, state);
    state.write(")");
  },
  ExportDefaultDeclaration(node2, state) {
    state.write("export default ");
    this[node2.declaration.type](node2.declaration, state);
    if (state.expressionsPrecedence[node2.declaration.type] != null && node2.declaration.type[0] !== "F") {
      state.write(";");
    }
  },
  ExportNamedDeclaration(node2, state) {
    state.write("export ");
    if (node2.declaration) {
      this[node2.declaration.type](node2.declaration, state);
    } else {
      state.write("{");
      const { specifiers } = node2, { length } = specifiers;
      if (length > 0) {
        for (let i = 0; ; ) {
          const specifier = specifiers[i];
          const { name: name2 } = specifier.local;
          state.write(name2, specifier);
          if (name2 !== specifier.exported.name) {
            state.write(" as " + specifier.exported.name);
          }
          if (++i < length) {
            state.write(", ");
          } else {
            break;
          }
        }
      }
      state.write("}");
      if (node2.source) {
        state.write(" from ");
        this.Literal(node2.source, state);
      }
      state.write(";");
    }
  },
  ExportAllDeclaration(node2, state) {
    if (node2.exported != null) {
      state.write("export * as " + node2.exported.name + " from ");
    } else {
      state.write("export * from ");
    }
    this.Literal(node2.source, state);
    state.write(";");
  },
  MethodDefinition(node2, state) {
    if (node2.static) {
      state.write("static ");
    }
    const kind = node2.kind[0];
    if (kind === "g" || kind === "s") {
      state.write(node2.kind + " ");
    }
    if (node2.value.async) {
      state.write("async ");
    }
    if (node2.value.generator) {
      state.write("*");
    }
    if (node2.computed) {
      state.write("[");
      this[node2.key.type](node2.key, state);
      state.write("]");
    } else {
      this[node2.key.type](node2.key, state);
    }
    formatSequence(state, node2.value.params);
    state.write(" ");
    this[node2.value.body.type](node2.value.body, state);
  },
  ClassExpression(node2, state) {
    this.ClassDeclaration(node2, state);
  },
  ArrowFunctionExpression(node2, state) {
    state.write(node2.async ? "async " : "", node2);
    const { params } = node2;
    if (params != null) {
      if (params.length === 1 && params[0].type[0] === "I") {
        state.write(params[0].name, params[0]);
      } else {
        formatSequence(state, node2.params);
      }
    }
    state.write(" => ");
    if (node2.body.type[0] === "O") {
      state.write("(");
      this.ObjectExpression(node2.body, state);
      state.write(")");
    } else {
      this[node2.body.type](node2.body, state);
    }
  },
  ThisExpression(node2, state) {
    state.write("this", node2);
  },
  Super(node2, state) {
    state.write("super", node2);
  },
  RestElement: RestElement = function(node2, state) {
    state.write("...");
    this[node2.argument.type](node2.argument, state);
  },
  SpreadElement: RestElement,
  YieldExpression(node2, state) {
    state.write(node2.delegate ? "yield*" : "yield");
    if (node2.argument) {
      state.write(" ");
      this[node2.argument.type](node2.argument, state);
    }
  },
  AwaitExpression(node2, state) {
    state.write("await ", node2);
    formatExpression(state, node2.argument, node2);
  },
  TemplateLiteral(node2, state) {
    const { quasis, expressions } = node2;
    state.write("`");
    const { length } = expressions;
    for (let i = 0; i < length; i++) {
      const expression = expressions[i];
      const quasi2 = quasis[i];
      state.write(quasi2.value.raw, quasi2);
      state.write("${");
      this[expression.type](expression, state);
      state.write("}");
    }
    const quasi = quasis[quasis.length - 1];
    state.write(quasi.value.raw, quasi);
    state.write("`");
  },
  TemplateElement(node2, state) {
    state.write(node2.value.raw, node2);
  },
  TaggedTemplateExpression(node2, state) {
    formatExpression(state, node2.tag, node2);
    this[node2.quasi.type](node2.quasi, state);
  },
  ArrayExpression: ArrayExpression = function(node2, state) {
    state.write("[");
    if (node2.elements.length > 0) {
      const { elements } = node2, { length } = elements;
      for (let i = 0; ; ) {
        const element3 = elements[i];
        if (element3 != null) {
          this[element3.type](element3, state);
        }
        if (++i < length) {
          state.write(", ");
        } else {
          if (element3 == null) {
            state.write(", ");
          }
          break;
        }
      }
    }
    state.write("]");
  },
  ArrayPattern: ArrayExpression,
  ObjectExpression(node2, state) {
    const indent3 = state.indent.repeat(state.indentLevel++);
    const { lineEnd, writeComments } = state;
    const propertyIndent = indent3 + state.indent;
    state.write("{");
    if (node2.properties.length > 0) {
      state.write(lineEnd);
      if (writeComments && node2.comments != null) {
        formatComments(state, node2.comments, propertyIndent, lineEnd);
      }
      const comma = "," + lineEnd;
      const { properties } = node2, { length } = properties;
      for (let i = 0; ; ) {
        const property = properties[i];
        if (writeComments && property.comments != null) {
          formatComments(state, property.comments, propertyIndent, lineEnd);
        }
        state.write(propertyIndent);
        this[property.type](property, state);
        if (++i < length) {
          state.write(comma);
        } else {
          break;
        }
      }
      state.write(lineEnd);
      if (writeComments && node2.trailingComments != null) {
        formatComments(state, node2.trailingComments, propertyIndent, lineEnd);
      }
      state.write(indent3 + "}");
    } else if (writeComments) {
      if (node2.comments != null) {
        state.write(lineEnd);
        formatComments(state, node2.comments, propertyIndent, lineEnd);
        if (node2.trailingComments != null) {
          formatComments(state, node2.trailingComments, propertyIndent, lineEnd);
        }
        state.write(indent3 + "}");
      } else if (node2.trailingComments != null) {
        state.write(lineEnd);
        formatComments(state, node2.trailingComments, propertyIndent, lineEnd);
        state.write(indent3 + "}");
      } else {
        state.write("}");
      }
    } else {
      state.write("}");
    }
    state.indentLevel--;
  },
  Property(node2, state) {
    if (node2.method || node2.kind[0] !== "i") {
      this.MethodDefinition(node2, state);
    } else {
      if (!node2.shorthand) {
        if (node2.computed) {
          state.write("[");
          this[node2.key.type](node2.key, state);
          state.write("]");
        } else {
          this[node2.key.type](node2.key, state);
        }
        state.write(": ");
      }
      this[node2.value.type](node2.value, state);
    }
  },
  PropertyDefinition(node2, state) {
    if (node2.static) {
      state.write("static ");
    }
    if (node2.computed) {
      state.write("[");
    }
    this[node2.key.type](node2.key, state);
    if (node2.computed) {
      state.write("]");
    }
    if (node2.value == null) {
      if (node2.key.type[0] !== "F") {
        state.write(";");
      }
      return;
    }
    state.write(" = ");
    this[node2.value.type](node2.value, state);
    state.write(";");
  },
  ObjectPattern(node2, state) {
    state.write("{");
    if (node2.properties.length > 0) {
      const { properties } = node2, { length } = properties;
      for (let i = 0; ; ) {
        this[properties[i].type](properties[i], state);
        if (++i < length) {
          state.write(", ");
        } else {
          break;
        }
      }
    }
    state.write("}");
  },
  SequenceExpression(node2, state) {
    formatSequence(state, node2.expressions);
  },
  UnaryExpression(node2, state) {
    if (node2.prefix) {
      const {
        operator,
        argument,
        argument: { type }
      } = node2;
      state.write(operator);
      const needsParentheses = expressionNeedsParenthesis(state, argument, node2);
      if (!needsParentheses && (operator.length > 1 || type[0] === "U" && (type[1] === "n" || type[1] === "p") && argument.prefix && argument.operator[0] === operator && (operator === "+" || operator === "-"))) {
        state.write(" ");
      }
      if (needsParentheses) {
        state.write(operator.length > 1 ? " (" : "(");
        this[type](argument, state);
        state.write(")");
      } else {
        this[type](argument, state);
      }
    } else {
      this[node2.argument.type](node2.argument, state);
      state.write(node2.operator);
    }
  },
  UpdateExpression(node2, state) {
    if (node2.prefix) {
      state.write(node2.operator);
      this[node2.argument.type](node2.argument, state);
    } else {
      this[node2.argument.type](node2.argument, state);
      state.write(node2.operator);
    }
  },
  AssignmentExpression(node2, state) {
    this[node2.left.type](node2.left, state);
    state.write(" " + node2.operator + " ");
    this[node2.right.type](node2.right, state);
  },
  AssignmentPattern(node2, state) {
    this[node2.left.type](node2.left, state);
    state.write(" = ");
    this[node2.right.type](node2.right, state);
  },
  BinaryExpression: BinaryExpression = function(node2, state) {
    const isIn = node2.operator === "in";
    if (isIn) {
      state.write("(");
    }
    formatExpression(state, node2.left, node2, false);
    state.write(" " + node2.operator + " ");
    formatExpression(state, node2.right, node2, true);
    if (isIn) {
      state.write(")");
    }
  },
  LogicalExpression: BinaryExpression,
  ConditionalExpression(node2, state) {
    const { test } = node2;
    const precedence = state.expressionsPrecedence[test.type];
    if (precedence === NEEDS_PARENTHESES || precedence <= state.expressionsPrecedence.ConditionalExpression) {
      state.write("(");
      this[test.type](test, state);
      state.write(")");
    } else {
      this[test.type](test, state);
    }
    state.write(" ? ");
    this[node2.consequent.type](node2.consequent, state);
    state.write(" : ");
    this[node2.alternate.type](node2.alternate, state);
  },
  NewExpression(node2, state) {
    state.write("new ");
    const precedence = state.expressionsPrecedence[node2.callee.type];
    if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.CallExpression || hasCallExpression(node2.callee)) {
      state.write("(");
      this[node2.callee.type](node2.callee, state);
      state.write(")");
    } else {
      this[node2.callee.type](node2.callee, state);
    }
    formatSequence(state, node2["arguments"]);
  },
  CallExpression(node2, state) {
    const precedence = state.expressionsPrecedence[node2.callee.type];
    if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.CallExpression) {
      state.write("(");
      this[node2.callee.type](node2.callee, state);
      state.write(")");
    } else {
      this[node2.callee.type](node2.callee, state);
    }
    if (node2.optional) {
      state.write("?.");
    }
    formatSequence(state, node2["arguments"]);
  },
  ChainExpression(node2, state) {
    this[node2.expression.type](node2.expression, state);
  },
  MemberExpression(node2, state) {
    const precedence = state.expressionsPrecedence[node2.object.type];
    if (precedence === NEEDS_PARENTHESES || precedence < state.expressionsPrecedence.MemberExpression) {
      state.write("(");
      this[node2.object.type](node2.object, state);
      state.write(")");
    } else {
      this[node2.object.type](node2.object, state);
    }
    if (node2.computed) {
      if (node2.optional) {
        state.write("?.");
      }
      state.write("[");
      this[node2.property.type](node2.property, state);
      state.write("]");
    } else {
      if (node2.optional) {
        state.write("?.");
      } else {
        state.write(".");
      }
      this[node2.property.type](node2.property, state);
    }
  },
  MetaProperty(node2, state) {
    state.write(node2.meta.name + "." + node2.property.name, node2);
  },
  Identifier(node2, state) {
    state.write(node2.name, node2);
  },
  PrivateIdentifier(node2, state) {
    state.write(`#${node2.name}`, node2);
  },
  Literal(node2, state) {
    if (node2.raw != null) {
      state.write(node2.raw, node2);
    } else if (node2.regex != null) {
      this.RegExpLiteral(node2, state);
    } else if (node2.bigint != null) {
      state.write(node2.bigint + "n", node2);
    } else {
      state.write(stringify(node2.value), node2);
    }
  },
  RegExpLiteral(node2, state) {
    const { regex: regex2 } = node2;
    state.write(`/${regex2.pattern}/${regex2.flags}`, node2);
  }
};
var EMPTY_OBJECT = {};
var State = class {
  constructor(options) {
    const setup = options == null ? EMPTY_OBJECT : options;
    this.output = "";
    if (setup.output != null) {
      this.output = setup.output;
      this.write = this.writeToStream;
    } else {
      this.output = "";
    }
    this.generator = setup.generator != null ? setup.generator : GENERATOR;
    this.expressionsPrecedence = setup.expressionsPrecedence != null ? setup.expressionsPrecedence : EXPRESSIONS_PRECEDENCE;
    this.indent = setup.indent != null ? setup.indent : "  ";
    this.lineEnd = setup.lineEnd != null ? setup.lineEnd : "\n";
    this.indentLevel = setup.startingIndentLevel != null ? setup.startingIndentLevel : 0;
    this.writeComments = setup.comments ? setup.comments : false;
    if (setup.sourceMap != null) {
      this.write = setup.output == null ? this.writeAndMap : this.writeToStreamAndMap;
      this.sourceMap = setup.sourceMap;
      this.line = 1;
      this.column = 0;
      this.lineEndSize = this.lineEnd.split("\n").length - 1;
      this.mapping = {
        original: null,
        // Uses the entire state to avoid generating ephemeral objects
        generated: this,
        name: void 0,
        source: setup.sourceMap.file || setup.sourceMap._file
      };
    }
  }
  write(code4) {
    this.output += code4;
  }
  writeToStream(code4) {
    this.output.write(code4);
  }
  writeAndMap(code4, node2) {
    this.output += code4;
    this.map(code4, node2);
  }
  writeToStreamAndMap(code4, node2) {
    this.output.write(code4);
    this.map(code4, node2);
  }
  map(code4, node2) {
    if (node2 != null) {
      const { type } = node2;
      if (type[0] === "L" && type[2] === "n") {
        this.column = 0;
        this.line++;
        return;
      }
      if (node2.loc != null) {
        const { mapping } = this;
        mapping.original = node2.loc.start;
        mapping.name = node2.name;
        this.sourceMap.addMapping(mapping);
      }
      if (type[0] === "T" && type[8] === "E" || type[0] === "L" && type[1] === "i" && typeof node2.value === "string") {
        const { length: length2 } = code4;
        let { column, line } = this;
        for (let i = 0; i < length2; i++) {
          if (code4[i] === "\n") {
            column = 0;
            line++;
          } else {
            column++;
          }
        }
        this.column = column;
        this.line = line;
        return;
      }
    }
    const { length } = code4;
    const { lineEnd } = this;
    if (length > 0) {
      if (this.lineEndSize > 0 && (lineEnd.length === 1 ? code4[length - 1] === lineEnd : code4.endsWith(lineEnd))) {
        this.line += this.lineEndSize;
        this.column = 0;
      } else {
        this.column += length;
      }
    }
  }
  toString() {
    return this.output;
  }
};
function generate(node2, options) {
  const state = new State(options);
  state.generator[node2.type](node2, state);
  return state.output;
}

// node_modules/estree-util-to-js/lib/index.js
var emptyOptions5 = {};
function toJs(tree, options) {
  const { SourceMapGenerator, filePath, handlers: handlers3 } = options || emptyOptions5;
  const sourceMap = SourceMapGenerator ? new SourceMapGenerator({ file: filePath || "<unknown>.js" }) : void 0;
  const value = generate(
    tree,
    // @ts-expect-error: `sourceMap` can be undefined, `astring` types are buggy.
    {
      comments: true,
      generator: { ...GENERATOR, ...handlers3 },
      sourceMap: sourceMap || void 0
    }
  );
  const map4 = sourceMap ? sourceMap.toJSON() : void 0;
  return { value, map: map4 };
}

// node_modules/estree-util-to-js/lib/jsx.js
var jsx7 = {
  JSXAttribute: jsxAttribute,
  JSXClosingElement: jsxClosingElement,
  JSXClosingFragment: jsxClosingFragment,
  JSXElement: jsxElement,
  JSXEmptyExpression: jsxEmptyExpression,
  JSXExpressionContainer: jsxExpressionContainer,
  JSXFragment: jsxFragment,
  JSXIdentifier: jsxIdentifier,
  JSXMemberExpression: jsxMemberExpression,
  JSXNamespacedName: jsxNamespacedName,
  JSXOpeningElement: jsxOpeningElement,
  JSXOpeningFragment: jsxOpeningFragment,
  JSXSpreadAttribute: jsxSpreadAttribute,
  JSXText: jsxText2
};
function jsxAttribute(node2, state) {
  this[node2.name.type](node2.name, state);
  if (node2.value !== null && node2.value !== void 0) {
    state.write("=");
    if (node2.value.type === "Literal") {
      state.write(
        '"' + encodeJsx(String(node2.value.value)).replace(/"/g, "&quot;") + '"',
        node2
      );
    } else {
      this[node2.value.type](node2.value, state);
    }
  }
}
function jsxClosingElement(node2, state) {
  state.write("</");
  this[node2.name.type](node2.name, state);
  state.write(">");
}
function jsxClosingFragment(node2, state) {
  state.write("</>", node2);
}
function jsxElement(node2, state) {
  let index2 = -1;
  this[node2.openingElement.type](node2.openingElement, state);
  if (node2.children) {
    while (++index2 < node2.children.length) {
      const child = node2.children[index2];
      if (child.type === "JSXSpreadChild") {
        throw new Error("JSX spread children are not supported");
      }
      this[child.type](child, state);
    }
  }
  if (node2.closingElement) {
    this[node2.closingElement.type](node2.closingElement, state);
  }
}
function jsxEmptyExpression() {
}
function jsxExpressionContainer(node2, state) {
  state.write("{");
  this[node2.expression.type](node2.expression, state);
  state.write("}");
}
function jsxFragment(node2, state) {
  let index2 = -1;
  this[node2.openingFragment.type](node2.openingFragment, state);
  if (node2.children) {
    while (++index2 < node2.children.length) {
      const child = node2.children[index2];
      if (child.type === "JSXSpreadChild") {
        throw new Error("JSX spread children are not supported");
      }
      this[child.type](child, state);
    }
  }
  this[node2.closingFragment.type](node2.closingFragment, state);
}
function jsxIdentifier(node2, state) {
  state.write(node2.name, node2);
}
function jsxMemberExpression(node2, state) {
  this[node2.object.type](node2.object, state);
  state.write(".");
  this[node2.property.type](node2.property, state);
}
function jsxNamespacedName(node2, state) {
  this[node2.namespace.type](node2.namespace, state);
  state.write(":");
  this[node2.name.type](node2.name, state);
}
function jsxOpeningElement(node2, state) {
  let index2 = -1;
  state.write("<");
  this[node2.name.type](node2.name, state);
  if (node2.attributes) {
    while (++index2 < node2.attributes.length) {
      state.write(" ");
      this[node2.attributes[index2].type](node2.attributes[index2], state);
    }
  }
  state.write(node2.selfClosing ? " />" : ">");
}
function jsxOpeningFragment(node2, state) {
  state.write("<>", node2);
}
function jsxSpreadAttribute(node2, state) {
  state.write("{");
  this.SpreadElement(node2, state);
  state.write("}");
}
function jsxText2(node2, state) {
  state.write(encodeJsx(node2.value).replace(/[<>{}]/g, replaceJsxChar), node2);
}
function encodeJsx(value) {
  return value.replace(/&(?=[#a-z])/gi, "&amp;");
}
function replaceJsxChar($0) {
  return $0 === "<" ? "&lt;" : $0 === ">" ? "&gt;" : $0 === "{" ? "&#123;" : "&#125;";
}

// node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js
function recmaStringify(options) {
  const self2 = (
    /** @type {Processor} */
    this
  );
  const { SourceMapGenerator } = options;
  self2.compiler = compiler2;
  function compiler2(tree, file) {
    const result = SourceMapGenerator ? toJs(tree, {
      SourceMapGenerator,
      filePath: file.path || "unknown.mdx",
      handlers: jsx7
    }) : toJs(tree, { handlers: jsx7 });
    file.map = result.map;
    return result.value;
  }
}

// node_modules/hast-util-to-estree/lib/handlers/comment.js
function comment(node2, state) {
  const result = { type: "Block", value: node2.value };
  state.inherit(node2, result);
  state.comments.push(result);
  const expression = {
    type: "JSXEmptyExpression",
    // @ts-expect-error: `comments` is custom.
    comments: [Object.assign({}, result, { leading: false, trailing: true })]
  };
  state.patch(node2, expression);
  const container = { type: "JSXExpressionContainer", expression };
  state.patch(node2, container);
  return container;
}

// node_modules/comma-separated-tokens/index.js
function stringify2(values, options) {
  const settings = options || {};
  const input = values[values.length - 1] === "" ? [...values, ""] : values;
  return input.join(
    (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
  ).trim();
}

// node_modules/property-information/lib/util/schema.js
var Schema = class {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space2) {
    this.property = property;
    this.normal = normal;
    if (space2) {
      this.space = space2;
    }
  }
};
Schema.prototype.property = {};
Schema.prototype.normal = {};
Schema.prototype.space = null;

// node_modules/property-information/lib/util/merge.js
function merge(definitions, space2) {
  const property = {};
  const normal = {};
  let index2 = -1;
  while (++index2 < definitions.length) {
    Object.assign(property, definitions[index2].property);
    Object.assign(normal, definitions[index2].normal);
  }
  return new Schema(property, normal, space2);
}

// node_modules/property-information/lib/normalize.js
function normalize2(value) {
  return value.toLowerCase();
}

// node_modules/property-information/lib/util/info.js
var Info = class {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    this.property = property;
    this.attribute = attribute;
  }
};
Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

// node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated
});
var powers = 0;
var boolean = increment();
var booleanish = increment();
var overloadedBoolean = increment();
var number = increment();
var spaceSeparated = increment();
var commaSeparated = increment();
var commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

// node_modules/property-information/lib/util/defined-info.js
var checks = Object.keys(types_exports);
var DefinedInfo = class extends Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space2) {
    let index2 = -1;
    super(property, attribute);
    mark(this, "space", space2);
    if (typeof mask === "number") {
      while (++index2 < checks.length) {
        const check = checks[index2];
        mark(this, checks[index2], (mask & types_exports[check]) === types_exports[check]);
      }
    }
  }
};
DefinedInfo.prototype.defined = true;
function mark(values, key, value) {
  if (value) {
    values[key] = value;
  }
}

// node_modules/property-information/lib/util/create.js
var own5 = {}.hasOwnProperty;
function create3(definition3) {
  const property = {};
  const normal = {};
  let prop;
  for (prop in definition3.properties) {
    if (own5.call(definition3.properties, prop)) {
      const value = definition3.properties[prop];
      const info = new DefinedInfo(
        prop,
        definition3.transform(definition3.attributes || {}, prop),
        value,
        definition3.space
      );
      if (definition3.mustUseProperty && definition3.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }
      property[prop] = info;
      normal[normalize2(prop)] = prop;
      normal[normalize2(info.attribute)] = prop;
    }
  }
  return new Schema(property, normal, definition3.space);
}

// node_modules/property-information/lib/xlink.js
var xlink = create3({
  space: "xlink",
  transform(_, prop) {
    return "xlink:" + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

// node_modules/property-information/lib/xml.js
var xml = create3({
  space: "xml",
  transform(_, prop) {
    return "xml:" + prop.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

// node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}

// node_modules/property-information/lib/xmlns.js
var xmlns = create3({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: caseInsensitiveTransform,
  properties: { xmlns: null, xmlnsXLink: null }
});

// node_modules/property-information/lib/aria.js
var aria = create3({
  transform(_, prop) {
    return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});

// node_modules/property-information/lib/html.js
var html2 = create3({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    blocking: spaceSeparated,
    capture: null,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: boolean,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shadowRootClonable: boolean,
    shadowRootDelegatesFocus: boolean,
    shadowRootMode: null,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    writingSuggestions: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: boolean,
    // `<frame>`
    noHref: boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});

// node_modules/property-information/lib/svg.js
var svg = create3({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

// node_modules/property-information/lib/find.js
var valid = /^data[-\w.:]+$/i;
var dash = /-[a-z]/g;
var cap = /[A-Z]/g;
function find(schema, value) {
  const normal = normalize2(value);
  let prop = value;
  let Type = Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      const rest = value.slice(5).replace(dash, camelcase);
      prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== "-") {
          dashes = "-" + dashes;
        }
        value = "data" + dashes;
      }
    }
    Type = DefinedInfo;
  }
  return new Type(prop, value);
}
function kebab($0) {
  return "-" + $0.toLowerCase();
}
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

// node_modules/property-information/lib/hast-to-react.js
var hastToReact = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
};

// node_modules/property-information/index.js
var html3 = merge([xml, xlink, xmlns, aria, html2], "html");
var svg2 = merge([xml, xlink, xmlns, aria, svg], "svg");

// node_modules/space-separated-tokens/index.js
function stringify3(values) {
  return values.join(" ").trim();
}

// node_modules/style-to-object/index.mjs
var import_index = __toESM(require_style_to_object(), 1);
var style_to_object_default = import_index.default;

// node_modules/hast-util-to-estree/lib/handlers/element.js
var own6 = {}.hasOwnProperty;
var cap2 = /[A-Z]/g;
var dashSomething = /-([a-z])/g;
var tableCellElement = /* @__PURE__ */ new Set(["td", "th"]);
function element2(node2, state) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  const props = node2.properties || {};
  if (parentSchema.space === "html" && node2.tagName.toLowerCase() === "svg") {
    schema = svg2;
    state.schema = schema;
  }
  const children = state.all(node2);
  const attributes = [];
  let prop;
  let alignValue;
  let styleProperties;
  for (prop in props) {
    if (own6.call(props, prop)) {
      let value = props[prop];
      const info = find(schema, prop);
      let attributeValue;
      if (value === null || value === void 0 || value === false || typeof value === "number" && Number.isNaN(value) || !value && info.boolean) {
        continue;
      }
      prop = state.elementAttributeNameCase === "react" && info.space ? hastToReact[info.property] || info.property : info.attribute;
      if (Array.isArray(value)) {
        value = info.commaSeparated ? stringify2(value) : stringify3(value);
      }
      if (prop === "style") {
        let styleObject = typeof value === "object" ? value : parseStyle(String(value), node2.tagName);
        if (state.stylePropertyNameCase === "css") {
          styleObject = transformStylesToCssCasing(styleObject);
        }
        const cssProperties = [];
        let cssProp;
        for (cssProp in styleObject) {
          if (own6.call(styleObject, cssProp)) {
            cssProperties.push({
              type: "Property",
              method: false,
              shorthand: false,
              computed: false,
              key: name(cssProp) ? { type: "Identifier", name: cssProp } : { type: "Literal", value: cssProp },
              value: { type: "Literal", value: String(styleObject[cssProp]) },
              kind: "init"
            });
          }
        }
        styleProperties = cssProperties;
        attributeValue = {
          type: "JSXExpressionContainer",
          expression: { type: "ObjectExpression", properties: cssProperties }
        };
      } else if (value === true) {
        attributeValue = null;
      } else if (state.tableCellAlignToStyle && tableCellElement.has(node2.tagName) && prop === "align") {
        alignValue = String(value);
        continue;
      } else {
        attributeValue = { type: "Literal", value: String(value) };
      }
      if (name(prop, { jsx: true })) {
        attributes.push({
          type: "JSXAttribute",
          name: { type: "JSXIdentifier", name: prop },
          value: attributeValue
        });
      } else {
        attributes.push({
          type: "JSXSpreadAttribute",
          argument: {
            type: "ObjectExpression",
            properties: [
              {
                type: "Property",
                method: false,
                shorthand: false,
                computed: false,
                key: { type: "Literal", value: String(prop) },
                // @ts-expect-error No need to worry about `style` (which has a
                // `JSXExpressionContainer` value) because that’s a valid identifier.
                value: attributeValue || { type: "Literal", value: true },
                kind: "init"
              }
            ]
          }
        });
      }
    }
  }
  if (alignValue !== void 0) {
    if (!styleProperties) {
      styleProperties = [];
      attributes.push({
        type: "JSXAttribute",
        name: { type: "JSXIdentifier", name: "style" },
        value: {
          type: "JSXExpressionContainer",
          expression: { type: "ObjectExpression", properties: styleProperties }
        }
      });
    }
    const cssProp = state.stylePropertyNameCase === "css" ? transformStyleToCssCasing("textAlign") : "textAlign";
    styleProperties.push({
      type: "Property",
      method: false,
      shorthand: false,
      computed: false,
      key: name(cssProp) ? { type: "Identifier", name: cssProp } : { type: "Literal", value: cssProp },
      value: { type: "Literal", value: alignValue },
      kind: "init"
    });
  }
  state.schema = parentSchema;
  const result = {
    type: "JSXElement",
    openingElement: {
      type: "JSXOpeningElement",
      attributes,
      name: state.createJsxElementName(node2.tagName),
      selfClosing: children.length === 0
    },
    closingElement: children.length > 0 ? {
      type: "JSXClosingElement",
      name: state.createJsxElementName(node2.tagName)
    } : null,
    children
  };
  state.inherit(node2, result);
  return result;
}
function parseStyle(value, tagName) {
  const result = {};
  try {
    style_to_object_default(value, iterator);
  } catch (error) {
    const cause = (
      /** @type {Error} */
      error
    );
    const exception = new Error(
      "Could not parse `style` attribute on `" + tagName + "`",
      { cause }
    );
    throw exception;
  }
  return result;
  function iterator(name2, value2) {
    let key = name2;
    if (key.slice(0, 2) !== "--") {
      if (key.slice(0, 4) === "-ms-") key = "ms-" + key.slice(4);
      key = key.replace(dashSomething, toCamel);
    }
    result[key] = value2;
  }
}
function transformStylesToCssCasing(domCasing) {
  const cssCasing = {};
  let from;
  for (from in domCasing) {
    if (own6.call(domCasing, from)) {
      cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
    }
  }
  return cssCasing;
}
function transformStyleToCssCasing(from) {
  let to = from.replace(cap2, toDash);
  if (to.slice(0, 3) === "ms-") to = "-" + to;
  return to;
}
function toCamel(_, $1) {
  return $1.toUpperCase();
}
function toDash($0) {
  return "-" + $0.toLowerCase();
}

// node_modules/estree-util-attach-comments/lib/index.js
var own7 = {}.hasOwnProperty;
var emptyComments = [];
function attachComments(tree, comments) {
  const list4 = comments ? [...comments].sort(compare) : emptyComments;
  if (list4.length > 0) walk2(tree, { comments: list4, index: 0 });
}
function walk2(node2, state) {
  if (state.index === state.comments.length) {
    return;
  }
  const children = [];
  const comments = [];
  let key;
  for (key in node2) {
    if (own7.call(node2, key)) {
      const value = node2[key];
      if (value && typeof value === "object" && key !== "comments") {
        if (Array.isArray(value)) {
          let index3 = -1;
          while (++index3 < value.length) {
            if (value[index3] && typeof value[index3].type === "string") {
              children.push(value[index3]);
            }
          }
        } else if (typeof value.type === "string") {
          children.push(value);
        }
      }
    }
  }
  children.sort(compare);
  comments.push(...slice(state, node2, false, { leading: true, trailing: false }));
  let index2 = -1;
  while (++index2 < children.length) {
    walk2(children[index2], state);
  }
  comments.push(
    ...slice(state, node2, true, {
      leading: false,
      trailing: children.length > 0
    })
  );
  if (comments.length > 0) {
    node2.comments = comments;
  }
}
function slice(state, node2, compareEnd, fields) {
  const result = [];
  while (state.comments[state.index] && compare(state.comments[state.index], node2, compareEnd) < 1) {
    result.push(Object.assign({}, state.comments[state.index++], fields));
  }
  return result;
}
function compare(left, right, compareEnd) {
  const field = compareEnd ? "end" : "start";
  if (left.range && right.range) {
    return left.range[0] - right.range[compareEnd ? 1 : 0];
  }
  if (left.loc && left.loc.start && right.loc && right.loc[field]) {
    return left.loc.start.line - right.loc[field].line || left.loc.start.column - right.loc[field].column;
  }
  if ("start" in left && field in right) {
    return left.start - right[field];
  }
  return Number.NaN;
}

// node_modules/hast-util-to-estree/lib/handlers/mdx-expression.js
function mdxExpression2(node2, state) {
  const estree = node2.data && node2.data.estree;
  const comments = estree && estree.comments || [];
  let expression;
  if (estree) {
    state.comments.push(...comments);
    attachComments(estree, estree.comments);
    expression = estree.body[0] && estree.body[0].type === "ExpressionStatement" && estree.body[0].expression || void 0;
  }
  if (!expression) {
    expression = { type: "JSXEmptyExpression" };
    state.patch(node2, expression);
  }
  const result = { type: "JSXExpressionContainer", expression };
  state.inherit(node2, result);
  return result;
}

// node_modules/hast-util-to-estree/lib/handlers/mdx-jsx-element.js
function mdxJsxElement(node2, state) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  const attrs = node2.attributes || [];
  let index2 = -1;
  if (node2.name && parentSchema.space === "html" && node2.name.toLowerCase() === "svg") {
    schema = svg2;
    state.schema = schema;
  }
  const children = state.all(node2);
  const attributes = [];
  while (++index2 < attrs.length) {
    const attr = attrs[index2];
    const value = attr.value;
    let attributeValue;
    if (attr.type === "mdxJsxAttribute") {
      if (value === null || value === void 0) {
        attributeValue = null;
      } else if (typeof value === "object") {
        const estree = value.data && value.data.estree;
        const comments = estree && estree.comments || [];
        let expression;
        if (estree) {
          state.comments.push(...comments);
          attachComments(estree, estree.comments);
          expression = estree.body[0] && estree.body[0].type === "ExpressionStatement" && estree.body[0].expression || void 0;
        }
        attributeValue = {
          type: "JSXExpressionContainer",
          expression: expression || { type: "JSXEmptyExpression" }
        };
        state.inherit(value, attributeValue);
      } else {
        attributeValue = { type: "Literal", value: String(value) };
      }
      const attribute = {
        type: "JSXAttribute",
        name: state.createJsxAttributeName(attr.name),
        value: attributeValue
      };
      state.inherit(attr, attribute);
      attributes.push(attribute);
    } else {
      const estree = attr.data && attr.data.estree;
      const comments = estree && estree.comments || [];
      let argumentValue;
      if (estree) {
        state.comments.push(...comments);
        attachComments(estree, estree.comments);
        argumentValue = estree.body[0] && estree.body[0].type === "ExpressionStatement" && estree.body[0].expression && estree.body[0].expression.type === "ObjectExpression" && estree.body[0].expression.properties && estree.body[0].expression.properties[0] && estree.body[0].expression.properties[0].type === "SpreadElement" && estree.body[0].expression.properties[0].argument || void 0;
      }
      const attribute = {
        type: "JSXSpreadAttribute",
        argument: argumentValue || { type: "ObjectExpression", properties: [] }
      };
      state.inherit(attr, attribute);
      attributes.push(attribute);
    }
  }
  state.schema = parentSchema;
  const result = node2.name ? {
    type: "JSXElement",
    openingElement: {
      type: "JSXOpeningElement",
      attributes,
      name: state.createJsxElementName(node2.name),
      selfClosing: children.length === 0
    },
    closingElement: children.length > 0 ? {
      type: "JSXClosingElement",
      name: state.createJsxElementName(node2.name)
    } : null,
    children
  } : {
    type: "JSXFragment",
    openingFragment: { type: "JSXOpeningFragment" },
    closingFragment: { type: "JSXClosingFragment" },
    children
  };
  state.inherit(node2, result);
  return result;
}

// node_modules/hast-util-to-estree/lib/handlers/mdxjs-esm.js
function mdxjsEsm2(node2, state) {
  const estree = node2.data && node2.data.estree;
  const comments = estree && estree.comments || [];
  if (estree) {
    state.comments.push(...comments);
    attachComments(estree, comments);
    state.esm.push(...estree.body);
  }
}

// node_modules/hast-util-whitespace/lib/index.js
var re = /[ \t\n\f\r]/g;
function whitespace(thing) {
  return typeof thing === "object" ? thing.type === "text" ? empty4(thing.value) : false : empty4(thing);
}
function empty4(value) {
  return value.replace(re, "") === "";
}

// node_modules/hast-util-to-estree/lib/handlers/root.js
function root2(node2, state) {
  const children = state.all(node2);
  const cleanChildren = [];
  let index2 = -1;
  let queue;
  while (++index2 < children.length) {
    const child = children[index2];
    if (child.type === "JSXExpressionContainer" && child.expression.type === "Literal" && whitespace(String(child.expression.value))) {
      if (queue) queue.push(child);
    } else {
      if (queue) cleanChildren.push(...queue);
      cleanChildren.push(child);
      queue = [];
    }
  }
  const result = {
    type: "JSXFragment",
    openingFragment: { type: "JSXOpeningFragment" },
    closingFragment: { type: "JSXClosingFragment" },
    children: cleanChildren
  };
  state.inherit(node2, result);
  return result;
}

// node_modules/hast-util-to-estree/lib/handlers/text.js
function text4(node2, state) {
  const value = String(node2.value || "");
  if (value) {
    const result = { type: "Literal", value };
    state.inherit(node2, result);
    const container = { type: "JSXExpressionContainer", expression: result };
    state.patch(node2, container);
    return container;
  }
}

// node_modules/hast-util-to-estree/lib/handlers/index.js
var handlers2 = {
  comment,
  doctype: ignore2,
  element: element2,
  mdxFlowExpression: mdxExpression2,
  mdxJsxFlowElement: mdxJsxElement,
  mdxJsxTextElement: mdxJsxElement,
  mdxTextExpression: mdxExpression2,
  mdxjsEsm: mdxjsEsm2,
  root: root2,
  text: text4
};
function ignore2() {
}

// node_modules/zwitch/index.js
var own8 = {}.hasOwnProperty;
function zwitch(key, options) {
  const settings = options || {};
  function one3(value, ...parameters) {
    let fn = one3.invalid;
    const handlers3 = one3.handlers;
    if (value && own8.call(value, key)) {
      const id = String(value[key]);
      fn = own8.call(handlers3, id) ? handlers3[id] : one3.unknown;
    }
    if (fn) {
      return fn.call(this, value, ...parameters);
    }
  }
  one3.handlers = settings.handlers || {};
  one3.invalid = settings.invalid;
  one3.unknown = settings.unknown;
  return one3;
}

// node_modules/hast-util-to-estree/lib/state.js
var own9 = {}.hasOwnProperty;
var tableElements = /* @__PURE__ */ new Set(["table", "tbody", "thead", "tfoot", "tr"]);
function createState2(options) {
  const one3 = zwitch("type", {
    invalid,
    unknown,
    handlers: { ...handlers2, ...options.handlers }
  });
  return {
    // Current space.
    elementAttributeNameCase: options.elementAttributeNameCase || "react",
    schema: options.space === "svg" ? svg2 : html3,
    stylePropertyNameCase: options.stylePropertyNameCase || "dom",
    tableCellAlignToStyle: options.tableCellAlignToStyle !== false,
    // Results.
    comments: [],
    esm: [],
    // Useful functions.
    all: all2,
    createJsxAttributeName,
    createJsxElementName,
    handle: handle2,
    inherit,
    patch: patch2
  };
  function handle2(node2) {
    return one3(node2, this);
  }
}
function invalid(value) {
  throw new Error("Cannot handle value `" + value + "`, expected node");
}
function unknown(node2) {
  ok(node2 && typeof node2 === "object");
  ok("type" in node2);
  throw new Error("Cannot handle unknown node `" + node2.type + "`");
}
function all2(parent) {
  const children = parent.children || [];
  let index2 = -1;
  const results = [];
  const ignoreLineBreak = this.schema.space === "html" && parent.type === "element" && tableElements.has(parent.tagName.toLowerCase());
  while (++index2 < children.length) {
    const child = children[index2];
    if (ignoreLineBreak && child.type === "text" && child.value === "\n") {
      continue;
    }
    const result = this.handle(child);
    if (Array.isArray(result)) {
      results.push(...result);
    } else if (result) {
      results.push(result);
    }
  }
  return results;
}
function inherit(from, to) {
  const left = (
    /** @type {Record<string, unknown> | undefined} */
    from.data
  );
  let right;
  let key;
  patch2(from, to);
  if (left) {
    for (key in left) {
      if (own9.call(left, key) && key !== "estree") {
        if (!right) right = {};
        right[key] = left[key];
      }
    }
    if (right) {
      to.data = right;
    }
  }
}
function patch2(from, to) {
  const p = position2(from);
  if (p && p.start.offset !== void 0 && p.end.offset !== void 0) {
    to.start = p.start.offset;
    to.end = p.end.offset;
    to.loc = {
      start: { line: p.start.line, column: p.start.column - 1 },
      end: { line: p.end.line, column: p.end.column - 1 }
    };
    to.range = [p.start.offset, p.end.offset];
  }
}
function createJsxAttributeName(name2) {
  const node2 = createJsxNameFromString(name2);
  if (node2.type === "JSXMemberExpression") {
    throw new Error("Member expressions in attribute names are not supported");
  }
  return node2;
}
function createJsxElementName(name2) {
  return createJsxNameFromString(name2);
}
function createJsxNameFromString(name2) {
  if (name2.includes(".")) {
    const names = name2.split(".");
    let part = names.shift();
    ok(part, "Expected `part` to be defined");
    let node2 = { type: "JSXIdentifier", name: part };
    while (part = names.shift()) {
      node2 = {
        type: "JSXMemberExpression",
        object: node2,
        property: { type: "JSXIdentifier", name: part }
      };
    }
    return node2;
  }
  if (name2.includes(":")) {
    const parts = name2.split(":");
    return {
      type: "JSXNamespacedName",
      namespace: { type: "JSXIdentifier", name: parts[0] },
      name: { type: "JSXIdentifier", name: parts[1] }
    };
  }
  return { type: "JSXIdentifier", name: name2 };
}

// node_modules/hast-util-to-estree/lib/index.js
function toEstree(tree, options) {
  const state = createState2(options || {});
  let result = state.handle(tree);
  const body = state.esm;
  if (result) {
    if (result.type !== "JSXFragment" && result.type !== "JSXElement") {
      result = {
        type: "JSXFragment",
        openingFragment: { type: "JSXOpeningFragment" },
        closingFragment: { type: "JSXClosingFragment" },
        children: [result]
      };
      state.patch(tree, result);
    }
    const statement = { type: "ExpressionStatement", expression: result };
    state.patch(tree, statement);
    body.push(statement);
  }
  const program = {
    type: "Program",
    body,
    sourceType: "module",
    comments: state.comments
  };
  state.patch(tree, program);
  return program;
}

// node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js
function rehypeRecma(options) {
  return function(tree) {
    return toEstree(tree, options);
  };
}

// node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js
function rehypeRemoveRaw() {
  return function(tree) {
    visit2(tree, "raw", function(_, index2, parent) {
      if (parent && typeof index2 === "number") {
        parent.children.splice(index2, 1);
        return index2;
      }
    });
  };
}

// node_modules/collapse-white-space/index.js
var js = /\s+/g;
var html4 = /[\t\n\v\f\r ]+/g;
function collapseWhiteSpace(value, options) {
  if (!options) {
    options = {};
  } else if (typeof options === "string") {
    options = { style: options };
  }
  const replace3 = options.preserveLineEndings ? replaceLineEnding : replaceSpace;
  return String(value).replace(
    options.style === "html" ? html4 : js,
    options.trim ? trimFactory(replace3) : replace3
  );
}
function replaceLineEnding(value) {
  const match = /\r?\n|\r/.exec(value);
  return match ? match[0] : " ";
}
function replaceSpace() {
  return " ";
}
function trimFactory(replace3) {
  return dropOrReplace;
  function dropOrReplace(value, index2, all4) {
    return index2 === 0 || index2 + value.length === all4.length ? "" : replace3(value);
  }
}

// node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js
function remarkMarkAndUnravel() {
  return function(tree) {
    visit2(tree, function(node2, index2, parent) {
      let offset2 = -1;
      let all4 = true;
      let oneOrMore = false;
      if (parent && typeof index2 === "number" && node2.type === "paragraph") {
        const children = node2.children;
        while (++offset2 < children.length) {
          const child = children[offset2];
          if (child.type === "mdxJsxTextElement" || child.type === "mdxTextExpression") {
            oneOrMore = true;
          } else if (child.type === "text" && collapseWhiteSpace(child.value, { style: "html", trim: true }) === "") {
          } else {
            all4 = false;
            break;
          }
        }
        if (all4 && oneOrMore) {
          offset2 = -1;
          const newChildren = [];
          while (++offset2 < children.length) {
            const child = children[offset2];
            if (child.type === "mdxJsxTextElement") {
              child.type = "mdxJsxFlowElement";
            }
            if (child.type === "mdxTextExpression") {
              child.type = "mdxFlowExpression";
            }
            if (child.type === "text" && /^[\t\r\n ]+$/.test(String(child.value))) {
            } else {
              newChildren.push(child);
            }
          }
          parent.children.splice(index2, 1, ...newChildren);
          return index2;
        }
      }
      if (node2.type === "mdxJsxFlowElement" || node2.type === "mdxJsxTextElement") {
        const data2 = node2.data || (node2.data = {});
        data2._mdxExplicitJsx = true;
      }
    });
  };
}

// node_modules/@mdx-js/mdx/lib/node-types.js
var nodeTypes = (
  /** @type {const} */
  [
    "mdxFlowExpression",
    "mdxJsxFlowElement",
    "mdxJsxTextElement",
    "mdxTextExpression",
    "mdxjsEsm"
  ]
);

// node_modules/@mdx-js/mdx/lib/core.js
var removedOptions = [
  "compilers",
  "filepath",
  "hastPlugins",
  "mdPlugins",
  "skipExport",
  "wrapExport"
];
var warned = false;
function createProcessor(options) {
  const settings = options || {};
  let index2 = -1;
  while (++index2 < removedOptions.length) {
    const key = removedOptions[index2];
    if (key in settings) {
      unreachable(
        "Unexpected removed option `" + key + "`; see <https://mdxjs.com/migrating/v2/> on how to migrate"
      );
    }
  }
  if (settings.format === "detect") {
    unreachable(
      "Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`"
    );
  }
  if ((settings.jsxRuntime === "classic" || settings.pragma || settings.pragmaFrag || settings.pragmaImportSource) && !warned) {
    warned = true;
    console.warn(
      "Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate"
    );
  }
  const pipeline = unified().use(remarkParse);
  if (settings.format !== "md") {
    pipeline.use(remarkMdx);
  }
  const remarkRehypeOptions = settings.remarkRehypeOptions || {};
  pipeline.use(remarkMarkAndUnravel).use(settings.remarkPlugins || []).use(remarkRehype, {
    ...remarkRehypeOptions,
    allowDangerousHtml: true,
    passThrough: [...remarkRehypeOptions.passThrough || [], ...nodeTypes]
  }).use(settings.rehypePlugins || []);
  if (settings.format === "md") {
    pipeline.use(rehypeRemoveRaw);
  }
  pipeline.use(rehypeRecma, settings).use(recmaDocument, settings).use(recmaJsxRewrite, settings);
  if (!settings.jsx) {
    pipeline.use(recmaJsxBuild, settings);
  }
  pipeline.use(recmaStringify, settings).use(settings.recmaPlugins || []);
  return pipeline;
}

// node_modules/@mdx-js/mdx/lib/compile.js
function compile(vfileCompatible, compileOptions) {
  const { file, options } = resolveFileAndOptions(vfileCompatible, compileOptions);
  return createProcessor(options).process(file);
}

// node_modules/@mdx-js/mdx/lib/run.js
var AsyncFunction = Object.getPrototypeOf(run).constructor;
async function run(code4, options) {
  return new AsyncFunction(String(code4))(options);
}

// src/components/Markdown.tsx
var import_react5 = __toESM(require_react());
var runtime = __toESM(require_jsx_runtime());

// src/markdownComponents.tsx
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var FORMAT_H1 = "mt-2 scroll-m-20 text-4xl font-bold tracking-tight";
var FORMAT_H2 = "mt-10 scroll-m-20 border-b border-b-slate-200 pb-1 text-3xl font-semibold tracking-tight first:mt-0";
var FORMAT_H3 = "mt-8 scroll-m-20 text-2xl font-semibold tracking-tight";
var FORMAT_H4 = "mt-8 scroll-m-20 text-xl font-semibold tracking-tight";
var FORMAT_H5 = "mt-8 scroll-m-20 text-lg font-semibold tracking-tight";
var FORMAT_H6 = "mt-8 scroll-m-20 text-base font-semibold tracking-tight";
var FORMAT_A = "font-medium text-blue-500 dark:text-blue-400 underline underline-offset-4";
var markdownComponents = {
  h1: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h1", { className: `${FORMAT_H1} ${className}`, ...props }),
  h2: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: `${FORMAT_H2} ${className}`, ...props }),
  h3: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: `${FORMAT_H3} ${className}`, ...props }),
  h4: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h4", { className: `${FORMAT_H4} ${className}`, ...props }),
  h5: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h5", { className: `${FORMAT_H5} ${className}`, ...props }),
  h6: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h6", { className: `${FORMAT_H6} ${className}`, ...props }),
  a: ({ className, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("a", { className: `${FORMAT_A} ${className}`, ...props })
};

// node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/mdast-util-find-and-replace/lib/index.js
function findAndReplace(tree, list4, options) {
  const settings = options || {};
  const ignored = convert(settings.ignore || []);
  const pairs = toPairs(list4);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor);
  }
  function visitor(node2, parents2) {
    let index2 = -1;
    let grandparent;
    while (++index2 < parents2.length) {
      const parent = parents2[index2];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node2, parents2);
    }
  }
  function handler(node2, parents2) {
    const parent = parents2[parents2.length - 1];
    const find2 = pairs[pairIndex][0];
    const replace3 = pairs[pairIndex][1];
    let start2 = 0;
    const siblings = parent.children;
    const index2 = siblings.indexOf(node2);
    let change = false;
    let nodes = [];
    find2.lastIndex = 0;
    let match = find2.exec(node2.value);
    while (match) {
      const position3 = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents2, node2]
      };
      let value = replace3(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find2.lastIndex = position3 + 1;
      } else {
        if (start2 !== position3) {
          nodes.push({
            type: "text",
            value: node2.value.slice(start2, position3)
          });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start2 = position3 + match[0].length;
        change = true;
      }
      if (!find2.global) {
        break;
      }
      match = find2.exec(node2.value);
    }
    if (change) {
      if (start2 < node2.value.length) {
        nodes.push({ type: "text", value: node2.value.slice(start2) });
      }
      parent.children.splice(index2, 1, ...nodes);
    } else {
      nodes = [node2];
    }
    return index2 + nodes.length;
  }
}
function toPairs(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list4 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index2 = -1;
  while (++index2 < list4.length) {
    const tuple = list4[index2];
    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
  }
  return result;
}
function toExpression(find2) {
  return typeof find2 === "string" ? new RegExp(escapeStringRegexp(find2), "g") : find2;
}
function toFunction(replace3) {
  return typeof replace3 === "function" ? replace3 : function() {
    return replace3;
  };
}

// node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = ["autolink", "link", "image", "label"];
function gfmAutolinkLiteralFromMarkdown() {
  return {
    transforms: [transformGfmAutolinkLiterals],
    enter: {
      literalAutolink: enterLiteralAutolink,
      literalAutolinkEmail: enterLiteralAutolinkValue,
      literalAutolinkHttp: enterLiteralAutolinkValue,
      literalAutolinkWww: enterLiteralAutolinkValue
    },
    exit: {
      literalAutolink: exitLiteralAutolink,
      literalAutolinkEmail: exitLiteralAutolinkEmail,
      literalAutolinkHttp: exitLiteralAutolinkHttp,
      literalAutolinkWww: exitLiteralAutolinkWww
    }
  };
}
function gfmAutolinkLiteralToMarkdown() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct,
        notInConstruct
      }
    ]
  };
}
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "link");
  node2.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_, protocol, domain2, path2, match) {
  let prefix2 = "";
  if (!previous2(match)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain2 = protocol + domain2;
    protocol = "";
    prefix2 = "http://";
  }
  if (!isCorrectDomain(domain2)) {
    return false;
  }
  const parts = splitUrl(domain2 + path2);
  if (!parts[0]) return false;
  const result = {
    type: "link",
    title: null,
    url: prefix2 + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_, atext, label, match) {
  if (
    // Not an expected previous character.
    !previous2(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain2) {
  const parts = domain2.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous2(match, email) {
  const code4 = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code4) || unicodePunctuation(code4)) && (!email || code4 !== 47);
}

// node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference2.peek = footnoteReferencePeek;
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteDefinition: enterFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteCallString: enterFootnoteCallString
    },
    exit: {
      gfmFootnoteDefinition: exitFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteCallString: exitFootnoteCallString
    }
  };
}
function gfmFootnoteToMarkdown() {
  return {
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
    handlers: { footnoteDefinition, footnoteReference: footnoteReference2 }
  };
}
function enterFootnoteDefinition(token) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token
  );
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function exitFootnoteDefinitionLabelString(token) {
  const label = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "footnoteDefinition");
  node2.label = label;
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
}
function exitFootnoteDefinition(token) {
  this.exit(token);
}
function enterFootnoteCall(token) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
}
function enterFootnoteCallString() {
  this.buffer();
}
function exitFootnoteCallString(token) {
  const label = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "footnoteReference");
  node2.label = label;
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
}
function exitFootnoteCall(token) {
  this.exit(token);
}
function footnoteReference2(node2, _, state, info) {
  const tracker = state.createTracker(info);
  let value = tracker.move("[^");
  const exit3 = state.enter("footnoteReference");
  const subexit = state.enter("reference");
  value += tracker.move(
    state.safe(state.associationId(node2), {
      ...tracker.current(),
      before: value,
      after: "]"
    })
  );
  subexit();
  exit3();
  value += tracker.move("]");
  return value;
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteDefinition(node2, _, state, info) {
  const tracker = state.createTracker(info);
  let value = tracker.move("[^");
  const exit3 = state.enter("footnoteDefinition");
  const subexit = state.enter("label");
  value += tracker.move(
    state.safe(state.associationId(node2), {
      ...tracker.current(),
      before: value,
      after: "]"
    })
  );
  subexit();
  value += tracker.move(
    "]:" + (node2.children && node2.children.length > 0 ? " " : "")
  );
  tracker.shift(4);
  value += tracker.move(
    state.indentLines(state.containerFlow(node2, tracker.current()), map)
  );
  exit3();
  return value;
}
function map(line, index2, blank) {
  if (index2 === 0) {
    return line;
  }
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
function gfmStrikethroughFromMarkdown() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: enterStrikethrough },
    exit: { strikethrough: exitStrikethrough }
  };
}
function gfmStrikethroughToMarkdown() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: constructsWithoutStrikethrough
      }
    ],
    handlers: { delete: handleDelete }
  };
}
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node2, _, state, info) {
  const tracker = state.createTracker(info);
  const exit3 = state.enter("strikethrough");
  let value = tracker.move("~~");
  value += state.containerPhrasing(node2, {
    ...tracker.current(),
    before: value,
    after: "~"
  });
  value += tracker.move("~~");
  exit3();
  return value;
}
function peekDelete() {
  return "~";
}

// node_modules/markdown-table/index.js
function markdownTable(table2, options = {}) {
  const align = (options.align || []).concat();
  const stringLength = options.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table2.length) {
    const row2 = [];
    const sizes2 = [];
    let columnIndex2 = -1;
    if (table2[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table2[rowIndex].length;
    }
    while (++columnIndex2 < table2[rowIndex].length) {
      const cell = serialize2(table2[rowIndex][columnIndex2]);
      if (options.alignDelimiters !== false) {
        const size = stringLength(cell);
        sizes2[columnIndex2] = size;
        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size;
        }
      }
      row2.push(cell);
    }
    cellMatrix[rowIndex] = row2;
    sizeMatrix[rowIndex] = sizes2;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code4 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code4;
    }
  }
  columnIndex = -1;
  const row = [];
  const sizes = [];
  while (++columnIndex < mostCellsPerRow) {
    const code4 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code4 === 99) {
      before = ":";
      after = ":";
    } else if (code4 === 108) {
      before = ":";
    } else if (code4 === 114) {
      after = ":";
    }
    let size = options.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell = before + "-".repeat(size) + after;
    if (options.alignDelimiters !== false) {
      size = before.length + size + after.length;
      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }
      sizes[columnIndex] = size;
    }
    row[columnIndex] = cell;
  }
  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  const lines = [];
  while (++rowIndex < cellMatrix.length) {
    const row2 = cellMatrix[rowIndex];
    const sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell = row2[columnIndex] || "";
      let before = "";
      let after = "";
      if (options.alignDelimiters !== false) {
        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
        const code4 = alignments[columnIndex];
        if (code4 === 114) {
          before = " ".repeat(size);
        } else if (code4 === 99) {
          if (size % 2) {
            before = " ".repeat(size / 2 + 0.5);
            after = " ".repeat(size / 2 - 0.5);
          } else {
            before = " ".repeat(size / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size);
        }
      }
      if (options.delimiterStart !== false && !columnIndex) {
        line.push("|");
      }
      if (options.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(options.alignDelimiters === false && cell === "") && (options.delimiterStart !== false || columnIndex)) {
        line.push(" ");
      }
      if (options.alignDelimiters !== false) {
        line.push(before);
      }
      line.push(cell);
      if (options.alignDelimiters !== false) {
        line.push(after);
      }
      if (options.padding !== false) {
        line.push(" ");
      }
      if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line.push("|");
      }
    }
    lines.push(
      options.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
    );
  }
  return lines.join("\n");
}
function serialize2(value) {
  return value === null || value === void 0 ? "" : String(value);
}
function defaultStringLength(value) {
  return value.length;
}
function toAlignment(value) {
  const code4 = typeof value === "string" ? value.codePointAt(0) : 0;
  return code4 === 67 || code4 === 99 ? 99 : code4 === 76 || code4 === 108 ? 108 : code4 === 82 || code4 === 114 ? 114 : 0;
}

// node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
function blockquote2(node2, _, state, info) {
  const exit3 = state.enter("blockquote");
  const tracker = state.createTracker(info);
  tracker.move("> ");
  tracker.shift(2);
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map2
  );
  exit3();
  return value;
}
function map2(line, _, blank) {
  return ">" + (blank ? "" : " ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list4, none) {
  if (typeof list4 === "string") {
    list4 = [list4];
  }
  if (!list4 || list4.length === 0) {
    return none;
  }
  let index2 = -1;
  while (++index2 < list4.length) {
    if (stack.includes(list4[index2])) {
      return true;
    }
  }
  return false;
}

// node_modules/mdast-util-to-markdown/lib/handle/break.js
function hardBreak2(_, _1, state, info) {
  let index2 = -1;
  while (++index2 < state.unsafe.length) {
    if (state.unsafe[index2].character === "\n" && patternInScope(state.stack, state.unsafe[index2])) {
      return /[ \t]/.test(info.before) ? "" : " ";
    }
  }
  return "\\\n";
}

// node_modules/longest-streak/index.js
function longestStreak(value, substring) {
  const source = String(value);
  let index2 = source.indexOf(substring);
  let expected = index2;
  let count = 0;
  let max2 = 0;
  if (typeof substring !== "string") {
    throw new TypeError("Expected substring");
  }
  while (index2 !== -1) {
    if (index2 === expected) {
      if (++count > max2) {
        max2 = count;
      }
    } else {
      count = 1;
    }
    expected = index2 + substring.length;
    index2 = source.indexOf(substring, expected);
  }
  return max2;
}

// node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
function formatCodeAsIndented(node2, state) {
  return Boolean(
    state.options.fences === false && node2.value && // If there’s no info…
    !node2.lang && // And there’s a non-whitespace character…
    /[^ \r\n]/.test(node2.value) && // And the value doesn’t start or end in a blank…
    !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node2.value)
  );
}

// node_modules/mdast-util-to-markdown/lib/util/check-fence.js
function checkFence(state) {
  const marker = state.options.fence || "`";
  if (marker !== "`" && marker !== "~") {
    throw new Error(
      "Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/code.js
function code2(node2, _, state, info) {
  const marker = checkFence(state);
  const raw = node2.value || "";
  const suffix = marker === "`" ? "GraveAccent" : "Tilde";
  if (formatCodeAsIndented(node2, state)) {
    const exit4 = state.enter("codeIndented");
    const value2 = state.indentLines(raw, map3);
    exit4();
    return value2;
  }
  const tracker = state.createTracker(info);
  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
  const exit3 = state.enter("codeFenced");
  let value = tracker.move(sequence);
  if (node2.lang) {
    const subexit = state.enter(`codeFencedLang${suffix}`);
    value += tracker.move(
      state.safe(node2.lang, {
        before: value,
        after: " ",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  if (node2.lang && node2.meta) {
    const subexit = state.enter(`codeFencedMeta${suffix}`);
    value += tracker.move(" ");
    value += tracker.move(
      state.safe(node2.meta, {
        before: value,
        after: "\n",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  value += tracker.move("\n");
  if (raw) {
    value += tracker.move(raw + "\n");
  }
  value += tracker.move(sequence);
  exit3();
  return value;
}
function map3(line, _, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/check-quote.js
function checkQuote(state) {
  const marker = state.options.quote || '"';
  if (marker !== '"' && marker !== "'") {
    throw new Error(
      "Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/definition.js
function definition2(node2, _, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("definition");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  value += tracker.move(
    state.safe(state.associationId(node2), {
      before: value,
      after: "]",
      ...tracker.current()
    })
  );
  value += tracker.move("]: ");
  subexit();
  if (
    // If there’s no url, or…
    !node2.url || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : "\n",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
function checkEmphasis(state) {
  const marker = state.options.emphasis || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
emphasis2.peek = emphasisPeek;
function emphasis2(node2, _, state, info) {
  const marker = checkEmphasis(state);
  const exit3 = state.enter("emphasis");
  const tracker = state.createTracker(info);
  let value = tracker.move(marker);
  value += tracker.move(
    state.containerPhrasing(node2, {
      before: value,
      after: marker,
      ...tracker.current()
    })
  );
  value += tracker.move(marker);
  exit3();
  return value;
}
function emphasisPeek(_, _1, state) {
  return state.options.emphasis || "*";
}

// node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
function formatHeadingAsSetext(node2, state) {
  let literalWithBreak = false;
  visit2(node2, function(node3) {
    if ("value" in node3 && /\r?\n|\r/.test(node3.value) || node3.type === "break") {
      literalWithBreak = true;
      return EXIT2;
    }
  });
  return Boolean(
    (!node2.depth || node2.depth < 3) && toString2(node2) && (state.options.setext || literalWithBreak)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/heading.js
function heading2(node2, _, state, info) {
  const rank = Math.max(Math.min(6, node2.depth || 1), 1);
  const tracker = state.createTracker(info);
  if (formatHeadingAsSetext(node2, state)) {
    const exit4 = state.enter("headingSetext");
    const subexit2 = state.enter("phrasing");
    const value2 = state.containerPhrasing(node2, {
      ...tracker.current(),
      before: "\n",
      after: "\n"
    });
    subexit2();
    exit4();
    return value2 + "\n" + (rank === 1 ? "=" : "-").repeat(
      // The whole size…
      value2.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1)
    );
  }
  const sequence = "#".repeat(rank);
  const exit3 = state.enter("headingAtx");
  const subexit = state.enter("phrasing");
  tracker.move(sequence + " ");
  let value = state.containerPhrasing(node2, {
    before: "# ",
    after: "\n",
    ...tracker.current()
  });
  if (/^[\t ]/.test(value)) {
    value = "&#x" + value.charCodeAt(0).toString(16).toUpperCase() + ";" + value.slice(1);
  }
  value = value ? sequence + " " + value : sequence;
  if (state.options.closeAtx) {
    value += " " + sequence;
  }
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/html.js
html5.peek = htmlPeek;
function html5(node2) {
  return node2.value || "";
}
function htmlPeek() {
  return "<";
}

// node_modules/mdast-util-to-markdown/lib/handle/image.js
image2.peek = imagePeek;
function image2(node2, _, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("image");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  value += tracker.move(
    state.safe(node2.alt, { before: value, after: "]", ...tracker.current() })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node2.url && node2.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function imagePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
imageReference2.peek = imageReferencePeek;
function imageReference2(node2, _, state, info) {
  const type = node2.referenceType;
  const exit3 = state.enter("imageReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  const alt = state.safe(node2.alt, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(alt + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference = state.safe(state.associationId(node2), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !alt || alt !== reference) {
    value += tracker.move(reference + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function imageReferencePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode2.peek = inlineCodePeek;
function inlineCode2(node2, _, state) {
  let value = node2.value || "";
  let sequence = "`";
  let index2 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = " " + value + " ";
  }
  while (++index2 < state.unsafe.length) {
    const pattern = state.unsafe[index2];
    const expression = state.compilePattern(pattern);
    let match;
    if (!pattern.atBreak) continue;
    while (match = expression.exec(value)) {
      let position3 = match.index;
      if (value.charCodeAt(position3) === 10 && value.charCodeAt(position3 - 1) === 13) {
        position3--;
      }
      value = value.slice(0, position3) + " " + value.slice(match.index + 1);
    }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
function formatLinkAsAutolink(node2, state) {
  const raw = toString2(node2);
  return Boolean(
    !state.options.resourceLink && // If there’s a url…
    node2.url && // And there’s a no title…
    !node2.title && // And the content of `node` is a single text node…
    node2.children && node2.children.length === 1 && node2.children[0].type === "text" && // And if the url is the same as the content…
    (raw === node2.url || "mailto:" + raw === node2.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node2.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node2.url)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/link.js
link2.peek = linkPeek;
function link2(node2, _, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const tracker = state.createTracker(info);
  let exit3;
  let subexit;
  if (formatLinkAsAutolink(node2, state)) {
    const stack = state.stack;
    state.stack = [];
    exit3 = state.enter("autolink");
    let value2 = tracker.move("<");
    value2 += tracker.move(
      state.containerPhrasing(node2, {
        before: value2,
        after: ">",
        ...tracker.current()
      })
    );
    value2 += tracker.move(">");
    exit3();
    state.stack = stack;
    return value2;
  }
  exit3 = state.enter("link");
  subexit = state.enter("label");
  let value = tracker.move("[");
  value += tracker.move(
    state.containerPhrasing(node2, {
      before: value,
      after: "](",
      ...tracker.current()
    })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node2.url && node2.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function linkPeek(node2, _, state) {
  return formatLinkAsAutolink(node2, state) ? "<" : "[";
}

// node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
linkReference2.peek = linkReferencePeek;
function linkReference2(node2, _, state, info) {
  const type = node2.referenceType;
  const exit3 = state.enter("linkReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  const text7 = state.containerPhrasing(node2, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(text7 + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference = state.safe(state.associationId(node2), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !text7 || text7 !== reference) {
    value += tracker.move(reference + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function linkReferencePeek() {
  return "[";
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
function checkBulletOther(state) {
  const bullet = checkBullet(state);
  const bulletOther = state.options.bulletOther;
  if (!bulletOther) {
    return bullet === "*" ? "-" : "*";
  }
  if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
    throw new Error(
      "Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  }
  if (bulletOther === bullet) {
    throw new Error(
      "Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different"
    );
  }
  return bulletOther;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
function checkBulletOrdered(state) {
  const marker = state.options.bulletOrdered || ".";
  if (marker !== "." && marker !== ")") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule.js
function checkRule(state) {
  const marker = state.options.rule || "*";
  if (marker !== "*" && marker !== "-" && marker !== "_") {
    throw new Error(
      "Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/list.js
function list3(node2, parent, state, info) {
  const exit3 = state.enter("list");
  const bulletCurrent = state.bulletCurrent;
  let bullet = node2.ordered ? checkBulletOrdered(state) : checkBullet(state);
  const bulletOther = node2.ordered ? bullet === "." ? ")" : "." : checkBulletOther(state);
  let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
  if (!node2.ordered) {
    const firstListItem = node2.children ? node2.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (bullet === "*" || bullet === "-") && // Empty first list item:
      firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
      state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
      state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0
    ) {
      useDifferentMarker = true;
    }
    if (checkRule(state) === bullet && firstListItem) {
      let index2 = -1;
      while (++index2 < node2.children.length) {
        const item = node2.children[index2];
        if (item && item.type === "listItem" && item.children && item.children[0] && item.children[0].type === "thematicBreak") {
          useDifferentMarker = true;
          break;
        }
      }
    }
  }
  if (useDifferentMarker) {
    bullet = bulletOther;
  }
  state.bulletCurrent = bullet;
  const value = state.containerFlow(node2, info);
  state.bulletLastUsed = bullet;
  state.bulletCurrent = bulletCurrent;
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
  const style = state.options.listItemIndent || "one";
  if (style !== "tab" && style !== "one" && style !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style;
}

// node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem2(node2, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
  }
  let size = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
    size = Math.ceil(size / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size - bullet.length));
  tracker.shift(size);
  const exit3 = state.enter("listItem");
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map4
  );
  exit3();
  return value;
  function map4(line, index2, blank) {
    if (index2) {
      return (blank ? "" : " ".repeat(size)) + line;
    }
    return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
  }
}

// node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
function paragraph2(node2, _, state, info) {
  const exit3 = state.enter("paragraph");
  const subexit = state.enter("phrasing");
  const value = state.containerPhrasing(node2, info);
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-phrasing/lib/index.js
var phrasing = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  convert([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);

// node_modules/mdast-util-to-markdown/lib/handle/root.js
function root3(node2, _, state, info) {
  const hasPhrasing = node2.children.some(function(d) {
    return phrasing(d);
  });
  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
  return fn.call(state, node2, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-strong.js
function checkStrong(state) {
  const marker = state.options.strong || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/strong.js
strong2.peek = strongPeek;
function strong2(node2, _, state, info) {
  const marker = checkStrong(state);
  const exit3 = state.enter("strong");
  const tracker = state.createTracker(info);
  let value = tracker.move(marker + marker);
  value += tracker.move(
    state.containerPhrasing(node2, {
      before: value,
      after: marker,
      ...tracker.current()
    })
  );
  value += tracker.move(marker + marker);
  exit3();
  return value;
}
function strongPeek(_, _1, state) {
  return state.options.strong || "*";
}

// node_modules/mdast-util-to-markdown/lib/handle/text.js
function text5(node2, _, state, info) {
  return state.safe(node2.value, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
function checkRuleRepetition(state) {
  const repetition = state.options.ruleRepetition || 3;
  if (repetition < 3) {
    throw new Error(
      "Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more"
    );
  }
  return repetition;
}

// node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
function thematicBreak3(_, _1, state) {
  const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
  return state.options.ruleSpaces ? value.slice(0, -1) : value;
}

// node_modules/mdast-util-to-markdown/lib/handle/index.js
var handle = {
  blockquote: blockquote2,
  break: hardBreak2,
  code: code2,
  definition: definition2,
  emphasis: emphasis2,
  hardBreak: hardBreak2,
  heading: heading2,
  html: html5,
  image: image2,
  imageReference: imageReference2,
  inlineCode: inlineCode2,
  link: link2,
  linkReference: linkReference2,
  list: list3,
  listItem: listItem2,
  paragraph: paragraph2,
  root: root3,
  strong: strong2,
  text: text5,
  thematicBreak: thematicBreak3
};

// node_modules/mdast-util-gfm-table/lib/index.js
function gfmTableFromMarkdown() {
  return {
    enter: {
      table: enterTable,
      tableData: enterCell,
      tableHeader: enterCell,
      tableRow: enterRow
    },
    exit: {
      codeText: exitCodeText,
      table: exitTable,
      tableData: exit2,
      tableHeader: exit2,
      tableRow: exit2
    }
  };
}
function enterTable(token) {
  const align = token._align;
  ok(align, "expected `_align` on table");
  this.enter(
    {
      type: "table",
      align: align.map(function(d) {
        return d === "none" ? null : d;
      }),
      children: []
    },
    token
  );
  this.data.inTable = true;
}
function exitTable(token) {
  this.exit(token);
  this.data.inTable = void 0;
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit2(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value = this.resume();
  if (this.data.inTable) {
    value = value.replace(/\\([\\|])/g, replace2);
  }
  const node2 = this.stack[this.stack.length - 1];
  ok(node2.type === "inlineCode");
  node2.value = value;
  this.exit(token);
}
function replace2($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options) {
  const settings = options || {};
  const padding = settings.tableCellPadding;
  const alignDelimiters = settings.tablePipeAlign;
  const stringLength = settings.stringLength;
  const around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: inlineCodeWithTable,
      table: handleTable,
      tableCell: handleTableCell,
      tableRow: handleTableRow
    }
  };
  function handleTable(node2, _, state, info) {
    return serializeData(handleTableAsData(node2, state, info), node2.align);
  }
  function handleTableRow(node2, _, state, info) {
    const row = handleTableRowAsData(node2, state, info);
    const value = serializeData([row]);
    return value.slice(0, value.indexOf("\n"));
  }
  function handleTableCell(node2, _, state, info) {
    const exit3 = state.enter("tableCell");
    const subexit = state.enter("phrasing");
    const value = state.containerPhrasing(node2, {
      ...info,
      before: around,
      after: around
    });
    subexit();
    exit3();
    return value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node2, state, info) {
    const children = node2.children;
    let index2 = -1;
    const result = [];
    const subexit = state.enter("table");
    while (++index2 < children.length) {
      result[index2] = handleTableRowAsData(children[index2], state, info);
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node2, state, info) {
    const children = node2.children;
    let index2 = -1;
    const result = [];
    const subexit = state.enter("tableRow");
    while (++index2 < children.length) {
      result[index2] = handleTableCell(children[index2], node2, state, info);
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node2, parent, state) {
    let value = handle.inlineCode(node2, parent, state);
    if (state.stack.includes("tableCell")) {
      value = value.replace(/\|/g, "\\$&");
    }
    return value;
  }
}

// node_modules/mdast-util-gfm-task-list-item/lib/index.js
function gfmTaskListItemFromMarkdown() {
  return {
    exit: {
      taskListCheckValueChecked: exitCheck,
      taskListCheckValueUnchecked: exitCheck,
      paragraph: exitParagraphWithTaskListItem
    }
  };
}
function gfmTaskListItemToMarkdown() {
  return {
    unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
    handlers: { listItem: listItemWithTaskListItem }
  };
}
function exitCheck(token) {
  const node2 = this.stack[this.stack.length - 2];
  ok(node2.type === "listItem");
  node2.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  const parent = this.stack[this.stack.length - 2];
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node2 = this.stack[this.stack.length - 1];
    ok(node2.type === "paragraph");
    const head = node2.children[0];
    if (head && head.type === "text") {
      const siblings = parent.children;
      let index2 = -1;
      let firstParaghraph;
      while (++index2 < siblings.length) {
        const sibling2 = siblings[index2];
        if (sibling2.type === "paragraph") {
          firstParaghraph = sibling2;
          break;
        }
      }
      if (firstParaghraph === node2) {
        head.value = head.value.slice(1);
        if (head.value.length === 0) {
          node2.children.shift();
        } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
          head.position.start.column++;
          head.position.start.offset++;
          node2.position.start = Object.assign({}, head.position.start);
        }
      }
    }
  }
  this.exit(token);
}
function listItemWithTaskListItem(node2, parent, state, info) {
  const head = node2.children[0];
  const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
  const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
  const tracker = state.createTracker(info);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value = handle.listItem(node2, parent, state, {
    ...info,
    ...tracker.current()
  });
  if (checkable) {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value;
  function check($0) {
    return $0 + checkbox;
  }
}

// node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown(),
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown(),
    gfmTableFromMarkdown(),
    gfmTaskListItemFromMarkdown()
  ];
}
function gfmToMarkdown(options) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown(),
      gfmFootnoteToMarkdown(),
      gfmStrikethroughToMarkdown(),
      gfmTableToMarkdown(options),
      gfmTaskListItemToMarkdown()
    ]
  };
}

// node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
var wwwPrefix = {
  tokenize: tokenizeWwwPrefix,
  partial: true
};
var domain = {
  tokenize: tokenizeDomain,
  partial: true
};
var path = {
  tokenize: tokenizePath,
  partial: true
};
var trail = {
  tokenize: tokenizeTrail,
  partial: true
};
var emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
var wwwAutolink = {
  name: "wwwAutolink",
  tokenize: tokenizeWwwAutolink,
  previous: previousWww
};
var protocolAutolink = {
  name: "protocolAutolink",
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
var emailAutolink = {
  name: "emailAutolink",
  tokenize: tokenizeEmailAutolink,
  previous: previousEmail
};
var text6 = {};
function gfmAutolinkLiteral() {
  return {
    text: text6
  };
}
var code3 = 48;
while (code3 < 123) {
  text6[code3] = emailAutolink;
  code3++;
  if (code3 === 58) code3 = 65;
  else if (code3 === 91) code3 = 97;
}
text6[43] = emailAutolink;
text6[45] = emailAutolink;
text6[46] = emailAutolink;
text6[95] = emailAutolink;
text6[72] = [emailAutolink, protocolAutolink];
text6[104] = [emailAutolink, protocolAutolink];
text6[87] = [emailAutolink, wwwAutolink];
text6[119] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok3, nok) {
  const self2 = this;
  let dot;
  let data2;
  return start2;
  function start2(code4) {
    if (!gfmAtext(code4) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code4);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code4);
  }
  function atext(code4) {
    if (gfmAtext(code4)) {
      effects.consume(code4);
      return atext;
    }
    if (code4 === 64) {
      effects.consume(code4);
      return emailDomain;
    }
    return nok(code4);
  }
  function emailDomain(code4) {
    if (code4 === 46) {
      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code4);
    }
    if (code4 === 45 || code4 === 95 || asciiAlphanumeric(code4)) {
      data2 = true;
      effects.consume(code4);
      return emailDomain;
    }
    return emailDomainAfter(code4);
  }
  function emailDomainDot(code4) {
    effects.consume(code4);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code4) {
    if (data2 && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok3(code4);
    }
    return nok(code4);
  }
}
function tokenizeWwwAutolink(effects, ok3, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code4) {
    if (code4 !== 87 && code4 !== 119 || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code4);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code4);
  }
  function wwwAfter(code4) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok3(code4);
  }
}
function tokenizeProtocolAutolink(effects, ok3, nok) {
  const self2 = this;
  let buffer = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code4) {
    if ((code4 === 72 || code4 === 104) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer += String.fromCodePoint(code4);
      effects.consume(code4);
      return protocolPrefixInside;
    }
    return nok(code4);
  }
  function protocolPrefixInside(code4) {
    if (asciiAlpha(code4) && buffer.length < 5) {
      buffer += String.fromCodePoint(code4);
      effects.consume(code4);
      return protocolPrefixInside;
    }
    if (code4 === 58) {
      const protocol = buffer.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code4);
        return protocolSlashesInside;
      }
    }
    return nok(code4);
  }
  function protocolSlashesInside(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code4);
  }
  function afterProtocol(code4) {
    return code4 === null || asciiControl(code4) || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || unicodePunctuation(code4) ? nok(code4) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code4);
  }
  function protocolAfter(code4) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok3(code4);
  }
}
function tokenizeWwwPrefix(effects, ok3, nok) {
  let size = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code4) {
    if ((code4 === 87 || code4 === 119) && size < 3) {
      size++;
      effects.consume(code4);
      return wwwPrefixInside;
    }
    if (code4 === 46 && size === 3) {
      effects.consume(code4);
      return wwwPrefixAfter;
    }
    return nok(code4);
  }
  function wwwPrefixAfter(code4) {
    return code4 === null ? nok(code4) : ok3(code4);
  }
}
function tokenizeDomain(effects, ok3, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code4) {
    if (code4 === 46 || code4 === 95) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code4);
    }
    if (code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || code4 !== 45 && unicodePunctuation(code4)) {
      return domainAfter(code4);
    }
    seen = true;
    effects.consume(code4);
    return domainInside;
  }
  function domainAtPunctuation(code4) {
    if (code4 === 95) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code4);
    return domainInside;
  }
  function domainAfter(code4) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code4);
    }
    return ok3(code4);
  }
}
function tokenizePath(effects, ok3) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code4) {
    if (code4 === 40) {
      sizeOpen++;
      effects.consume(code4);
      return pathInside;
    }
    if (code4 === 41 && sizeClose < sizeOpen) {
      return pathAtPunctuation(code4);
    }
    if (code4 === 33 || code4 === 34 || code4 === 38 || code4 === 39 || code4 === 41 || code4 === 42 || code4 === 44 || code4 === 46 || code4 === 58 || code4 === 59 || code4 === 60 || code4 === 63 || code4 === 93 || code4 === 95 || code4 === 126) {
      return effects.check(trail, ok3, pathAtPunctuation)(code4);
    }
    if (code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      return ok3(code4);
    }
    effects.consume(code4);
    return pathInside;
  }
  function pathAtPunctuation(code4) {
    if (code4 === 41) {
      sizeClose++;
    }
    effects.consume(code4);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok3, nok) {
  return trail2;
  function trail2(code4) {
    if (code4 === 33 || code4 === 34 || code4 === 39 || code4 === 41 || code4 === 42 || code4 === 44 || code4 === 46 || code4 === 58 || code4 === 59 || code4 === 63 || code4 === 95 || code4 === 126) {
      effects.consume(code4);
      return trail2;
    }
    if (code4 === 38) {
      effects.consume(code4);
      return trailCharacterReferenceStart;
    }
    if (code4 === 93) {
      effects.consume(code4);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code4 === 60 || // So is whitespace.
      code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)
    ) {
      return ok3(code4);
    }
    return nok(code4);
  }
  function trailBracketAfter(code4) {
    if (code4 === null || code4 === 40 || code4 === 91 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      return ok3(code4);
    }
    return trail2(code4);
  }
  function trailCharacterReferenceStart(code4) {
    return asciiAlpha(code4) ? trailCharacterReferenceInside(code4) : nok(code4);
  }
  function trailCharacterReferenceInside(code4) {
    if (code4 === 59) {
      effects.consume(code4);
      return trail2;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return trailCharacterReferenceInside;
    }
    return nok(code4);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.consume(code4);
    return after;
  }
  function after(code4) {
    return asciiAlphanumeric(code4) ? nok(code4) : ok3(code4);
  }
}
function previousWww(code4) {
  return code4 === null || code4 === 40 || code4 === 42 || code4 === 95 || code4 === 91 || code4 === 93 || code4 === 126 || markdownLineEndingOrSpace(code4);
}
function previousProtocol(code4) {
  return !asciiAlpha(code4);
}
function previousEmail(code4) {
  return !(code4 === 47 || gfmAtext(code4));
}
function gfmAtext(code4) {
  return code4 === 43 || code4 === 45 || code4 === 46 || code4 === 95 || asciiAlphanumeric(code4);
}
function previousUnbalanced(events) {
  let index2 = events.length;
  let result = false;
  while (index2--) {
    const token = events[index2][1];
    if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
      result = true;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events.length > 0 && !result) {
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}

// node_modules/micromark-extension-gfm-footnote/lib/syntax.js
var indent2 = {
  tokenize: tokenizeIndent2,
  partial: true
};
function gfmFootnote() {
  return {
    document: {
      [91]: {
        name: "gfmFootnoteDefinition",
        tokenize: tokenizeDefinitionStart,
        continuation: {
          tokenize: tokenizeDefinitionContinuation
        },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [91]: {
        name: "gfmFootnoteCall",
        tokenize: tokenizeGfmFootnoteCall
      },
      [93]: {
        name: "gfmPotentialFootnoteCall",
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  let index2 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index2--) {
    const token = self2.events[index2][1];
    if (token.type === "labelImage") {
      labelStart = token;
      break;
    }
    if (token.type === "gfmFootnoteCall" || token.type === "labelLink" || token.type === "label" || token.type === "image" || token.type === "link") {
      break;
    }
  }
  return start2;
  function start2(code4) {
    if (!labelStart || !labelStart._balanced) {
      return nok(code4);
    }
    const id = normalizeIdentifier(self2.sliceSerialize({
      start: labelStart.end,
      end: self2.now()
    }));
    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {
      return nok(code4);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok3(code4);
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index2 = events.length;
  let labelStart;
  while (index2--) {
    if (events[index2][1].type === "labelImage" && events[index2][0] === "enter") {
      labelStart = events[index2][1];
      break;
    }
  }
  events[index2 + 1][1].type = "data";
  events[index2 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events[index2 + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events[index2 + 3][1].end),
    end: Object.assign({}, events[index2 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string3 = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  const chunk = {
    type: "chunkString",
    contentType: "string",
    start: Object.assign({}, string3.start),
    end: Object.assign({}, string3.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events[index2 + 1],
    events[index2 + 2],
    ["enter", call, context],
    // The `[`
    events[index2 + 3],
    events[index2 + 4],
    // The `^`.
    ["enter", marker, context],
    ["exit", marker, context],
    // Everything in between.
    ["enter", string3, context],
    ["enter", chunk, context],
    ["exit", chunk, context],
    ["exit", string3, context],
    // The ending (`]`, properly parsed and labelled).
    events[events.length - 2],
    events[events.length - 1],
    ["exit", call, context]
  ];
  events.splice(index2, events.length - index2 + 1, ...replacement);
  return events;
}
function tokenizeGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size = 0;
  let data2;
  return start2;
  function start2(code4) {
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code4) {
    if (code4 !== 94) return nok(code4);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code4) {
    if (
      // Too long.
      size > 999 || // Closing brace with nothing.
      code4 === 93 && !data2 || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code4 === null || code4 === 91 || markdownLineEndingOrSpace(code4)
    ) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
        return nok(code4);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok3;
    }
    if (!markdownLineEndingOrSpace(code4)) {
      data2 = true;
    }
    size++;
    effects.consume(code4);
    return code4 === 92 ? callEscape : callData;
  }
  function callEscape(code4) {
    if (code4 === 91 || code4 === 92 || code4 === 93) {
      effects.consume(code4);
      size++;
      return callData;
    }
    return callData(code4);
  }
}
function tokenizeDefinitionStart(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier;
  let size = 0;
  let data2;
  return start2;
  function start2(code4) {
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code4) {
    if (code4 === 94) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code4);
  }
  function labelInside(code4) {
    if (
      // Too long.
      size > 999 || // Closing brace with nothing.
      code4 === 93 && !data2 || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code4 === null || code4 === 91 || markdownLineEndingOrSpace(code4)
    ) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier = normalizeIdentifier(self2.sliceSerialize(token));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code4)) {
      data2 = true;
    }
    size++;
    effects.consume(code4);
    return code4 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code4) {
    if (code4 === 91 || code4 === 92 || code4 === 93) {
      effects.consume(code4);
      size++;
      return labelInside;
    }
    return labelInside(code4);
  }
  function labelAfter(code4) {
    if (code4 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code4);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier)) {
        defined.push(identifier);
      }
      return factorySpace(effects, whitespaceAfter, "gfmFootnoteDefinitionWhitespace");
    }
    return nok(code4);
  }
  function whitespaceAfter(code4) {
    return ok3(code4);
  }
}
function tokenizeDefinitionContinuation(effects, ok3, nok) {
  return effects.check(blankLine, ok3, effects.attempt(indent2, ok3, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "gfmFootnoteDefinitionIndent", 4 + 1);
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js
function gfmStrikethrough(options) {
  const options_ = options || {};
  let single = options_.singleTilde;
  const tokenizer2 = {
    name: "strikethrough",
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: {
      [126]: tokenizer2
    },
    insideSpan: {
      null: [tokenizer2]
    },
    attentionMarkers: {
      null: [126]
    }
  };
  function resolveAllStrikethrough(events, context) {
    let index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][0] === "enter" && events[index2][1].type === "strikethroughSequenceTemporary" && events[index2][1]._close) {
        let open = index2;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
          events[index2][1].end.offset - events[index2][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index2][1].type = "strikethroughSequence";
            events[open][1].type = "strikethroughSequence";
            const strikethrough2 = {
              type: "strikethrough",
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index2][1].end)
            };
            const text7 = {
              type: "strikethroughText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index2][1].start)
            };
            const nextEvents = [["enter", strikethrough2, context], ["enter", events[open][1], context], ["exit", events[open][1], context], ["enter", text7, context]];
            const insideSpan2 = context.parser.constructs.insideSpan.null;
            if (insideSpan2) {
              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan2, events.slice(open + 1, index2), context));
            }
            splice(nextEvents, nextEvents.length, 0, [["exit", text7, context], ["enter", events[index2][1], context], ["exit", events[index2][1], context], ["exit", strikethrough2, context]]);
            splice(events, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "strikethroughSequenceTemporary") {
        events[index2][1].type = "data";
      }
    }
    return events;
  }
  function tokenizeStrikethrough(effects, ok3, nok) {
    const previous3 = this.previous;
    const events = this.events;
    let size = 0;
    return start2;
    function start2(code4) {
      if (previous3 === 126 && events[events.length - 1][1].type !== "characterEscape") {
        return nok(code4);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code4);
    }
    function more(code4) {
      const before = classifyCharacter(previous3);
      if (code4 === 126) {
        if (size > 1) return nok(code4);
        effects.consume(code4);
        size++;
        return more;
      }
      if (size < 2 && !single) return nok(code4);
      const token = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code4);
      token._open = !after || after === 2 && Boolean(before);
      token._close = !before || before === 2 && Boolean(after);
      return ok3(code4);
    }
  }
}

// node_modules/micromark-extension-gfm-table/lib/edit-map.js
var EditMap = class {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(index2, remove, add) {
    addImplementation(this, index2, remove, add);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImplementation(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(events) {
    this.map.sort(function(a, b) {
      return a[0] - b[0];
    });
    if (this.map.length === 0) {
      return;
    }
    let index2 = this.map.length;
    const vecs = [];
    while (index2 > 0) {
      index2 -= 1;
      vecs.push(events.slice(this.map[index2][0] + this.map[index2][1]), this.map[index2][2]);
      events.length = this.map[index2][0];
    }
    vecs.push([...events]);
    events.length = 0;
    let slice2 = vecs.pop();
    while (slice2) {
      events.push(...slice2);
      slice2 = vecs.pop();
    }
    this.map.length = 0;
  }
};
function addImplementation(editMap, at2, remove, add) {
  let index2 = 0;
  if (remove === 0 && add.length === 0) {
    return;
  }
  while (index2 < editMap.map.length) {
    if (editMap.map[index2][0] === at2) {
      editMap.map[index2][1] += remove;
      editMap.map[index2][2].push(...add);
      return;
    }
    index2 += 1;
  }
  editMap.map.push([at2, remove, add]);
}

// node_modules/micromark-extension-gfm-table/lib/infer.js
function gfmTableAlign(events, index2) {
  let inDelimiterRow = false;
  const align = [];
  while (index2 < events.length) {
    const event = events[index2];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(events[index2 + 1][1].type === "tableDelimiterMarker" ? "left" : "none");
        }
      } else if (event[1].type === "tableContent") {
        if (events[index2 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index2 += 1;
  }
  return align;
}

// node_modules/micromark-extension-gfm-table/lib/syntax.js
function gfmTable() {
  return {
    flow: {
      null: {
        name: "table",
        tokenize: tokenizeTable,
        resolveAll: resolveTable
      }
    }
  };
}
function tokenizeTable(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let sizeB = 0;
  let seen;
  return start2;
  function start2(code4) {
    let index2 = self2.events.length - 1;
    while (index2 > -1) {
      const type = self2.events[index2][1].type;
      if (type === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type === "linePrefix") index2--;
      else break;
    }
    const tail = index2 > -1 ? self2.events[index2][1].type : null;
    const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    return next(code4);
  }
  function headRowBefore(code4) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code4);
  }
  function headRowStart(code4) {
    if (code4 === 124) {
      return headRowBreak(code4);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code4);
  }
  function headRowBreak(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        return headDelimiterStart;
      }
      return nok(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, headRowBreak, "whitespace")(code4);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size += 1;
    }
    if (code4 === 124) {
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter("data");
    return headRowData(code4);
  }
  function headRowData(code4) {
    if (code4 === null || code4 === 124 || markdownLineEndingOrSpace(code4)) {
      effects.exit("data");
      return headRowBreak(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? headRowEscape : headRowData;
  }
  function headRowEscape(code4) {
    if (code4 === 92 || code4 === 124) {
      effects.consume(code4);
      return headRowData;
    }
    return headRowData(code4);
  }
  function headDelimiterStart(code4) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code4)) {
      return factorySpace(effects, headDelimiterBefore, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4);
    }
    return headDelimiterBefore(code4);
  }
  function headDelimiterBefore(code4) {
    if (code4 === 45 || code4 === 58) {
      return headDelimiterValueBefore(code4);
    }
    if (code4 === 124) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterCellBefore(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(effects, headDelimiterValueBefore, "whitespace")(code4);
    }
    return headDelimiterValueBefore(code4);
  }
  function headDelimiterValueBefore(code4) {
    if (code4 === 58) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code4);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code4 === 45) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      return headDelimiterCellAfter(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterLeftAlignmentAfter(code4) {
    if (code4 === 45) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterFiller(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return headDelimiterFiller;
    }
    if (code4 === 58) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code4);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code4);
  }
  function headDelimiterRightAlignmentAfter(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(effects, headDelimiterCellAfter, "whitespace")(code4);
    }
    return headDelimiterCellAfter(code4);
  }
  function headDelimiterCellAfter(code4) {
    if (code4 === 124) {
      return headDelimiterBefore(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      if (!seen || size !== sizeB) {
        return headDelimiterNok(code4);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok3(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterNok(code4) {
    return nok(code4);
  }
  function bodyRowStart(code4) {
    effects.enter("tableRow");
    return bodyRowBreak(code4);
  }
  function bodyRowBreak(code4) {
    if (code4 === 124) {
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("tableRow");
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, bodyRowBreak, "whitespace")(code4);
    }
    effects.enter("data");
    return bodyRowData(code4);
  }
  function bodyRowData(code4) {
    if (code4 === null || code4 === 124 || markdownLineEndingOrSpace(code4)) {
      effects.exit("data");
      return bodyRowBreak(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code4) {
    if (code4 === 92 || code4 === 124) {
      effects.consume(code4);
      return bodyRowData;
    }
    return bodyRowData(code4);
  }
}
function resolveTable(events, context) {
  let index2 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map4 = new EditMap();
  while (++index2 < events.length) {
    const event = events[index2];
    const token = event[1];
    if (event[0] === "enter") {
      if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          flushTableEnd(map4, context, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token.start),
          // Note: correct end is set later.
          end: Object.assign({}, token.end)
        };
        map4.add(index2, 0, [["enter", currentTable, context]]);
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell = [0, index2 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map4.add(index2, 0, [["enter", currentBody, context]]);
        }
        rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell[2] === 0) {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(map4, context, lastCell, rowKind, void 0, currentCell);
            lastCell = [0, 0, 0, 0];
          }
          cell[2] = index2;
        }
      } else if (token.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(map4, context, lastCell, rowKind, void 0, currentCell);
          }
          lastCell = cell;
          cell = [lastCell[1], index2, 0, 0];
        }
      }
    } else if (token.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index2;
    } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
      lastTableEnd = index2;
      if (lastCell[1] !== 0) {
        cell[0] = cell[1];
        currentCell = flushCell(map4, context, lastCell, rowKind, index2, currentCell);
      } else if (cell[1] !== 0) {
        currentCell = flushCell(map4, context, cell, rowKind, index2, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
      cell[3] = index2;
    }
  }
  if (lastTableEnd !== 0) {
    flushTableEnd(map4, context, lastTableEnd, currentTable, currentBody);
  }
  map4.consume(context.events);
  index2 = -1;
  while (++index2 < context.events.length) {
    const event = context.events[index2];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context.events, index2);
    }
  }
  return events;
}
function flushCell(map4, context, range, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range[0] !== 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
    map4.add(range[0], 0, [["exit", previousCell, context]]);
  }
  const now = getPoint(context.events, range[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map4.add(range[1], 0, [["enter", previousCell, context]]);
  if (range[2] !== 0) {
    const relatedStart = getPoint(context.events, range[2]);
    const relatedEnd = getPoint(context.events, range[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map4.add(range[2], 0, [["enter", valueToken, context]]);
    if (rowKind !== 2) {
      const start2 = context.events[range[2]];
      const end = context.events[range[3]];
      start2[1].end = Object.assign({}, end[1].end);
      start2[1].type = "chunkText";
      start2[1].contentType = "text";
      if (range[3] > range[2] + 1) {
        const a = range[2] + 1;
        const b = range[3] - range[2] - 1;
        map4.add(a, b, []);
      }
    }
    map4.add(range[3] + 1, 0, [["exit", valueToken, context]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
    map4.add(rowEnd, 0, [["exit", previousCell, context]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map4, context, index2, table2, tableBody) {
  const exits = [];
  const related = getPoint(context.events, index2);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context]);
  }
  table2.end = Object.assign({}, related);
  exits.push(["exit", table2, context]);
  map4.add(index2 + 1, 0, exits);
}
function getPoint(events, index2) {
  const event = events[index2];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}

// node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js
var tasklistCheck = {
  name: "tasklistCheck",
  tokenize: tokenizeTasklistCheck
};
function gfmTaskListItem() {
  return {
    text: {
      [91]: tasklistCheck
    }
  };
}
function tokenizeTasklistCheck(effects, ok3, nok) {
  const self2 = this;
  return open;
  function open(code4) {
    if (
      // Exit if there’s stuff before.
      self2.previous !== null || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code4);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code4);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code4) {
    if (markdownLineEndingOrSpace(code4)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code4);
      effects.exit("taskListCheckValueUnchecked");
      return close;
    }
    if (code4 === 88 || code4 === 120) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code4);
      effects.exit("taskListCheckValueChecked");
      return close;
    }
    return nok(code4);
  }
  function close(code4) {
    if (code4 === 93) {
      effects.enter("taskListCheckMarker");
      effects.consume(code4);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    if (markdownLineEnding(code4)) {
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return effects.check({
        tokenize: spaceThenNonSpace
      }, ok3, nok)(code4);
    }
    return nok(code4);
  }
}
function spaceThenNonSpace(effects, ok3, nok) {
  return factorySpace(effects, after, "whitespace");
  function after(code4) {
    return code4 === null ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-extension-gfm/index.js
function gfm(options) {
  return combineExtensions([
    gfmAutolinkLiteral(),
    gfmFootnote(),
    gfmStrikethrough(options),
    gfmTable(),
    gfmTaskListItem()
  ]);
}

// node_modules/remark-gfm/lib/index.js
var emptyOptions6 = {};
function remarkGfm(options) {
  const self2 = (
    /** @type {Processor} */
    this
  );
  const settings = options || emptyOptions6;
  const data2 = self2.data();
  const micromarkExtensions = data2.micromarkExtensions || (data2.micromarkExtensions = []);
  const fromMarkdownExtensions = data2.fromMarkdownExtensions || (data2.fromMarkdownExtensions = []);
  const toMarkdownExtensions = data2.toMarkdownExtensions || (data2.toMarkdownExtensions = []);
  micromarkExtensions.push(gfm(settings));
  fromMarkdownExtensions.push(gfmFromMarkdown());
  toMarkdownExtensions.push(gfmToMarkdown(settings));
}

// src/components/ErrorBoundary.tsx
var import_react4 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var ErrorBoundary = class extends import_react4.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }
  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "text-xl", children: this.props.message ? this.props.message : "Something went wrong:" }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { children: this.state.error?.message })
      ] });
    }
    return this.props.children;
  }
};

// node_modules/@wooorm/starry-night/lang/source.c.js
var grammar = {
  dependencies: ["source.c.platform"],
  extensions: [
    ".c",
    ".cats",
    ".h",
    ".idc",
    ".opencl",
    ".upc",
    ".xbm",
    ".xpm",
    ".xs"
  ],
  names: [
    "c",
    "dtrace",
    "dtrace-script",
    "oncrpc",
    "opencl",
    "rpc",
    "rpcgen",
    "unified-parallel-c",
    "x-bitmap",
    "x-pixmap",
    "xbm",
    "xdr",
    "xpm",
    "xs"
  ],
  patterns: [
    { include: "#preprocessor-rule-enabled" },
    { include: "#preprocessor-rule-disabled" },
    { include: "#preprocessor-rule-other" },
    { include: "#comments" },
    { include: "source.c.platform" },
    {
      match: "\\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\\b",
      name: "keyword.control.c"
    },
    {
      match: "\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
      name: "storage.type.c"
    },
    {
      match: "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
      name: "storage.modifier.c"
    },
    { match: "\\bk[A-Z]\\w*\\b", name: "constant.other.variable.mac-classic.c" },
    {
      match: "\\bg[A-Z]\\w*\\b",
      name: "variable.other.readwrite.global.mac-classic.c"
    },
    {
      match: "\\bs[A-Z]\\w*\\b",
      name: "variable.other.readwrite.static.mac-classic.c"
    },
    { match: "\\b(NULL|true|false|TRUE|FALSE)\\b", name: "constant.language.c" },
    { include: "#sizeof" },
    {
      captures: {
        inc: { name: "invalid.illegal.digit-separator-should-not-be-last.c++" }
      },
      match: "(?x)\\b\n			(  (?i:\n			      0x ( [0-9A-Fa-f]+ ( ' [0-9A-Fa-f]+ )* )?  # Hexadecimal\n			   |  0b ( [0-1]+       ( ' [0-1]+ )* )?        # Binary\n			   |  0  ( [0-7]+       ( ' [0-7]+ )* )         # Octal\n			   |     ( [0-9]+       ( ' [0-9]+ )* )         # Decimal\n			   )\n			   ( ([uUfF] | u?ll? | U?LL?)\\b | (?<inc>') | \\b )\n			|  ( [0-9]+ ( ' [0-9]+ )* )?\n			   (?i:\n			      \\. ( [0-9]+ ( ' [0-9]+ )* ) E(\\+|-)? ( [0-9]+ ( ' [0-9]+ )* )\n			   |  \\. ( [0-9]+ ( ' [0-9]+ )* )\n			   |  E(\\+|-)? ( [0-9]+ ( ' [0-9]+ )* )\n			   )\n			   ( (?<inc>') | \\b )\n			)",
      name: "constant.numeric.c"
    },
    {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.c" } },
      name: "string.quoted.double.c",
      patterns: [
        { include: "#string_escaped_char" },
        { include: "#string_placeholder" }
      ]
    },
    {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.c" } },
      name: "string.quoted.single.c",
      patterns: [{ include: "#string_escaped_char" }]
    },
    {
      begin: "(?x)\n        		^\\s*\\#\\s*(define)\\s+             # define\n        		((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        		(?:                              # and optionally:\n        		    (\\()                         # an open parenthesis\n        		        (\n        		            \\s* \\g<id> \\s*       # first argument\n        		            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        		            (?:\\.\\.\\.)?          # varargs ellipsis?\n        		        )\n        		    (\\))                         # a close parenthesis\n        		)?\n        	",
      beginCaptures: {
        1: { name: "keyword.control.import.define.c" },
        2: { name: "entity.name.function.preprocessor.c" },
        4: { name: "punctuation.definition.parameters.begin.c" },
        5: { name: "variable.parameter.preprocessor.c" },
        7: { name: "punctuation.separator.parameters.c" },
        8: { name: "punctuation.definition.parameters.end.c" }
      },
      end: "(?=(?://|/\\*))|$",
      name: "meta.preprocessor.macro.c",
      patterns: [
        {
          match: "(?>\\\\\\s*\\n)",
          name: "punctuation.separator.continuation.c"
        },
        { include: "$base" }
      ]
    },
    {
      begin: "^\\s*#\\s*(error|warning)\\b",
      captures: { 1: { name: "keyword.control.import.error.c" } },
      end: "$",
      name: "meta.preprocessor.diagnostic.c",
      patterns: [
        { match: "(?>\\\\\\s*\\n)", name: "punctuation.separator.continuation.c" }
      ]
    },
    {
      begin: "^\\s*#\\s*(include|import)\\b",
      captures: { 1: { name: "keyword.control.import.include.c" } },
      end: "(?=(?://|/\\*))|$",
      name: "meta.preprocessor.c.include",
      patterns: [
        {
          match: "(?>\\\\\\s*\\n)",
          name: "punctuation.separator.continuation.c"
        },
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.c" } },
          name: "string.quoted.double.include.c"
        },
        {
          begin: "<",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.c" } },
          end: ">",
          endCaptures: { 0: { name: "punctuation.definition.string.end.c" } },
          name: "string.quoted.other.lt-gt.include.c"
        }
      ]
    },
    { include: "#pragma-mark" },
    {
      begin: "^\\s*#\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\\b",
      captures: { 1: { name: "keyword.control.import.c" } },
      end: "(?=(?://|/\\*))|$",
      name: "meta.preprocessor.c",
      patterns: [
        { match: "(?>\\\\\\s*\\n)", name: "punctuation.separator.continuation.c" }
      ]
    },
    { match: "\\b([a-z0-9_]+_t)\\b", name: "support.type.posix-reserved.c" },
    { include: "#block" },
    {
      begin: "(?x)\n    		(?:  ^                                 # begin-of-line\n    		  |  \n    		     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    		       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    		     )\n    		)\n    		(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate|(?:::)?new|(?:::)?delete)\\s*\\()\n    		(\n    			(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    			(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    		)\n    		 \\s*(?=\\()",
      beginCaptures: {
        1: { name: "punctuation.whitespace.function.leading.c" },
        3: { name: "entity.name.function.c" },
        4: { name: "punctuation.definition.parameters.c" }
      },
      end: "(?<=\\})|(?=#)|(;)",
      name: "meta.function.c",
      patterns: [
        { include: "#comments" },
        { include: "#parens" },
        {
          match: "\\b(const|final|override|noexcept)\\b",
          name: "storage.modifier.$1.c++"
        },
        { include: "#block" }
      ]
    }
  ],
  repository: {
    access: {
      captures: {
        1: { name: "punctuation.separator.variable-access.c" },
        2: { name: "storage.modifier.template.c++" },
        3: { name: "variable.other.dot-access.c" }
      },
      match: "(\\.|\\->)(?:\\s*(template)\\s+)?([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\()"
    },
    block: {
      patterns: [
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.section.block.begin.c" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.section.block.end.c" } },
          name: "meta.block.c",
          patterns: [{ include: "#block_innards" }]
        }
      ]
    },
    block_innards: {
      patterns: [
        { include: "#preprocessor-rule-enabled-block" },
        { include: "#preprocessor-rule-disabled-block" },
        { include: "#preprocessor-rule-other-block" },
        { include: "#sizeof" },
        { include: "#access" },
        { include: "source.c.platform#functions" },
        { include: "#c_function_call" },
        {
          captures: {
            1: { name: "variable.other.c" },
            2: { name: "punctuation.definition.parameters.c" }
          },
          match: "(?x)\n			        (?x)\n			(?:  \n			     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n			     )\n			)\n			(\n				(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n				(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n			)\n			 \\s*(\\()",
          name: "meta.initialization.c"
        },
        { include: "#block" },
        { include: "$base" }
      ]
    },
    c_function_call: {
      captures: {
        1: { name: "punctuation.whitespace.function-call.leading.c" },
        2: { name: "support.function.any-method.c" },
        3: { name: "punctuation.definition.parameters.c" }
      },
      match: "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n			(\\b \n				(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate|(?:::)?new|(?:::)?delete)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n			)\n			 \\s*(\\()",
      name: "meta.function-call.c"
    },
    comments: {
      patterns: [
        {
          captures: { 1: { name: "meta.toc-list.banner.block.c" } },
          match: "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          name: "comment.block.c"
        },
        {
          begin: "/\\*",
          beginCaptures: { 0: { name: "punctuation.definition.comment.begin.c" } },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.c" } },
          name: "comment.block.c"
        },
        { match: "\\*/.*\\n", name: "invalid.illegal.stray-comment-end.c" },
        {
          captures: { 1: { name: "meta.toc-list.banner.line.c" } },
          match: "^// =(\\s*.*?)\\s*=\\s*$\\n?",
          name: "comment.line.banner.c++"
        },
        {
          begin: "(^[ \\t]+)?(?=//)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.c++" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "//",
              beginCaptures: { 0: { name: "punctuation.definition.comment.c++" } },
              end: "\\n",
              name: "comment.line.double-slash.c++",
              patterns: [
                {
                  match: "(?>\\\\\\s*\\n)",
                  name: "punctuation.separator.continuation.c++"
                }
              ]
            }
          ]
        }
      ]
    },
    disabled: {
      begin: "^\\s*#\\s*if(n?def)?\\b.*$",
      end: "^\\s*#\\s*endif\\b",
      patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
    },
    parens: {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.section.parens.begin.c" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.parens.end.c" } },
      name: "meta.parens.c",
      patterns: [{ include: "$base" }]
    },
    "pragma-mark": {
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.pragma.c" },
        3: { name: "meta.toc-list.pragma-mark.c" }
      },
      match: "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))",
      name: "meta.section"
    },
    "preprocessor-rule-disabled": {
      begin: "^\\s*(#(if)\\s+(0)\\b).*",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b)",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b)",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          end: "(?=^\\s*#\\s*endif\\b)",
          patterns: [{ include: "$base" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b)",
          name: "comment.block.preprocessor.if-branch",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        }
      ]
    },
    "preprocessor-rule-disabled-block": {
      begin: "^\\s*(#(if)\\s+(0)\\b).*",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b)",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b)",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          end: "(?=^\\s*#\\s*endif\\b)",
          patterns: [{ include: "#block_innards" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b)",
          name: "comment.block.preprocessor.if-branch.in-block",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        }
      ]
    },
    "preprocessor-rule-enabled": {
      begin: "^\\s*(#(if)\\s+(0*1)\\b)",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b)",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b).*",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          contentName: "comment.block.preprocessor.else-branch",
          end: "(?=^\\s*#\\s*endif\\b)",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        },
        { end: "(?=^\\s*#\\s*(else|endif)\\b)", patterns: [{ include: "$base" }] }
      ]
    },
    "preprocessor-rule-enabled-block": {
      begin: "^\\s*(#(if)\\s+(0*1)\\b)",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b)",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b).*",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          contentName: "comment.block.preprocessor.else-branch.in-block",
          end: "(?=^\\s*#\\s*endif\\b)",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b)",
          patterns: [{ include: "#block_innards" }]
        }
      ]
    },
    "preprocessor-rule-other": {
      begin: "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b)",
      patterns: [{ include: "$base" }]
    },
    "preprocessor-rule-other-block": {
      begin: "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b)",
      patterns: [{ include: "#block_innards" }]
    },
    sizeof: { match: "\\b(sizeof)\\b", name: "keyword.operator.sizeof.c" },
    string_escaped_char: {
      patterns: [
        {
          match: `\\\\(\\\\|[abefnprtv'"?]|[0-3]\\d{0,2}|[4-7]\\d?|x[a-fA-F0-9]{0,2}|u[a-fA-F0-9]{0,4}|U[a-fA-F0-9]{0,8})`,
          name: "constant.character.escape.c"
        },
        { match: "\\\\.", name: "invalid.illegal.unknown-escape.c" }
      ]
    },
    string_placeholder: {
      patterns: [
        {
          match: "(?x)%\n    						(\\d+\\$)?                             # field (argument #)\n    						[#0\\- +']*                           # flags\n    						[,;:_]?                              # separator character (AltiVec)\n    						((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    						(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    						[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    					",
          name: "constant.other.placeholder.c"
        }
      ]
    }
  },
  scopeName: "source.c"
};
var source_c_default = grammar;

// node_modules/@wooorm/starry-night/lang/source.c++.js
var grammar2 = {
  dependencies: ["source.c"],
  extensions: [
    ".asc",
    ".ash",
    ".asy",
    ".c++",
    ".cc",
    ".cp",
    ".cpp",
    ".cppm",
    ".cxx",
    ".edc",
    ".gml",
    ".h++",
    ".hh",
    ".hpp",
    ".hxx",
    ".inl",
    ".ino",
    ".ipp",
    ".ixx",
    ".metal",
    ".re",
    ".tcc",
    ".tpp",
    ".txx"
  ],
  names: [
    "ags",
    "ags-script",
    "asymptote",
    "c++",
    "cpp",
    "edje-data-collection",
    "game-maker-language",
    "metal",
    "swig"
  ],
  patterns: [
    { include: "#special_block" },
    { include: "#strings" },
    {
      captures: {
        1: { name: "keyword.control.c++" },
        2: { name: "keyword.control.c++" }
      },
      match: "\\b(if)\\s+(constexpr)\\b"
    },
    {
      captures: {
        1: { name: "punctuation.separator.scope.c++" },
        2: { name: "storage.modifier.template.c++" }
      },
      match: "(::)\\s*(template)\\b"
    },
    { include: "source.c" },
    { match: "\\b(friend|explicit|virtual)\\b", name: "storage.modifier.$1.c++" },
    { match: "\\b(private|protected|public):", name: "storage.modifier.$1.c++" },
    {
      match: "\\b(catch|operator|try|throw|using)\\b",
      name: "keyword.control.c++"
    },
    {
      match: "\\bdelete\\b(\\s*\\[\\])?|\\bnew\\b(?!])",
      name: "keyword.control.c++"
    },
    {
      match: "\\b(f|m)[A-Z]\\w*\\b",
      name: "variable.other.readwrite.member.c++"
    },
    { match: "\\b(this|nullptr)\\b", name: "variable.language.c++" },
    { match: "\\b(template|concept)\\b\\s*", name: "storage.type.template.c++" },
    {
      match: "\\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\\b\\s*",
      name: "keyword.operator.cast.c++"
    },
    {
      match: "\\b(co_await|co_return|co_yield|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq)\\b",
      name: "keyword.operator.c++"
    },
    {
      match: "\\b(class|wchar_t|char8_t|char16_t|char32_t)\\b",
      name: "storage.type.c++"
    },
    {
      match: "\\b(consteval|constinit|constexpr|export|mutable|typename|thread_local|noexcept|final|override)\\b",
      name: "storage.modifier.c++"
    },
    {
      begin: "(?x)\n    				(?:  ^                                 # begin-of-line\n    				  |  (?: (?<!else|new|=) )             #  or word + space before name\n    				)\n    				((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n    				 \\s*(\\()                           # start bracket or end-of-line\n    			",
      beginCaptures: {
        1: { name: "entity.name.function.c++" },
        2: { name: "punctuation.definition.parameters.begin.c" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.parameters.end.c" } },
      name: "meta.function.destructor.c++",
      patterns: [{ include: "$base" }]
    },
    {
      begin: "(?x)\n    				(?:  ^                                 # begin-of-line\n    				  |  (?: (?<!else|new|=) )             #  or word + space before name\n    				)\n    				((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n    				 \\s*(\\()                           # terminating semi-colon\n    			",
      beginCaptures: {
        1: { name: "entity.name.function.c++" },
        2: { name: "punctuation.definition.parameters.begin.c" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.parameters.end.c" } },
      name: "meta.function.destructor.prototype.c++",
      patterns: [{ include: "$base" }]
    }
  ],
  repository: {
    angle_brackets: {
      begin: "<",
      end: ">",
      name: "meta.angle-brackets.c++",
      patterns: [{ include: "#angle_brackets" }, { include: "$base" }]
    },
    block: {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.section.block.begin.c" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.section.block.end.c" } },
      name: "meta.block.c++",
      patterns: [
        {
          captures: {
            1: { name: "support.function.any-method.c" },
            2: { name: "punctuation.definition.parameters.c" }
          },
          match: "(?x)\n    				(\n    					(?!while|for|do|if|else|switch|catch|return)(?: \\b[A-Za-z_][A-Za-z0-9_]*+\\b | :: )*+                  # actual name\n    				)\n    				 \\s*(\\()",
          name: "meta.function-call.c"
        },
        { include: "$base" }
      ]
    },
    constructor: {
      patterns: [
        {
          begin: "(?x)\n    				(?:  ^\\s*)                             # begin-of-line\n    				((?!while|for|do|if|else|switch|catch)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n    				 \\s*(\\()                            # start bracket or end-of-line\n    			",
          beginCaptures: {
            1: { name: "entity.name.function.c++" },
            2: { name: "punctuation.definition.parameters.begin.c" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.parameters.end.c" } },
          name: "meta.function.constructor.c++",
          patterns: [{ include: "$base" }]
        },
        {
          begin: "(?x)\n    				(:)                            # begin-of-line\n    				((?=\\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    				 \\s*(\\()))                      # start bracket or end-of-line\n    			",
          beginCaptures: { 1: { name: "punctuation.definition.parameters.c" } },
          end: "(?=\\{)",
          name: "meta.function.constructor.initializer-list.c++",
          patterns: [{ include: "$base" }]
        }
      ]
    },
    special_block: {
      patterns: [
        {
          begin: "\\b(namespace)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+",
          beginCaptures: {
            1: { name: "storage.type.c++" },
            2: { name: "entity.name.type.c++" }
          },
          captures: { 1: { name: "keyword.control.namespace.$2" } },
          end: "(?<=\\})|(?=(;|,|\\(|\\)|>|\\[|\\]|=))",
          name: "meta.namespace-block${2:+.$2}.c++",
          patterns: [
            {
              begin: "\\{",
              beginCaptures: { 0: { name: "punctuation.definition.scope.c++" } },
              end: "\\}",
              endCaptures: { 0: { name: "punctuation.definition.scope.c++" } },
              patterns: [
                { include: "#special_block" },
                { include: "#constructor" },
                { include: "$base" }
              ]
            },
            { include: "$base" }
          ]
        },
        {
          begin: "\\b(class|struct)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+(\\s*:\\s*(public|protected|private)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)((\\s*,\\s*(public|protected|private)\\b\\s*[_A-Za-z][_A-Za-z0-9]*\\b)*))?",
          beginCaptures: {
            1: { name: "storage.type.c++" },
            2: { name: "entity.name.type.c++" },
            4: { name: "storage.type.modifier.c++" },
            5: { name: "entity.name.type.inherited.c++" },
            6: {
              patterns: [
                {
                  match: "\\b(public|protected|private)\\b",
                  name: "storage.type.modifier.c++"
                },
                {
                  match: "[_A-Za-z][_A-Za-z0-9]*",
                  name: "entity.name.type.inherited.c++"
                }
              ]
            }
          },
          end: "(?<=\\})|(?=(;|\\(|\\)|>|\\[|\\]|=))",
          name: "meta.class-struct-block.c++",
          patterns: [
            { include: "#angle_brackets" },
            {
              begin: "\\{",
              beginCaptures: { 0: { name: "punctuation.section.block.begin.c++" } },
              end: "(\\})(\\s*\\n)?",
              endCaptures: {
                1: { name: "punctuation.definition.invalid.c++" },
                2: { name: "invalid.illegal.you-forgot-semicolon.c++" }
              },
              patterns: [
                { include: "#special_block" },
                { include: "#constructor" },
                { include: "$base" }
              ]
            },
            { include: "$base" }
          ]
        },
        {
          begin: '\\b(extern)(?=\\s*")',
          beginCaptures: { 1: { name: "storage.modifier.c++" } },
          end: "(?<=\\})|(?=\\w)",
          name: "meta.extern-block.c++",
          patterns: [
            {
              begin: "\\{",
              beginCaptures: { 0: { name: "punctuation.section.block.begin.c" } },
              end: "\\}",
              endCaptures: { 0: { name: "punctuation.section.block.end.c" } },
              patterns: [{ include: "#special_block" }, { include: "$base" }]
            },
            { include: "$base" }
          ]
        }
      ]
    },
    strings: {
      patterns: [
        {
          begin: '(u|u8|U|L)?"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.c++" },
            1: { name: "meta.encoding.c++" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.c++" } },
          name: "string.quoted.double.c++",
          patterns: [
            {
              match: "\\\\u[0-9A-Fa-f]{4}|\\\\U[0-9A-Fa-f]{8}",
              name: "constant.character.escape.c++"
            },
            {
              match: `\\\\['"?\\\\abfnrtv]`,
              name: "constant.character.escape.c++"
            },
            { match: "\\\\[0-7]{1,3}", name: "constant.character.escape.c++" },
            { match: "\\\\x[0-9A-Fa-f]+", name: "constant.character.escape.c++" }
          ]
        },
        {
          begin: '(u|u8|U|L)?R"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.c++" },
            1: { name: "meta.encoding.c++" },
            3: { name: "invalid.illegal.delimiter-too-long.c++" }
          },
          end: '\\)\\2(\\3)"',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.c++" },
            1: { name: "invalid.illegal.delimiter-too-long.c++" }
          },
          name: "string.quoted.double.raw.c++"
        }
      ]
    }
  },
  scopeName: "source.c++"
};
var source_c_default2 = grammar2;

// node_modules/@wooorm/starry-night/lang/source.c.platform.js
var grammar3 = {
  extensions: [],
  names: [],
  patterns: [
    {
      match: "\\bkAudioUnitSubType_3DMixer\\b",
      name: "invalid.deprecated.10.10.support.constant.c"
    },
    {
      match: "\\bkCF(?:CalendarUnitWeek|Gregorian(?:AllUnits|Units(?:Days|Hours|M(?:inutes|onths)|Seconds|Years)))\\b",
      name: "invalid.deprecated.10.10.support.constant.cf.c"
    },
    {
      match: "\\bLS(?:ApplicationParameters|LaunchFSRefSpec)\\b",
      name: "invalid.deprecated.10.10.support.type.c"
    },
    {
      match: "\\bCFGregorian(?:Date|Units)\\b",
      name: "invalid.deprecated.10.10.support.type.cf.c"
    },
    {
      match: "\\bkLSItem(?:ContentType|Display(?:Kind|Name)|Extension(?:IsHidden)?|File(?:Creator|Type)|IsInvisible|QuarantineProperties|RoleHandlerDisplayName)\\b",
      name: "invalid.deprecated.10.10.support.variable.c"
    },
    {
      match: "\\bk(?:AudioUnitProperty_(?:3DMixer(?:AttenuationCurve|Distance(?:Atten|Params)|RenderingFlags)|D(?:istanceAttenuationData|opplerShift)|ReverbPreset)|CT(?:Adobe(?:CNS1CharacterCollection|GB1CharacterCollection|Japan(?:1CharacterCollection|2CharacterCollection)|Korea1CharacterCollection)|CenterTextAlignment|Font(?:A(?:lertHeaderFontType|pplicationFontType)|ControlContentFontType|DefaultOrientation|EmphasizedSystem(?:DetailFontType|FontType)|HorizontalOrientation|LabelFontType|M(?:e(?:nu(?:Item(?:CmdKeyFontType|FontType|MarkFontType)|TitleFontType)|ssageFontType)|ini(?:EmphasizedSystemFontType|SystemFontType))|NoFontType|P(?:aletteFontType|ushButtonFontType)|S(?:mall(?:EmphasizedSystemFontType|SystemFontType|ToolbarFontType)|ystem(?:DetailFontType|FontType))|Tool(?:TipFontType|barFontType)|U(?:serF(?:ixedPitchFontType|ontType)|tilityWindowTitleFontType)|V(?:erticalOrientation|iewsFontType)|WindowTitleFontType)|IdentityMappingCharacterCollection|JustifiedTextAlignment|LeftTextAlignment|NaturalTextAlignment|RightTextAlignment)|LS(?:HandlerOptions(?:Default|IgnoreCreator)|ItemInfo(?:App(?:IsScriptable|Prefers(?:Classic|Native))|ExtensionIsHidden|Is(?:A(?:liasFile|pplication)|C(?:lassicApp|ontainer)|Invisible|NativeApp|P(?:ackage|lainFile)|Symlink|Volume))|Launch(?:InClassic|StartClassic)|Request(?:A(?:ll(?:Flags|Info)|ppTypeFlags)|BasicFlagsOnly|Extension(?:FlagsOnly)?|IconAndKind|TypeCreator)))\\b",
      name: "invalid.deprecated.10.11.support.constant.c"
    },
    {
      match: "\\b(?:AUDistanceAttenuationData|LSItemInfoRecord)\\b",
      name: "invalid.deprecated.10.11.support.type.c"
    },
    {
      match: "\\bk(?:C(?:F(?:FTPResource(?:Group|Link|Mod(?:Date|e)|Name|Owner|Size|Type)|Stream(?:NetworkServiceTypeVoIP|Property(?:FTP(?:AttemptPersistentConnection|F(?:etchResourceInfo|ileTransferOffset)|P(?:assword|roxy(?:Host|P(?:assword|ort)|User)?)|ResourceSize|Use(?:PassiveMode|rName))|HTTP(?:AttemptPersistentConnection|Final(?:Request|URL)|Proxy(?:Host|Port)?|Re(?:questBytesWrittenCount|sponseHeader)|S(?:Proxy(?:Host|Port)|houldAutoredirect)))))|GImagePropertyExifSubsecTimeOrginal|TCharacterShapeAttributeName)|IOSurfaceIsGlobal|LSSharedFileList(?:Favorite(?:Items|Volumes)|Item(?:BeforeFirst|Hidden|Last)|LoginItemHidden|Recent(?:ApplicationItems|DocumentItems|ItemsMaxAmount|ServerItems)|SessionLoginItems|Volumes(?:ComputerVisible|NetworkVisible))|SecUseNoAuthenticationUI)\\b",
      name: "invalid.deprecated.10.11.support.variable.c"
    },
    {
      match: "\\bkLSLaunch(?:HasUntrustedContents|InhibitBGOnly|NoParams)\\b",
      name: "invalid.deprecated.10.12.support.constant.c"
    },
    {
      match: "\\bOSSpinLock\\b",
      name: "invalid.deprecated.10.12.support.type.c"
    },
    {
      match: "\\bkSC(?:EntNetPPTP|NetworkInterfaceTypePPTP|ValNetInterfaceSubTypePPTP)\\b",
      name: "invalid.deprecated.10.12.support.variable.c"
    },
    {
      match: "\\bkCF(?:StreamSocketSecurityLevelSSLv(?:2|3)|URL(?:CustomIconKey|EffectiveIconKey|LabelColorKey))\\b",
      name: "invalid.deprecated.10.12.support.variable.cf.c"
    },
    {
      match: "\\bk(?:C(?:FNetDiagnostic(?:Connection(?:Down|Indeterminate|Up)|Err|NoErr)|TFontManagerAutoActivationPromptUser)|SecAccessControlTouchID(?:Any|CurrentSet))\\b",
      name: "invalid.deprecated.10.13.support.constant.c"
    },
    {
      match: "\\bCFNetDiagnosticStatus\\b",
      name: "invalid.deprecated.10.13.support.type.c"
    },
    {
      match: "\\bkS(?:CPropNetInterfaceSupportsModemOnHold|SLSessionConfig_(?:3DES_fallback|RC4_fallback|TLSv1_(?:3DES_fallback|RC4_fallback)|default)|ecTrustCertificateTransparencyWhiteList)\\b",
      name: "invalid.deprecated.10.13.support.variable.c"
    },
    {
      match: "\\bk(?:CVOpenGL(?:Buffer(?:Height|InternalFormat|MaximumMipmapLevel|PoolM(?:aximumBufferAgeKey|inimumBufferCountKey)|Target|Width)|TextureCacheChromaSamplingMode(?:Automatic|BestPerformance|HighestQuality|Key))|SecAttrAccessibleAlways(?:ThisDeviceOnly)?)\\b",
      name: "invalid.deprecated.10.14.support.variable.c"
    },
    {
      match: "\\bk(?:DTLSProtocol1(?:2)?|S(?:SL(?:Aborted|C(?:l(?:ient(?:Cert(?:None|Re(?:jected|quested)|Sent)|Side)|osed)|onnected)|DatagramType|Handshake|Idle|Protocol(?:2|3(?:Only)?|All|Unknown)|S(?:e(?:rverSide|ssionOption(?:Allow(?:Renegotiation|ServerIdentityChange)|BreakOn(?:C(?:ertRequested|lient(?:Auth|Hello))|ServerAuth)|EnableSessionTickets|Fal(?:lback|seStart)|SendOneByteRecord))|treamType))|ecDataAccessEvent(?:Mask)?)|TLSProtocol(?:1(?:1|2|3|Only)?|MaxSupported))\\b",
      name: "invalid.deprecated.10.15.support.constant.c"
    },
    {
      match: "\\bk(?:MIDIPropertyNameConfiguration|S(?:CPropNetPPP(?:AuthEAPPlugins|Plugins)|SLSessionConfig_(?:ATSv1(?:_noPFS)?|TLSv1_fallback|anonymous|legacy(?:_DHE)?|standard)))\\b",
      name: "invalid.deprecated.10.15.support.variable.c"
    },
    {
      match: "\\bkCGColorSpace(?:DisplayP3_PQ_EOTF|ITUR_2020_PQ_EOTF)\\b",
      name: "invalid.deprecated.10.16.support.variable.quartz.c"
    },
    {
      match: "\\bkMIDIProperty(?:FactoryPatchNameFile|UserPatchNameFile)\\b",
      name: "invalid.deprecated.10.2.support.variable.c"
    },
    {
      match: "\\bkCFNetServiceFlagIsRegistrationDomain\\b",
      name: "invalid.deprecated.10.4.support.constant.c"
    },
    {
      match: "\\bk(?:MDItemFS(?:Exists|Is(?:Readable|Writeable))|S(?:CPropUsersConsoleUser(?:GID|Name|UID)|KLanguageTypes))\\b",
      name: "invalid.deprecated.10.4.support.variable.c"
    },
    {
      match: "\\bkMDItemSupportFileType\\b",
      name: "invalid.deprecated.10.5.support.variable.c"
    },
    {
      match: "\\b(?:CM(?:2(?:Header|ProfileHandle)|4Header|A(?:daptationMatrixType|ppleProfileHeader)|B(?:itmap(?:C(?:allBack(?:ProcPtr|UPP)|olorSpace))?|ufferLocation)|C(?:MY(?:Color|KColor)|hromaticAdaptation|o(?:lor|ncat(?:CallBack(?:ProcPtr|UPP)|ProfileSet))|urveType)|D(?:at(?:aType|eTime(?:Type)?)|evice(?:I(?:D|nfoPtr)|Profile(?:ArrayPtr|I(?:D|nfo)|Scope)|State)|isplayIDType)|F(?:ixedXY(?:Color|ZColor)|loatBitmap)|GrayColor|H(?:LSColor|SVColor|andleLocation)|I(?:ntentCRDVMSize|terateDevice(?:InfoProcPtr|ProfileProcPtr))|L(?:ab(?:Color|ToLabProcPtr)|u(?:t(?:16Type|8Type)|vColor))|M(?:I(?:nfo|terate(?:ProcPtr|UPP))|akeAndModel(?:Type)?|easurementType|ulti(?:Funct(?:CLUTType|LutB2AType)|LocalizedUniCode(?:EntryRec|Type)|channel(?:5Color|6Color|7Color|8Color)))|Na(?:medColor(?:2(?:EntryType|Type)|Type)?|tiveDisplayInfo(?:Type)?)|P(?:S2CRDVMSizeType|a(?:rametricCurveType|thLocation)|rof(?:Loc|ile(?:Iterate(?:Data|ProcPtr|UPP)|Location|MD5(?:Ptr)?|Ref|SequenceDescType)))|RGBColor|S(?:15Fixed16ArrayType|creening(?:ChannelRec|Type)|ignatureType)|T(?:ag(?:ElemTable|Record)|ext(?:DescriptionType|Type))|U(?:16Fixed16ArrayType|Int(?:16ArrayType|32ArrayType|64ArrayType|8ArrayType)|crBgType|nicodeTextType)|Vi(?:deoCardGamma(?:Formula|T(?:able|ype))?|ewingConditionsType)|WorldRef|XYZType|YxyColor)|NCM(?:ConcatProfileS(?:et|pec)|DeviceProfileInfo))\\b",
      name: "invalid.deprecated.10.6.support.type.c"
    },
    {
      match: "\\bkC(?:FStream(?:PropertySSLPeerCertificates|SSLAllows(?:AnyRoot|Expired(?:Certificates|Roots)))|VImageBufferTransferFunction_(?:EBU_3213|SMPTE_C))\\b",
      name: "invalid.deprecated.10.6.support.variable.c"
    },
    {
      match: "\\b(?:AudioFileFDFTable(?:Extended)?|C(?:E_(?:A(?:ccessDescription|uthority(?:InfoAccess|KeyID))|BasicConstraints|C(?:RLDist(?:PointsSyntax|ributionPoint)|ertPolicies|rl(?:Dist(?:ReasonFlags|ributionPointNameType)|Reason))|D(?:ata(?:AndType)?|istributionPointName)|General(?:Name(?:s)?|Subtree(?:s)?)|I(?:nhibitAnyPolicy|ssuingDistributionPoint)|KeyUsage|N(?:ame(?:Constraints|RegistrationAuthorities)|etscapeCertType)|OtherName|Policy(?:Constraints|Information|Mapping(?:s)?|QualifierInfo)|QC_Statement(?:s)?|S(?:emanticsInformation|ubjectKeyID))|SSM_(?:A(?:C(?:CESS_CREDENTIALS(?:_PTR)?|L_(?:E(?:DIT(?:_PTR)?|NTRY_(?:IN(?:FO(?:_PTR)?|PUT(?:_PTR)?)|PROTOTYPE(?:_PTR)?))|OWNER_PROTOTYPE(?:_PTR)?|SUBJECT_CALLBACK|VALIDITY_PERIOD(?:_PTR)?))|PI_M(?:EMORY_FUNCS(?:_PTR)?|oduleEventHandler)|UTHORIZATIONGROUP(?:_PTR)?)|BASE_CERTS(?:_PTR)?|C(?:ALLBACK|ERT(?:GROUP(?:_PTR)?|_(?:BUNDLE(?:_(?:HEADER(?:_PTR)?|PTR))?|PAIR(?:_PTR)?))|HALLENGE_CALLBACK|ONTEXT(?:_(?:ATTRIBUTE(?:_PTR)?|PTR))?|R(?:L(?:GROUP(?:_PTR)?|_PAIR(?:_PTR)?)|YPTO_DATA(?:_PTR)?)|SP_OPERATIONAL_STATISTICS(?:_PTR)?)|D(?:AT(?:A_PTR|E(?:_PTR)?)|B(?:INFO(?:_PTR)?|_(?:ATTRIBUTE_(?:DATA(?:_PTR)?|INFO(?:_PTR)?)|INDEX_INFO(?:_PTR)?|PARSING_MODULE_INFO(?:_PTR)?|RECORD_(?:ATTRIBUTE_(?:DATA(?:_PTR)?|INFO(?:_PTR)?)|INDEX_INFO(?:_PTR)?)|SCHEMA_(?:ATTRIBUTE_INFO(?:_PTR)?|INDEX_INFO(?:_PTR)?)|UNIQUE_RECORD(?:_PTR)?))|L_DB_(?:HANDLE(?:_PTR)?|LIST(?:_PTR)?))|E(?:NCODED_C(?:ERT(?:_PTR)?|RL(?:_PTR)?)|VIDENCE(?:_PTR)?)|F(?:IELD(?:GROUP(?:_PTR)?|_PTR)?|UNC_NAME_ADDR(?:_PTR)?)|GUID(?:_PTR)?|K(?:E(?:A_DERIVE_PARAMS(?:_PTR)?|Y(?:HEADER(?:_PTR)?|_(?:PTR|SIZE(?:_PTR)?))?)|R(?:SUBSERVICE(?:_PTR)?|_(?:NAME|P(?:OLICY_(?:INFO(?:_PTR)?|LIST_ITEM(?:_PTR)?)|ROFILE(?:_PTR)?)|WRAPPEDPRODUCT_INFO(?:_PTR)?)))|LIST(?:_(?:ELEMENT|PTR))?|M(?:ANAGER_(?:EVENT_NOTIFICATION(?:_PTR)?|REGISTRATION_INFO(?:_PTR)?)|EMORY_FUNCS(?:_PTR)?|ODULE_FUNCS(?:_PTR)?)|N(?:AME_LIST(?:_PTR)?|ET_ADDRESS(?:_PTR)?)|OID_PTR|P(?:ARSED_C(?:ERT(?:_PTR)?|RL(?:_PTR)?)|KCS(?:1_OAEP_PARAMS(?:_PTR)?|5_PBKDF(?:1_PARAMS(?:_PTR)?|2_PARAMS(?:_PTR)?)))|QUERY(?:_(?:LIMITS(?:_PTR)?|PTR|SIZE_DATA(?:_PTR)?))?|R(?:ANGE(?:_PTR)?|ESOURCE_CONTROL_CONTEXT(?:_PTR)?)|S(?:AMPLE(?:GROUP(?:_PTR)?|_PTR)?|ELECTION_PREDICATE(?:_PTR)?|PI_(?:AC_FUNCS(?:_PTR)?|C(?:L_FUNCS(?:_PTR)?|SP_FUNCS(?:_PTR)?)|DL_FUNCS(?:_PTR)?|KR_FUNCS(?:_PTR)?|ModuleEventHandler|TP_FUNCS(?:_PTR)?)|TATE_FUNCS(?:_PTR)?|UBSERVICE_UID(?:_PTR)?)|T(?:P_(?:A(?:PPLE_EVIDENCE_INFO|UTHORITY_ID(?:_PTR)?)|C(?:ALLERAUTH_CONTEXT(?:_PTR)?|ERT(?:CHANGE_(?:INPUT(?:_PTR)?|OUTPUT(?:_PTR)?)|ISSUE_(?:INPUT(?:_PTR)?|OUTPUT(?:_PTR)?)|NOTARIZE_(?:INPUT(?:_PTR)?|OUTPUT(?:_PTR)?)|RECLAIM_(?:INPUT(?:_PTR)?|OUTPUT(?:_PTR)?)|VERIFY_(?:INPUT(?:_PTR)?|OUTPUT(?:_PTR)?))|ONFIRM_RESPONSE(?:_PTR)?|RLISSUE_(?:INPUT(?:_PTR)?|OUTPUT(?:_PTR)?))|POLICYINFO(?:_PTR)?|RE(?:QUEST_SET(?:_PTR)?|SULT_SET(?:_PTR)?)|VERIF(?:ICATION_RESULTS_CALLBACK|Y_CONTEXT(?:_(?:PTR|RESULT(?:_PTR)?))?))|UPLE(?:GROUP(?:_PTR)?|_PTR)?)|UPCALLS(?:_(?:CALLOC|FREE|MALLOC|PTR|REALLOC))?|VERSION(?:_PTR)?|WRAP_KEY(?:_PTR)?|X509(?:EXT_(?:BASICCONSTRAINTS(?:_PTR)?|P(?:AIR(?:_PTR)?|OLICY(?:INFO(?:_PTR)?|QUALIFIER(?:INFO(?:_PTR)?|S(?:_PTR)?)))|TAGandVALUE(?:_PTR)?)|_(?:ALGORITHM_IDENTIFIER_PTR|EXTENSION(?:S(?:_PTR)?|_PTR)?|NAME(?:_PTR)?|R(?:DN(?:_PTR)?|EVOKED_CERT_(?:ENTRY(?:_PTR)?|LIST(?:_PTR)?))|S(?:IGN(?:ATURE(?:_PTR)?|ED_C(?:ERTIFICATE(?:_PTR)?|RL(?:_PTR)?))|UBJECT_PUBLIC_KEY_INFO_PTR)|T(?:BS_CERT(?:IFICATE(?:_PTR)?|LIST(?:_PTR)?)|IME(?:_PTR)?|YPE_VALUE_PAIR(?:_PTR)?)|VALIDITY(?:_PTR)?))))|MDS_(?:DB_HANDLE|FUNCS(?:_PTR)?)|cssm_(?:ac(?:cess_credentials|l_(?:e(?:dit|ntry_(?:in(?:fo|put)|prototype))|owner_prototype|validity_period))|base_certs|c(?:ert(?:_(?:bundle(?:_header)?|pair)|group)|ontext(?:_attribute)?|r(?:l(?:_pair|group)|ypto_data))|d(?:b(?:_(?:attribute_(?:data|info)|index_info|parsing_module_info|record_(?:attribute_(?:data|info)|index_info)|schema_attribute_info|unique_record)|info)|l_db_list)|e(?:ncoded_c(?:ert|rl)|vidence)|field(?:group)?|k(?:e(?:a_derive_params|y(?:header)?)|r(?:_(?:p(?:olicy_(?:info|list_item)|rofile)|wrappedproductinfo)|subservice))|list_element|m(?:anager_(?:event_notification|registration_info)|odule_funcs)|net_address|pkcs(?:1_oaep_params|5_pbkdf(?:1_params|2_params))|query(?:_limits)?|resource_control_context|s(?:ample(?:group)?|election_predicate|pi_(?:ac_funcs|c(?:l_funcs|sp_funcs)|dl_funcs|kr_funcs|tp_funcs)|tate_funcs|ubservice_uid)|t(?:p_(?:authority_id|c(?:allerauth_context|ert(?:change_(?:input|output)|issue_(?:input|output)|notarize_(?:input|output)|reclaim_(?:input|output)|verify_(?:input|output))|onfirm_response|rlissue_(?:input|output))|policyinfo|request_set|verify_context(?:_result)?)|uplegroup)|upcalls|x509(?:_(?:extension(?:TagAndValue|s)?|name|r(?:dn|evoked_cert_(?:entry|list))|sign(?:ature|ed_c(?:ertificate|rl))|t(?:bs_cert(?:ificate|list)|ime|ype_value_pair))|ext_(?:basicConstraints|p(?:air|olicy(?:Info|Qualifier(?:Info|s))))))|mds_funcs|x509_validity)\\b",
      name: "invalid.deprecated.10.7.support.type.c"
    },
    {
      match: "\\b(?:CSSMOID_(?:A(?:D(?:C_CERT_POLICY|_(?:CA_(?:ISSUERS|REPOSITORY)|OCSP|TIME_STAMPING))|NSI_(?:DH_(?:EPHEM(?:_SHA1)?|HYBRID(?:1(?:_SHA1)?|2(?:_SHA1)?|_ONEFLOW)|ONE_FLOW(?:_SHA1)?|PUB_NUMBER|STATIC(?:_SHA1)?)|MQV(?:1(?:_SHA1)?|2(?:_SHA1)?))|PPLE(?:ID_(?:CERT_POLICY|SHARING_CERT_POLICY)|_(?:ASC|CERT_POLICY|E(?:CDSA|KU_(?:CODE_SIGNING(?:_DEV)?|ICHAT_(?:ENCRYPTION|SIGNING)|P(?:ASSBOOK_SIGNING|ROFILE_SIGNING)|QA_PROFILE_SIGNING|RESOURCE_SIGNING|SYSTEM_IDENTITY)|XTENSION(?:_(?:A(?:AI_INTERMEDIATE|DC_(?:APPLE_SIGNING|DEV_SIGNING)|PPLE(?:ID_(?:INTERMEDIATE|SHARING)|_SIGNING))|CODE_SIGNING|DEVELOPER_AUTHENTICATION|ESCROW_SERVICE|I(?:NTERMEDIATE_MARKER|TMS_INTERMEDIATE)|MACAPPSTORE_RECEIPT|P(?:ASSBOOK_SIGNING|ROVISIONING_PROFILE_SIGNING)|S(?:ERVER_AUTHENTICATION|YSINT2_INTERMEDIATE)|WWDR_INTERMEDIATE))?)|FEE(?:D(?:EXP)?|_(?:MD5|SHA1))?|ISIGN|TP_(?:APPLEID_SHARING|C(?:ODE_SIGN(?:ING)?|SR_GEN)|E(?:AP|SCROW_SERVICE)|I(?:CHAT|P_SEC)|LOCAL_CERT_GEN|M(?:ACAPPSTORE_RECEIPT|OBILE_STORE)|P(?:A(?:CKAGE_SIGNING|SSBOOK_SIGNING)|CS_ESCROW_SERVICE|KINIT_(?:CLIENT|SERVER)|RO(?:FILE_SIGNING|VISIONING_PROFILE_SIGNING))|QA_PROFILE_SIGNING|RE(?:SOURCE_SIGN|VOCATION(?:_(?:CRL|OCSP))?)|S(?:MIME|SL|W_UPDATE_SIGNING)|T(?:EST_MOBILE_STORE|IMESTAMPING))|X509_BASIC))|liasedEntryName|uthority(?:InfoAccess|KeyIdentifier|RevocationList))|B(?:asicConstraints|iometricInfo|usinessCategory)|C(?:ACertificate|SSMKeyStruct|ert(?:Issuer|i(?:com(?:EllCurve)?|ficate(?:Policies|RevocationList)))|hallengePassword|lientAuth|o(?:llective(?:FacsimileTelephoneNumber|InternationalISDNNumber|Organization(?:Name|alUnitName)|P(?:hysicalDeliveryOfficeName|ost(?:OfficeBox|al(?:Address|Code)))|St(?:ateProvinceName|reetAddress)|Tele(?:phoneNumber|x(?:Number|TerminalIdentifier)))|mmonName|ntentType|unt(?:erSignature|ryName))|r(?:l(?:DistributionPoints|Number|Reason)|ossCertificatePair))|D(?:ES_CBC|H|NQualifier|OTMAC_CERT(?:_(?:E(?:MAIL_(?:ENCRYPT|SIGN)|XTENSION)|IDENTITY|POLICY|REQ(?:_(?:ARCHIVE_(?:FETCH|LIST|REMOVE|STORE)|EMAIL_(?:ENCRYPT|SIGN)|IDENTITY|SHARED_SERVICES|VALUE_(?:ASYNC|HOSTNAME|IS_PENDING|PASSWORD|RENEW|USERNAME)))?))?|SA(?:_(?:CMS|JDK))?|e(?:ltaCrlIndicator|s(?:cription|tinationIndicator))|istinguishedName|omainComponent)|E(?:CDSA_WithS(?:HA(?:1|2(?:24|56)|384|512)|pecified)|KU_IPSec|TSI_QCS_QC_(?:COMPLIANCE|LIMIT_VALUE|RETENTION|SSCD)|mail(?:Address|Protection)|nhancedSearchGuide|xtended(?:CertificateAttributes|KeyUsage(?:Any)?|UseCodeSigning))|FacsimileTelephoneNumber|G(?:enerationQualifier|ivenName)|Ho(?:ldInstructionCode|useIdentifier)|I(?:n(?:hibitAnyPolicy|itials|ternationalISDNNumber|validityDate)|ssu(?:erAltName|ingDistributionPoint(?:s)?))|K(?:ERBv5_PKINIT_(?:AUTH_DATA|DH_KEY_DATA|KP_(?:CLIENT_AUTH|KDC)|RKEY_DATA)|eyUsage|nowledgeInformation)|LocalityName|M(?:ACAPPSTORE_(?:CERT_POLICY|RECEIPT_CERT_POLICY)|D(?:2(?:WithRSA)?|4(?:WithRSA)?|5(?:WithRSA)?)|OBILE_STORE_SIGNING_POLICY|e(?:mber|ssageDigest)|icrosoftSGC)|N(?:ame(?:Constraints)?|etscape(?:Cert(?:Sequence|Type)|SGC))|O(?:AEP_(?:ID_PSPECIFIED|MGF1)|CSPSigning|ID_QCS_SYNTAX_V(?:1|2)|bjectClass|rganization(?:Name|alUnitName)|wner)|P(?:DA_(?:COUNTRY_(?:CITIZEN|RESIDENCE)|DATE_OF_BIRTH|GENDER|PLACE_OF_BIRTH)|K(?:CS(?:12_(?:c(?:ertBag|rlBag)|keyBag|pbe(?:WithSHAAnd(?:128BitRC(?:2CBC|4)|2Key3DESCBC|3Key3DESCBC|40BitRC4)|withSHAAnd40BitRC2CBC)|s(?:afeContentsBag|ecretBag|hroudedKeyBag))|3|5_(?:D(?:ES_EDE3_CBC|IGEST_ALG)|ENCRYPT_ALG|HMAC_SHA1|PB(?:ES2|KDF2|MAC1)|RC(?:2_CBC|5_CBC)|pbeWith(?:MD(?:2And(?:DES|RC2)|5And(?:DES|RC2))|SHA1And(?:DES|RC2)))|7_(?:D(?:ata(?:WithAttributes)?|igestedData)|En(?:crypted(?:Data|PrivateKeyInfo)|velopedData)|Signed(?:AndEnvelopedData|Data))|9_(?:C(?:ertTypes|rlTypes)|FriendlyName|Id_Ct_TSTInfo|LocalKeyId|SdsiCertificate|TimeStampToken|X509C(?:ertificate|rl)))|IX_OCSP(?:_(?:ARCHIVE_CUTOFF|BASIC|CRL|NO(?:CHECK|NCE)|RESPONSE|SERVICE_LOCATOR))?)|hysicalDeliveryOfficeName|o(?:licy(?:Constraints|Mappings)|st(?:OfficeBox|al(?:Address|Code)))|r(?:e(?:ferredDeliveryMethod|sentationAddress)|ivateKeyUsagePeriod|otocolInformation))|Q(?:C_Statements|T_(?:CPS|UNOTICE))|R(?:SA(?:WithOAEP)?|egisteredAddress|oleOccupant)|S(?:HA(?:1(?:With(?:DSA(?:_(?:CMS|JDK))?|RSA(?:_OIW)?))?|2(?:24(?:WithRSA)?|56(?:WithRSA)?)|384(?:WithRSA)?|512(?:WithRSA)?)|e(?:archGuide|eAlso|r(?:ialNumber|verAuth))|igningTime|t(?:ateProvinceName|reetAddress)|u(?:bject(?:AltName|DirectoryAttributes|EmailAddress|InfoAccess|KeyIdentifier|Picture|SignatureBitmap)|pportedApplicationContext|rname))|T(?:EST_MOBILE_STORE_SIGNING_POLICY|ele(?:phoneNumber|x(?:Number|TerminalIdentifier))|i(?:meStamping|tle))|U(?:n(?:ique(?:Identifier|Member)|structured(?:Address|Name))|se(?:Exemptions|r(?:Certificate|ID|Password)))|X(?:509V(?:1(?:C(?:RL(?:Issuer(?:Name(?:CStruct|LDAP)|Struct)|N(?:extUpdate|umberOfRevokedCertEntries)|Revoked(?:Certificates(?:CStruct|Struct)|Entry(?:CStruct|RevocationDate|S(?:erialNumber|truct)))|ThisUpdate)|ertificate(?:IssuerUniqueId|SubjectUniqueId))|IssuerName(?:CStruct|LDAP|Std)?|S(?:erialNumber|ignature(?:Algorithm(?:Parameters|TBS)?|CStruct|Struct)?|ubject(?:Name(?:CStruct|LDAP|Std)?|PublicKey(?:Algorithm(?:Parameters)?|CStruct)?))|V(?:alidityNot(?:After|Before)|ersion))|2CRL(?:AllExtensions(?:CStruct|Struct)|Extension(?:Critical|Id|Type)|NumberOfExtensions|RevokedEntry(?:AllExtensions(?:CStruct|Struct)|Extension(?:Critical|Id|Type|Value)|NumberOfExtensions|SingleExtension(?:CStruct|Struct))|Si(?:gnedCrl(?:CStruct|Struct)|ngleExtension(?:CStruct|Struct))|TbsCertList(?:CStruct|Struct)|Version)|3(?:Certificate(?:CStruct|Extension(?:C(?:Struct|ritical)|Id|Struct|Type|Value|s(?:CStruct|Struct))|NumberOfExtensions)?|SignedCertificate(?:CStruct)?))|9_62(?:_(?:C_TwoCurve|EllCurve|FieldType|P(?:rimeCurve|ubKeyType)|SigType))?|_121Address)|ecPublicKey|sec(?:p(?:1(?:12r(?:1|2)|28r(?:1|2)|60(?:k1|r(?:1|2))|92(?:k1|r1))|2(?:24(?:k1|r1)|56(?:k1|r1))|384r1|521r1)|t(?:1(?:13r(?:1|2)|31r(?:1|2)|63(?:k1|r(?:1|2))|93r(?:1|2))|2(?:3(?:3(?:k1|r1)|9k1)|83(?:k1|r1))|409(?:k1|r1)|571(?:k1|r1))))|k(?:MDItemLabel(?:I(?:D|con)|Kind|UUID)|SCPropNetSMBNetBIOSScope))\\b",
      name: "invalid.deprecated.10.7.support.variable.c"
    },
    {
      match: "\\b(?:false32b|gestaltSystemVersion(?:BugFix|M(?:ajor|inor))?|kCT(?:FontTableOptionExcludeSynthetic|ParagraphStyleSpecifierLineSpacing)|true32b)\\b",
      name: "invalid.deprecated.10.8.support.constant.c"
    },
    {
      match: "\\bWSMethodInvocation(?:CallBackProcPtr|DeserializationProcPtr|SerializationProcPtr)\\b",
      name: "invalid.deprecated.10.8.support.type.c"
    },
    {
      match: "\\b(?:k(?:CTTypesetterOptionDisableBidiProcessing|FSOperation(?:Bytes(?:CompleteKey|RemainingKey)|Objects(?:CompleteKey|RemainingKey)|T(?:hroughputKey|otal(?:BytesKey|ObjectsKey|UserVisibleObjectsKey))|UserVisibleObjects(?:CompleteKey|RemainingKey))|LSSharedFileListVolumesIDiskVisible|WS(?:Debug(?:Incoming(?:Body|Headers)|Outgoing(?:Body|Headers))|Fault(?:Code|Extra|String)|HTTP(?:ExtraHeaders|FollowsRedirects|Message|Proxy|ResponseMessage|Version)|MethodInvocation(?:Result(?:ParameterName)?|TimeoutValue)|NetworkStreamFaultString|Record(?:NamespaceURI|ParameterOrder|Type)|S(?:OAP(?:1999Protocol|2001Protocol|BodyEncodingStyle|Me(?:ssageHeaders|thodNamespaceURI)|Style(?:Doc|RPC))|treamError(?:Domain|Error|Message))|XMLRPCProtocol))|pi)\\b",
      name: "invalid.deprecated.10.8.support.variable.c"
    },
    {
      match: "\\bkCFURLUbiquitousItemPercent(?:DownloadedKey|UploadedKey)\\b",
      name: "invalid.deprecated.10.8.support.variable.cf.c"
    },
    {
      match: "\\bkCGWindowWorkspace\\b",
      name: "invalid.deprecated.10.8.support.variable.quartz.c"
    },
    {
      match: "\\bk(?:AUVoiceIOProperty_VoiceProcessingQuality|Sec(?:AppleSharePasswordItemClass|TrustResultConfirm))\\b",
      name: "invalid.deprecated.10.9.support.constant.c"
    },
    {
      match: "\\bkCFURL(?:BookmarkCreationPreferFileIDResolutionMask|HFSPathStyle|ImproperArgumentsError|PropertyKeyUnavailableError|Re(?:moteHostUnavailableError|source(?:AccessViolationError|NotFoundError))|TimeoutError|Unknown(?:Error|PropertyKeyError|SchemeError))\\b",
      name: "invalid.deprecated.10.9.support.constant.cf.c"
    },
    {
      match: "\\bkCGEncoding(?:FontSpecific|MacRoman)\\b",
      name: "invalid.deprecated.10.9.support.constant.quartz.c"
    },
    {
      match: "\\bSecTrustUserSetting\\b",
      name: "invalid.deprecated.10.9.support.type.c"
    },
    {
      match: "\\b(?:XPC_ACTIVITY_REQUIRE_(?:BATTERY_LEVEL|HDD_SPINNING)|k(?:LSSharedFileListGlobalLoginItems|S(?:C(?:PropNetAirPort(?:A(?:llowNetCreation|uthPassword(?:Encryption)?)|JoinMode|P(?:owerEnabled|referredNetwork)|SavePasswords)|ValNetAirPort(?:AuthPasswordEncryptionKeychain|JoinMode(?:Automatic|Preferred|R(?:anked|ecent)|Strongest)))|ecPolicyAppleiChat)))\\b",
      name: "invalid.deprecated.10.9.support.variable.c"
    },
    {
      match: "\\bkCFURL(?:File(?:DirectoryContents|Exists|L(?:astModificationTime|ength)|OwnerID|POSIXMode)|HTTPStatus(?:Code|Line)|UbiquitousItemIsDownloadedKey)\\b",
      name: "invalid.deprecated.10.9.support.variable.cf.c"
    },
    {
      match: "\\bk3DMixerParam_(?:GlobalReverbGain|M(?:axGain|inGain)|O(?:bstructionAttenuation|cclusionAttenuation)|ReverbBlend)\\b",
      name: "invalid.deprecated.tba.support.constant.c"
    },
    {
      match: "\\bkQL(?:Preview(?:ContentIDScheme|OptionCursorKey|Property(?:Attachment(?:DataKey|sKey)|BaseBundlePathKey|CursorKey|DisplayNameKey|HeightKey|MIMETypeKey|PDFStyleKey|StringEncodingKey|WidthKey))|ThumbnailProperty(?:Ba(?:dgeImageKey|seBundlePathKey)|ExtensionKey))\\b",
      name: "invalid.deprecated.tba.support.variable.c"
    },
    {
      match: "\\b(?:QOS_CLASS_(?:BACKGROUND|DEFAULT|U(?:NSPECIFIED|SER_IN(?:ITIATED|TERACTIVE)|TILITY))|k(?:C(?:GLCP(?:AbortOnGPURestartStatusBlacklisted|ContextPriorityRequest|GPURestartStatus|Support(?:GPURestart|SeparateAddressSpace))|TRuby(?:Alignment(?:Auto|Center|Distribute(?:Letter|Space)|End|Invalid|LineEdge|Start)|Overhang(?:Auto|End|Invalid|None|Start)|Position(?:After|Before|Count|In(?:line|terCharacter))))|FSEventStreamEventFlagItemIs(?:Hardlink|LastHardlink)|SecAccessControlUserPresence))\\b",
      name: "support.constant.10.10.c"
    },
    {
      match: "\\bk(?:A(?:XValueType(?:AXError|C(?:FRange|G(?:Point|Rect|Size))|Illegal)|udioComponent(?:Flag_(?:CanLoadInProcess|IsV3AudioUnit|RequiresAsyncInstantiation)|Instantiation_Load(?:InProcess|OutOfProcess)))|SecAccessControlDevicePasscode)\\b",
      name: "support.constant.10.11.c"
    },
    {
      match: "\\bkSec(?:AccessControl(?:A(?:nd|pplicationPassword)|Or|PrivateKeyUsage)|KeyOperationType(?:Decrypt|Encrypt|KeyExchange|Sign|Verify))\\b",
      name: "support.constant.10.12.c"
    },
    {
      match: "\\bk(?:CGLRPRe(?:gistryID(?:High|Low)|movable)|FSEventStream(?:CreateFlagUseExtendedData|EventFlagItemCloned)|SecAccessControlBiometry(?:Any|CurrentSet))\\b",
      name: "support.constant.10.13.c"
    },
    {
      match: "\\bk(?:3DMixerParam_(?:BusEnable|DryWetReverbBlend|GlobalReverbGainInDecibels|M(?:axGainInDecibels|inGainInDecibels)|O(?:bstructionAttenuationInDecibels|cclusionAttenuationInDecibels))|AudioQueueProperty_ChannelAssignments|JSTypeSymbol|SecAccessControlWatch)\\b",
      name: "support.constant.10.15.c"
    },
    {
      match: "\\bk(?:AudioComponentFlag_SandboxSafe|CGL(?:PFASupportsAutomaticGraphicsSwitching|Renderer(?:ATIRadeonX4000ID|IntelHD5000ID)))\\b",
      name: "support.constant.10.8.c"
    },
    {
      match: "\\bk(?:AXPriority(?:High|Low|Medium)|CGL(?:OGLPVersion_GL4_Core|R(?:PMajorGLVersion|endererGeForceID))|FSEventStream(?:CreateFlagMarkSelf|EventFlagOwnEvent))\\b",
      name: "support.constant.10.9.c"
    },
    { name: "support.constant.c" },
    {
      match: "\\bkCFNumberFormatter(?:Currency(?:AccountingStyle|ISOCodeStyle|PluralStyle)|OrdinalStyle)\\b",
      name: "support.constant.cf.10.11.c"
    },
    {
      match: "\\bkCFISO8601DateFormatWith(?:ColonSeparatorInTime(?:Zone)?|Da(?:shSeparatorInDate|y)|Full(?:Date|Time)|InternetDateTime|Month|SpaceBetweenDateAndTime|Time(?:Zone)?|WeekOfYear|Year)\\b",
      name: "support.constant.cf.10.12.c"
    },
    {
      match: "\\bkCFISO8601DateFormatWithFractionalSeconds\\b",
      name: "support.constant.cf.10.13.c"
    },
    {
      match: "\\bkCFURLEnumeratorGenerateRelativePathURLs\\b",
      name: "support.constant.cf.10.15.c"
    },
    {
      match: "\\bkCFFileSecurityClear(?:AccessControlList|Group(?:UUID)?|Mode|Owner(?:UUID)?)\\b",
      name: "support.constant.cf.10.8.c"
    },
    {
      match: "\\b(?:CF(?:ByteOrder(?:BigEndian|LittleEndian|Unknown)|NotificationSuspensionBehavior(?:Coalesce|D(?:eliverImmediately|rop)|Hold))|kCF(?:B(?:ookmarkResolutionWithout(?:MountingMask|UIMask)|undleExecutableArchitecture(?:I386|PPC(?:64)?|X86_64))|C(?:alendar(?:ComponentsWrap|Unit(?:Day|Era|Hour|M(?:inute|onth)|Quarter|Second|Week(?:Of(?:Month|Year)|day(?:Ordinal)?)|Year(?:ForWeekOfYear)?))|haracterSet(?:AlphaNumeric|C(?:apitalizedLetter|ontrol)|Dec(?:imalDigit|omposable)|Illegal|L(?:etter|owercaseLetter)|N(?:ewline|onBase)|Punctuation|Symbol|UppercaseLetter|Whitespace(?:AndNewline)?)|ompare(?:Anchored|Backwards|CaseInsensitive|DiacriticInsensitive|EqualTo|ForcedOrdering|GreaterThan|L(?:essThan|ocalized)|N(?:onliteral|umerically)|WidthInsensitive))|Dat(?:aSearch(?:Anchored|Backwards)|eFormatter(?:FullStyle|LongStyle|MediumStyle|NoStyle|ShortStyle))|FileDescriptor(?:ReadCallBack|WriteCallBack)|LocaleLanguageDirection(?:BottomToTop|LeftToRight|RightToLeft|TopToBottom|Unknown)|MessagePort(?:BecameInvalidError|IsInvalid|ReceiveTimeout|S(?:endTimeout|uccess)|TransportError)|N(?:otification(?:DeliverImmediately|PostToAllSessions)|umber(?:C(?:FIndexType|GFloatType|harType)|DoubleType|F(?:loat(?:32Type|64Type|Type)|ormatter(?:CurrencyStyle|DecimalStyle|NoStyle|P(?:a(?:d(?:After(?:Prefix|Suffix)|Before(?:Prefix|Suffix))|rseIntegersOnly)|ercentStyle)|Round(?:Ceiling|Down|Floor|Half(?:Down|Even|Up)|Up)|S(?:cientificStyle|pellOutStyle)))|IntType|Long(?:LongType|Type)|MaxType|NSIntegerType|S(?:Int(?:16Type|32Type|64Type|8Type)|hortType)))|PropertyList(?:BinaryFormat_v1_0|Immutable|MutableContainers(?:AndLeaves)?|OpenStepFormat|Read(?:CorruptError|StreamError|UnknownVersionError)|WriteStreamError|XMLFormat_v1_0)|RunLoop(?:A(?:fterWaiting|llActivities)|Before(?:Sources|Timers|Waiting)|E(?:ntry|xit)|Run(?:Finished|HandledSource|Stopped|TimedOut))|S(?:ocket(?:A(?:cceptCallBack|utomaticallyReenable(?:AcceptCallBack|DataCallBack|ReadCallBack|WriteCallBack))|C(?:loseOnInvalidate|onnectCallBack)|DataCallBack|Error|LeaveErrors|NoCallBack|ReadCallBack|Success|Timeout|WriteCallBack)|tr(?:eam(?:E(?:rrorDomain(?:Custom|MacOSStatus|POSIX)|vent(?:CanAcceptBytes|E(?:ndEncountered|rrorOccurred)|HasBytesAvailable|None|OpenCompleted))|Status(?:AtEnd|Closed|Error|NotOpen|Open(?:ing)?|Reading|Writing))|ing(?:Encoding(?:A(?:NSEL|SCII)|Big5(?:_(?:E|HKSCS_1999))?|CNS_11643_92_P(?:1|2|3)|DOS(?:Arabic|BalticRim|C(?:anadianFrench|hinese(?:Simplif|Trad)|yrillic)|Greek(?:1|2)?|Hebrew|Icelandic|Japanese|Korean|Latin(?:1|2|US)|Nordic|Portuguese|Russian|T(?:hai|urkish))|E(?:BCDIC_(?:CP037|US)|UC_(?:CN|JP|KR|TW))|GB(?:K_95|_(?:18030_2000|2312_80))|HZ_GB_2312|ISO(?:Latin(?:1(?:0)?|2|3|4|5|6|7|8|9|Arabic|Cyrillic|Greek|Hebrew|Thai)|_2022_(?:CN(?:_EXT)?|JP(?:_(?:1|2|3))?|KR))|JIS_(?:C6226_78|X02(?:0(?:1_76|8_(?:83|90))|12_90))|K(?:OI8_(?:R|U)|SC_5601_(?:87|92_Johab))|Mac(?:Ar(?:abic|menian)|B(?:engali|urmese)|C(?:e(?:ltic|ntralEurRoman)|hinese(?:Simp|Trad)|roatian|yrillic)|D(?:evanagari|ingbats)|E(?:thiopic|xtArabic)|Farsi|G(?:aelic|eorgian|reek|u(?:jarati|rmukhi))|H(?:FS|ebrew)|I(?:celandic|nuit)|Japanese|K(?:annada|hmer|orean)|Laotian|M(?:alayalam|ongolian)|Oriya|Roman(?:Latin1|ian)?|S(?:inhalese|ymbol)|T(?:amil|elugu|hai|ibetan|urkish)|Ukrainian|V(?:T100|ietnamese))|N(?:extStep(?:Japanese|Latin)|onLossyASCII)|ShiftJIS(?:_X0213(?:_(?:00|MenKuTen))?)?|U(?:TF(?:16(?:BE|LE)?|32(?:BE|LE)?|7(?:_IMAP)?|8)|nicode)|VISCII|Windows(?:Arabic|BalticRim|Cyrillic|Greek|Hebrew|KoreanJohab|Latin(?:1|2|5)|Vietnamese))|NormalizationForm(?:C|D|K(?:C|D))|Tokenizer(?:AttributeLa(?:nguage|tinTranscription)|Token(?:Has(?:DerivedSubTokensMask|HasNumbersMask|NonLettersMask|SubTokensMask)|IsCJWordMask|No(?:ne|rmal))|Unit(?:LineBreak|Paragraph|Sentence|Word(?:Boundary)?)))))|TimeZoneNameStyle(?:DaylightSaving|Generic|S(?:hort(?:DaylightSaving|Generic|Standard)|tandard))|U(?:RL(?:Bookmark(?:Creation(?:MinimalBookmarkMask|S(?:ecurityScopeAllowOnlyReadAccess|uitableForBookmarkFile)|WithSecurityScope)|ResolutionWith(?:SecurityScope|out(?:MountingMask|UIMask)))|Component(?:Fragment|Host|NetLocation|P(?:a(?:rameterString|ssword|th)|ort)|Query|ResourceSpecifier|Scheme|User(?:Info)?)|Enumerator(?:D(?:e(?:faultBehavior|scendRecursively)|irectoryPostOrderSuccess)|E(?:nd|rror)|GenerateFileReferenceURLs|IncludeDirectoriesP(?:ostOrder|reOrder)|S(?:kip(?:Invisibles|PackageContents)|uccess))|POSIXPathStyle|WindowsPathStyle)|serNotification(?:AlternateResponse|Ca(?:ncelResponse|utionAlertLevel)|DefaultResponse|No(?:DefaultButtonFlag|teAlertLevel)|OtherResponse|PlainAlertLevel|StopAlertLevel|UseRadioButtonsFlag))|XML(?:E(?:ntityType(?:Character|Par(?:ameter|sed(?:External|Internal))|Unparsed)|rror(?:E(?:lementlessDocument|ncodingConversionFailure)|Malformed(?:C(?:DSect|haracterReference|loseTag|omment)|D(?:TD|ocument)|Name|P(?:arsedCharacterData|rocessingInstruction)|StartTag)|NoData|Un(?:expectedEOF|knownEncoding)))|Node(?:CurrentVersion|Type(?:Attribute(?:ListDeclaration)?|C(?:DATASection|omment)|Document(?:Fragment|Type)?|E(?:lement(?:TypeDeclaration)?|ntity(?:Reference)?)|Notation|ProcessingInstruction|Text|Whitespace))|Parser(?:A(?:ddImpliedAttributes|llOptions)|NoOptions|Re(?:placePhysicalEntities|solveExternalEntities)|Skip(?:MetaData|Whitespace)|ValidateDocument)|StatusParse(?:InProgress|NotBegun|Successful))))\\b",
      name: "support.constant.cf.c"
    },
    {
      match: "\\bDISPATCH_WALLTIME_NOW\\b",
      name: "support.constant.clib.10.14.c"
    },
    {
      match: "\\b(?:FILESEC_(?:ACL(?:_(?:ALLOCSIZE|RAW))?|GR(?:OUP|PUUID)|MODE|OWNER|UUID)|P_(?:ALL|P(?:GID|ID)))\\b",
      name: "support.constant.clib.c"
    },
    {
      match: "\\bDISPATCH_BLOCK_(?:ASSIGN_CURRENT|BARRIER|DETACHED|ENFORCE_QOS_CLASS|INHERIT_QOS_CLASS|NO_QOS_CLASS)\\b",
      name: "support.constant.dispatch.10.10.c"
    },
    {
      match: "\\bDISPATCH_AUTORELEASE_FREQUENCY_(?:INHERIT|NEVER|WORK_ITEM)\\b",
      name: "support.constant.dispatch.10.12.c"
    },
    {
      match: "\\b(?:alphaStage|b(?:etaStage|old)|condense|developStage|extend|finalStage|italic|k(?:NilOptions|UnknownType|VariableLengthArray)|no(?:Err|rmal)|outline|shadow|underline)\\b",
      name: "support.constant.mac-classic.c"
    },
    {
      match: "\\bOS(?:BigEndian|LittleEndian|UnknownByteOrder)\\b",
      name: "support.constant.os.c"
    },
    {
      match: "\\bkCGImagePixelFormat(?:Mask|Packed|RGB(?:101010|5(?:55|65)|CIF10))\\b",
      name: "support.constant.quartz.10.14.c"
    },
    {
      match: "\\bCGPDFTagType(?:A(?:nnotation|rt)|B(?:ibliography|lockQuote)|C(?:aption|ode)|D(?:iv|ocument)|F(?:igure|orm(?:ula)?)|Header(?:1|2|3|4|5|6)?|Index|L(?:abel|i(?:nk|st(?:Body|Item)?))|No(?:nStructure|te)|P(?:ar(?:agraph|t)|rivate)|Quote|R(?:eference|uby(?:AnnotationText|BaseText|Punctuation)?)|S(?:ection|pan)|T(?:OC(?:I)?|able(?:Body|DataCell|Footer|Header(?:Cell)?|Row)?)|Warichu(?:Punctiation|Text)?)\\b",
      name: "support.constant.quartz.10.15.c"
    },
    {
      match: "\\b(?:CG(?:GlyphM(?:ax|in)|PDFDataFormat(?:JPEG(?:2000|Encoded)|Raw)|RectM(?:ax(?:XEdge|YEdge)|in(?:XEdge|YEdge)))|kCG(?:A(?:nnotatedSessionEventTap|ssistiveTechHighWindowLevelKey)|B(?:a(?:ck(?:ingStore(?:Buffered|Nonretained|Retained)|stopMenuLevelKey)|seWindowLevelKey)|itmap(?:AlphaInfoMask|ByteOrder(?:16(?:Big|Little)|32(?:Big|Little)|Default|Mask)|Float(?:Components|InfoMask))|lendMode(?:C(?:lear|o(?:lor(?:Burn|Dodge)?|py))|D(?:arken|estination(?:Atop|In|O(?:ut|ver))|ifference)|Exclusion|H(?:ardLight|ue)|L(?:ighten|uminosity)|Multiply|Normal|Overlay|Plus(?:Darker|Lighter)|S(?:aturation|creen|o(?:ftLight|urce(?:Atop|In|Out)))|XOR))|C(?:aptureNo(?:Fill|Options)|o(?:lor(?:ConversionTransform(?:ApplySpace|FromSpace|ToSpace)|SpaceModel(?:CMYK|DeviceN|Indexed|Lab|Monochrome|Pattern|RGB|Unknown|XYZ))|nfigure(?:For(?:AppOnly|Session)|Permanently))|ursorWindowLevelKey)|D(?:esktop(?:IconWindowLevelKey|WindowLevelKey)|isplay(?:AddFlag|BeginConfigurationFlag|D(?:esktopShapeChangedFlag|isabledFlag)|EnabledFlag|M(?:irrorFlag|ovedFlag)|RemoveFlag|S(?:etM(?:ainFlag|odeFlag)|tream(?:FrameStatus(?:Frame(?:Blank|Complete|Idle)|Stopped)|Update(?:DirtyRects|MovedRects|Re(?:ducedDirtyRects|freshedRects))))|UnMirrorFlag)|ockWindowLevelKey|raggingWindowLevelKey)|E(?:rror(?:CannotComplete|Failure|I(?:llegalArgument|nvalid(?:Con(?:nection|text)|Operation))|No(?:neAvailable|tImplemented)|RangeCheck|Success|TypeCheck)|vent(?:F(?:ilterMaskPermit(?:Local(?:KeyboardEvents|MouseEvents)|SystemDefinedEvents)|lag(?:Mask(?:Al(?:phaShift|ternate)|Co(?:mmand|ntrol)|Help|N(?:onCoalesced|umericPad)|S(?:econdaryFn|hift))|sChanged))|Key(?:Down|Up)|LeftMouse(?:D(?:own|ragged)|Up)|Mouse(?:Moved|Subtype(?:Default|TabletP(?:oint|roximity)))|Null|OtherMouse(?:D(?:own|ragged)|Up)|RightMouse(?:D(?:own|ragged)|Up)|S(?:crollWheel|ource(?:GroupID|State(?:CombinedSessionState|HIDSystemState|ID|Private)|U(?:nixProcessID|ser(?:Data|ID)))|uppressionState(?:RemoteMouseDrag|SuppressionInterval))|Ta(?:bletP(?:ointer|roximity)|p(?:DisabledBy(?:Timeout|UserInput)|Option(?:Default|ListenOnly))|rget(?:ProcessSerialNumber|UnixProcessID))|UnacceleratedPointerMovement(?:X|Y)))|F(?:loatingWindowLevelKey|ontPostScriptFormatType(?:1|3|42))|G(?:esturePhase(?:Began|C(?:ancelled|hanged)|Ended|MayBegin|None)|radientDraws(?:AfterEndLocation|BeforeStartLocation))|H(?:IDEventTap|e(?:adInsertEventTap|lpWindowLevelKey))|I(?:mage(?:Alpha(?:First|Last|None(?:Skip(?:First|Last))?|Only|Premultiplied(?:First|Last))|ByteOrder(?:16(?:Big|Little)|32(?:Big|Little)|Default|Mask))|nterpolation(?:Default|High|Low|Medium|None))|KeyboardEvent(?:Autorepeat|Key(?:boardType|code))|Line(?:Cap(?:Butt|Round|Square)|Join(?:Bevel|Miter|Round))|M(?:a(?:inMenuWindowLevelKey|ximumWindowLevelKey)|inimumWindowLevelKey|o(?:dalPanelWindowLevelKey|mentumScrollPhase(?:Begin|Continue|End|None)|use(?:Button(?:Center|Left|Right)|Event(?:ButtonNumber|ClickState|Delta(?:X|Y)|InstantMouser|Number|Pressure|Subtype|WindowUnderMousePointer(?:ThatCanHandleThisEvent)?))))|N(?:ormalWindowLevelKey|umberOf(?:EventSuppressionStates|WindowLevelKeys))|OverlayWindowLevelKey|P(?:DF(?:A(?:llows(?:Co(?:mmenting|ntent(?:Accessibility|Copying))|Document(?:Assembly|Changes)|FormFieldEntry|HighQualityPrinting|LowQualityPrinting)|rtBox)|BleedBox|CropBox|MediaBox|ObjectType(?:Array|Boolean|Dictionary|Integer|N(?:ame|ull)|Real|Str(?:eam|ing))|TrimBox)|at(?:h(?:E(?:OFill(?:Stroke)?|lement(?:Add(?:CurveToPoint|LineToPoint|QuadCurveToPoint)|CloseSubpath|MoveToPoint))|Fill(?:Stroke)?|Stroke)|ternTiling(?:ConstantSpacing(?:MinimalDistortion)?|NoDistortion))|opUpMenuWindowLevelKey)|RenderingIntent(?:AbsoluteColorimetric|Default|Perceptual|RelativeColorimetric|Saturation)|S(?:cr(?:een(?:SaverWindowLevelKey|UpdateOperation(?:Move|Re(?:ducedDirtyRectangleCount|fresh)))|oll(?:EventUnit(?:Line|Pixel)|Phase(?:Began|C(?:ancelled|hanged)|Ended|MayBegin)|WheelEvent(?:DeltaAxis(?:1|2|3)|FixedPtDeltaAxis(?:1|2|3)|I(?:nstantMouser|sContinuous)|MomentumPhase|PointDeltaAxis(?:1|2|3)|Scroll(?:Count|Phase))))|essionEventTap|tatusWindowLevelKey)|T(?:a(?:blet(?:Event(?:DeviceID|Point(?:Buttons|Pressure|X|Y|Z)|Rotation|T(?:angentialPressure|ilt(?:X|Y))|Vendor(?:1|2|3))|ProximityEvent(?:CapabilityMask|DeviceID|EnterProximity|Pointer(?:ID|Type)|SystemTabletID|TabletID|Vendor(?:ID|Pointer(?:SerialNumber|Type)|UniqueID)))|ilAppendEventTap)|ext(?:Clip|Fill(?:Clip|Stroke(?:Clip)?)?|Invisible|Stroke(?:Clip)?)|ornOffMenuWindowLevelKey)|UtilityWindowLevelKey|Window(?:Image(?:B(?:estResolution|oundsIgnoreFraming)|Default|NominalResolution|OnlyShadows|ShouldBeOpaque)|List(?:ExcludeDesktopElements|Option(?:All|IncludingWindow|OnScreen(?:AboveWindow|BelowWindow|Only)))|Sharing(?:None|Read(?:Only|Write)))))\\b",
      name: "support.constant.quartz.c"
    },
    { match: "\\bcl_device_id\\b", name: "support.type.10.10.c" },
    {
      match: "\\b(?:JSTypedArrayType|SecKey(?:Algorithm|KeyExchangeParameter)|os_unfair_lock(?:_t)?)\\b",
      name: "support.type.10.12.c"
    },
    { name: "support.type.c" },
    {
      match: "\\b(?:CF(?:A(?:bsoluteTime|llocator(?:AllocateCallBack|Co(?:ntext|pyDescriptionCallBack)|DeallocateCallBack|PreferredSizeCallBack|Re(?:allocateCallBack|f|leaseCallBack|tainCallBack))|rray(?:ApplierFunction|C(?:allBacks|opyDescriptionCallBack)|EqualCallBack|Re(?:f|leaseCallBack|tainCallBack))|ttributedStringRef)|B(?:ag(?:ApplierFunction|C(?:allBacks|opyDescriptionCallBack)|EqualCallBack|HashCallBack|Re(?:f|leaseCallBack|tainCallBack))|i(?:naryHeap(?:ApplierFunction|C(?:allBacks|ompareContext)|Ref)|t(?:VectorRef)?)|ooleanRef|undleRef(?:Num)?|yteOrder)|C(?:alendar(?:Identifier|Ref|Unit)|haracterSet(?:PredefinedSet|Ref)|ompar(?:atorFunction|isonResult))|D(?:at(?:a(?:Ref|SearchFlags)|e(?:Formatter(?:Key|Ref|Style)|Ref))|ictionary(?:ApplierFunction|CopyDescriptionCallBack|EqualCallBack|HashCallBack|KeyCallBacks|Re(?:f|leaseCallBack|tainCallBack)|ValueCallBacks))|Error(?:Domain|Ref)|File(?:Descriptor(?:C(?:allBack|ontext)|NativeDescriptor|Ref)|Security(?:ClearOptions|Ref))|GregorianUnitFlags|HashCode|I(?:SO8601DateFormatOptions|ndex)|Locale(?:Identifier|Key|LanguageDirection|Ref)|M(?:achPort(?:C(?:allBack|ontext)|InvalidationCallBack|Ref)|essagePort(?:C(?:allBack|ontext)|InvalidationCallBack|Ref)|utable(?:A(?:rrayRef|ttributedStringRef)|B(?:agRef|itVectorRef)|CharacterSetRef|D(?:ataRef|ictionaryRef)|S(?:etRef|tringRef)))|N(?:otification(?:C(?:allback|enterRef)|Name|SuspensionBehavior)|u(?:llRef|mber(?:Formatter(?:Key|OptionFlags|PadPosition|R(?:ef|oundingMode)|Style)|Ref|Type)))|OptionFlags|P(?:lugIn(?:DynamicRegisterFunction|FactoryFunction|Instance(?:DeallocateInstanceDataFunction|GetInterfaceFunction|Ref)|Ref|UnloadFunction)|ropertyList(?:Format|MutabilityOptions|Ref))|R(?:ange|eadStream(?:ClientCallBack|Ref)|unLoop(?:Activity|Mode|Observer(?:C(?:allBack|ontext)|Ref)|R(?:ef|unResult)|Source(?:Context(?:1)?|Ref)|Timer(?:C(?:allBack|ontext)|Ref)))|S(?:et(?:ApplierFunction|C(?:allBacks|opyDescriptionCallBack)|EqualCallBack|HashCallBack|Re(?:f|leaseCallBack|tainCallBack))|ocket(?:C(?:allBack(?:Type)?|ontext)|Error|NativeHandle|Ref|Signature)|tr(?:eam(?:ClientContext|E(?:rror(?:Domain)?|ventType)|PropertyKey|Status)|ing(?:BuiltInEncodings|CompareFlags|Encoding(?:s)?|InlineBuffer|NormalizationForm|Ref|Tokenizer(?:Ref|TokenType)))|wappedFloat(?:32|64))|T(?:ime(?:Interval|Zone(?:NameStyle|Ref))|ree(?:ApplierFunction|Co(?:ntext|pyDescriptionCallBack)|Re(?:f|leaseCallBack|tainCallBack))|ype(?:ID|Ref))|U(?:RL(?:Bookmark(?:CreationOptions|FileCreationOptions|ResolutionOptions)|ComponentType|E(?:numerator(?:Options|Re(?:f|sult))|rror)|PathStyle|Ref)|UID(?:Bytes|Ref)|serNotification(?:CallBack|Ref))|WriteStream(?:ClientCallBack|Ref)|XML(?:Attribute(?:DeclarationInfo|ListDeclarationInfo)|Document(?:Info|TypeInfo)|E(?:lement(?:Info|TypeDeclarationInfo)|ntity(?:Info|ReferenceInfo|TypeCode)|xternalID)|No(?:de(?:Ref|TypeCode)|tationInfo)|P(?:arser(?:AddChildCallBack|C(?:allBacks|o(?:ntext|pyDescriptionCallBack)|reateXMLStructureCallBack)|EndXMLStructureCallBack|HandleErrorCallBack|Options|Re(?:f|leaseCallBack|solveExternalEntityCallBack|tainCallBack)|StatusCode)|rocessingInstructionInfo)|TreeRef))|FSRef)\\b",
      name: "support.type.cf.c"
    },
    {
      match: "\\b(?:accessx_descriptor|blk(?:cnt_t|size_t)|c(?:addr_t|lock(?:_t|i(?:d_t|nfo))|t_rune_t)|d(?:addr_t|ev_t|i(?:spatch_time_t|v_t)|ouble_t)|e(?:rrno_t|xception)|f(?:bootstraptransfer(?:_t)?|c(?:hecklv(?:_t)?|odeblobs(?:_t)?)|d_(?:mask|set)|i(?:lesec_(?:property_t|t)|xpt_t)|lo(?:at_t|ck(?:timeout)?)|punchhole(?:_t)?|s(?:blkcnt_t|filcnt_t|i(?:d(?:_t)?|gnatures(?:_t)?)|obj_id(?:_t)?|pecread(?:_t)?|searchblock|tore(?:_t)?)|trimactivefile(?:_t)?)|g(?:id_t|uid_t)|i(?:d(?:_t|type_t)|n(?:_(?:addr_t|port_t)|o(?:64_t|_t)|t(?:16_t|32_t|64_t|8_t|_(?:fast(?:16_t|32_t|64_t|8_t)|least(?:16_t|32_t|64_t|8_t))|max_t|ptr_t))|ovec|timerval)|jmp_buf|key_t|l(?:conv|div_t|ldiv_t|og2phys)|m(?:a(?:ch_port_t|x_align_t)|ode_t)|nlink_t|off_t|p(?:id_t|roc_rlimit_control_wakeupmon|trdiff_t)|q(?:addr_t|uad_t)|r(?:advisory|egister_t|lim(?:_t|it)|size_t|u(?:ne_t|sage(?:_info_(?:current|t|v(?:0|1|2|3|4)))?))|s(?:a_family_t|e(?:archstate|gsz_t)|i(?:g(?:_(?:atomic_t|t)|action|event|info_t|jmp_buf|s(?:et_t|tack)|vec)|md_(?:double(?:2x(?:2|3|4)|3x(?:2|3|4)|4x(?:2|3|4))|float(?:2x(?:2|3|4)|3x(?:2|3|4)|4x(?:2|3|4))|quat(?:d|f))|ze_t)|ocklen_t|size_t|tack_t|useconds_t|wblk_t|yscall_arg_t)|t(?:ime(?:_t|spec|val(?:64)?|zone)|m)|u(?:_(?:char|int(?:16_t|32_t|64_t|8_t)?|long|quad_t|short)|context_t|i(?:d_t|nt(?:16_t|32_t|64_t|8_t|_(?:fast(?:16_t|32_t|64_t|8_t)|least(?:16_t|32_t|64_t|8_t))|max_t|ptr_t)?)|s(?:e(?:conds_t|r_(?:addr_t|long_t|off_t|s(?:ize_t|size_t)|time_t|ulong_t))|hort)|uid_t)|va_list|w(?:char_t|int_t))\\b",
      name: "support.type.clib.c"
    },
    {
      match: "\\bdispatch_(?:autorelease_frequency_t|block_(?:flags_t|t)|channel_s|data_(?:s|t)|f(?:d_t|unction_t)|group_(?:s|t)|io_(?:close_flags_t|handler_t|interval_flags_t|s|t(?:ype_t)?)|mach_(?:msg_s|s)|o(?:bject_(?:s|t)|nce_t)|q(?:os_class_t|ueue_(?:attr_(?:s|t)|concurrent_t|global_t|main_t|priority_t|s(?:erial_t)?|t))|s(?:emaphore_(?:s|t)|ource_(?:m(?:ach_(?:recv_flags_t|send_flags_t)|emorypressure_flags_t)|proc_flags_t|s|t(?:imer_flags_t|ype_(?:s|t))?|vnode_flags_t))|workloop_t)\\b",
      name: "support.type.dispatch.c"
    },
    {
      match: "\\b(?:AbsoluteTime|B(?:oolean|yte(?:Count|Offset|Ptr)?)|C(?:harParameter|o(?:mpTimeValue|nst(?:LogicalAddress|Str(?:15Param|2(?:55Param|7Param)|3(?:1Param|2Param)|63Param|FileNameParam|ingPtr))))|Duration|F(?:ixed(?:P(?:oint|tr)|Rect)?|loat(?:32(?:Point)?|64|80|96)|ourCharCode|ract(?:Ptr)?)|Handle|ItemCount|L(?:angCode|ogicalAddress)|NumVersion(?:Variant(?:Handle|Ptr)?)?|O(?:S(?:Err|Status|Type(?:Ptr)?)|ptionBits)|P(?:BVersion|RefCon|hysicalAddress|oint(?:Ptr)?|roc(?:Handle|Ptr|essSerialNumber(?:Ptr)?)|tr)|Re(?:ct(?:Ptr)?|gi(?:onCode|ster68kProcPtr)|sType(?:Ptr)?)|S(?:Int(?:16|32|64|8)|RefCon|criptCode|hortFixed(?:Ptr)?|i(?:gnedByte|ze)|t(?:r(?:15|2(?:55|7)|3(?:1|2(?:Field)?)|63|FileName|ing(?:Handle|Ptr))|yle(?:Field|Parameter)?))|Time(?:Base(?:Record)?|Record|Scale|Value(?:64)?)|U(?:Int(?:16|32|64|8)|RefCon|TF(?:16Char|32Char|8Char)|n(?:i(?:Char(?:Count(?:Ptr)?|Ptr)?|codeScalarValue|versalProc(?:Handle|Ptr))|signed(?:Fixed(?:Ptr)?|Wide(?:Ptr)?)))|V(?:HSelect|ersRec(?:Hndl|Ptr)?)|WidePtr|extended(?:80|96)|wide)\\b",
      name: "support.type.mac-classic.c"
    },
    {
      match: "\\bpthread_(?:attr_t|cond(?:_t|attr_t)|key_t|mutex(?:_t|attr_t)|once_t|rwlock(?:_t|attr_t)|t)\\b",
      name: "support.type.pthread.c"
    },
    {
      match: "\\b(?:CG(?:AffineTransform|B(?:itmap(?:ContextReleaseDataCallback|Info)|lendMode|uttonCount)|C(?:aptureOptions|harCode|o(?:lor(?:ConversionInfo(?:Ref|TransformType)?|Re(?:f|nderingIntent)|Space(?:Model|Ref)?)?|n(?:figureOption|text(?:Ref)?)))|D(?:ata(?:Consumer(?:Callbacks|PutBytesCallback|Re(?:f|leaseInfoCallback))?|Provider(?:DirectCallbacks|GetByte(?:PointerCallback|s(?:AtPositionCallback|Callback))|Re(?:f|lease(?:BytePointerCallback|DataCallback|InfoCallback)|windCallback)|S(?:equentialCallbacks|kipForwardCallback))?)|eviceColor|i(?:rectDisplayID|splay(?:BlendFraction|C(?:hangeSummaryFlags|o(?:nfigRef|unt))|Err|Fade(?:Interval|ReservationToken)|Mode(?:Ref)?|Re(?:configurationCallBack|servationInterval)|Stream(?:Frame(?:AvailableHandler|Status)|Ref|Update(?:Re(?:ctType|f))?)?)))|E(?:rror|vent(?:Err|F(?:i(?:eld|lterMask)|lags)|M(?:ask|ouseSubtype)|Ref|S(?:ource(?:KeyboardType|Ref|StateID)|uppressionState)|T(?:ap(?:CallBack|Information|Location|Options|P(?:lacement|roxy))|imestamp|ype)))|F(?:loat|ont(?:Index|PostScriptFormat|Ref)?|unction(?:Callbacks|EvaluateCallback|Re(?:f|leaseInfoCallback))?)|G(?:ammaValue|esturePhase|lyph(?:DeprecatedEnum)?|radient(?:DrawingOptions|Ref)?)|I(?:mage(?:AlphaInfo|ByteOrderInfo|PixelFormatInfo|Ref)?|nterpolationQuality)|KeyCode|L(?:ayer(?:Ref)?|ine(?:Cap|Join))|M(?:o(?:mentumScrollPhase|useButton)|utablePathRef)|OpenGLDisplayMask|P(?:DF(?:A(?:ccessPermissions|rray(?:Ref)?)|Bo(?:olean|x)|ContentStream(?:Ref)?|D(?:ataFormat|ictionary(?:ApplierFunction|Ref)?|ocument(?:Ref)?)|Integer|O(?:bject(?:Ref|Type)?|perator(?:Callback|Table(?:Ref)?))|Page(?:Ref)?|Real|S(?:canner(?:Ref)?|tr(?:eam(?:Ref)?|ing(?:Ref)?))|Tag(?:Property|Type))|SConverter(?:Begin(?:DocumentCallback|PageCallback)|Callbacks|End(?:DocumentCallback|PageCallback)|MessageCallback|ProgressCallback|Re(?:f|leaseInfoCallback))?|at(?:h(?:Appl(?:ierFunction|yBlock)|DrawingMode|Element(?:Type)?|Ref)?|tern(?:Callbacks|DrawPatternCallback|Re(?:f|leaseInfoCallback)|Tiling)?)|oint)|Re(?:ct(?:Count|Edge)?|freshRate)|S(?:cr(?:een(?:RefreshCallback|Update(?:Move(?:Callback|Delta)|Operation))|oll(?:EventUnit|Phase))|hading(?:Ref)?|ize)|Text(?:DrawingMode|Encoding)|Vector|W(?:heelCount|indow(?:BackingType|I(?:D|mageOption)|L(?:evel(?:Key)?|istOption)|SharingType)))|IOSurfaceRef)\\b",
      name: "support.type.quartz.c"
    },
    {
      match: "\\b(?:k(?:C(?:FHTTPVersion2_0|GImage(?:Destination(?:EmbedThumbnail|ImageMaxPixelSize)|MetadataShouldExcludeGPS|Property(?:8BIMVersion|APNG(?:DelayTime|LoopCount|UnclampedDelayTime)|GPSHPositioningError|MakerAppleDictionary))|T(?:FontOpenTypeFeature(?:Tag|Value)|RubyAnnotationAttributeName)|V(?:ImageBufferAlphaChannelIsOpaque|PixelFormatCo(?:mponentRange(?:_(?:FullRange|VideoRange|WideRange))?|ntains(?:RGB|YCbCr))))|Sec(?:AttrAccess(?:Control|ibleWhenPasscodeSetThisDeviceOnly)|UseOperationPrompt)|UTType(?:3DContent|A(?:VIMovie|pple(?:ProtectedMPEG4Video|Script)|ssemblyLanguageSource|udioInterchangeFileFormat)|B(?:inaryPropertyList|ookmark|zip2Archive)|C(?:alendarEvent|ommaSeparatedText)|DelimitedText|E(?:lectronicPublication|mailMessage)|Font|GNUZipArchive|InternetLocation|J(?:SON|ava(?:Archive|Class|Script))|Log|M(?:3UPlaylist|IDIAudio|PEG2(?:TransportStream|Video))|OSAScript(?:Bundle)?|P(?:HPScript|KCS12|erlScript|l(?:aylist|uginBundle)|r(?:esentation|opertyList)|ythonScript)|QuickLookGenerator|R(?:awImage|ubyScript)|S(?:c(?:alableVectorGraphics|ript)|hellScript|p(?:otlightImporter|readsheet)|ystemPreferencesPane)|T(?:abSeparatedText|oDoItem)|U(?:RLBookmarkData|TF8TabSeparatedText|nixExecutable)|W(?:aveformAudio|indowsExecutable)|X(?:509Certificate|MLPropertyList|PCService)|ZipArchive))|matrix_identity_(?:double(?:2x2|3x3|4x4)|float(?:2x2|3x3|4x4)))\\b",
      name: "support.variable.10.10.c"
    },
    {
      match: "\\bk(?:A(?:XListItem(?:IndexTextAttribute|LevelTextAttribute|PrefixTextAttribute)|udioComponent(?:InstanceInvalidationNotification|RegistrationsChangedNotification))|C(?:FStreamPropertySocketExtendedBackgroundIdleMode|GImage(?:Property(?:ExifSubsecTimeOriginal|PNGCompressionFilter|TIFFTile(?:Length|Width))|SourceSubsampleFactor)|V(?:ImageBuffer(?:ColorPrimaries_(?:DCI_P3|ITU_R_2020|P3_D65)|TransferFunction_ITU_R_2020|YCbCrMatrix_(?:DCI_P3|ITU_R_2020|P3_D65))|MetalTextureCacheMaximumTextureAgeKey|PixelBuffer(?:MetalCompatibilityKey|OpenGLTextureCacheCompatibilityKey)))|MDItemHTMLContent|Sec(?:A(?:CLAuthorization(?:Integrity|PartitionID)|ttrSyncViewHint)|PolicyApplePayIssuerEncryption|TrustCertificateTransparency|UseAuthentication(?:Context|UI(?:Allow|Fail|Skip)?))|UTTypeSwiftSource)\\b",
      name: "support.variable.10.11.c"
    },
    {
      match: "\\bk(?:C(?:FStreamNetworkServiceTypeCallSignaling|GImage(?:DestinationOptimizeColorForSharing|PropertyDNG(?:AsShot(?:Neutral|WhiteXY)|B(?:aseline(?:Exposure|Noise|Sharpness)|lackLevel)|C(?:a(?:librationIlluminant(?:1|2)|meraCalibration(?:1|2|Signature))|olorMatrix(?:1|2))|FixVignetteRadial|NoiseProfile|Pr(?:ivateData|ofileCalibrationSignature)|W(?:arp(?:Fisheye|Rectilinear)|hiteLevel)))|T(?:BackgroundColorAttributeName|FontDownloadedAttribute|HorizontalInVerticalFormsAttributeName|RubyAnnotationS(?:caleToFitAttributeName|izeFactorAttributeName)|TrackingAttributeName)|VImageBufferTransferFunction_SMPTE_ST_428_1)|IOSurfacePixelSizeCastingAllowed|Sec(?:Attr(?:AccessGroupToken|KeyTypeECSECPrimeRandom|TokenID(?:SecureEnclave)?)|Key(?:Algorithm(?:EC(?:D(?:HKeyExchange(?:Cofactor(?:X963SHA(?:1|2(?:24|56)|384|512))?|Standard(?:X963SHA(?:1|2(?:24|56)|384|512))?)|SASignature(?:DigestX962(?:SHA(?:1|2(?:24|56)|384|512))?|MessageX962SHA(?:1|2(?:24|56)|384|512)|RFC4754))|IESEncryption(?:CofactorX963SHA(?:1AESGCM|2(?:24AESGCM|56AESGCM)|384AESGCM|512AESGCM)|StandardX963SHA(?:1AESGCM|2(?:24AESGCM|56AESGCM)|384AESGCM|512AESGCM)))|RSA(?:Encryption(?:OAEPSHA(?:1(?:AESGCM)?|2(?:24(?:AESGCM)?|56(?:AESGCM)?)|384(?:AESGCM)?|512(?:AESGCM)?)|PKCS1|Raw)|Signature(?:DigestPKCS1v15(?:Raw|SHA(?:1|2(?:24|56)|384|512))|MessagePKCS1v15SHA(?:1|2(?:24|56)|384|512)|Raw)))|KeyExchangeParameter(?:RequestedSize|SharedInfo)))|UTTypeLivePhoto)\\b",
      name: "support.variable.10.12.c"
    },
    {
      match: "\\bk(?:C(?:GImage(?:AuxiliaryData(?:Info(?:Data(?:Description)?|Metadata)|TypeD(?:epth|isparity))|Metadata(?:NamespaceIPTCExtension|PrefixIPTCExtension)|Property(?:AuxiliaryData(?:Type)?|BytesPerRow|FileContentsDictionary|Height|I(?:PTCExt(?:A(?:boutCvTerm(?:CvId|Id|Name|RefinedAbout)?|ddlModelInfo|rtwork(?:C(?:ircaDateCreated|o(?:nt(?:entDescription|ributionDescription)|pyright(?:Notice|Owner(?:ID|Name)))|reator(?:ID)?)|DateCreated|Licensor(?:ID|Name)|OrObject|PhysicalDescription|S(?:ource(?:Inv(?:URL|entoryNo))?|tylePeriod)|Title)|udio(?:Bitrate(?:Mode)?|ChannelCount))|C(?:ircaDateCreated|o(?:nt(?:ainerFormat(?:Identifier|Name)?|r(?:ibutor(?:Identifier|Name|Role)?|olledVocabularyTerm))|pyrightYear)|reator(?:Identifier|Name|Role)?)|D(?:ataOnScreen(?:Region(?:D|H|Text|Unit|W|X|Y)?)?|igital(?:ImageGUID|Source(?:FileType|Type))|opesheet(?:Link(?:Link(?:Qualifier)?)?)?)|E(?:mb(?:dEncRightsExpr|eddedEncodedRightsExpr(?:LangID|Type)?)|pisode(?:Identifier|N(?:ame|umber))?|vent|xternalMetadataLink)|FeedIdentifier|Genre(?:Cv(?:Id|Term(?:Id|Name|RefinedAbout)))?|Headline|IPTCLastEdited|L(?:inkedEnc(?:RightsExpr|odedRightsExpr(?:LangID|Type)?)|ocation(?:C(?:ity|ountry(?:Code|Name)|reated)|GPS(?:Altitude|L(?:atitude|ongitude))|Identifier|Location(?:Id|Name)|ProvinceState|S(?:hown|ublocation)|WorldRegion))|M(?:axAvail(?:Height|Width)|odelAge)|OrganisationInImage(?:Code|Name)|P(?:erson(?:Heard(?:Identifier|Name)?|InImage(?:C(?:haracteristic|vTerm(?:CvId|Id|Name|RefinedAbout))|Description|Id|Name|WDetails)?)|roductInImage(?:Description|GTIN|Name)?|ublicationEvent(?:Date|Identifier|Name)?)|R(?:ating(?:R(?:atingRegion|egion(?:C(?:ity|ountry(?:Code|Name))|GPS(?:Altitude|L(?:atitude|ongitude))|Identifier|Location(?:Id|Name)|ProvinceState|Sublocation|WorldRegion))|S(?:caleM(?:axValue|inValue)|ourceLink)|Value(?:LogoLink)?)?|e(?:gistry(?:EntryRole|I(?:D|temID)|OrganisationID)|leaseReady))|S(?:e(?:ason(?:Identifier|N(?:ame|umber))?|ries(?:Identifier|Name)?)|hownEvent(?:Identifier|Name)?|t(?:orylineIdentifier|reamReady|ylePeriod)|upplyChainSource(?:Identifier|Name)?)|T(?:emporalCoverage(?:From|To)?|ranscript(?:Link(?:Link(?:Qualifier)?)?)?)|Vi(?:deo(?:Bitrate(?:Mode)?|DisplayAspectRatio|EncodingProfile|S(?:hotType(?:Identifier|Name)?|treamsCount))|sualColor)|WorkflowTag(?:Cv(?:Id|Term(?:Id|Name|RefinedAbout)))?)|mage(?:Count|s))|NamedColorSpace|P(?:ixelFormat|rimaryImage)|ThumbnailImages|Width))|T(?:BaselineOffsetAttributeName|FontVariationAxisHiddenKey)|V(?:ImageBuffer(?:ContentLightLevelInfoKey|MasteringDisplayColorVolumeKey|TransferFunction_(?:ITU_R_2100_HLG|SMPTE_ST_2084_PQ|sRGB))|MetalTextureUsage))|IOSurface(?:Plane(?:BitsPerElement|Component(?:Bit(?:Depths|Offsets)|Names|Ranges|Types))|Subsampling)|Sec(?:A(?:CLAuthorizationChange(?:ACL|Owner)|ttrPersist(?:antReference|entReference))|KeyAlgorithm(?:ECIESEncryption(?:CofactorVariableIVX963SHA(?:2(?:24AESGCM|56AESGCM)|384AESGCM|512AESGCM)|StandardVariableIVX963SHA(?:2(?:24AESGCM|56AESGCM)|384AESGCM|512AESGCM))|RSASignature(?:DigestPSSSHA(?:1|2(?:24|56)|384|512)|MessagePSSSHA(?:1|2(?:24|56)|384|512)))))\\b",
      name: "support.variable.10.13.c"
    },
    {
      match: "\\bkC(?:GImage(?:AuxiliaryDataTypePortraitEffectsMatte|Property(?:DNG(?:A(?:ctiveArea|n(?:alogBalance|tiAliasStrength)|sShot(?:ICCProfile|Pr(?:eProfileMatrix|ofileName)))|B(?:a(?:selineExposureOffset|yerGreenSplit)|estQualityScale|lackLevel(?:Delta(?:H|V)|RepeatDim))|C(?:FA(?:Layout|PlaneColor)|hromaBlurRadius|olorimetricReference|urrent(?:ICCProfile|PreProfileMatrix))|Default(?:BlackRender|Crop(?:Origin|Size)|Scale|UserCrop)|ExtraCameraProfiles|ForwardMatrix(?:1|2)|Linear(?:ResponseLimit|izationTable)|Ma(?:kerNoteSafety|skedAreas)|N(?:ewRawImageDigest|oiseReductionApplied)|O(?:pcodeList(?:1|2|3)|riginal(?:BestQualityFinalSize|Default(?:CropSize|FinalSize)|RawFile(?:D(?:ata|igest)|Name)))|Pr(?:eview(?:Application(?:Name|Version)|ColorSpace|DateTime|Settings(?:Digest|Name))|ofile(?:Copyright|EmbedPolicy|HueSatMap(?:D(?:ata(?:1|2)|ims)|Encoding)|LookTable(?:D(?:ata|ims)|Encoding)|Name|ToneCurve))|R(?:aw(?:DataUniqueID|ImageDigest|ToPreviewGain)|eductionMatrix(?:1|2)|owInterleaveFactor)|S(?:hadowScale|ubTileBlockSize))|PNG(?:Comment|Disclaimer|Source|Warning)))|TTypesetterOptionAllowUnboundedLayout|V(?:ImageBufferTransferFunction_Linear|PixelFormatContainsGrayscale))\\b",
      name: "support.variable.10.14.c"
    },
    {
      match: "\\bk(?:C(?:FStreamProperty(?:Allow(?:ConstrainedNetworkAccess|ExpensiveNetworkAccess)|ConnectionIsExpensive)|GImage(?:A(?:nimation(?:DelayTime|LoopCount|StartIndex)|uxiliaryDataTypeSemanticSegmentation(?:HairMatte|SkinMatte|TeethMatte))|Property(?:APNG(?:CanvasPixel(?:Height|Width)|FrameInfoArray)|Exif(?:CompositeImage|OffsetTime(?:Digitized|Original)?|Source(?:ExposureTimesOfCompositeImage|ImageNumberOfCompositeImage))|GIF(?:CanvasPixel(?:Height|Width)|FrameInfoArray)|HEICS(?:CanvasPixel(?:Height|Width)|D(?:elayTime|ictionary)|FrameInfoArray|LoopCount|UnclampedDelayTime)))|TFontFeature(?:SampleTextKey|TooltipTextKey)|V(?:ImageBufferAlphaChannelMode(?:Key|_(?:PremultipliedAlpha|StraightAlpha))|MetalTextureStorageMode))|MIDIPropertyNameConfigurationDictionary|Sec(?:PropertyType(?:Array|Number)|UseDataProtectionKeychain))\\b",
      name: "support.variable.10.15.c"
    },
    { match: "\\bkColorSyncExtendedRange\\b", name: "support.variable.10.16.c" },
    {
      match: "\\bk(?:C(?:FStream(?:NetworkServiceType(?:AVStreaming|Responsive(?:AV|Data))|Property(?:ConnectionIsCellular|NoCellular))|GImage(?:Destination(?:DateTime|Me(?:rgeMetadata|tadata)|Orientation)|Metadata(?:EnumerateRecursively|Namespace(?:DublinCore|Exif(?:Aux)?|IPTCCore|Photoshop|TIFF|XMP(?:Basic|Rights))|Prefix(?:DublinCore|Exif(?:Aux)?|IPTCCore|Photoshop|TIFF|XMP(?:Basic|Rights))|ShouldExcludeXMP))|T(?:Baseline(?:Class(?:AttributeName|Hanging|Ideographic(?:Centered|High|Low)|Math|Roman)|InfoAttributeName|OriginalFont|Reference(?:Font|InfoAttributeName))|FontD(?:escriptorMatching(?:CurrentAssetSize|Descriptors|Error|Percentage|Result|SourceDescriptor|Total(?:AssetSize|DownloadedSize))|ownloadableAttribute)|WritingDirectionAttributeName)|VImageBufferColorPrimaries_P22)|Sec(?:O(?:AEP(?:EncodingParametersAttributeName|M(?:GF1DigestAlgorithmAttributeName|essageLengthAttributeName))|IDSRVName)|P(?:addingOAEPKey|olicyAppleTimeStamping|rivateKeyAttrs|ublicKeyAttrs)))\\b",
      name: "support.variable.10.8.c"
    },
    {
      match: "\\b(?:XPC_ACTIVITY_(?:ALLOW_BATTERY|CHECK_IN|DELAY|GRACE_PERIOD|INTERVAL(?:_(?:1(?:5_MIN|_(?:DAY|HOUR|MIN))|30_MIN|4_HOURS|5_MIN|7_DAYS|8_HOURS))?|PRIORITY(?:_(?:MAINTENANCE|UTILITY))?|RE(?:PEATING|QUIRE_SCREEN_SLEEP))|k(?:AX(?:MarkedMisspelledTextAttribute|TrustedCheckOptionPrompt)|C(?:FStreamPropertySSLContext|GImage(?:Metadata(?:NamespaceExifEX|PrefixExifEX)|Property(?:Exif(?:ISOSpeed(?:Latitude(?:yyy|zzz))?|RecommendedExposureIndex|S(?:ensitivityType|tandardOutputSensitivity))|OpenEXR(?:AspectRatio|Dictionary))|SourceShouldCacheImmediately)|TLanguageAttributeName)|S(?:ec(?:Attr(?:Access(?:Group|ible(?:AfterFirstUnlock(?:ThisDeviceOnly)?|WhenUnlocked(?:ThisDeviceOnly)?)?)|KeyTypeEC|Synchronizable(?:Any)?)|Policy(?:Apple(?:PassbookSigning|Revocation)|RevocationFlags|TeamIdentifier)|Trust(?:E(?:valuationDate|xtendedValidation)|OrganizationName|Re(?:sultValue|vocation(?:Checked|ValidUntilDate))))|peech(?:AudioOutputFormatProperty|Output(?:ChannelMapProperty|ToFileDescriptorProperty)|SynthExtensionProperty)))|vm_kernel_page_(?:mask|s(?:hift|ize)))\\b",
      name: "support.variable.10.9.c"
    },
    { name: "support.variable.c" },
    {
      match: "\\bkCF(?:Islamic(?:TabularCalendar|UmmAlQuraCalendar)|URL(?:AddedToDirectoryDateKey|DocumentIdentifierKey|GenerationIdentifierKey|QuarantinePropertiesKey))\\b",
      name: "support.variable.cf.10.10.c"
    },
    {
      match: "\\bkCFURL(?:ApplicationIsScriptableKey|IsApplicationKey)\\b",
      name: "support.variable.cf.10.11.c"
    },
    {
      match: "\\bkCFURL(?:CanonicalPathKey|Volume(?:Is(?:EncryptedKey|RootFileSystemKey)|Supports(?:CompressionKey|ExclusiveRenamingKey|FileCloningKey|SwapRenamingKey)))\\b",
      name: "support.variable.cf.10.12.c"
    },
    {
      match: "\\bkCF(?:ErrorLocalizedFailureKey|URLVolume(?:AvailableCapacityFor(?:ImportantUsageKey|OpportunisticUsageKey)|Supports(?:AccessPermissionsKey|ImmutableFilesKey)))\\b",
      name: "support.variable.cf.10.13.c"
    },
    {
      match: "\\bkCFURL(?:IsExcludedFromBackupKey|PathKey)\\b",
      name: "support.variable.cf.10.8.c"
    },
    {
      match: "\\bkCFURL(?:TagNamesKey|UbiquitousItem(?:Downloading(?:ErrorKey|Status(?:Current|Downloaded|Key|NotDownloaded))|UploadingErrorKey))\\b",
      name: "support.variable.cf.10.9.c"
    },
    {
      match: "\\bkCF(?:A(?:bsoluteTimeIntervalSince19(?:04|70)|llocator(?:Default|Malloc(?:Zone)?|Null|SystemDefault|UseContext))|B(?:oolean(?:False|True)|u(?:ddhistCalendar|ndle(?:DevelopmentRegionKey|ExecutableKey|I(?:dentifierKey|nfoDictionaryVersionKey)|LocalizationsKey|NameKey|VersionKey)))|C(?:hineseCalendar|o(?:pyString(?:BagCallBacks|DictionaryKeyCallBacks|SetCallBacks)|reFoundationVersionNumber))|DateFormatter(?:AMSymbol|Calendar(?:Name)?|D(?:efault(?:Date|Format)|oesRelativeDateFormattingKey)|EraSymbols|GregorianStartDate|IsLenient|LongEraSymbols|MonthSymbols|PMSymbol|QuarterSymbols|S(?:hort(?:MonthSymbols|QuarterSymbols|Standalone(?:MonthSymbols|QuarterSymbols|WeekdaySymbols)|WeekdaySymbols)|tandalone(?:MonthSymbols|QuarterSymbols|WeekdaySymbols))|T(?:imeZone|woDigitStartDate)|VeryShort(?:MonthSymbols|Standalone(?:MonthSymbols|WeekdaySymbols)|WeekdaySymbols)|WeekdaySymbols)|Error(?:D(?:escriptionKey|omain(?:Cocoa|Mach|OSStatus|POSIX))|FilePathKey|Localized(?:DescriptionKey|FailureReasonKey|RecoverySuggestionKey)|U(?:RLKey|nderlyingErrorKey))|GregorianCalendar|HebrewCalendar|I(?:SO8601Calendar|ndianCalendar|slamicC(?:alendar|ivilCalendar))|JapaneseCalendar|Locale(?:AlternateQuotation(?:BeginDelimiterKey|EndDelimiterKey)|C(?:alendar(?:Identifier)?|o(?:llat(?:ionIdentifier|orIdentifier)|untryCode)|urren(?:cy(?:Code|Symbol)|tLocaleDidChangeNotification))|DecimalSeparator|ExemplarCharacterSet|GroupingSeparator|Identifier|LanguageCode|MeasurementSystem|Quotation(?:BeginDelimiterKey|EndDelimiterKey)|ScriptCode|UsesMetricSystem|VariantCode)|N(?:otFound|u(?:ll|mber(?:Formatter(?:AlwaysShowDecimalSeparator|Currency(?:Code|DecimalSeparator|GroupingSeparator|Symbol)|De(?:cimalSeparator|faultFormat)|ExponentSymbol|FormatWidth|GroupingS(?:eparator|ize)|I(?:n(?:finitySymbol|ternationalCurrencySymbol)|sLenient)|M(?:ax(?:FractionDigits|IntegerDigits|SignificantDigits)|in(?:FractionDigits|IntegerDigits|SignificantDigits|usSign)|ultiplier)|N(?:aNSymbol|egative(?:Prefix|Suffix))|P(?:adding(?:Character|Position)|er(?:MillSymbol|centSymbol)|lusSign|ositive(?:Prefix|Suffix))|Rounding(?:Increment|Mode)|SecondaryGroupingSize|Use(?:GroupingSeparator|SignificantDigits)|ZeroSymbol)|N(?:aN|egativeInfinity)|PositiveInfinity)))|P(?:ersianCalendar|lugIn(?:DynamicRegist(?:erFunctionKey|rationKey)|FactoriesKey|TypesKey|UnloadFunctionKey)|references(?:Any(?:Application|Host|User)|Current(?:Application|Host|User)))|R(?:epublicOfChinaCalendar|unLoop(?:CommonModes|DefaultMode))|S(?:ocket(?:CommandKey|ErrorKey|NameKey|Re(?:gisterCommand|sultKey|trieveCommand)|ValueKey)|tr(?:eam(?:ErrorDomainS(?:OCKS|SL)|Property(?:AppendToFile|DataWritten|FileCurrentOffset|S(?:OCKS(?:P(?:assword|roxy(?:Host|Port)?)|User|Version)|houldCloseNativeSocket|ocket(?:NativeHandle|Remote(?:HostName|PortNumber)|SecurityLevel)))|SocketS(?:OCKSVersion(?:4|5)|ecurityLevel(?:N(?:egotiatedSSL|one)|TLSv1)))|ing(?:BinaryHeapCallBacks|Transform(?:FullwidthHalfwidth|HiraganaKatakana|Latin(?:Arabic|Cyrillic|Greek|H(?:angul|ebrew|iragana)|Katakana|Thai)|MandarinLatin|Strip(?:CombiningMarks|Diacritics)|To(?:Latin|UnicodeName|XMLHex)))))|T(?:imeZoneSystemTimeZoneDidChangeNotification|ype(?:ArrayCallBacks|BagCallBacks|Dictionary(?:KeyCallBacks|ValueCallBacks)|SetCallBacks))|U(?:RL(?:AttributeModificationDateKey|C(?:ontent(?:AccessDateKey|ModificationDateKey)|reationDateKey)|File(?:AllocatedSizeKey|Protection(?:Complete(?:Un(?:lessOpen|tilFirstUserAuthentication))?|Key|None)|Resource(?:IdentifierKey|Type(?:BlockSpecial|CharacterSpecial|Directory|Key|NamedPipe|Regular|S(?:ocket|ymbolicLink)|Unknown))|S(?:ecurityKey|izeKey))|HasHiddenExtensionKey|Is(?:AliasFileKey|DirectoryKey|ExecutableKey|HiddenKey|MountTriggerKey|PackageKey|Re(?:adableKey|gularFileKey)|Sy(?:mbolicLinkKey|stemImmutableKey)|U(?:biquitousItemKey|serImmutableKey)|VolumeKey|WritableKey)|KeysOfUnsetValuesKey|L(?:abelNumberKey|inkCountKey|ocalized(?:LabelKey|NameKey|TypeDescriptionKey))|NameKey|P(?:arentDirectoryURLKey|referredIOBlockSizeKey)|T(?:otalFile(?:AllocatedSizeKey|SizeKey)|ypeIdentifierKey)|UbiquitousItem(?:HasUnresolvedConflictsKey|Is(?:DownloadingKey|Upload(?:edKey|ingKey)))|Volume(?:AvailableCapacityKey|CreationDateKey|I(?:dentifierKey|s(?:AutomountedKey|BrowsableKey|EjectableKey|InternalKey|JournalingKey|LocalKey|Re(?:adOnlyKey|movableKey)))|Localized(?:FormatDescriptionKey|NameKey)|MaximumFileSizeKey|NameKey|ResourceCountKey|Supports(?:AdvisoryFileLockingKey|Case(?:PreservedNamesKey|SensitiveNamesKey)|ExtendedSecurityKey|HardLinksKey|JournalingKey|PersistentIDsKey|R(?:enamingKey|ootDirectoryDatesKey)|S(?:parseFilesKey|ymbolicLinksKey)|VolumeSizesKey|ZeroRunsKey)|TotalCapacityKey|U(?:RL(?:ForRemountingKey|Key)|UIDStringKey)))|serNotification(?:Al(?:ert(?:HeaderKey|MessageKey|TopMostKey)|ternateButtonTitleKey)|CheckBoxTitlesKey|DefaultButtonTitleKey|IconURLKey|KeyboardTypesKey|LocalizationURLKey|OtherButtonTitleKey|P(?:opUp(?:SelectionKey|TitlesKey)|rogressIndicatorValueKey)|SoundURLKey|TextField(?:TitlesKey|ValuesKey)))|XMLTreeError(?:Description|L(?:ineNumber|ocation)|StatusCode))\\b",
      name: "support.variable.cf.c"
    },
    {
      match: "\\b(?:daylight|getdate_err|opt(?:arg|err|ind|opt|reset)|s(?:igngam|uboptarg|ys_(?:errlist|nerr|sig(?:list|name)))|t(?:imezone|zname))\\b",
      name: "support.variable.clib.c"
    },
    {
      match: "\\bkCGColorSpace(?:ACESCGLinear|D(?:CIP3|isplayP3)|GenericXYZ|ITUR_(?:2020|709)|ROMMRGB)\\b",
      name: "support.variable.quartz.10.11.c"
    },
    {
      match: "\\bkCGColor(?:ConversionBlackPointCompensation|Space(?:Extended(?:Gray|Linear(?:Gray|SRGB)|SRGB)|Linear(?:Gray|SRGB)))\\b",
      name: "support.variable.quartz.10.12.c"
    },
    {
      match: "\\bkCG(?:Color(?:ConversionTRCSize|SpaceGenericLab)|PDF(?:ContextAccessPermissions|Outline(?:Children|Destination(?:Rect)?|Title)))\\b",
      name: "support.variable.quartz.10.13.c"
    },
    {
      match: "\\bkCGColorSpace(?:DisplayP3_HLG|ExtendedLinear(?:DisplayP3|ITUR_2020)|ITUR_2020_HLG)\\b",
      name: "support.variable.quartz.10.14.c"
    },
    {
      match: "\\bkCGPDFTagProperty(?:A(?:ctualText|lternativeText)|LanguageText|TitleText)\\b",
      name: "support.variable.quartz.10.15.c"
    },
    {
      match: "\\bkCGColorSpace(?:DisplayP3_PQ|ITUR_2020_PQ)\\b",
      name: "support.variable.quartz.10.16.c"
    },
    {
      match: "\\bkCGDisplayS(?:howDuplicateLowResolutionModes|tream(?:ColorSpace|DestinationRect|MinimumFrameTime|PreserveAspectRatio|QueueDepth|S(?:howCursor|ourceRect)|YCbCrMatrix(?:_(?:ITU_R_(?:601_4|709_2)|SMPTE_240M_1995))?))\\b",
      name: "support.variable.quartz.10.8.c"
    },
    {
      match: "\\b(?:CG(?:AffineTransformIdentity|PointZero|Rect(?:Infinite|Null|Zero)|SizeZero)|kCG(?:Color(?:Black|Clear|Space(?:AdobeRGB1998|Generic(?:CMYK|Gray(?:Gamma2_2)?|RGB(?:Linear)?)|SRGB)|White)|Font(?:Index(?:Invalid|Max)|VariationAxis(?:DefaultValue|M(?:axValue|inValue)|Name))|GlyphMax|PDF(?:Context(?:A(?:llows(?:Copying|Printing)|rtBox|uthor)|BleedBox|Cr(?:eator|opBox)|EncryptionKeyLength|Keywords|MediaBox|O(?:utputIntent(?:s)?|wnerPassword)|Subject|T(?:itle|rimBox)|UserPassword)|X(?:DestinationOutputProfile|Info|Output(?:Condition(?:Identifier)?|IntentSubtype)|RegistryName))|Window(?:Alpha|B(?:ackingLocationVideoMemory|ounds)|IsOnscreen|Layer|MemoryUsage|N(?:ame|umber)|Owner(?:Name|PID)|S(?:haringState|toreType))))\\b",
      name: "support.variable.quartz.c"
    }
  ],
  repository: {
    functions: {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.10.support.function.c" }
          },
          match: "(\\s*)(\\b(?:AudioFileReadPackets|LS(?:C(?:anRefAcceptItem|opy(?:ApplicationForMIMEType|DisplayNameForRef|Item(?:Attribute(?:s)?|InfoForRef)|KindStringFor(?:MIMEType|Ref|TypeInfo)))|FindApplicationForInfo|GetApplicationFor(?:I(?:nfo|tem)|URL)|Open(?:Application|F(?:SRef|romRefSpec)|ItemsWithRole|URLsWithRole)|RegisterFSRef|S(?:et(?:ExtensionHiddenForRef|ItemAttribute)|haredFileListI(?:nsertItemFSRef|temResolve)))|launch_(?:data_(?:a(?:lloc|rray_(?:get_(?:count|index)|set_index))|copy|dict_(?:get_count|i(?:nsert|terate)|lookup|remove)|free|get_(?:bool|errno|fd|integer|machport|opaque(?:_size)?|real|string|type)|new_(?:bool|fd|integer|machport|opaque|real|string)|set_(?:bool|fd|integer|machport|opaque|real|string))|get_fd|msg))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.10.support.function.cf.c" }
          },
          match: "(\\s*)(\\bCF(?:AbsoluteTime(?:AddGregorianUnits|Get(?:D(?:ayOf(?:Week|Year)|ifferenceAsGregorianUnits)|GregorianDate|WeekOfYear))|GregorianDate(?:GetAbsoluteTime|IsValid)|PropertyList(?:Create(?:From(?:Stream|XMLData)|XMLData)|WriteToStream))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.11.support.function.c" }
          },
          match: "(\\s*)(\\b(?:AudioHardwareService(?:AddPropertyListener|GetPropertyData(?:Size)?|HasProperty|IsPropertySettable|RemovePropertyListener|SetPropertyData)|CF(?:FTPCreateParsedResourceListing|ReadStreamCreate(?:For(?:HTTPRequest|StreamedHTTPRequest)|WithFTPURL)|WriteStreamCreateWithFTPURL)|LS(?:Copy(?:DisplayNameForURL|ItemInfoForURL|KindStringForURL)|Get(?:ExtensionInfo|HandlerOptionsForContentType)|S(?:et(?:ExtensionHiddenForURL|HandlerOptionsForContentType)|haredFileList(?:AddObserver|C(?:opy(?:Property|Snapshot)|reate)|Get(?:SeedValue|TypeID)|I(?:nsertItemURL|tem(?:Copy(?:DisplayName|IconRef|Property|ResolvedURL)|Get(?:ID|TypeID)|Move|Remove|SetProperty))|Remove(?:AllItems|Observer)|Set(?:Authorization|Property))))|SSLSetEncryptionCertificate)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.11.support.function.cf.c" }
          },
          match: "(\\s*)(\\bCFURLCreateStringBy(?:AddingPercentEscapes|ReplacingPercentEscapesUsingEncoding)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.11.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCGDisplayModeCopyPixelEncoding\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.12.support.function.c" }
          },
          match: "(\\s*)(\\b(?:OS(?:Atomic(?:A(?:dd(?:32(?:Barrier)?|64(?:Barrier)?)|nd32(?:Barrier|Orig(?:Barrier)?)?)|CompareAndSwap(?:32(?:Barrier)?|64(?:Barrier)?|Int(?:Barrier)?|Long(?:Barrier)?|Ptr(?:Barrier)?)|Decrement(?:32(?:Barrier)?|64(?:Barrier)?)|Increment(?:32(?:Barrier)?|64(?:Barrier)?)|Or32(?:Barrier|Orig(?:Barrier)?)?|TestAnd(?:Clear(?:Barrier)?|Set(?:Barrier)?)|Xor32(?:Barrier|Orig(?:Barrier)?)?)|MemoryBarrier|SpinLock(?:Lock|Try|Unlock))|SecCertificateCopyNormalized(?:IssuerContent|SubjectContent)|os_log_is_(?:debug_enabled|enabled))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.12.support.function.clib.c" }
          },
          match: "(\\s*)(\\b(?:arc4random_addrandom|syscall)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.13.support.function.c" }
          },
          match: "(\\s*)(\\b(?:C(?:FNetDiagnostic(?:C(?:opyNetworkStatusPassively|reateWith(?:Streams|URL))|DiagnoseProblemInteractively|SetName)|MSDecoderSetSearchKeychain)|DisposeSRCallBackUPP|GetIconRefFromFileInfo|InvokeSRCallBackUPP|NewSRCallBackUPP|Re(?:adIconFromFSRef|gisterIconRefFromFSRef)|S(?:R(?:Add(?:LanguageObject|Text)|C(?:ancelRecognition|hangeLanguageObject|loseRecognitionSystem|o(?:ntinueRecognition|untItems))|Draw(?:RecognizedText|Text)|EmptyLanguageObject|Get(?:IndexedItem|LanguageModel|Property|Reference)|Idle|New(?:Language(?:Model|ObjectFrom(?:DataFile|Handle))|P(?:ath|hrase)|Recognizer|Word)|OpenRecognitionSystem|P(?:rocess(?:Begin|End)|utLanguageObjectInto(?:DataFile|Handle))|Re(?:leaseObject|move(?:IndexedItem|LanguageObject))|S(?:et(?:IndexedItem|LanguageModel|Property)|pe(?:ak(?:AndDrawText|Text)|echBusy)|t(?:artListening|op(?:Listening|Speech))))|ec(?:CertificateCopySerialNumber|Keychain(?:CopyAccess|SetAccess)|TrustSetKeychains))|UnregisterIconRef|os_trace_(?:debug_enabled|info_enabled|type_enabled))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.13.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCGColorSpaceC(?:opyICCProfile|reateWithICCProfile)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.14.support.function.c" }
          },
          match: "(\\s*)(\\b(?:CVOpenGL(?:Buffer(?:Attach|Create|Get(?:Attributes|TypeID)|Pool(?:Create(?:OpenGLBuffer)?|Get(?:Attributes|OpenGLBufferAttributes|TypeID)|Re(?:lease|tain))|Re(?:lease|tain))|Texture(?:Cache(?:Create(?:TextureFromImage)?|Flush|GetTypeID|Re(?:lease|tain))|Get(?:CleanTexCoords|Name|T(?:arget|ypeID))|IsFlipped|Re(?:lease|tain)))|DR(?:AudioTrackCreate|F(?:SObjectGetRealFSRef|ileCreateReal|olderCreateReal))|SecCertificateCopyPublicKey)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.15.support.function.c" }
          },
          match: "(\\s*)(\\b(?:AcquireIconRef|C(?:C_MD(?:2(?:_(?:Final|Init|Update))?|4(?:_(?:Final|Init|Update))?|5(?:_(?:Final|Init|Update))?)|TFont(?:CreateWithQuickdrawInstance|Manager(?:RegisterFontsForURLs|UnregisterFontsForURLs))|ompositeIconRef)|Get(?:CustomIconsEnabled|IconRef(?:From(?:Component|Folder|IconFamilyPtr|TypeInfo)|Owners)?)|Is(?:DataAvailableInIconRef|IconRefComposite|ValidIconRef)|LSCopy(?:AllHandlersForURLScheme|DefaultHandlerForURLScheme)|OverrideIconRef|Re(?:gisterIconRefFromIconFamily|leaseIconRef|moveIconRefOverride)|S(?:SL(?:AddDistinguishedName|C(?:lose|o(?:ntextGetTypeID|py(?:ALPNProtocols|CertificateAuthorities|DistinguishedNames|PeerTrust|RequestedPeerName(?:Length)?))|reateContext)|Get(?:BufferedReadSize|C(?:lientCertificateState|onnection)|D(?:atagramWriteSize|iffieHellmanParams)|EnabledCiphers|MaxDatagramRecordSize|N(?:egotiated(?:Cipher|ProtocolVersion)|umber(?:EnabledCiphers|SupportedCiphers))|P(?:eer(?:DomainName(?:Length)?|ID)|rotocolVersionM(?:ax|in))|S(?:ession(?:Option|State)|upportedCiphers))|Handshake|Re(?:Handshake|ad)|Set(?:ALPNProtocols|C(?:ertificate(?:Authorities)?|lientSideAuthenticate|onnection)|D(?:atagramHelloCookie|iffieHellmanParams)|E(?:nabledCiphers|rror)|IOFuncs|MaxDatagramRecordSize|OCSPResponse|P(?:eer(?:DomainName|ID)|rotocolVersionM(?:ax|in))|Session(?:Config|Option|TicketsEnabled))|Write)|e(?:cTrust(?:Evaluate(?:Async)?|edApplication(?:C(?:opyData|reateFromPath)|SetData))|tCustomIconsEnabled))|UpdateIconRef|sec_protocol_(?:metadata_get_negotiated_(?:ciphersuite|protocol_version)|options_(?:add_tls_ciphersuite(?:_group)?|set_tls_(?:diffie_hellman_parameters|m(?:ax_version|in_version)))))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.15.support.function.cf.c" }
          },
          match: "(\\s*)(\\bCF(?:Bundle(?:CloseBundleResourceMap|OpenBundleResource(?:Files|Map))|URLCopyParameterString)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.15.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCGColorSpaceIsHDR\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.3.support.function.c" }
          },
          match: "(\\s*)(\\b(?:DisposeGetScrapDataUPP|InvokeGetScrapDataUPP|NewGetScrapDataUPP|ReleaseFolder)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.4.support.function.c" }
          },
          match: "(\\s*)(\\b(?:AH(?:GotoMainTOC|RegisterHelpBook)|CFNetServiceRe(?:gister|solve)|Dispose(?:CaretHookUPP|DrawHookUPP|EOLHookUPP|Hi(?:ghHookUPP|tTestHookUPP)|NWidthHookUPP|T(?:E(?:ClickLoopUPP|DoTextUPP|FindWordUPP|RecalcUPP)|XNActionKeyMapperUPP|extWidthHookUPP)|URL(?:NotifyUPP|SystemEventUPP)|WidthHookUPP)|In(?:s(?:Time|XTime|tall(?:TimeTask|XTimeTask))|voke(?:CaretHookUPP|DrawHookUPP|EOLHookUPP|Hi(?:ghHookUPP|tTestHookUPP)|NWidthHookUPP|T(?:E(?:ClickLoopUPP|DoTextUPP|FindWordUPP|RecalcUPP)|XNActionKeyMapperUPP|extWidthHookUPP)|URL(?:NotifyUPP|SystemEventUPP)|WidthHookUPP))|LM(?:Get(?:ApFontID|SysFontSize)|Set(?:ApFontID|SysFontFam))|New(?:CaretHookUPP|DrawHookUPP|EOLHookUPP|Hi(?:ghHookUPP|tTestHookUPP)|NWidthHookUPP|T(?:E(?:ClickLoopUPP|DoTextUPP|FindWordUPP|RecalcUPP)|XNActionKeyMapperUPP|extWidthHookUPP)|URL(?:NotifyUPP|SystemEventUPP)|WidthHookUPP)|P(?:L(?:pos|str(?:c(?:at|hr|mp|py)|len|nc(?:at|mp|py)|pbrk|rchr|s(?:pn|tr)))|rimeTime(?:Task)?)|R(?:emoveTimeTask|mvTime)|SKSearch(?:Group(?:C(?:opyIndexes|reate)|GetTypeID)|Results(?:C(?:opyMatchingTerms|reateWith(?:Documents|Query))|Get(?:Count|InfoInRange|TypeID))))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.5.support.function.c" }
          },
          match: "(\\s*)(\\b(?:A(?:S(?:GetSourceStyles|SetSourceStyles)|UGraph(?:CountNodeConnections|Get(?:ConnectionInfo|N(?:ode(?:Connections|Info)|umberOfConnections))|NewNode)|udio(?:ConverterFillBuffer|Device(?:AddIOProc|Re(?:ad|moveIOProc))|FileComponent(?:DataIsThisFormat|FileIsThisFormat)))|Dispose(?:AVL(?:CompareItemsUPP|DisposeItemUPP|ItemSizeUPP|WalkUPP)|Drag(?:DrawingUPP|ReceiveHandlerUPP|SendDataUPP|TrackingHandlerUPP)|List(?:ClickLoopUPP|DefUPP|SearchUPP)|Menu(?:ItemDrawingUPP|TitleDrawingUPP)|S(?:crapPromiseKeeperUPP|leepQUPP)|Theme(?:ButtonDrawUPP|EraseUPP|IteratorUPP|TabTitleDrawUPP)|Window(?:PaintUPP|TitleDrawingUPP))|Get(?:NameFromSoundBank|ScriptManagerVariable)|Invoke(?:AVL(?:CompareItemsUPP|DisposeItemUPP|ItemSizeUPP|WalkUPP)|Drag(?:DrawingUPP|ReceiveHandlerUPP|SendDataUPP|TrackingHandlerUPP)|List(?:ClickLoopUPP|DefUPP|SearchUPP)|Menu(?:ItemDrawingUPP|TitleDrawingUPP)|S(?:crapPromiseKeeperUPP|leepQUPP)|Theme(?:ButtonDrawUPP|EraseUPP|IteratorUPP|TabTitleDrawUPP)|Window(?:PaintUPP|TitleDrawingUPP))|Music(?:Device(?:PrepareInstrument|ReleaseInstrument)|Sequence(?:LoadSMF(?:DataWithFlags|WithFlags)|Save(?:MIDIFile|SMFData)))|New(?:AVL(?:CompareItemsUPP|DisposeItemUPP|ItemSizeUPP|WalkUPP)|Drag(?:DrawingUPP|ReceiveHandlerUPP|SendDataUPP|TrackingHandlerUPP)|List(?:ClickLoopUPP|DefUPP|SearchUPP)|Menu(?:ItemDrawingUPP|TitleDrawingUPP)|S(?:crapPromiseKeeperUPP|leepQUPP)|Theme(?:ButtonDrawUPP|EraseUPP|IteratorUPP|TabTitleDrawUPP)|Window(?:PaintUPP|TitleDrawingUPP))|S(?:CNetworkInterfaceRefreshConfiguration|etScriptManagerVariable))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.5.support.function.clib.c" }
          },
          match: "(\\s*)(\\bdaemon\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.5.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCG(?:ContextDrawPDFDocument|PDFDocumentGet(?:ArtBox|BleedBox|CropBox|MediaBox|RotationAngle|TrimBox))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.6.support.function.c" }
          },
          match: "(\\s*)(\\b(?:Audio(?:Device(?:AddPropertyListener|GetProperty(?:Info)?|RemovePropertyListener|SetProperty)|File(?:C(?:omponent(?:Create|Initialize|OpenFile)|reate)|Initialize|Open)|Hardware(?:AddPropertyListener|GetProperty(?:Info)?|RemovePropertyListener|SetProperty)|Stream(?:AddPropertyListener|GetProperty(?:Info)?|RemovePropertyListener|SetProperty))|Button|DisposeKCCallbackUPP|ExtAudioFile(?:CreateNew|Open)|FlushEvents|I(?:nvokeKCCallbackUPP|sCmdChar)|KC(?:Add(?:AppleSharePassword|Callback|GenericPassword|I(?:nternetPassword(?:WithPath)?|tem))|C(?:hangeSettings|o(?:pyItem|untKeychains)|reateKeychain)|DeleteItem|Find(?:AppleSharePassword|FirstItem|GenericPassword|InternetPassword(?:WithPath)?|NextItem)|Get(?:Attribute|D(?:ata|efaultKeychain)|IndKeychain|Keychain(?:ManagerVersion|Name)?|Status)|IsInteractionAllowed|Lock|Make(?:AliasFromKCRef|KCRefFrom(?:Alias|FSRef))|NewItem|Re(?:lease(?:Item|Keychain|Search)|moveCallback)|Set(?:Attribute|D(?:ata|efaultKeychain)|InteractionAllowed)|U(?:nlock|pdateItem))|Munger|New(?:KCCallbackUPP|MusicTrackFrom)|S(?:CNetworkCheckReachabilityBy(?:Address|Name)|ecHost(?:CreateGuest|RemoveGuest|Se(?:lect(?:Guest|edGuest)|t(?:GuestStatus|HostingPort))))|UC(?:CreateTextBreakLocator|DisposeTextBreakLocator|FindTextBreak)|kc(?:add(?:applesharepassword|genericpassword|internetpassword(?:withpath)?)|createkeychain|find(?:applesharepassword|genericpassword|internetpassword(?:withpath)?)|getkeychainname|unlock))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.6.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCG(?:ConfigureDisplayMode|Display(?:AvailableModes|BestModeForParameters(?:AndRefreshRate)?|CurrentMode|SwitchToMode)|EnableEventStateCombining|FontCreateWithPlatformFont|InhibitLocalEvents|Post(?:KeyboardEvent|MouseEvent|ScrollWheelEvent)|SetLocalEvents(?:FilterDuringSuppressionState|SuppressionInterval))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.7.support.function.c" }
          },
          match: "(\\s*)(\\b(?:Au(?:dioHardware(?:AddRunLoopSource|RemoveRunLoopSource)|thorization(?:CopyPrivilegedReference|ExecuteWithPrivileges))|C(?:MSEncode(?:rSetEncapsulatedContentType)?|SSM_(?:AC_(?:AuthCompute|PassThrough)|C(?:L_(?:C(?:ert(?:Abort(?:Cache|Query)|C(?:ache|reateTemplate)|DescribeFormat|G(?:et(?:All(?:Fields|TemplateFields)|First(?:CachedFieldValue|FieldValue)|KeyInfo|Next(?:CachedFieldValue|FieldValue))|roup(?:FromVerifiedBundle|ToSignedBundle))|Sign|Verify(?:WithKey)?)|rl(?:A(?:bort(?:Cache|Query)|ddCert)|C(?:ache|reateTemplate)|DescribeFormat|Get(?:All(?:CachedRecordFields|Fields)|First(?:CachedFieldValue|FieldValue)|Next(?:CachedFieldValue|FieldValue))|RemoveCert|S(?:etFields|ign)|Verify(?:WithKey)?))|FreeField(?:Value|s)|IsCertInC(?:achedCrl|rl)|PassThrough)|SP_(?:C(?:hangeLogin(?:Acl|Owner)|reate(?:AsymmetricContext|D(?:eriveKeyContext|igestContext)|KeyGenContext|MacContext|PassThroughContext|RandomGenContext|S(?:ignatureContext|ymmetricContext)))|Get(?:Login(?:Acl|Owner)|OperationalStatistics)|Log(?:in|out)|ObtainPrivateKeyFromPublicKey|PassThrough)|hangeKey(?:Acl|Owner))|D(?:L_(?:Authenticate|C(?:hangeDb(?:Acl|Owner)|reateRelation)|D(?:ata(?:AbortQuery|Delete|Get(?:F(?:irst|romUniqueRecordId)|Next)|Insert|Modify)|b(?:C(?:lose|reate)|Delete|Open)|estroyRelation)|Free(?:NameList|UniqueRecord)|GetDb(?:Acl|Name(?:FromHandle|s)|Owner)|PassThrough)|e(?:cryptData(?:Final|Init(?:P)?|P|Update)?|leteContext(?:Attributes)?|riveKey)|igestData(?:Clone|Final|Init|Update)?)|EncryptData(?:Final|Init(?:P)?|P|Update)?|Free(?:Context|Key)|Ge(?:nerate(?:AlgorithmParams|Key(?:P(?:air(?:P)?)?)?|Mac(?:Final|Init|Update)?|Random)|t(?:APIMemoryFunctions|Context(?:Attribute)?|Key(?:Acl|Owner)|ModuleGUIDFromHandle|Privilege|SubserviceUIDFromHandle|TimeValue))|In(?:it|troduce)|ListAttachedModuleManagers|Module(?:Attach|Detach|Load|Unload)|Query(?:KeySizeInBits|Size)|Retrieve(?:Counter|UniqueId)|S(?:et(?:Context|Privilege)|ignData(?:Final|Init|Update)?)|T(?:P_(?:ApplyCrlToDb|C(?:ert(?:CreateTemplate|G(?:etAllTemplateFields|roup(?:Construct|Prune|ToTupleGroup|Verify))|Re(?:claim(?:Abort|Key)|moveFromCrlTemplate|voke)|Sign)|onfirmCredResult|rl(?:CreateTemplate|Sign|Verify))|Form(?:Request|Submit)|PassThrough|Re(?:ceiveConfirmation|trieveCredResult)|SubmitCredRequest|TupleGroupToCertGroup)|erminate)|U(?:n(?:introduce|wrapKey(?:P)?)|pdateContextAttributes)|Verify(?:D(?:ata(?:Final|Init|Update)?|evice)|Mac(?:Final|Init|Update)?)|WrapKey(?:P)?)|reateThreadPool)|Dispose(?:Debugger(?:DisposeThreadUPP|NewThreadUPP|ThreadSchedulerUPP)|Thread(?:EntryUPP|S(?:chedulerUPP|witchUPP)|TerminationUPP)?)|Get(?:CurrentThread|DefaultThreadStackSize|Thread(?:CurrentTaskRef|State(?:GivenTaskRef)?))|I(?:C(?:Add(?:MapEntry|Profile)|Begin|C(?:ount(?:MapEntries|Pr(?:ef|ofiles))|reateGURLEvent)|Delete(?:MapEntry|Pr(?:ef|ofile))|E(?:ditPreferences|nd)|FindPrefHandle|Get(?:C(?:onfigName|urrentProfile)|DefaultPref|Ind(?:MapEntry|Pr(?:ef|ofile))|MapEntry|P(?:erm|r(?:ef(?:Handle)?|ofileName))|Seed|Version)|LaunchURL|Map(?:Entries(?:Filename|TypeCreator)|Filename|TypeCreator)|ParseURL|S(?:e(?:ndGURLEvent|t(?:CurrentProfile|MapEntry|Pr(?:ef(?:Handle)?|ofileName)))|t(?:art|op)))|nvoke(?:Debugger(?:DisposeThreadUPP|NewThreadUPP|ThreadSchedulerUPP)|Thread(?:EntryUPP|S(?:chedulerUPP|witchUPP)|TerminationUPP))|sMetric)|M(?:DS_(?:In(?:itialize|stall)|Terminate|Uninstall)|P(?:A(?:llocate(?:Aligned|TaskStorageIndex)?|rmTimer)|BlockC(?:lear|opy)|C(?:a(?:ncelTimer|useNotification)|reate(?:CriticalRegion|Event|Notification|Queue|Semaphore|T(?:ask|imer))|urrentTaskID)|D(?:e(?:allocateTaskStorageIndex|l(?:ayUntil|ete(?:CriticalRegion|Event|Notification|Queue|Semaphore|Timer)))|isposeTaskException)|E(?:nterCriticalRegion|x(?:it(?:CriticalRegion)?|tractTaskState))|Free|Get(?:AllocatedBlockSize|Next(?:CpuID|TaskID)|TaskStorageValue)|ModifyNotification(?:Parameters)?|NotifyQueue|Processors(?:Scheduled)?|Re(?:gisterDebugger|moteCall(?:CFM)?)|S(?:et(?:E(?:vent|xceptionHandler)|QueueReserve|T(?:ask(?:St(?:ate|orageValue)|Weight)|imerNotify))|ignalSemaphore)|T(?:askIsPreemptive|erminateTask|hrowException)|UnregisterDebugger|Wait(?:ForEvent|On(?:Queue|Semaphore))|Yield)|usicTrackNewExtendedControlEvent)|New(?:Debugger(?:DisposeThreadUPP|NewThreadUPP|ThreadSchedulerUPP)|Thread(?:EntryUPP|S(?:chedulerUPP|witchUPP)|TerminationUPP)?)|Se(?:c(?:A(?:CL(?:C(?:opySimpleContents|reateFromSimpleContents)|GetAuthorizations|Set(?:Authorizations|SimpleContents))|ccess(?:C(?:opySelectedACLList|reateFromOwnerAndACL)|GetOwnerAndACL))|Certificate(?:C(?:opyPreference|reateFromData)|Get(?:AlgorithmID|CLHandle|Data|Issuer|Subject|Type)|SetPreference)|Identity(?:CopyPreference|Se(?:arch(?:C(?:opyNext|reate)|GetTypeID)|tPreference))|Key(?:CreatePair|Ge(?:nerate|tC(?:S(?:PHandle|SMKey)|redentials))|chain(?:Get(?:CSPHandle|DLDBHandle)|Item(?:Export|Get(?:DLDBHandle|UniqueRecordID)|Import)|Search(?:C(?:opyNext|reateFromAttributes)|GetTypeID)))|Policy(?:Get(?:OID|TPHandle|Value)|Se(?:arch(?:C(?:opyNext|reate)|GetTypeID)|tValue))|Trust(?:Get(?:CssmResult(?:Code)?|Result|TPHandle)|SetParameters))|t(?:DebuggerNotificationProcs|Thread(?:ReadyGivenTaskRef|S(?:cheduler|tate(?:EndCritical)?|witcher)|Terminator)))|Thread(?:BeginCritical|CurrentStackSpace|EndCritical)|YieldTo(?:AnyThread|Thread))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.7.support.function.cf.c" }
          },
          match: "(\\s*)(\\bCFURLEnumeratorGetSourceDidChange\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.8.support.function.c" }
          },
          match: "(\\s*)(\\b(?:A(?:TS(?:CreateFontQueryRunLoopSource|Font(?:A(?:ctivateFrom(?:FileReference|Memory)|pplyFunction)|Deactivate|F(?:amily(?:ApplyFunction|FindFrom(?:Name|QuickDrawName)|Get(?:Encoding|Generation|Name|QuickDrawName)|Iterator(?:Create|Next|Re(?:lease|set)))|indFrom(?:Container|Name|PostScriptName))|Get(?:AutoActivationSettingForApplication|Container(?:FromFileReference)?|F(?:ileReference|ontFamilyResource)|G(?:eneration|lobalAutoActivationSetting)|HorizontalMetrics|Name|PostScriptName|Table(?:Directory)?|VerticalMetrics)|I(?:sEnabled|terator(?:Create|Next|Re(?:lease|set)))|Notif(?:ication(?:Subscribe|Unsubscribe)|y)|Set(?:AutoActivationSettingForApplication|Enabled|GlobalAutoActivationSetting))|GetGeneration)|bsolute(?:DeltaTo(?:Duration|Nanoseconds)|To(?:Duration|Nanoseconds))|dd(?:A(?:bsoluteToAbsolute|tomic(?:16|8)?)|CollectionItem(?:Hdl)?|DurationToAbsolute|FolderDescriptor|NanosecondsToAbsolute|Resource))|B(?:atteryCount|it(?:And(?:Atomic(?:16|8)?)?|Clr|Not|Or(?:Atomic(?:16|8)?)?|S(?:et|hift)|Tst|Xor(?:Atomic(?:16|8)?)?))|C(?:S(?:Copy(?:MachineName|UserName)|GetComponentsThreadMode|SetComponentsThreadMode)|a(?:llComponent(?:C(?:anDo|lose)|Dispatch|Function(?:WithStorage(?:ProcInfo)?)?|Get(?:MPWorkFunction|PublicResource)|Open|Register|Target|Unregister|Version)|ptureComponent)|hangedResource|lo(?:neCollection|se(?:Component(?:ResFile)?|ResFile))|o(?:llectionTagExists|mpareAndSwap|pyCollection|reEndian(?:FlipData|GetFlipper|InstallFlipper)|unt(?:1(?:Resources|Types)|Co(?:llection(?:Items|Owners|Tags)|mponent(?:Instances|s))|Resources|T(?:aggedCollectionItems|ypes)))|ur(?:ResFile|rentProcessorSpeed))|D(?:e(?:bugAssert|crementAtomic(?:16|8)?|l(?:ay|e(?:gateComponentCall|teGestaltValue))|queue|t(?:achResource(?:File)?|ermineIfPathIsEnclosedByFolder))|ispose(?:Co(?:llection(?:ExceptionUPP|FlattenUPP)?|mponent(?:FunctionUPP|MPWorkFunctionUPP|RoutineUPP))|De(?:bug(?:AssertOutputHandlerUPP|Component(?:CallbackUPP)?)|ferredTaskUPP)|ExceptionHandlerUPP|F(?:NSubscriptionUPP|SVolume(?:EjectUPP|MountUPP|UnmountUPP)|olderManagerNotificationUPP)|GetMissingComponentResourceUPP|Handle|IOCompletionUPP|Ptr|ResErrUPP|S(?:electorFunctionUPP|peech(?:DoneUPP|ErrorUPP|PhonemeUPP|SyncUPP|TextDoneUPP|WordUPP))|TimerUPP)|urationTo(?:Absolute|Nanoseconds))|E(?:mpty(?:Collection|Handle)|nqueue)|F(?:N(?:GetDirectoryForSubscription|Notify(?:All|ByPath)?|Subscribe(?:ByPath)?|Unsubscribe)|S(?:AllocateFork|C(?:a(?:ncelVolumeOperation|talogSearch)|lose(?:Fork|Iterator)|o(?:mpareFSRefs|py(?:AliasInfo|D(?:ADiskForVolume|iskIDForVolume)|Object(?:Async|Sync)|URLForVolume))|reate(?:DirectoryUnicode|F(?:ile(?:AndOpenForkUnicode|Unicode)|ork)|Res(?:File|ourceF(?:ile|ork))|StringFromHFSUniStr|VolumeOperation))|D(?:e(?:lete(?:Fork|Object)|termineIfRefIsEnclosedByFolder)|isposeVolumeOperation)|E(?:jectVolume(?:Async|Sync)|xchangeObjects)|F(?:i(?:le(?:Operation(?:C(?:ancel|opyStatus|reate)|GetTypeID|ScheduleWithRunLoop|UnscheduleFromRunLoop)|Security(?:C(?:opyAccessControlList|reate(?:WithFSPermissionInfo)?)|Get(?:Group(?:UUID)?|Mode|Owner(?:UUID)?|TypeID)|RefCreateCopy|Set(?:AccessControlList|Group(?:UUID)?|Mode|Owner(?:UUID)?)))|ndFolder)|lush(?:Fork|Volume)|ollowFinderAlias)|Get(?:Async(?:EjectStatus|MountStatus|UnmountStatus)|CatalogInfo(?:Bulk)?|DataForkName|Fork(?:CBInfo|Position|Size)|HFSUniStrFromString|ResourceForkName|TemporaryDirectoryForReplaceObject|Volume(?:ForD(?:ADisk|iskID)|Info|MountInfo(?:Size)?|Parms))|I(?:s(?:AliasFile|FSRefValid)|terateForks)|LockRange|M(?:a(?:keFSRefUnicode|tchAliasBulk)|o(?:unt(?:LocalVolume(?:Async|Sync)|ServerVolume(?:Async|Sync))|veObject(?:Async|Sync|ToTrash(?:Async|Sync))?))|NewAlias(?:FromPath|Minimal(?:Unicode)?|Unicode)?|Open(?:Fork|Iterator|OrphanResFile|Res(?:File|ourceFile))|Path(?:CopyObject(?:Async|Sync)|FileOperationCopyStatus|GetTemporaryDirectoryForReplaceObject|M(?:akeRef(?:WithOptions)?|oveObject(?:Async|Sync|ToTrash(?:Async|Sync)))|ReplaceObject)|Re(?:adFork|fMakePath|nameUnicode|placeObject|so(?:lve(?:Alias(?:File(?:WithMountFlags)?|WithMountFlags)?|NodeID)|urceFileAlreadyOpen))|Set(?:CatalogInfo|Fork(?:Position|Size)|VolumeInfo)|U(?:n(?:l(?:inkObject|ockRange)|mountVolume(?:Async|Sync))|pdateAlias)|VolumeMount|WriteFork)|i(?:nd(?:Folder|NextComponent)|x(?:2(?:Frac|Long|X)|ATan2|Div|Mul|R(?:atio|ound)))|latten(?:Collection(?:ToHdl)?|PartialCollection)|rac(?:2(?:Fix|X)|Cos|Div|Mul|S(?:in|qrt)))|Ge(?:stalt|t(?:1(?:Ind(?:Resource|Type)|NamedResource|Resource)|Alias(?:Size(?:FromPtr)?|UserType(?:FromPtr)?)|C(?:PUSpeed|o(?:llection(?:DefaultAttributes|ExceptionProc|Item(?:Hdl|Info)?|RetainCount)|mponent(?:In(?:dString|fo|stance(?:Error|Storage))|ListModSeed|Public(?:IndString|Resource(?:List)?)|Re(?:fcon|source)|TypeModSeed)))|Debug(?:ComponentInfo|OptionInfo)|Folder(?:NameUnicode|Types)|HandleSize|Ind(?:Resource|Type|exedCollection(?:Item(?:Hdl|Info)?|Tag))|Ma(?:cOSStatus(?:CommentString|ErrorString)|xResourceSize)|N(?:amedResource|e(?:wCollection|xt(?:FOND|ResourceFile)))|PtrSize|Res(?:Attrs|FileAttrs|Info|ource(?:SizeOnDisk)?)|SpeechInfo|T(?:aggedCollectionItem(?:Info)?|opResourceFile)))|H(?:ClrRBit|GetState|Lock(?:Hi)?|Set(?:RBit|State)|Unlock|and(?:AndHand|ToHand)|omeResFile)|I(?:dentifyFolder|n(?:crementAtomic(?:16|8)?|s(?:ertResourceFile|tall(?:DebugAssertOutputHandler|ExceptionHandler))|v(?:alidateFolderDescriptorCache|oke(?:Co(?:llection(?:ExceptionUPP|FlattenUPP)|mponent(?:MPWorkFunctionUPP|RoutineUPP))|De(?:bug(?:AssertOutputHandlerUPP|ComponentCallbackUPP)|ferredTaskUPP)|ExceptionHandlerUPP|F(?:NSubscriptionUPP|SVolume(?:EjectUPP|MountUPP|UnmountUPP)|olderManagerNotificationUPP)|GetMissingComponentResourceUPP|IOCompletionUPP|ResErrUPP|S(?:electorFunctionUPP|peech(?:DoneUPP|ErrorUPP|PhonemeUPP|SyncUPP|TextDoneUPP|WordUPP))|TimerUPP)))|s(?:H(?:andleValid|eapValid)|PointerValid))|L(?:M(?:Get(?:BootDrive|IntlSpec|MemErr|Res(?:Err|Load)|SysMap|TmpResLoad)|Set(?:BootDrive|IntlSpec|MemErr|Res(?:Err|Load)|Sys(?:FontSize|Map)|TmpResLoad))|o(?:adResource|cale(?:CountNames|Get(?:IndName|Name)|Operation(?:CountLocales|GetLocales))|ng2Fix))|M(?:PSetTaskType|aximumProcessorSpeed|emError|i(?:croseconds|nimumProcessorSpeed))|N(?:anosecondsTo(?:Absolute|Duration)|ew(?:Co(?:llection(?:ExceptionUPP|FlattenUPP)?|mponent(?:FunctionUPP|MPWorkFunctionUPP|RoutineUPP))|De(?:bug(?:AssertOutputHandlerUPP|Component(?:CallbackUPP)?|Option)|ferredTaskUPP)|E(?:mptyHandle|xceptionHandlerUPP)|F(?:NSubscriptionUPP|SVolume(?:EjectUPP|MountUPP|UnmountUPP)|olderManagerNotificationUPP)|Ge(?:staltValue|tMissingComponentResourceUPP)|Handle(?:Clear)?|IOCompletionUPP|Ptr(?:Clear)?|ResErrUPP|S(?:electorFunctionUPP|peech(?:DoneUPP|ErrorUPP|PhonemeUPP|SyncUPP|TextDoneUPP|WordUPP))|TimerUPP))|Open(?:A(?:Component(?:ResFile)?|DefaultComponent)|Component(?:ResFile)?|DefaultComponent)|P(?:B(?:AllocateFork(?:Async|Sync)|C(?:atalogSearch(?:Async|Sync)|lose(?:Fork(?:Async|Sync)|Iterator(?:Async|Sync))|ompareFSRefs(?:Async|Sync)|reate(?:DirectoryUnicode(?:Async|Sync)|F(?:ile(?:AndOpenForkUnicode(?:Async|Sync)|Unicode(?:Async|Sync))|ork(?:Async|Sync))))|Delete(?:Fork(?:Async|Sync)|Object(?:Async|Sync))|ExchangeObjects(?:Async|Sync)|F(?:S(?:CopyFile(?:Async|Sync)|ResolveNodeID(?:Async|Sync))|lush(?:Fork(?:Async|Sync)|Volume(?:Async|Sync)))|Get(?:CatalogInfo(?:Async|Bulk(?:Async|Sync)|Sync)|Fork(?:CBInfo(?:Async|Sync)|Position(?:Async|Sync)|Size(?:Async|Sync))|VolumeInfo(?:Async|Sync))|IterateForks(?:Async|Sync)|M(?:akeFSRefUnicode(?:Async|Sync)|oveObject(?:Async|Sync))|Open(?:Fork(?:Async|Sync)|Iterator(?:Async|Sync))|Re(?:adFork(?:Async|Sync)|nameUnicode(?:Async|Sync))|Set(?:CatalogInfo(?:Async|Sync)|Fork(?:Position(?:Async|Sync)|Size(?:Async|Sync))|VolumeInfo(?:Async|Sync))|UnlinkObject(?:Async|Sync)|WriteFork(?:Async|Sync)|X(?:LockRange(?:Async|Sync)|UnlockRange(?:Async|Sync)))|tr(?:AndHand|To(?:Hand|XHand))|urgeCollection(?:Tag)?)|Re(?:a(?:d(?:Location|PartialResource)|llocateHandle)|coverHandle|gisterComponent(?:FileRef(?:Entries)?|Resource(?:File)?)?|lease(?:Collection|Resource)|move(?:CollectionItem|FolderDescriptor|IndexedCollectionItem|Resource)|place(?:GestaltValue|IndexedCollectionItem(?:Hdl)?)|s(?:Error|olveComponentAlias)|tainCollection)|S(?:64Compare|SL(?:GetProtocolVersion|SetProtocolVersion)|e(?:cTranformCustomGetAttribute|t(?:AliasUserType(?:WithPtr)?|Co(?:llection(?:DefaultAttributes|ExceptionProc|ItemInfo)|mponent(?:Instance(?:Error|Storage)|Refcon))|De(?:bugOptionValue|faultComponent)|GestaltValue|HandleSize|IndexedCollectionItemInfo|PtrSize|Res(?:Attrs|FileAttrs|Info|Load|Purge|ourceSize)|SpeechInfo))|leepQ(?:Install|Remove)|peak(?:Buffer|String|Text)|ub(?:AbsoluteFromAbsolute|DurationFromAbsolute|NanosecondsFromAbsolute)|ysError)|T(?:askLevel|e(?:mpNewHandle|stAnd(?:Clear|Set)|xtToPhonemes)|ickCount)|U(?:64Compare|n(?:captureComponent|flattenCollection(?:FromHdl)?|ique(?:1ID|ID)|registerComponent|signedFixedMulDiv)|p(?:Time|date(?:ResFile|SystemActivity))|se(?:Dictionary|ResFile))|W(?:S(?:Get(?:CFTypeIDFromWSTypeID|WSTypeIDFromCFType)|Method(?:Invocation(?:Add(?:DeserializationOverride|SerializationOverride)|C(?:opy(?:P(?:arameters|roperty)|Serialization)|reate(?:FromSerialization)?)|GetTypeID|Invoke|S(?:cheduleWithRunLoop|et(?:CallBack|P(?:arameters|roperty)))|UnscheduleFromRunLoop)|ResultIsFault)|ProtocolHandler(?:C(?:opy(?:FaultDocument|Property|Re(?:plyD(?:ictionary|ocument)|questD(?:ictionary|ocument)))|reate)|GetTypeID|Set(?:DeserializationOverride|Property|SerializationOverride)))|ide(?:Add|BitShift|Compare|Divide|Multiply|Negate|S(?:hift|quareRoot|ubtract)|WideDivide)|rite(?:PartialResource|Resource))|X2F(?:ix|rac)|annuity|compound|d(?:ec2(?:f|l|num|s(?:tr)?)|tox80)|getaudit|num(?:2dec|tostring)|r(?:andomx|elation)|s(?:etaudit|tr2dec)|x80tod)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.8.support.function.cf.c" }
          },
          match: "(\\s*)(\\bCFXML(?:Node(?:Create(?:Copy)?|Get(?:InfoPtr|String|Type(?:Code|ID)|Version))|Parser(?:Abort|C(?:opyErrorDescription|reate(?:WithDataFromURL)?)|Get(?:C(?:allBacks|ontext)|Document|L(?:ineNumber|ocation)|S(?:ourceURL|tatusCode)|TypeID)|Parse)|Tree(?:Create(?:FromData(?:WithError)?|With(?:DataFromURL|Node)|XMLData)|GetNode))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.8.support.function.mac-classic.c" }
          },
          match: "(\\s*)(\\b(?:Debug(?:Str|ger)|SysBreak(?:Func|Str)?)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.8.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCG(?:Re(?:gisterScreenRefreshCallback|leaseScreenRefreshRects)|Screen(?:RegisterMoveCallback|UnregisterMoveCallback)|UnregisterScreenRefreshCallback|W(?:aitForScreen(?:RefreshRects|UpdateRects)|indowServerCFMachPort))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.9.support.function.c" }
          },
          match: "(\\s*)(\\b(?:AX(?:APIEnabled|MakeProcessTrusted|UIElementPostKeyboardEvent)|CopyProcessName|ExitToShell|Get(?:CurrentProcess|FrontProcess|NextProcess|Process(?:BundleLocation|ForPID|Information|PID))|IsProcessVisible|KillProcess|LaunchApplication|ProcessInformationCopyDictionary|S(?:SL(?:Copy(?:PeerCertificates|TrustedRoots)|DisposeContext|Get(?:Allows(?:AnyRoot|Expired(?:Certs|Roots))|EnableCertVerify|ProtocolVersionEnabled|RsaBlinding)|NewContext|Set(?:Allows(?:AnyRoot|Expired(?:Certs|Roots))|EnableCertVerify|ProtocolVersionEnabled|RsaBlinding|TrustedRoots))|ameProcess|e(?:c(?:ChooseIdentity(?:AsSheet)?|DisplayCertificate(?:Group)?|EditTrust(?:AsSheet)?|Policy(?:CreateWithOID|SetProperties))|tFrontProcess(?:WithOptions)?)|howHideProcess)|WakeUpProcess)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.9.support.function.cf.c" }
          },
          match: "(\\s*)(\\bCF(?:PreferencesCopyApplicationList|URL(?:Create(?:DataAndPropertiesFromResource|FromFSRef|PropertyFromResource)|DestroyResource|GetFSRef|WriteDataAndPropertiesToResource))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.9.support.function.clib.c" }
          },
          match: "(\\s*)(\\b(?:drem|finite|gamma|r(?:inttol|oundtol)|significand)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.9.support.function.dispatch.c" }
          },
          match: "(\\s*)(\\bdispatch_(?:debug(?:v)?|get_current_queue)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.9.support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCG(?:C(?:ontextS(?:electFont|how(?:Glyphs(?:AtPoint|WithAdvances)?|Text(?:AtPoint)?))|ursorIs(?:DrawnInFramebuffer|Visible))|Display(?:FadeOperationInProgress|I(?:OServicePort|sCaptured)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.tba.support.function.c" }
          },
          match: "(\\s*)(\\b(?:AUGraph(?:Add(?:Node|RenderNotify)|C(?:l(?:earConnections|ose)|o(?:nnectNodeInput|untNodeInteractions))|DisconnectNodeInput|Get(?:CPULoad|In(?:dNode|teractionInfo)|MaxCPULoad|N(?:ode(?:Count|In(?:foSubGraph|teractions))|umberOfInteractions))|I(?:nitialize|s(?:Initialized|NodeSubGraph|Open|Running))|N(?:ewNodeSubGraph|odeInfo)|Open|Remove(?:Node|RenderNotify)|S(?:etNodeInputCallback|t(?:art|op))|U(?:ninitialize|pdate))|DisposeAUGraph|NewAUGraph|QL(?:PreviewRequest(?:C(?:opy(?:ContentUTI|Options|URL)|reate(?:Context|PDFContext))|FlushContext|Get(?:DocumentObject|GeneratorBundle|TypeID)|IsCancelled|Set(?:D(?:ataRepresentation|ocumentObject)|URLRepresentation))|Thumbnail(?:C(?:ancel|opy(?:DocumentURL|Image|Options)|reate)|DispatchAsync|Get(?:ContentRect|MaximumSize|TypeID)|IsCancelled|Request(?:C(?:opy(?:ContentUTI|Options|URL)|reateContext)|FlushContext|Get(?:DocumentObject|GeneratorBundle|MaximumSize|TypeID)|IsCancelled|Set(?:DocumentObject|Image(?:AtURL|WithData)?|ThumbnailWith(?:DataRepresentation|URLRepresentation))))))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.10.c" }
          },
          match: "(\\s*)(\\b(?:C(?:GLGetDeviceFromGLRenderer|MS(?:DecoderCopySignerTimestampWithPolicy|EncoderCopySignerTimestampWithPolicy)|TRubyAnnotation(?:Create(?:Copy)?|Get(?:Alignment|Overhang|SizeFactor|T(?:extForPosition|ypeID))))|JSGlobalContext(?:CopyName|SetName)|LSCopy(?:ApplicationURLsForBundleIdentifier|DefaultApplicationURLFor(?:ContentType|URL))|SecAccessControl(?:CreateWithFlags|GetTypeID)|UTType(?:CopyAllTagsWithClass|IsD(?:eclared|ynamic))|launch_activate_socket|os_re(?:lease|tain)|qos_class_(?:main|self)|simd_inverse)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.11.c" }
          },
          match: "(\\s*)(\\b(?:Audio(?:ComponentInstantiate|ServicesPlay(?:AlertSoundWithCompletion|SystemSoundWithCompletion))|C(?:MSEncoderSetSignerAlgorithm|T(?:LineEnumerateCaretOffsets|RunGetBaseAdvancesAndOrigins))|IORegistryEntryCopy(?:FromPath|Path)|JSValueIs(?:Array|Date)|MIDI(?:ClientCreateWithBlock|DestinationCreateWithBlock|InputPortCreateWithBlock)|connectx|disconnectx|xpc_(?:array_get_(?:array|dictionary)|dictionary_get_(?:array|dictionary)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.12.c" }
          },
          match: "(\\s*)(\\b(?:CTRubyAnnotationCreateWithAttributes|IOSurface(?:AllowsPixelSizeCasting|SetPurgeable)|JS(?:Object(?:Get(?:ArrayBufferByte(?:Length|sPtr)|TypedArray(?:B(?:uffer|yte(?:Length|Offset|sPtr))|Length))|Make(?:ArrayBufferWithBytesNoCopy|TypedArray(?:With(?:ArrayBuffer(?:AndOffset)?|BytesNoCopy))?))|ValueGetTypedArrayType)|MDItemsCopyAttributes|Sec(?:CertificateCopyNormalized(?:IssuerSequence|SubjectSequence)|Key(?:C(?:opy(?:Attributes|ExternalRepresentation|KeyExchangeResult|PublicKey)|reate(?:DecryptedData|EncryptedData|RandomKey|Signature|WithData))|IsAlgorithmSupported|VerifySignature))|os_(?:log_(?:create|type_enabled)|unfair_lock_(?:assert_(?:not_owner|owner)|lock|trylock|unlock))|xpc_connection_activate)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.13.c" }
          },
          match: "(\\s*)(\\b(?:AudioUnitExtension(?:CopyComponentList|SetComponentList)|C(?:GImage(?:DestinationAddAuxiliaryDataInfo|SourceCopyAuxiliaryDataInfoAtIndex)|TFontManagerCreateFontDescriptorsFromData|V(?:ColorPrimariesGet(?:IntegerCodePointForString|StringForIntegerCodePoint)|TransferFunctionGet(?:IntegerCodePointForString|StringForIntegerCodePoint)|YCbCrMatrixGet(?:IntegerCodePointForString|StringForIntegerCodePoint)))|IOSurfaceGet(?:Bit(?:DepthOfComponentOfPlane|OffsetOfComponentOfPlane)|N(?:ameOfComponentOfPlane|umberOfComponentsOfPlane)|RangeOfComponentOfPlane|Subsampling|TypeOfComponentOfPlane)|SecCertificateCopySerialNumberData)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.14.c" }
          },
          match: "(\\s*)(\\b(?:AEDeterminePermissionToAutomateTarget|C(?:GImageSourceGetPrimaryImageIndex|TFramesetterCreateWithTypesetter)|Sec(?:CertificateCopyKey|Trust(?:EvaluateWithError|SetSignedCertificateTimestamps))|sec_(?:certificate_c(?:opy_ref|reate)|identity_c(?:opy_(?:certificates_ref|ref)|reate(?:_with_certificates)?)|protocol_(?:metadata_(?:access_(?:distinguished_names|ocsp_response|peer_certificate_chain|supported_signature_algorithms)|c(?:hallenge_parameters_are_equal|opy_peer_public_key|reate_secret(?:_with_context)?)|get_(?:early_data_accepted|negotiated_(?:protocol|tls_ciphersuite)|server_name)|peers_are_equal)|options_(?:add_(?:pre_shared_key|tls_application_protocol)|set_(?:challenge_block|key_update_block|local_identity|peer_authentication_required|tls_(?:false_start_enabled|is_fallback_attempt|ocsp_enabled|re(?:negotiation_enabled|sumption_enabled)|s(?:ct_enabled|erver_name)|tickets_enabled)|verify_block)))|trust_c(?:opy_ref|reate)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.15.c" }
          },
          match: "(\\s*)(\\b(?:C(?:GAnimateImage(?:AtURLWithBlock|DataWithBlock)|T(?:FontManager(?:RegisterFont(?:Descriptors|URLs)|UnregisterFont(?:Descriptors|URLs))|GlyphInfoGetGlyph))|JS(?:Object(?:DeletePropertyForKey|GetPropertyForKey|HasPropertyForKey|MakeDeferredPromise|SetPropertyForKey)|Value(?:IsSymbol|MakeSymbol))|SecTrustEvaluateAsyncWithError|aligned_alloc|sec_(?:identity_access_certificates|protocol_(?:metadata_(?:access_pre_shared_keys|get_negotiated_tls_protocol_version)|options_(?:a(?:ppend_tls_ciphersuite(?:_group)?|re_equal)|get_default_m(?:ax_(?:dtls_protocol_version|tls_protocol_version)|in_(?:dtls_protocol_version|tls_protocol_version))|set_(?:m(?:ax_tls_protocol_version|in_tls_protocol_version)|pre_shared_key_selection_block|tls_pre_shared_key_identity_hint))))|xpc_type_get_name)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.8.c" }
          },
          match: "(\\s*)(\\b(?:A(?:ECompareDesc|udioQueueProcessingTapGetQueueTime)|C(?:GImage(?:Destination(?:AddImageAndMetadata|CopyImageSource)|Metadata(?:C(?:opy(?:StringValueWithPath|Tag(?:MatchingImageProperty|WithPath|s))|reate(?:FromXMPData|Mutable(?:Copy)?|XMPData))|EnumerateTagsUsingBlock|Re(?:gisterNamespaceForPrefix|moveTagWithPath)|Set(?:TagWithPath|Value(?:MatchingImageProperty|WithPath))|Tag(?:C(?:opy(?:Name(?:space)?|Prefix|Qualifiers|Value)|reate)|GetType(?:ID)?))|SourceCopyMetadataAtIndex)|MS(?:DecoderCopySigner(?:SigningTime|Timestamp(?:Certificates)?)|EncoderCopySignerTimestamp)|T(?:Font(?:CopyDefaultCascadeListForLanguages|GetOpticalBoundsForGlyphs|Manager(?:RegisterGraphicsFont|UnregisterGraphicsFont))|LineGetBoundsWithOptions)|VImageBufferCreateColorSpaceFromAttachments|opyInstrumentInfoFromSoundBank))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.9.c" }
          },
          match: "(\\s*)(\\b(?:A(?:XIsProcessTrustedWithOptions|udioHardware(?:CreateAggregateDevice|DestroyAggregateDevice))|C(?:GImageSourceRemoveCacheAtIndex|TFont(?:CreateForStringWithLanguage|Descriptor(?:CreateCopyWith(?:Family|SymbolicTraits)|MatchFontDescriptorsWithProgressHandler)))|FSEventStreamSetExclusionPaths|Sec(?:PolicyCreate(?:Revocation|WithProperties)|Trust(?:Copy(?:Exceptions|Result)|GetNetworkFetchAllowed|Set(?:Exceptions|NetworkFetchAllowed|OCSPResponse)))|xpc_activity_(?:copy_criteria|get_state|register|s(?:et_(?:criteria|state)|hould_defer)|unregister))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.c" }
          }
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cf.10.12.c" }
          },
          match: "(\\s*)(\\bCFDateFormatterCreateISO8601Formatter\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cf.10.8.c" }
          },
          match: "(\\s*)(\\bCFFileSecurityClearProperties\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cf.10.9.c" }
          },
          match: "(\\s*)(\\bCF(?:Autorelease|R(?:eadStream(?:CopyDispatchQueue|SetDispatchQueue)|unLoopTimer(?:GetTolerance|SetTolerance))|URLIsFileReferenceURL|WriteStream(?:CopyDispatchQueue|SetDispatchQueue))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cf.c" }
          },
          match: "(\\s*)(\\bCF(?:A(?:bsoluteTimeGetCurrent|llocator(?:Allocate|Create|Deallocate|Get(?:Context|Default|PreferredSizeForSize|TypeID)|Reallocate|SetDefault)|rray(?:App(?:end(?:Array|Value)|lyFunction)|BSearchValues|C(?:ontainsValue|reate(?:Copy|Mutable(?:Copy)?)?)|ExchangeValuesAtIndices|Get(?:Count(?:OfValue)?|FirstIndexOfValue|LastIndexOfValue|TypeID|Value(?:AtIndex|s))|InsertValueAtIndex|Re(?:move(?:AllValues|ValueAtIndex)|placeValues)|S(?:etValueAtIndex|ortValues))|ttributedString(?:BeginEditing|Create(?:Copy|Mutable(?:Copy)?|WithSubstring)?|EndEditing|Get(?:Attribute(?:AndLongestEffectiveRange|s(?:AndLongestEffectiveRange)?)?|Length|MutableString|String|TypeID)|Re(?:moveAttribute|place(?:AttributedString|String))|SetAttribute(?:s)?))|B(?:ag(?:A(?:ddValue|pplyFunction)|C(?:ontainsValue|reate(?:Copy|Mutable(?:Copy)?)?)|Get(?:Count(?:OfValue)?|TypeID|Value(?:IfPresent|s)?)|Re(?:move(?:AllValues|Value)|placeValue)|SetValue)|i(?:naryHeap(?:A(?:ddValue|pplyFunction)|C(?:ontainsValue|reate(?:Copy)?)|Get(?:Count(?:OfValue)?|Minimum(?:IfPresent)?|TypeID|Values)|Remove(?:AllValues|MinimumValue))|tVector(?:C(?:ontainsBit|reate(?:Copy|Mutable(?:Copy)?)?)|FlipBit(?:AtIndex|s)|Get(?:Bit(?:AtIndex|s)|Count(?:OfBit)?|FirstIndexOfBit|LastIndexOfBit|TypeID)|Set(?:AllBits|Bit(?:AtIndex|s)|Count)))|ooleanGet(?:TypeID|Value)|undle(?:C(?:opy(?:AuxiliaryExecutableURL|Bu(?:iltInPlugInsURL|ndle(?:Localizations|URL))|Executable(?:Architectures(?:ForURL)?|URL)|InfoDictionary(?:ForURL|InDirectory)|Localiz(?:ationsFor(?:Preferences|URL)|edString)|Pr(?:eferredLocalizationsFromArray|ivateFrameworksURL)|Resource(?:URL(?:ForLocalization|InDirectory|sOfType(?:ForLocalization|InDirectory)?)?|sDirectoryURL)|S(?:hared(?:FrameworksURL|SupportURL)|upportFilesDirectoryURL))|reate(?:BundlesFromDirectory)?)|Get(?:AllBundles|BundleWithIdentifier|D(?:ataPointer(?:ForName|sForNames)|evelopmentRegion)|FunctionPointer(?:ForName|sForNames)|I(?:dentifier|nfoDictionary)|LocalInfoDictionary|MainBundle|P(?:ackageInfo(?:InDirectory)?|lugIn)|TypeID|V(?:alueForInfoDictionaryKey|ersionNumber))|IsExecutableLoaded|LoadExecutable(?:AndReturnError)?|PreflightExecutable|UnloadExecutable)|yteOrderGetCurrent)|C(?:alendar(?:AddComponents|C(?:o(?:mposeAbsoluteTime|py(?:Current|Locale|TimeZone))|reateWithIdentifier)|DecomposeAbsoluteTime|Get(?:ComponentDifference|FirstWeekday|Identifier|M(?:aximumRangeOfUnit|inimum(?:DaysInFirstWeek|RangeOfUnit))|OrdinalityOfUnit|RangeOfUnit|T(?:imeRangeOfUnit|ypeID))|Set(?:FirstWeekday|Locale|MinimumDaysInFirstWeek|TimeZone))|haracterSet(?:AddCharactersIn(?:Range|String)|Create(?:BitmapRepresentation|Copy|InvertedSet|Mutable(?:Copy)?|With(?:BitmapRepresentation|CharactersIn(?:Range|String)))|Get(?:Predefined|TypeID)|HasMemberInPlane|I(?:n(?:tersect|vert)|s(?:CharacterMember|LongCharacterMember|SupersetOfSet))|RemoveCharactersIn(?:Range|String)|Union)|o(?:nvert(?:Double(?:HostToSwapped|SwappedToHost)|Float(?:32(?:HostToSwapped|SwappedToHost)|64(?:HostToSwapped|SwappedToHost)|HostToSwapped|SwappedToHost))|py(?:Description|HomeDirectoryURL|TypeIDDescription)))|D(?:at(?:a(?:AppendBytes|Create(?:Copy|Mutable(?:Copy)?|WithBytesNoCopy)?|DeleteBytes|Find|Get(?:Byte(?:Ptr|s)|Length|MutableBytePtr|TypeID)|IncreaseLength|ReplaceBytes|SetLength)|e(?:C(?:ompare|reate)|Formatter(?:C(?:opyProperty|reate(?:DateF(?:ormatFromTemplate|romString)|StringWith(?:AbsoluteTime|Date))?)|Get(?:AbsoluteTimeFromString|DateStyle|Format|Locale|T(?:imeStyle|ypeID))|Set(?:Format|Property))|Get(?:AbsoluteTime|T(?:imeIntervalSinceDate|ypeID))))|ictionary(?:A(?:ddValue|pplyFunction)|C(?:ontains(?:Key|Value)|reate(?:Copy|Mutable(?:Copy)?)?)|Get(?:Count(?:Of(?:Key|Value))?|KeysAndValues|TypeID|Value(?:IfPresent)?)|Re(?:move(?:AllValues|Value)|placeValue)|SetValue))|E(?:qual|rror(?:C(?:opy(?:Description|FailureReason|RecoverySuggestion|UserInfo)|reate(?:WithUserInfoKeysAndValues)?)|Get(?:Code|Domain|TypeID)))|File(?:Descriptor(?:Create(?:RunLoopSource)?|DisableCallBacks|EnableCallBacks|Get(?:Context|NativeDescriptor|TypeID)|I(?:nvalidate|sValid))|Security(?:C(?:opy(?:AccessControlList|GroupUUID|OwnerUUID)|reate(?:Copy)?)|Get(?:Group|Mode|Owner|TypeID)|Set(?:AccessControlList|Group(?:UUID)?|Mode|Owner(?:UUID)?)))|Get(?:Allocator|RetainCount|TypeID)|Hash|Locale(?:C(?:opy(?:AvailableLocaleIdentifiers|C(?:ommonISOCurrencyCodes|urrent)|DisplayNameForPropertyValue|ISO(?:C(?:ountryCodes|urrencyCodes)|LanguageCodes)|PreferredLanguages)|reate(?:C(?:anonicalL(?:anguageIdentifierFromString|ocaleIdentifierFromS(?:criptManagerCodes|tring))|o(?:mponentsFromLocaleIdentifier|py))|LocaleIdentifierFrom(?:Components|WindowsLocaleCode))?)|Get(?:Identifier|Language(?:CharacterDirection|LineDirection)|System|TypeID|Value|WindowsLocaleCodeFromLocaleIdentifier))|M(?:a(?:chPort(?:Create(?:RunLoopSource|WithPort)?|Get(?:Context|InvalidationCallBack|Port|TypeID)|I(?:nvalidate|sValid)|SetInvalidationCallBack)|keCollectable)|essagePort(?:Create(?:Local|R(?:emote|unLoopSource))|Get(?:Context|InvalidationCallBack|Name|TypeID)|I(?:nvalidate|s(?:Remote|Valid))|Se(?:ndRequest|t(?:DispatchQueue|InvalidationCallBack|Name))))|N(?:otificationCenter(?:AddObserver|Get(?:D(?:arwinNotifyCenter|istributedCenter)|LocalCenter|TypeID)|PostNotification(?:WithOptions)?|Remove(?:EveryObserver|Observer))|u(?:llGetTypeID|mber(?:C(?:ompare|reate)|Formatter(?:C(?:opyProperty|reate(?:NumberFromString|StringWith(?:Number|Value))?)|Get(?:DecimalInfoForCurrencyCode|Format|Locale|Style|TypeID|ValueFromString)|Set(?:Format|Property))|Get(?:ByteSize|Type(?:ID)?|Value)|IsFloatType)))|P(?:lugIn(?:AddInstanceForFactory|Create|FindFactoriesForPlugInType(?:InPlugIn)?|Get(?:Bundle|TypeID)|I(?:nstance(?:Create(?:WithInstanceDataSize)?|Get(?:FactoryName|In(?:stanceData|terfaceFunctionTable)|TypeID))|sLoadOnDemand)|Re(?:gister(?:FactoryFunction(?:ByName)?|PlugInType)|moveInstanceForFactory)|SetLoadOnDemand|Unregister(?:Factory|PlugInType))|r(?:eferences(?:A(?:ddSuitePreferencesToApp|pp(?:Synchronize|ValueIsForced))|Copy(?:AppValue|KeyList|Multiple|Value)|GetApp(?:BooleanValue|IntegerValue)|RemoveSuitePreferencesFromApp|S(?:et(?:AppValue|Multiple|Value)|ynchronize))|opertyList(?:Create(?:D(?:ata|eepCopy)|With(?:Data|Stream))|IsValid|Write)))|R(?:angeMake|e(?:adStream(?:C(?:lose|opy(?:Error|Property)|reateWith(?:BytesNoCopy|File))|Get(?:Buffer|Error|Status|TypeID)|HasBytesAvailable|Open|Read|S(?:cheduleWithRunLoop|et(?:Client|Property))|UnscheduleFromRunLoop)|lease|tain)|unLoop(?:Add(?:CommonMode|Observer|Source|Timer)|Co(?:ntains(?:Observer|Source|Timer)|py(?:AllModes|CurrentMode))|Get(?:Current|Main|NextTimerFireDate|TypeID)|IsWaiting|Observer(?:Create(?:WithHandler)?|DoesRepeat|Get(?:Activities|Context|Order|TypeID)|I(?:nvalidate|sValid))|PerformBlock|R(?:emove(?:Observer|Source|Timer)|un(?:InMode)?)|S(?:ource(?:Create|Get(?:Context|Order|TypeID)|I(?:nvalidate|sValid)|Signal)|top)|Timer(?:Create(?:WithHandler)?|DoesRepeat|Get(?:Context|Interval|NextFireDate|Order|TypeID)|I(?:nvalidate|sValid)|SetNextFireDate)|WakeUp))|S(?:et(?:A(?:ddValue|pplyFunction)|C(?:ontainsValue|reate(?:Copy|Mutable(?:Copy)?)?)|Get(?:Count(?:OfValue)?|TypeID|Value(?:IfPresent|s)?)|Re(?:move(?:AllValues|Value)|placeValue)|SetValue)|how(?:Str)?|ocket(?:C(?:o(?:nnectToAddress|py(?:Address|PeerAddress|Registered(?:SocketSignature|Value)))|reate(?:ConnectedToSocketSignature|RunLoopSource|With(?:Native|SocketSignature))?)|DisableCallBacks|EnableCallBacks|Get(?:Context|DefaultNameRegistryPortNumber|Native|SocketFlags|TypeID)|I(?:nvalidate|sValid)|Register(?:SocketSignature|Value)|Se(?:ndData|t(?:Address|DefaultNameRegistryPortNumber|SocketFlags))|Unregister)|tr(?:eamCreate(?:BoundPair|PairWith(?:PeerSocketSignature|Socket(?:ToHost)?))|ing(?:Append(?:C(?:String|haracters)|Format(?:AndArguments)?|PascalString)?|C(?:apitalize|o(?:mpare(?:WithOptions(?:AndLocale)?)?|nvert(?:EncodingTo(?:IANACharSetName|NSStringEncoding|WindowsCodepage)|IANACharSetNameToEncoding|NSStringEncodingToEncoding|WindowsCodepageToEncoding))|reate(?:Array(?:BySeparatingStrings|WithFindResults)|ByCombiningStrings|Copy|ExternalRepresentation|FromExternalRepresentation|Mutable(?:Copy|WithExternalCharactersNoCopy)?|With(?:Bytes(?:NoCopy)?|C(?:String(?:NoCopy)?|haracters(?:NoCopy)?)|F(?:ileSystemRepresentation|ormat(?:AndArguments)?)|PascalString(?:NoCopy)?|Substring)))|Delete|F(?:ind(?:AndReplace|CharacterFromSet|WithOptions(?:AndLocale)?)?|old)|Get(?:Bytes|C(?:String(?:Ptr)?|haracter(?:AtIndex|FromInlineBuffer|s(?:Ptr)?))|DoubleValue|F(?:astestEncoding|ileSystemRepresentation)|HyphenationLocationBeforeIndex|IntValue|L(?:ength|i(?:neBounds|stOfAvailableEncodings)|ongCharacterForSurrogatePair)|M(?:aximumSize(?:ForEncoding|OfFileSystemRepresentation)|ostCompatibleMacStringEncoding)|NameOfEncoding|Pa(?:ragraphBounds|scalString(?:Ptr)?)|RangeOfComposedCharactersAtIndex|S(?:mallestEncoding|urrogatePairForLongCharacter|ystemEncoding)|TypeID)|Has(?:Prefix|Suffix)|I(?:n(?:itInlineBuffer|sert)|s(?:EncodingAvailable|HyphenationAvailableForLocale|Surrogate(?:HighCharacter|LowCharacter)))|Lowercase|Normalize|Pad|Replace(?:All)?|SetExternalCharactersNoCopy|T(?:okenizer(?:AdvanceToNextToken|C(?:opy(?:BestStringLanguage|CurrentTokenAttribute)|reate)|G(?:et(?:Current(?:SubTokens|TokenRange)|TypeID)|oToTokenAtIndex)|SetString)|r(?:ansform|im(?:Whitespace)?))|Uppercase))|wapInt(?:16(?:BigToHost|HostTo(?:Big|Little)|LittleToHost)?|32(?:BigToHost|HostTo(?:Big|Little)|LittleToHost)?|64(?:BigToHost|HostTo(?:Big|Little)|LittleToHost)?))|T(?:imeZone(?:C(?:opy(?:Abbreviation(?:Dictionary)?|Default|KnownNames|LocalizedName|System)|reate(?:With(?:Name|TimeIntervalFromGMT))?)|Get(?:Da(?:ta|ylightSavingTimeOffset)|N(?:ame|extDaylightSavingTimeTransition)|SecondsFromGMT|TypeID)|IsDaylightSavingTime|ResetSystem|Set(?:AbbreviationDictionary|Default))|ree(?:App(?:endChild|lyFunctionToChildren)|Create|FindRoot|Get(?:C(?:hild(?:AtIndex|Count|ren)|ontext)|FirstChild|NextSibling|Parent|TypeID)|InsertSibling|PrependChild|Remove(?:AllChildren)?|S(?:etContext|ortChildren)))|U(?:RL(?:C(?:anBeDecomposed|learResourcePropertyCache(?:ForKey)?|opy(?:AbsoluteURL|F(?:ileSystemPath|ragment)|HostName|LastPathComponent|NetLocation|Pa(?:ssword|th(?:Extension)?)|QueryString|Resource(?:Propert(?:iesForKeys|yForKey)|Specifier)|S(?:cheme|trictPath)|UserName)|reate(?:AbsoluteURLWithBytes|B(?:ookmarkData(?:From(?:AliasRecord|File))?|yResolvingBookmarkData)|Copy(?:AppendingPath(?:Component|Extension)|Deleting(?:LastPathComponent|PathExtension))|Data|F(?:ile(?:PathURL|ReferenceURL)|romFileSystemRepresentation(?:RelativeToBase)?)|ResourcePropert(?:iesForKeysFromBookmarkData|yForKeyFromBookmarkData)|StringByReplacingPercentEscapes|With(?:Bytes|FileSystemPath(?:RelativeToBase)?|String)))|Enumerator(?:CreateFor(?:DirectoryURL|MountedVolumes)|Get(?:DescendentLevel|NextURL|TypeID)|SkipDescendents)|Get(?:B(?:aseURL|yte(?:RangeForComponent|s))|FileSystemRepresentation|PortNumber|String|TypeID)|HasDirectoryPath|ResourceIsReachable|S(?:et(?:ResourcePropert(?:iesForKeys|yForKey)|TemporaryResourcePropertyForKey)|t(?:artAccessingSecurityScopedResource|opAccessingSecurityScopedResource))|WriteBookmarkDataToFile)|UID(?:Create(?:From(?:String|UUIDBytes)|String|WithBytes)?|Get(?:ConstantUUIDWithBytes|TypeID|UUIDBytes))|serNotification(?:C(?:ancel|heckBoxChecked|reate(?:RunLoopSource)?)|Display(?:Alert|Notice)|Get(?:Response(?:Dictionary|Value)|TypeID)|PopUpSelection|ReceiveResponse|SecureTextField|Update))|WriteStream(?:C(?:anAcceptBytes|lose|opy(?:Error|Property)|reateWith(?:AllocatedBuffers|Buffer|File))|Get(?:Error|Status|TypeID)|Open|S(?:cheduleWithRunLoop|et(?:Client|Property))|UnscheduleFromRunLoop|Write)|XMLCreateStringBy(?:EscapingEntities|UnescapingEntities))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.10.10.c" }
          },
          match: "(\\s*)(\\b(?:f(?:accessat|chownat)|getattrlist(?:at|bulk)|linkat|openat|re(?:adlinkat|nameat)|symlinkat|unlinkat)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.10.12.c" }
          },
          match: "(\\s*)(\\b(?:clock_(?:get(?:res|time(?:_nsec_np)?)|settime)|mk(?:ostemp(?:s)?|pathat_np)|rename(?:atx_np|x_np)|timingsafe_bcmp)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.10.13.c" }
          },
          match: "(\\s*)(\\b(?:fmemopen|mk(?:dtempat_np|ostempsat_np|stempsat_np)|open_memstream|ptsname_r|setattrlistat)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.10.15.c" }
          },
          match: "(\\s*)(\\b(?:rpmatch|timespec_get)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.10.8.c" }
          },
          match: "(\\s*)(\\b(?:fsync_volume_np|mkpath_np|sync_volume_np)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.10.9.c" }
          },
          match: "(\\s*)(\\b(?:f(?:fsll|lsll)|memset_s)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.clib.c" }
          },
          match: "(\\s*)(\\b(?:a(?:64l|b(?:ort|s)|c(?:c(?:ess(?:x_np)?|t)|os(?:f|h(?:f|l)?|l)?)|d(?:d_profil|jtime)|l(?:arm|loca)|rc4random(?:_(?:buf|stir|uniform))?|s(?:ctime(?:_r)?|in(?:f|h(?:f|l)?|l)?|printf)|t(?:an(?:2(?:f|l)?|f|h(?:f|l)?|l)?|exit(?:_b)?|o(?:f|i|l(?:l)?)))|b(?:c(?:mp|opy)|rk|s(?:d_signal|earch(?:_b)?)|zero)|c(?:brt(?:f|l)?|eil(?:f|l)?|get(?:c(?:ap|lose)|ent|first|match|n(?:ext|um)|s(?:et|tr)|ustr)|h(?:dir|own|root)|l(?:earerr|o(?:ck|se))|o(?:nfstr|pysign(?:f|l)?|s(?:f|h(?:f|l)?|l)?)|r(?:eat|ypt)|t(?:ermid_r|ime(?:_r)?))|d(?:evname(?:_r)?|i(?:fftime|spatch_(?:time|walltime)|v)|printf|rand48|up(?:2)?)|e(?:cvt|n(?:crypt|dusershell)|r(?:and48|f(?:c(?:f|l)?|f|l)?)|x(?:changedata|ec(?:l(?:e|p)?|v(?:P|e|p)?)|it|p(?:2(?:f|l)?|f|l|m1(?:f|l)?)?))|f(?:abs(?:f|l)?|c(?:h(?:dir|own)|lose|ntl|vt)|d(?:im(?:f|l)?|open)|e(?:of|rror)|f(?:l(?:agstostr|ush)|s(?:ctl|l)?)|get(?:attrlist|c|ln|pos|s)|ile(?:no|sec_(?:dup|free|get_property|init|query_property|set_property|unset_property))|l(?:o(?:ck(?:file)?|or(?:f|l)?)|s(?:l)?)|m(?:a(?:f|l|x(?:f|l)?)?|in(?:f|l)?|od(?:f|l)?|tcheck)|o(?:pen|rk)|p(?:athconf|rintf|u(?:rge|t(?:c|s)))|re(?:ad|open|xp(?:f|l)?)|s(?:c(?:anf|tl)|e(?:ek(?:o)?|t(?:attrlist|pos))|ync)|t(?:ell(?:o)?|r(?:uncate|ylockfile))|u(?:n(?:lockfile|open)|times)|write)|g(?:cvt|et(?:attrlist|bsize|c(?:_unlocked|har(?:_unlocked)?|wd)?|d(?:ate|elim|irentriesattr|omainname|tablesize)|e(?:gid|nv|uid)|g(?:id|roup(?:list|s))|host(?:id|name)|i(?:opolicy_np|timer)|l(?:ine|o(?:adavg|gin(?:_r)?))|mode|opt|p(?:a(?:gesize|ss)|eereid|g(?:id|rp)|id|pid|r(?:iority|ogname))|r(?:limit|usage)|s(?:groups_np|id|ubopt)?|timeofday|u(?:id|sershell)|w(?:d|groups_np)?)|mtime(?:_r)?|rantpt)|h(?:eapsort(?:_b)?|ypot(?:f|l)?)|i(?:logb(?:f|l)?|n(?:dex|it(?:groups|state))|ruserok(?:_sa)?|s(?:atty|setugid))|j(?:0|1|n|rand48)|kill(?:pg)?|l(?:64a|abs|c(?:hown|ong48)|d(?:exp(?:f|l)?|iv)|gamma(?:f|l)?|ink|l(?:abs|div|r(?:int(?:f|l)?|ound(?:f|l)?))|o(?:c(?:al(?:econv|time(?:_r)?)|kf)|g(?:1(?:0(?:f|l)?|p(?:f|l)?)|2(?:f|l)?|b(?:f|l)?|f|l)?|ngjmp(?:error)?)|r(?:and48|int(?:f|l)?|ound(?:f|l)?)|seek|utimes)|m(?:b(?:len|stowcs|towc)|e(?:m(?:c(?:cpy|hr|mp|py)|m(?:em|ove)|set(?:_pattern(?:16|4|8))?)|rgesort(?:_b)?)|k(?:dtemp|nod|stemp(?:_dprotected_np|s)?|t(?:emp|ime))|odf(?:f|l)?|rand48)|n(?:an(?:f|l|osleep)?|e(?:arbyint(?:f|l)?|xt(?:after(?:f|l)?|toward(?:f|l)?))|fssvc|ice|rand48)|open(?:_dprotected_np|x_np)?|p(?:a(?:thconf|use)|close|error|ipe|o(?:pen|six(?:2time|_openpt)|w(?:f|l)?)|r(?:ead|intf|ofil)|s(?:elect|ignal|ort(?:_(?:b|r))?)|t(?:hread_(?:getugid_np|kill|s(?:etugid_np|igmask))|sname)|ut(?:c(?:_unlocked|har(?:_unlocked)?)?|env|s|w)|write)|qsort(?:_(?:b|r))?|r(?:a(?:dixsort|ise|nd(?:_r|om)?)|cmd(?:_af)?|e(?:a(?:d(?:link)?|l(?:locf|path))|boot|m(?:ainder(?:f|l)?|ove|quo(?:f|l)?)|name|voke|wind)|in(?:dex|t(?:f|l)?)|mdir|ound(?:f|l)?|resvport(?:_af)?|userok)|s(?:brk|ca(?:lb(?:ln(?:f|l)?|n(?:f|l)?)?|nf)|e(?:archfs|ed48|lect|t(?:attrlist|buf(?:fer)?|domainname|e(?:gid|nv|uid)|g(?:id|roups)|host(?:id|name)|i(?:opolicy_np|timer)|jmp|key|l(?:inebuf|o(?:cale|gin))|mode|p(?:g(?:id|rp)|r(?:iority|ogname))|r(?:e(?:gid|uid)|gid|limit|uid)|s(?:groups_np|id|tate)|timeofday|u(?:id|sershell)|vbuf|wgroups_np))|i(?:g(?:a(?:ction|ddset|ltstack)|block|delset|emptyset|fillset|hold|i(?:gnore|nterrupt|smember)|longjmp|nal|p(?:ause|ending|rocmask)|relse|s(?:et(?:jmp|mask)?|uspend)|vec|wait)|md_muladd|n(?:f|h(?:f|l)?|l)?)|leep|nprintf|printf|qrt(?:f|l)?|ra(?:dixsort|nd(?:48|dev|om(?:dev)?)?)|scanf|t(?:p(?:cpy|ncpy)|r(?:c(?:a(?:se(?:cmp|str)|t)|hr|mp|oll|py|spn)|dup|error(?:_r)?|ftime|l(?:c(?:at|py)|en)|mode|n(?:c(?:a(?:secmp|t)|mp|py)|dup|len|str)|p(?:brk|time)|rchr|s(?:ep|ignal|pn|tr)|to(?:d|f(?:flags)?|k(?:_r)?|l(?:d|l)?|q|u(?:l(?:l)?|q))|xfrm))|wa(?:b|pon)|y(?:mlink|nc|s(?:conf|tem)))|t(?:an(?:f|h(?:f|l)?|l)?|c(?:getpgrp|setpgrp)|empnam|gamma(?:f|l)?|ime(?:2posix|gm|local)?|mp(?:file|nam)|runc(?:ate|f|l)?|ty(?:name(?:_r)?|slot)|zset(?:wall)?)|u(?:alarm|n(?:delete|getc|l(?:ink|ockpt)|setenv|whiteout)|sleep|times)|v(?:a(?:lloc|sprintf)|dprintf|f(?:ork|printf|scanf)|printf|s(?:canf|nprintf|printf|scanf))|w(?:ait(?:3|4|id|pid)?|c(?:stombs|tomb)|rite)|y(?:0|1|n)|zopen)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.dispatch.10.10.c" }
          },
          match: "(\\s*)(\\bdispatch_(?:block_(?:c(?:ancel|reate(?:_with_qos_class)?)|notify|perform|testcancel|wait)|queue_(?:attr_make_with_qos_class|get_qos_class))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.dispatch.10.12.c" }
          },
          match: "(\\s*)(\\bdispatch_(?:a(?:ctivate|ssert_queue(?:_(?:barrier|not))?)|queue_(?:attr_make_(?:initially_inactive|with_autorelease_frequency)|create_with_target))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.dispatch.10.14.c" }
          },
          match: "(\\s*)(\\bdispatch_(?:async_and_wait(?:_f)?|barrier_async_and_wait(?:_f)?|set_qos_class_floor|workloop_(?:create(?:_inactive)?|set_autorelease_frequency))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.dispatch.c" }
          },
          match: "(\\s*)(\\bdispatch_(?:a(?:fter(?:_f)?|pply(?:_f)?|sync(?:_f)?)|barrier_(?:async(?:_f)?|sync(?:_f)?)|cancel|data_(?:apply|c(?:opy_region|reate(?:_(?:concat|map|subrange))?)|get_size)|g(?:et_(?:context|global_queue|main_queue|specific)|roup_(?:async(?:_f)?|create|enter|leave|notify(?:_f)?|wait))|io_(?:barrier|c(?:lose|reate(?:_with_(?:io|path))?)|get_descriptor|read|set_(?:high_water|interval|low_water)|write)|main|notify|once(?:_f)?|queue_(?:create|get_(?:label|specific)|set_specific)|re(?:ad|lease|sume|tain)|s(?:e(?:maphore_(?:create|signal|wait)|t_(?:context|finalizer_f|target_queue))|ource_(?:c(?:ancel|reate)|get_(?:data|handle|mask)|merge_data|set_(?:cancel_handler(?:_f)?|event_handler(?:_f)?|registration_handler(?:_f)?|timer)|testcancel)|uspend|ync(?:_f)?)|testcancel|w(?:ait|rite))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.os.c" }
          },
          match: "(\\s*)(\\b(?:OS(?:HostByteOrder|ReadSwapInt(?:16|32|64)|WriteSwapInt(?:16|32|64))|gethostuuid)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.11.c" }
          },
          match: "(\\s*)(\\bCG(?:ColorCreateCopyByMatchingToColorSpace|Event(?:PostToPid|TapCreateForPid)|ImageGetUTType)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.12.c" }
          },
          match: "(\\s*)(\\bCGColor(?:ConversionInfoCreate(?:FromList)?|Space(?:C(?:opy(?:ICCData|PropertyList)|reateWith(?:ICCData|PropertyList))|IsWideGamutRGB|SupportsOutput))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.13.c" }
          },
          match: "(\\s*)(\\bCG(?:Color(?:ConversionInfoCreateFromListWithArguments|SpaceGetName)|DataProviderGetInfo|EventCreateScrollWheelEvent2|P(?:DF(?:ContextSetOutline|DocumentGet(?:AccessPermissions|Outline))|athApplyWithBlock))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.14.c" }
          },
          match: "(\\s*)(\\bCG(?:ColorConversionInfoCreateWithOptions|ImageGet(?:ByteOrderInfo|PixelFormatInfo)|PDF(?:ArrayApplyBlock|DictionaryApplyBlock))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.15.c" }
          },
          match: "(\\s*)(\\bCG(?:ColorCreate(?:GenericGrayGamma2_2|SRGB)|PDF(?:Context(?:BeginTag|EndTag)|TagTypeGetName))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.8.c" }
          },
          match: "(\\s*)(\\bCG(?:Display(?:ModeGetPixel(?:Height|Width)|Stream(?:Create(?:WithDispatchQueue)?|Get(?:RunLoopSource|TypeID)|St(?:art|op)|Update(?:CreateMergedUpdate|Get(?:DropCount|MovedRectsDelta|Rects|TypeID))))|WindowServerCreateServerPort)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.10.9.c" }
          },
          match: "(\\s*)(\\bCGPath(?:AddRoundedRect|CreateWithRoundedRect)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.quartz.c" }
          },
          match: "(\\s*)(\\bCG(?:A(?:cquireDisplayFadeReservation|ffineTransform(?:Concat|EqualToTransform|I(?:nvert|sIdentity)|Make(?:Rotation|Scale|Translation)?|Rotate|Scale|Translate)|ssociateMouseAndMouseCursorPosition)|B(?:eginDisplayConfiguration|itmapContext(?:Create(?:Image|WithData)?|Get(?:AlphaInfo|B(?:it(?:mapInfo|sPer(?:Component|Pixel))|ytesPerRow)|ColorSpace|Data|Height|Width)))|C(?:a(?:ncelDisplayConfiguration|ptureAllDisplays(?:WithOptions)?)|o(?:lor(?:C(?:onversionInfoGetTypeID|reate(?:Copy(?:WithAlpha)?|Generic(?:CMYK|Gray|RGB)|WithPattern)?)|EqualToColor|Get(?:Alpha|Co(?:lorSpace|mponents|nstantColor)|NumberOfComponents|Pattern|TypeID)|Re(?:lease|tain)|Space(?:C(?:opyName|reate(?:Calibrated(?:Gray|RGB)|Device(?:CMYK|Gray|RGB)|I(?:CCBased|ndexed)|Lab|Pattern|With(?:Name|PlatformColorSpace)))|Get(?:BaseColorSpace|ColorTable(?:Count)?|Model|NumberOfComponents|TypeID)|Re(?:lease|tain)))|mpleteDisplayConfiguration|n(?:figureDisplay(?:FadeEffect|MirrorOfDisplay|Origin|StereoOperation|WithDisplayMode)|text(?:Add(?:Arc(?:ToPoint)?|CurveToPoint|EllipseInRect|Line(?:ToPoint|s)|Path|QuadCurveToPoint|Rect(?:s)?)|Begin(?:Pa(?:ge|th)|TransparencyLayer(?:WithRect)?)|C(?:l(?:earRect|ip(?:To(?:Mask|Rect(?:s)?))?|osePath)|o(?:n(?:catCTM|vert(?:PointTo(?:DeviceSpace|UserSpace)|RectTo(?:DeviceSpace|UserSpace)|SizeTo(?:DeviceSpace|UserSpace)))|pyPath))|Draw(?:Image|L(?:ayer(?:AtPoint|InRect)|inearGradient)|P(?:DFPage|ath)|RadialGradient|Shading|TiledImage)|E(?:O(?:Clip|FillPath)|nd(?:Page|TransparencyLayer))|F(?:ill(?:EllipseInRect|Path|Rect(?:s)?)|lush)|Get(?:C(?:TM|lipBoundingBox)|InterpolationQuality|Path(?:BoundingBox|CurrentPoint)|T(?:ext(?:Matrix|Position)|ypeID)|UserSpaceToDeviceSpaceTransform)|IsPathEmpty|MoveToPoint|PathContainsPoint|R(?:e(?:lease|placePathWithStrokedPath|s(?:etClip|toreGState)|tain)|otateCTM)|S(?:aveGState|caleCTM|et(?:Al(?:lows(?:Antialiasing|FontS(?:moothing|ubpixel(?:Positioning|Quantization)))|pha)|BlendMode|C(?:MYK(?:FillColor|StrokeColor)|haracterSpacing)|F(?:ill(?:Color(?:Space|WithColor)?|Pattern)|latness|ont(?:Size)?)|Gray(?:FillColor|StrokeColor)|InterpolationQuality|Line(?:Cap|Dash|Join|Width)|MiterLimit|PatternPhase|R(?:GB(?:FillColor|StrokeColor)|enderingIntent)|S(?:h(?:adow(?:WithColor)?|ould(?:Antialias|S(?:moothFonts|ubpixel(?:PositionFonts|QuantizeFonts))))|troke(?:Color(?:Space|WithColor)?|Pattern))|Text(?:DrawingMode|Matrix|Position))|howGlyphsAtPositions|troke(?:EllipseInRect|LineSegments|Path|Rect(?:WithWidth)?)|ynchronize)|TranslateCTM))))|D(?:ata(?:Consumer(?:Create(?:With(?:CFData|URL))?|GetTypeID|Re(?:lease|tain))|Provider(?:C(?:opyData|reate(?:Direct|Sequential|With(?:CFData|Data|Filename|URL)))|GetTypeID|Re(?:lease|tain)))|isplay(?:Bounds|C(?:apture(?:WithOptions)?|opy(?:AllDisplayModes|ColorSpace|DisplayMode)|reateImage(?:ForRect)?)|Fade|G(?:ammaTableCapacity|etDrawingContext)|HideCursor|I(?:DToOpenGLDisplayMask|s(?:A(?:ctive|lwaysInMirrorSet|sleep)|Builtin|In(?:HWMirrorSet|MirrorSet)|Main|Online|Stereo))|M(?:irrorsDisplay|o(?:de(?:Get(?:Height|IO(?:DisplayModeID|Flags)|RefreshRate|TypeID|Width)|IsUsableForDesktopGUI|Re(?:lease|tain)|lNumber)|veCursorToPoint))|P(?:ixels(?:High|Wide)|rimaryDisplay)|R(?:e(?:gisterReconfigurationCallback|lease|moveReconfigurationCallback|storeColorSyncSettings)|otation)|S(?:creenSize|e(?:rialNumber|t(?:DisplayMode|StereoOperation))|howCursor)|U(?:nitNumber|sesOpenGLAcceleration)|VendorNumber))|Event(?:Create(?:Copy|Data|FromData|KeyboardEvent|MouseEvent|S(?:crollWheelEvent|ourceFromEvent))?|Get(?:DoubleValueField|Flags|IntegerValueField|Location|T(?:imestamp|ype(?:ID)?)|UnflippedLocation)|Keyboard(?:GetUnicodeString|SetUnicodeString)|Post(?:ToPSN)?|S(?:et(?:DoubleValueField|Flags|IntegerValueField|Location|Source|T(?:imestamp|ype))|ource(?:ButtonState|C(?:ounterForEventType|reate)|FlagsState|Get(?:KeyboardType|LocalEvents(?:FilterDuringSuppressionState|SuppressionInterval)|PixelsPerLine|SourceStateID|TypeID|UserData)|KeyState|Se(?:condsSinceLastEventType|t(?:KeyboardType|LocalEvents(?:FilterDuringSuppressionState|SuppressionInterval)|PixelsPerLine|UserData))))|Tap(?:Create(?:ForPSN)?|Enable|IsEnabled|PostEvent))|F(?:ont(?:C(?:anCreatePostScriptSubset|opy(?:FullName|GlyphNameForGlyph|PostScriptName|Table(?:ForTag|Tags)|Variation(?:Axes|s))|reate(?:CopyWithVariations|PostScript(?:Encoding|Subset)|With(?:DataProvider|FontName)))|Get(?:Ascent|CapHeight|Descent|FontBBox|Glyph(?:Advances|BBoxes|WithGlyphName)|ItalicAngle|Leading|NumberOfGlyphs|StemV|TypeID|UnitsPerEm|XHeight)|Re(?:lease|tain))|unction(?:Create|GetTypeID|Re(?:lease|tain)))|G(?:et(?:ActiveDisplayList|Display(?:TransferBy(?:Formula|Table)|sWith(?:OpenGLDisplayMask|Point|Rect))|EventTapList|LastMouseDelta|OnlineDisplayList)|radient(?:CreateWithColor(?:Components|s)|GetTypeID|Re(?:lease|tain)))|Image(?:Create(?:Copy(?:WithColorSpace)?|With(?:ImageInRect|JPEGDataProvider|Mask(?:ingColors)?|PNGDataProvider))?|Get(?:AlphaInfo|B(?:it(?:mapInfo|sPer(?:Component|Pixel))|ytesPerRow)|ColorSpace|D(?:ataProvider|ecode)|Height|RenderingIntent|ShouldInterpolate|TypeID|Width)|IsMask|MaskCreate|Re(?:lease|tain))|Layer(?:CreateWithContext|Get(?:Context|Size|TypeID)|Re(?:lease|tain))|MainDisplayID|OpenGLDisplayMaskToDisplayID|P(?:DF(?:ArrayGet(?:Array|Boolean|Count|Dictionary|Integer|N(?:ame|u(?:ll|mber))|Object|Str(?:eam|ing))|Conte(?:ntStream(?:CreateWith(?:Page|Stream)|Get(?:Resource|Streams)|Re(?:lease|tain))|xt(?:AddD(?:estinationAtPoint|ocumentMetadata)|BeginPage|C(?:lose|reate(?:WithURL)?)|EndPage|Set(?:DestinationForRect|URLForRect)))|D(?:ictionary(?:ApplyFunction|Get(?:Array|Boolean|Count|Dictionary|Integer|N(?:ame|umber)|Object|Str(?:eam|ing)))|ocument(?:Allows(?:Copying|Printing)|CreateWith(?:Provider|URL)|Get(?:Catalog|I(?:D|nfo)|NumberOfPages|Page|TypeID|Version)|Is(?:Encrypted|Unlocked)|Re(?:lease|tain)|UnlockWithPassword))|O(?:bjectGet(?:Type|Value)|peratorTable(?:Create|Re(?:lease|tain)|SetCallback))|Page(?:Get(?:BoxRect|D(?:ictionary|ocument|rawingTransform)|PageNumber|RotationAngle|TypeID)|Re(?:lease|tain))|S(?:canner(?:Create|GetContentStream|Pop(?:Array|Boolean|Dictionary|Integer|N(?:ame|umber)|Object|Str(?:eam|ing))|Re(?:lease|tain)|Scan)|tr(?:eam(?:CopyData|GetDictionary)|ing(?:Copy(?:Date|TextString)|Get(?:BytePtr|Length)))))|SConverter(?:Abort|C(?:onvert|reate)|GetTypeID|IsConverting)|at(?:h(?:A(?:dd(?:Arc(?:ToPoint)?|CurveToPoint|EllipseInRect|Line(?:ToPoint|s)|Path|QuadCurveToPoint|Re(?:ct(?:s)?|lativeArc))|pply)|C(?:loseSubpath|ontainsPoint|reate(?:Copy(?:By(?:DashingPath|StrokingPath|TransformingPath))?|Mutable(?:Copy(?:ByTransformingPath)?)?|With(?:EllipseInRect|Rect)))|EqualToPath|Get(?:BoundingBox|CurrentPoint|PathBoundingBox|TypeID)|Is(?:Empty|Rect)|MoveToPoint|Re(?:lease|tain))|tern(?:Create|GetTypeID|Re(?:lease|tain)))|oint(?:ApplyAffineTransform|CreateDictionaryRepresentation|EqualToPoint|Make(?:WithDictionaryRepresentation)?))|Re(?:ct(?:ApplyAffineTransform|C(?:ontains(?:Point|Rect)|reateDictionaryRepresentation)|Divide|EqualToRect|Get(?:Height|M(?:ax(?:X|Y)|i(?:d(?:X|Y)|n(?:X|Y)))|Width)|I(?:n(?:set|te(?:gral|rsect(?:ion|sRect)))|s(?:Empty|Infinite|Null))|Make(?:WithDictionaryRepresentation)?|Offset|Standardize|Union)|lease(?:AllDisplays|DisplayFadeReservation)|storePermanentDisplayConfiguration)|S(?:e(?:ssionCopyCurrentDictionary|tDisplayTransferBy(?:ByteTable|Formula|Table))|h(?:ading(?:Create(?:Axial|Radial)|GetTypeID|Re(?:lease|tain))|ieldingWindow(?:ID|Level))|ize(?:ApplyAffineTransform|CreateDictionaryRepresentation|EqualToSize|Make(?:WithDictionaryRepresentation)?))|VectorMake|W(?:arpMouseCursorPosition|indowL(?:evelForKey|istC(?:opyWindowInfo|reate(?:DescriptionFromArray|Image(?:FromArray)?)?))))\\b)"
        }
      ]
    }
  },
  scopeName: "source.c.platform"
};
var source_c_platform_default = grammar3;

// node_modules/@wooorm/starry-night/lang/source.cs.js
var grammar4 = {
  extensions: [".bf", ".cake", ".cs", ".cs.pp", ".csx", ".eq", ".linq", ".uno"],
  names: ["beef", "c#", "cake", "cakescript", "csharp", "eq", "uno"],
  patterns: [
    { include: "#preprocessor" },
    { include: "#comment" },
    { include: "#directives" },
    { include: "#declarations" },
    { include: "#script-top-level" }
  ],
  repository: {
    "accessor-getter": {
      patterns: [
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          contentName: "meta.accessor.getter.cs",
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#statement" }]
        },
        { include: "#accessor-getter-expression" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "accessor-getter-expression": {
      begin: "=>",
      beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } },
      contentName: "meta.accessor.getter.cs",
      end: "(?=;|\\})",
      patterns: [{ include: "#ref-modifier" }, { include: "#expression" }]
    },
    "accessor-setter": {
      patterns: [
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          contentName: "meta.accessor.setter.cs",
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#statement" }]
        },
        {
          begin: "=>",
          beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } },
          contentName: "meta.accessor.setter.cs",
          end: "(?=;|\\})",
          patterns: [{ include: "#ref-modifier" }, { include: "#expression" }]
        },
        { include: "#punctuation-semicolon" }
      ]
    },
    "anonymous-method-expression": {
      patterns: [
        {
          begin: "(?x)\n((?:\\b(?:async|static)\\b\\s*)*)\n(?:\n  (@?[_[:alpha:]][_[:alnum:]]*)\\b|\n  (\\()\n    (?<tuple>(?:[^()]|\\(\\g<tuple>\\))*)\n  (\\))\n)\\s*\n(=>)",
          beginCaptures: {
            1: {
              patterns: [
                { match: "async|static", name: "storage.modifier.$0.cs" }
              ]
            },
            2: { name: "entity.name.variable.parameter.cs" },
            3: { name: "punctuation.parenthesis.open.cs" },
            4: {
              patterns: [
                { include: "#comment" },
                { include: "#explicit-anonymous-function-parameter" },
                { include: "#implicit-anonymous-function-parameter" },
                { include: "#default-argument" },
                { include: "#punctuation-comma" }
              ]
            },
            5: { name: "punctuation.parenthesis.close.cs" },
            6: { name: "keyword.operator.arrow.cs" }
          },
          end: "(?=[,;)}])",
          patterns: [
            { include: "#intrusive" },
            {
              begin: "(?={)",
              end: "(?=[,;)}])",
              patterns: [{ include: "#block" }, { include: "#intrusive" }]
            },
            {
              begin: "\\b(ref)\\b|(?=\\S)",
              beginCaptures: { 1: { name: "storage.modifier.ref.cs" } },
              end: "(?=[,;)}])",
              patterns: [{ include: "#expression" }]
            }
          ]
        },
        {
          begin: "(?x)\n((?:\\b(?:async|static)\\b\\s*)*)\n\\b(delegate)\\b\\s*",
          beginCaptures: {
            1: {
              patterns: [
                { match: "async|static", name: "storage.modifier.$0.cs" }
              ]
            },
            2: { name: "storage.type.delegate.cs" }
          },
          end: "(?<=})|(?=[,;)}])",
          patterns: [
            { include: "#intrusive" },
            {
              begin: "\\(",
              beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
              end: "\\)",
              endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
              patterns: [
                { include: "#intrusive" },
                { include: "#explicit-anonymous-function-parameter" },
                { include: "#punctuation-comma" }
              ]
            },
            { include: "#block" }
          ]
        }
      ]
    },
    "anonymous-object-creation-expression": {
      begin: "\\b(new)\\b\\s*(?=\\{|//|/\\*|$)",
      beginCaptures: { 1: { name: "keyword.operator.expression.new.cs" } },
      end: "(?<=\\})",
      patterns: [{ include: "#comment" }, { include: "#initializer-expression" }]
    },
    argument: {
      patterns: [
        { match: "\\b(ref|in)\\b", name: "storage.modifier.$1.cs" },
        {
          begin: "\\b(out)\\b",
          beginCaptures: { 1: { name: "storage.modifier.out.cs" } },
          end: "(?=,|\\)|\\])",
          patterns: [
            { include: "#declaration-expression-local" },
            { include: "#expression" }
          ]
        },
        { include: "#expression" }
      ]
    },
    "argument-list": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [
        { include: "#named-argument" },
        { include: "#argument" },
        { include: "#punctuation-comma" }
      ]
    },
    "array-creation-expression": {
      begin: "(?x)\n\\b(new|stackalloc)\\b\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)?\\s*\n(?=\\[)",
      beginCaptures: {
        1: { name: "keyword.operator.expression.$1.cs" },
        2: { patterns: [{ include: "#type" }] }
      },
      end: "(?<=\\])",
      patterns: [{ include: "#bracketed-argument-list" }]
    },
    "as-expression": {
      captures: {
        1: { name: "keyword.operator.expression.as.cs" },
        2: { patterns: [{ include: "#type" }] }
      },
      match: "(?x)\n(?<!\\.)\\b(as)\\b\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?(?!\\?))? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        \\s*(?:,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      (?:\\s*\\?(?!\\?))? # arrays can be nullable reference types\n    )*\n  )\n)?"
    },
    "assignment-expression": {
      begin: "(?:\\*|/|%|\\+|-|\\?\\?|\\&|\\^|<<|>>>?|\\|)?=(?!=|>)",
      beginCaptures: { 0: { patterns: [{ include: "#assignment-operators" }] } },
      end: "(?=[,\\)\\];}])",
      patterns: [{ include: "#ref-modifier" }, { include: "#expression" }]
    },
    "assignment-operators": {
      patterns: [
        {
          match: "\\*=|/=|%=|\\+=|-=|\\?\\?=",
          name: "keyword.operator.assignment.compound.cs"
        },
        {
          match: "\\&=|\\^=|<<=|>>>?=|\\|=",
          name: "keyword.operator.assignment.compound.bitwise.cs"
        },
        { match: "\\=", name: "keyword.operator.assignment.cs" }
      ]
    },
    attribute: {
      patterns: [{ include: "#type-name" }, { include: "#attribute-arguments" }]
    },
    "attribute-arguments": {
      begin: "(\\()",
      beginCaptures: { 1: { name: "punctuation.parenthesis.open.cs" } },
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [
        { include: "#attribute-named-argument" },
        { include: "#expression" },
        { include: "#punctuation-comma" }
      ]
    },
    "attribute-named-argument": {
      begin: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?==)",
      beginCaptures: { 1: { name: "entity.name.variable.property.cs" } },
      end: "(?=(,|\\)))",
      patterns: [{ include: "#operator-assignment" }, { include: "#expression" }]
    },
    "attribute-section": {
      begin: "(\\[)(assembly|module|field|event|method|param|property|return|type)?(\\:)?",
      beginCaptures: {
        1: { name: "punctuation.squarebracket.open.cs" },
        2: { name: "keyword.other.attribute-specifier.cs" },
        3: { name: "punctuation.separator.colon.cs" }
      },
      end: "(\\])",
      endCaptures: { 1: { name: "punctuation.squarebracket.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#attribute" },
        { include: "#punctuation-comma" }
      ]
    },
    "await-expression": { name: "keyword.operator.expression.await.cs" },
    "await-statement": {
      beginCaptures: { 1: { name: "keyword.operator.expression.await.cs" } },
      end: "(?<=})|(?=;|})",
      patterns: [
        { include: "#foreach-statement" },
        { include: "#using-statement" },
        { include: "#expression" }
      ]
    },
    "base-types": {
      begin: ":",
      beginCaptures: { 0: { name: "punctuation.separator.colon.cs" } },
      end: "(?=\\{|where|;)",
      patterns: [
        { include: "#type" },
        { include: "#punctuation-comma" },
        { include: "#preprocessor" }
      ]
    },
    block: {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
      patterns: [{ include: "#statement" }]
    },
    "boolean-literal": {
      patterns: [
        {
          match: "(?<!\\.)\\btrue\\b",
          name: "constant.language.boolean.true.cs"
        },
        {
          match: "(?<!\\.)\\bfalse\\b",
          name: "constant.language.boolean.false.cs"
        }
      ]
    },
    "bracketed-argument-list": {
      begin: "\\[",
      beginCaptures: { 0: { name: "punctuation.squarebracket.open.cs" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.squarebracket.close.cs" } },
      patterns: [
        { include: "#named-argument" },
        { include: "#argument" },
        { include: "#punctuation-comma" }
      ]
    },
    "bracketed-parameter-list": {
      begin: "(?=(\\[))",
      beginCaptures: { 1: { name: "punctuation.squarebracket.open.cs" } },
      end: "(?=(\\]))",
      endCaptures: { 1: { name: "punctuation.squarebracket.close.cs" } },
      patterns: [
        {
          begin: "(?<=\\[)",
          end: "(?=\\])",
          patterns: [
            { include: "#comment" },
            { include: "#attribute-section" },
            { include: "#parameter" },
            { include: "#punctuation-comma" },
            { include: "#variable-initializer" }
          ]
        }
      ]
    },
    "break-or-continue-statement": {
      match: "(?<!\\.)\\b(break|continue)\\b",
      name: "keyword.control.flow.$1.cs"
    },
    "case-guard": {
      patterns: [
        { include: "#parenthesized-expression" },
        { include: "#expression" }
      ]
    },
    "cast-expression": {
      captures: {
        1: { name: "punctuation.parenthesis.open.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "punctuation.parenthesis.close.cs" }
      },
      match: "(?x)\n(\\()\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n(\\))(?=\\s*-*!*@?[_[:alnum:]\\(])"
    },
    "casted-constant-pattern": {
      begin: `(?x)
(\\()
  ([\\s.:@_[:alnum:]]+)
(\\))
(?=[\\s+\\-!~]*@?[_[:alnum:]('"]+)`,
      beginCaptures: {
        1: { name: "punctuation.parenthesis.open.cs" },
        2: { patterns: [{ include: "#type-builtin" }, { include: "#type-name" }] },
        3: { name: "punctuation.parenthesis.close.cs" }
      },
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [
        { include: "#casted-constant-pattern" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#constant-pattern" }]
        },
        { include: "#constant-pattern" },
        {
          captures: {
            1: { name: "entity.name.type.alias.cs" },
            2: { name: "punctuation.separator.coloncolon.cs" }
          },
          match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)"
        },
        {
          captures: {
            1: { name: "entity.name.type.cs" },
            2: { name: "punctuation.accessor.cs" }
          },
          match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)"
        },
        {
          match: "\\@?[_[:alpha:]][_[:alnum:]]*",
          name: "variable.other.constant.cs"
        }
      ]
    },
    "catch-clause": {
      begin: "(?<!\\.)\\b(catch)\\b",
      beginCaptures: { 1: { name: "keyword.control.exception.catch.cs" } },
      end: "(?<=\\})",
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [
            {
              captures: {
                1: { patterns: [{ include: "#type" }] },
                6: { name: "entity.name.variable.local.cs" }
              },
              match: "(?x)\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n(?:(\\g<identifier>)\\b)?"
            }
          ]
        },
        { include: "#when-clause" },
        { include: "#comment" },
        { include: "#block" }
      ]
    },
    "char-character-escape": {
      match: "\\\\(x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|.)",
      name: "constant.character.escape.cs"
    },
    "char-literal": {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.char.begin.cs" } },
      end: "(\\')|((?:[^\\\\\\n])$)",
      endCaptures: {
        1: { name: "punctuation.definition.char.end.cs" },
        2: { name: "invalid.illegal.newline.cs" }
      },
      name: "string.quoted.single.cs",
      patterns: [{ include: "#char-character-escape" }]
    },
    "class-declaration": {
      begin: "(?=(\\brecord\\b\\s+)?\\bclass\\b)",
      end: "(?<=\\})|(?=;)",
      patterns: [
        {
          begin: "(?x)\n(\\b(record)\\b\\s+)?\n\\b(class)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*",
          beginCaptures: {
            2: { name: "storage.type.record.cs" },
            3: { name: "storage.type.class.cs" },
            4: { name: "entity.name.type.class.cs" }
          },
          end: "(?=\\{)|(?=;)",
          patterns: [
            { include: "#comment" },
            { include: "#type-parameter-list" },
            { include: "#parenthesized-parameter-list" },
            { include: "#base-types" },
            { include: "#generic-constraints" }
          ]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#class-or-struct-members" }]
        },
        { include: "#preprocessor" },
        { include: "#comment" }
      ]
    },
    "class-or-struct-members": {
      patterns: [
        { include: "#preprocessor" },
        { include: "#comment" },
        { include: "#storage-modifier" },
        { include: "#type-declarations" },
        { include: "#property-declaration" },
        { include: "#field-declaration" },
        { include: "#event-declaration" },
        { include: "#indexer-declaration" },
        { include: "#variable-initializer" },
        { include: "#constructor-declaration" },
        { include: "#destructor-declaration" },
        { include: "#operator-declaration" },
        { include: "#conversion-operator-declaration" },
        { include: "#method-declaration" },
        { include: "#attribute-section" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "combinator-pattern": {
      match: "\\b(and|or|not)\\b",
      name: "keyword.operator.expression.pattern.combinator.$1.cs"
    },
    comment: {
      patterns: [
        {
          begin: "(^\\s+)?(///)(?!/)",
          captures: {
            1: { name: "punctuation.whitespace.comment.leading.cs" },
            2: { name: "punctuation.definition.comment.cs" }
          },
          name: "comment.block.documentation.cs",
          patterns: [{ include: "#xml-doc-comment" }],
          while: "^(\\s*)(///)(?!/)"
        },
        {
          begin: "(^\\s+)?(/\\*\\*)(?!/)",
          captures: {
            1: { name: "punctuation.whitespace.comment.leading.cs" },
            2: { name: "punctuation.definition.comment.cs" }
          },
          end: "(^\\s+)?(\\*/)",
          name: "comment.block.documentation.cs",
          patterns: [
            {
              patterns: [{ include: "#xml-doc-comment" }],
              whileCaptures: {
                1: { name: "punctuation.whitespace.comment.leading.cs" },
                2: { name: "punctuation.definition.comment.cs" }
              }
            },
            { include: "#xml-doc-comment" }
          ]
        },
        {
          begin: "(^\\s+)?(//).*$",
          captures: {
            1: { name: "punctuation.whitespace.comment.leading.cs" },
            2: { name: "punctuation.definition.comment.cs" }
          },
          name: "comment.line.double-slash.cs",
          while: "^(\\s*)(//).*$"
        },
        {
          begin: "/\\*",
          captures: { 0: { name: "punctuation.definition.comment.cs" } },
          end: "\\*/",
          name: "comment.block.cs"
        }
      ]
    },
    "conditional-operator": {
      patterns: [
        {
          match: "\\?(?!\\?|\\s*[.\\[])",
          name: "keyword.operator.conditional.question-mark.cs"
        },
        { match: ":", name: "keyword.operator.conditional.colon.cs" }
      ]
    },
    "constant-pattern": {
      patterns: [
        { include: "#boolean-literal" },
        { include: "#null-literal" },
        { include: "#numeric-literal" },
        { include: "#char-literal" },
        { include: "#string-literal" },
        { include: "#raw-string-literal" },
        { include: "#verbatim-string-literal" },
        { include: "#type-operator-expression" },
        { include: "#expression-operator-expression" },
        { include: "#expression-operators" },
        { include: "#casted-constant-pattern" }
      ]
    },
    "constructor-declaration": {
      begin: "(?=@?[_[:alpha:]][_[:alnum:]]*\\s*\\()",
      end: "(?<=\\})|(?=;)",
      patterns: [
        {
          captures: { 1: { name: "entity.name.function.cs" } },
          match: "(@?[_[:alpha:]][_[:alnum:]]*)\\b"
        },
        {
          begin: "(:)",
          beginCaptures: { 1: { name: "punctuation.separator.colon.cs" } },
          end: "(?=\\{|=>)",
          patterns: [{ include: "#constructor-initializer" }]
        },
        { include: "#parenthesized-parameter-list" },
        { include: "#preprocessor" },
        { include: "#comment" },
        { include: "#expression-body" },
        { include: "#block" }
      ]
    },
    "constructor-initializer": {
      begin: "\\b(base|this)\\b\\s*(?=\\()",
      beginCaptures: { 1: { name: "variable.language.$1.cs" } },
      end: "(?<=\\))",
      patterns: [{ include: "#argument-list" }]
    },
    "context-control-paren-statement": {
      patterns: [
        { include: "#fixed-statement" },
        { include: "#lock-statement" },
        { include: "#using-statement" }
      ]
    },
    "context-control-statement": {
      match: "\\b(checked|unchecked|unsafe)\\b(?!\\s*[@_[:alpha:](])",
      name: "keyword.control.context.$1.cs"
    },
    "conversion-operator-declaration": {
      begin: "(?x)\n(?<explicit_or_implicit_keyword>(?:\\b(?:explicit|implicit)))\\s*\n(?<operator_keyword>(?:\\b(?:operator)))\\s*\n(?<type_name>\n  (?:\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n(?=\\()",
      beginCaptures: {
        1: {
          patterns: [
            {
              captures: { 1: { name: "storage.modifier.explicit.cs" } },
              match: "\\b(explicit)\\b"
            },
            {
              captures: { 1: { name: "storage.modifier.implicit.cs" } },
              match: "\\b(implicit)\\b"
            }
          ]
        },
        2: { name: "storage.type.operator.cs" },
        3: { patterns: [{ include: "#type" }] }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#parenthesized-parameter-list" },
        { include: "#expression-body" },
        { include: "#block" }
      ]
    },
    "declaration-expression-local": {
      captures: {
        1: { name: "storage.type.var.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.local.cs" }
      },
      match: "(?x) # e.g. int x OR var x\n(?:\n  \\b(var)\\b|\n  (?<type_name>\n    (?:\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\b\\s*\n(?=[,)\\]])"
    },
    "declaration-expression-tuple": {
      captures: {
        1: { name: "storage.type.var.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.tuple-element.cs" }
      },
      match: "(?x) # e.g. int x OR var x\n(?:\n  \\b(var)\\b|\n  (?<type_name>\n    (?:\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n                (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\b\\s*\n(?=[,)])"
    },
    declarations: {
      patterns: [
        { include: "#namespace-declaration" },
        { include: "#type-declarations" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "default-argument": {
      begin: "=",
      beginCaptures: { 0: { name: "keyword.operator.assignment.cs" } },
      end: "(?=,|\\))",
      patterns: [{ include: "#expression" }]
    },
    "default-literal-expression": {
      captures: { 1: { name: "keyword.operator.expression.default.cs" } },
      match: "\\b(default)\\b"
    },
    "delegate-declaration": {
      begin: "(?x)\n(?:\\b(delegate)\\b)\\s+\n(?<type_name>\n  (?:\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)\\s*\n(<([^<>]+)>)?\\s*\n(?=\\()",
      beginCaptures: {
        1: { name: "storage.type.delegate.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.type.delegate.cs" },
        8: { patterns: [{ include: "#type-parameter-list" }] }
      },
      end: "(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#parenthesized-parameter-list" },
        { include: "#generic-constraints" }
      ]
    },
    "designation-pattern": {
      patterns: [
        { include: "#intrusive" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [
            { include: "#punctuation-comma" },
            { include: "#designation-pattern" }
          ]
        },
        { include: "#simple-designation-pattern" }
      ]
    },
    "destructor-declaration": {
      begin: "(~)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?=\\()",
      beginCaptures: {
        1: { name: "punctuation.tilde.cs" },
        2: { name: "entity.name.function.cs" }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#parenthesized-parameter-list" },
        { include: "#expression-body" },
        { include: "#block" }
      ]
    },
    directives: {
      patterns: [
        { include: "#extern-alias-directive" },
        { include: "#using-directive" },
        { include: "#attribute-section" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "discard-pattern": {
      match: "_(?![_[:alnum:]])",
      name: "variable.language.discard.cs"
    },
    "do-statement": {
      begin: "(?<!\\.)\\b(do)\\b",
      beginCaptures: { 1: { name: "keyword.control.loop.do.cs" } },
      end: "(?=;|})",
      patterns: [{ include: "#statement" }]
    },
    "double-raw-interpolation": {
      begin: "(?<=[^\\{][^\\{]|^)((?:\\{)*)(\\{\\{)(?=[^\\{])",
      beginCaptures: {
        1: { name: "string.quoted.double.cs" },
        2: { name: "punctuation.definition.interpolation.begin.cs" }
      },
      end: "\\}\\}",
      endCaptures: { 0: { name: "punctuation.definition.interpolation.end.cs" } },
      name: "meta.interpolation.cs",
      patterns: [{ include: "#expression" }]
    },
    "element-access-expression": {
      begin: "(?x)\n(?:\n  (?:(\\?)\\s*)?  # preceding null-conditional operator?\n  (\\.)\\s*|      # preceding dot?\n  (->)\\s*       # preceding pointer arrow?\n)?\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*)? # property name\n(?:(\\?)\\s*)?                        # null-conditional operator?\n(?=\\[)                              # open bracket of argument list",
      beginCaptures: {
        1: { name: "keyword.operator.null-conditional.cs" },
        2: { name: "punctuation.accessor.cs" },
        3: { name: "punctuation.accessor.pointer.cs" },
        4: { name: "variable.other.object.property.cs" },
        5: { name: "keyword.operator.null-conditional.cs" }
      },
      end: "(?<=\\])(?!\\s*\\[)",
      patterns: [{ include: "#bracketed-argument-list" }]
    },
    "else-part": {
      begin: "(?<!\\.)\\b(else)\\b",
      beginCaptures: { 1: { name: "keyword.control.conditional.else.cs" } },
      end: "(?<=})|(?=;)",
      patterns: [{ include: "#statement" }]
    },
    "enum-declaration": {
      begin: "(?=\\benum\\b)",
      end: "(?<=\\})",
      patterns: [
        {
          begin: "(?=enum)",
          end: "(?=\\{)",
          patterns: [
            { include: "#comment" },
            {
              captures: {
                1: { name: "storage.type.enum.cs" },
                2: { name: "entity.name.type.enum.cs" }
              },
              match: "(enum)\\s+(@?[_[:alpha:]][_[:alnum:]]*)"
            },
            {
              begin: ":",
              beginCaptures: { 0: { name: "punctuation.separator.colon.cs" } },
              end: "(?=\\{)",
              patterns: [{ include: "#type" }]
            }
          ]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [
            { include: "#preprocessor" },
            { include: "#comment" },
            { include: "#attribute-section" },
            { include: "#punctuation-comma" },
            {
              begin: "@?[_[:alpha:]][_[:alnum:]]*",
              beginCaptures: { 0: { name: "entity.name.variable.enum-member.cs" } },
              end: "(?=(,|\\}))",
              patterns: [
                { include: "#comment" },
                { include: "#variable-initializer" }
              ]
            }
          ]
        },
        { include: "#preprocessor" },
        { include: "#comment" }
      ]
    },
    "event-accessors": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#attribute-section" },
        {
          begin: "\\b(add|remove)\\b\\s*(?=\\{|;|=>|//|/\\*|$)",
          beginCaptures: { 1: { name: "storage.type.accessor.$1.cs" } },
          end: "(?<=\\}|;)|(?=\\})",
          patterns: [{ include: "#accessor-setter" }]
        }
      ]
    },
    "event-declaration": {
      begin: "(?x)\n\\b(event)\\b\\s*\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(\\g<identifier>)\\s* # first event name\n(?=\\{|;|,|=|//|/\\*|$)",
      beginCaptures: {
        1: { name: "storage.type.event.cs" },
        2: { patterns: [{ include: "#type" }] },
        8: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] },
        9: { name: "entity.name.variable.event.cs" }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#event-accessors" },
        {
          match: "@?[_[:alpha:]][_[:alnum:]]*",
          name: "entity.name.variable.event.cs"
        },
        { include: "#punctuation-comma" },
        {
          begin: "=",
          beginCaptures: { 0: { name: "keyword.operator.assignment.cs" } },
          end: "(?<=,)|(?=;)",
          patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }]
        }
      ]
    },
    "explicit-anonymous-function-parameter": {
      captures: {
        1: { name: "storage.modifier.$1.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.parameter.cs" }
      },
      match: "(?x)\n(?:\\b(ref|params|out|in)\\b\\s*)?\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args><(?:[^<>]|\\g<type_args>)*>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^()]|\\g<tuple>)*\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n\\b(\\g<identifier>)\\b"
    },
    expression: {
      patterns: [
        { include: "#preprocessor" },
        { include: "#comment" },
        { include: "#expression-operator-expression" },
        { include: "#type-operator-expression" },
        { include: "#default-literal-expression" },
        { include: "#throw-expression" },
        { include: "#raw-interpolated-string" },
        { include: "#interpolated-string" },
        { include: "#verbatim-interpolated-string" },
        { include: "#type-builtin" },
        { include: "#language-variable" },
        { include: "#switch-statement-or-expression" },
        { include: "#with-expression" },
        { include: "#conditional-operator" },
        { include: "#assignment-expression" },
        { include: "#expression-operators" },
        { include: "#await-expression" },
        { include: "#query-expression" },
        { include: "#as-expression" },
        { include: "#is-expression" },
        { include: "#anonymous-method-expression" },
        { include: "#object-creation-expression" },
        { include: "#array-creation-expression" },
        { include: "#anonymous-object-creation-expression" },
        { include: "#invocation-expression" },
        { include: "#member-access-expression" },
        { include: "#element-access-expression" },
        { include: "#cast-expression" },
        { include: "#literal" },
        { include: "#parenthesized-expression" },
        { include: "#tuple-deconstruction-assignment" },
        { include: "#initializer-expression" },
        { include: "#identifier" }
      ]
    },
    "expression-body": {
      begin: "=>",
      beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } },
      end: "(?=[,\\);}])",
      patterns: [{ include: "#ref-modifier" }, { include: "#expression" }]
    },
    "expression-operator-expression": {
      begin: "\\b(checked|unchecked|nameof)\\s*(\\()",
      beginCaptures: {
        1: { name: "keyword.operator.expression.$1.cs" },
        2: { name: "punctuation.parenthesis.open.cs" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [{ include: "#expression" }]
    },
    "expression-operators": {
      patterns: [
        { match: "<<|>>>?", name: "keyword.operator.bitwise.shift.cs" },
        { match: "==|!=", name: "keyword.operator.comparison.cs" },
        { match: "<=|>=|<|>", name: "keyword.operator.relational.cs" },
        { match: "\\!|&&|\\|\\|", name: "keyword.operator.logical.cs" },
        { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.cs" },
        { match: "--", name: "keyword.operator.decrement.cs" },
        { match: "\\+\\+", name: "keyword.operator.increment.cs" },
        { match: "\\+|-(?!>)|\\*|/|%", name: "keyword.operator.arithmetic.cs" },
        { match: "\\?\\?", name: "keyword.operator.null-coalescing.cs" },
        { match: "\\.\\.", name: "keyword.operator.range.cs" }
      ]
    },
    "extern-alias-directive": {
      begin: "\\b(extern)\\s+(alias)\\b",
      beginCaptures: {
        1: { name: "keyword.other.directive.extern.cs" },
        2: { name: "keyword.other.directive.alias.cs" }
      },
      end: "(?=;)",
      patterns: [
        {
          match: "\\@?[_[:alpha:]][_[:alnum:]]*",
          name: "variable.other.alias.cs"
        }
      ]
    },
    "field-declaration": {
      begin: "(?x)\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)\\s* # first field name\n(?!=>|==)(?=,|;|=|$)",
      beginCaptures: {
        1: { patterns: [{ include: "#type" }] },
        6: { name: "entity.name.variable.field.cs" }
      },
      end: "(?=;)",
      patterns: [
        {
          match: "@?[_[:alpha:]][_[:alnum:]]*",
          name: "entity.name.variable.field.cs"
        },
        { include: "#punctuation-comma" },
        { include: "#comment" },
        { include: "#variable-initializer" },
        { include: "#class-or-struct-members" }
      ]
    },
    "finally-clause": {
      begin: "(?<!\\.)\\b(finally)\\b",
      beginCaptures: { 1: { name: "keyword.control.exception.finally.cs" } },
      end: "(?<=\\})",
      patterns: [{ include: "#comment" }, { include: "#block" }]
    },
    "fixed-statement": {
      begin: "\\b(fixed)\\b",
      beginCaptures: { 1: { name: "keyword.control.context.fixed.cs" } },
      end: "(?<=\\))|(?=;|})",
      patterns: [
        { include: "#intrusive" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [
            { include: "#intrusive" },
            { include: "#local-variable-declaration" }
          ]
        }
      ]
    },
    "for-statement": {
      begin: "\\b(for)\\b",
      beginCaptures: { 1: { name: "keyword.control.loop.for.cs" } },
      end: "(?<=\\))|(?=;|})",
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [
            {
              begin: "(?=[^;\\)])",
              end: "(?=;|\\))",
              patterns: [
                { include: "#intrusive" },
                { include: "#local-variable-declaration" }
              ]
            },
            {
              begin: "(?=;)",
              end: "(?=\\))",
              patterns: [
                { include: "#intrusive" },
                { include: "#expression" },
                { include: "#punctuation-comma" },
                { include: "#punctuation-semicolon" }
              ]
            }
          ]
        }
      ]
    },
    "foreach-statement": {
      begin: "\\b(foreach)\\b",
      beginCaptures: { 1: { name: "keyword.control.loop.foreach.cs" } },
      end: "(?<=\\))|(?=;|})",
      patterns: [
        { include: "#intrusive" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [
            { include: "#intrusive" },
            {
              captures: {
                1: { name: "storage.modifier.ref.cs" },
                2: { name: "storage.type.var.cs" },
                3: { patterns: [{ include: "#type" }] },
                8: { name: "entity.name.variable.local.cs" },
                9: { name: "keyword.control.loop.in.cs" }
              },
              match: "(?x)\n(?:\n  (?:(\\bref)\\s+)?(\\bvar\\b)| # ref local\n  (?<type_name>\n    (?:\n      (?:ref\\s+)?   # ref local\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\s+\n\\b(in)\\b"
            },
            {
              captures: {
                1: { name: "storage.type.var.cs" },
                2: {
                  patterns: [
                    { include: "#tuple-declaration-deconstruction-element-list" }
                  ]
                },
                3: { name: "keyword.control.loop.in.cs" }
              },
              match: "(?x) # match foreach (var (x, y) in ...)\n(?:\\b(var)\\b\\s*)?\n(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s+\n\\b(in)\\b"
            },
            { include: "#expression" }
          ]
        }
      ]
    },
    "generic-constraints": {
      begin: "(where)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
      beginCaptures: {
        1: { name: "storage.modifier.where.cs" },
        2: { name: "entity.name.type.type-parameter.cs" },
        3: { name: "punctuation.separator.colon.cs" }
      },
      end: "(?=\\{|where|;|=>)",
      patterns: [
        { match: "\\bclass\\b", name: "storage.type.class.cs" },
        { match: "\\bstruct\\b", name: "storage.type.struct.cs" },
        { match: "\\bdefault\\b", name: "keyword.other.constraint.default.cs" },
        { match: "\\bnotnull\\b", name: "keyword.other.constraint.notnull.cs" },
        {
          match: "\\bunmanaged\\b",
          name: "keyword.other.constraint.unmanaged.cs"
        },
        {
          captures: {
            1: { name: "keyword.operator.expression.new.cs" },
            2: { name: "punctuation.parenthesis.open.cs" },
            3: { name: "punctuation.parenthesis.close.cs" }
          },
          match: "(new)\\s*(\\()\\s*(\\))"
        },
        { include: "#type" },
        { include: "#punctuation-comma" },
        { include: "#generic-constraints" }
      ]
    },
    "goto-statement": {
      begin: "(?<!\\.)\\b(goto)\\b",
      beginCaptures: { 1: { name: "keyword.control.flow.goto.cs" } },
      end: "(?=[;}])",
      patterns: [
        {
          begin: "\\b(case)\\b",
          beginCaptures: { 1: { name: "keyword.control.conditional.case.cs" } },
          end: "(?=[;}])",
          patterns: [{ include: "#expression" }]
        },
        {
          captures: { 1: { name: "keyword.control.conditional.default.cs" } },
          match: "\\b(default)\\b"
        },
        { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.label.cs" }
      ]
    },
    "group-by": {
      captures: { 1: { name: "keyword.operator.expression.query.by.cs" } },
      match: "\\b(by)\\b\\s*"
    },
    "group-clause": {
      begin: "\\b(group)\\b\\s*",
      beginCaptures: { 1: { name: "keyword.operator.expression.query.group.cs" } },
      end: "(?=;|\\))",
      patterns: [
        { include: "#group-by" },
        { include: "#group-into" },
        { include: "#query-body" },
        { include: "#expression" }
      ]
    },
    "group-into": {
      captures: {
        1: { name: "keyword.operator.expression.query.into.cs" },
        2: { name: "entity.name.variable.range-variable.cs" }
      },
      match: "(?x)\n\\b(into)\\b\\s*\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*"
    },
    identifier: {
      match: "@?[_[:alpha:]][_[:alnum:]]*",
      name: "variable.other.readwrite.cs"
    },
    "if-statement": {
      begin: "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
      beginCaptures: { 1: { name: "keyword.control.conditional.if.cs" } },
      end: "(?<=})|(?=;)",
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#expression" }]
        },
        { include: "#statement" }
      ]
    },
    "implicit-anonymous-function-parameter": {
      match: "\\@?[_[:alpha:]][_[:alnum:]]*\\b",
      name: "entity.name.variable.parameter.cs"
    },
    "indexer-declaration": {
      begin: "(?x)\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(?<indexer_name>this)\\s*\n(?=\\[)",
      beginCaptures: {
        1: { patterns: [{ include: "#type" }] },
        7: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] },
        8: { name: "variable.language.this.cs" }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#bracketed-parameter-list" },
        { include: "#property-accessors" },
        { include: "#accessor-getter-expression" },
        { include: "#variable-initializer" }
      ]
    },
    "initializer-expression": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
      patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }]
    },
    "interface-declaration": {
      begin: "(?=\\binterface\\b)",
      end: "(?<=\\})",
      patterns: [
        {
          begin: "(?x)\n(interface)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)",
          beginCaptures: {
            1: { name: "storage.type.interface.cs" },
            2: { name: "entity.name.type.interface.cs" }
          },
          end: "(?=\\{)",
          patterns: [
            { include: "#comment" },
            { include: "#type-parameter-list" },
            { include: "#base-types" },
            { include: "#generic-constraints" }
          ]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#interface-members" }]
        },
        { include: "#preprocessor" },
        { include: "#comment" }
      ]
    },
    "interface-members": {
      patterns: [
        { include: "#preprocessor" },
        { include: "#comment" },
        { include: "#storage-modifier" },
        { include: "#property-declaration" },
        { include: "#event-declaration" },
        { include: "#indexer-declaration" },
        { include: "#method-declaration" },
        { include: "#operator-declaration" },
        { include: "#attribute-section" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "interpolated-string": {
      begin: '\\$"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '(")|((?:[^\\\\\\n])$)',
      endCaptures: {
        1: { name: "punctuation.definition.string.end.cs" },
        2: { name: "invalid.illegal.newline.cs" }
      },
      name: "string.quoted.double.cs",
      patterns: [
        { include: "#string-character-escape" },
        { include: "#interpolation" }
      ]
    },
    interpolation: {
      begin: "(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])",
      beginCaptures: {
        1: { name: "string.quoted.double.cs" },
        2: { name: "punctuation.definition.interpolation.begin.cs" }
      },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.interpolation.end.cs" } },
      name: "meta.interpolation.cs",
      patterns: [{ include: "#expression" }]
    },
    intrusive: { patterns: [{ include: "#preprocessor" }, { include: "#comment" }] },
    "invocation-expression": {
      begin: "(?x)\n(?:\n  (?:(\\?)\\s*)?                                    # preceding null-conditional operator?\n  (\\.)\\s*|                                        # preceding dot?\n  (->)\\s*                                         # preceding pointer arrow?\n)?\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*                  # method name\n(\n  <\n  (?<type_args>\n    [^<>()]++|\n    <\\g<type_args>*+>|\n    \\(\\g<type_args>*+\\)\n  )*+\n  >\\s*\n)?                                                # type arguments\n(?=\\()                                            # open paren of argument list",
      beginCaptures: {
        1: { name: "keyword.operator.null-conditional.cs" },
        2: { name: "punctuation.accessor.cs" },
        3: { name: "punctuation.accessor.pointer.cs" },
        4: { name: "entity.name.function.cs" },
        5: { patterns: [{ include: "#type-arguments" }] }
      },
      end: "(?<=\\))",
      patterns: [{ include: "#argument-list" }]
    },
    "is-expression": {
      begin: "(?<!\\.)\\b(is)\\b",
      beginCaptures: { 1: { name: "keyword.operator.expression.pattern.is.cs" } },
      end: "(?=[)}\\],;:?=&|^]|!=)",
      patterns: [{ include: "#pattern" }]
    },
    "join-clause": {
      begin: "(?x)\n\\b(join)\\b\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)?\n\\s+(\\g<identifier>)\\b\\s*\n\\b(in)\\b\\s*",
      beginCaptures: {
        1: { name: "keyword.operator.expression.query.join.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.range-variable.cs" },
        8: { name: "keyword.operator.expression.query.in.cs" }
      },
      end: "(?=;|\\))",
      patterns: [
        { include: "#join-on" },
        { include: "#join-equals" },
        { include: "#join-into" },
        { include: "#query-body" },
        { include: "#expression" }
      ]
    },
    "join-equals": {
      captures: { 1: { name: "keyword.operator.expression.query.equals.cs" } },
      match: "\\b(equals)\\b\\s*"
    },
    "join-into": {
      captures: {
        1: { name: "keyword.operator.expression.query.into.cs" },
        2: { name: "entity.name.variable.range-variable.cs" }
      },
      match: "(?x)\n\\b(into)\\b\\s*\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*"
    },
    "join-on": {
      captures: { 1: { name: "keyword.operator.expression.query.on.cs" } },
      match: "\\b(on)\\b\\s*"
    },
    "labeled-statement": {
      captures: {
        1: { name: "entity.name.label.cs" },
        2: { name: "punctuation.separator.colon.cs" }
      },
      match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)"
    },
    "language-variable": {
      patterns: [
        { match: "\\b(base|this)\\b", name: "variable.language.$1.cs" },
        { match: "\\b(value)\\b", name: "variable.other.$1.cs" }
      ]
    },
    "let-clause": {
      begin: "(?x)\n\\b(let)\\b\\s*\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\n(=)\\s*",
      beginCaptures: {
        1: { name: "keyword.operator.expression.query.let.cs" },
        2: { name: "entity.name.variable.range-variable.cs" },
        3: { name: "keyword.operator.assignment.cs" }
      },
      end: "(?=;|\\))",
      patterns: [{ include: "#query-body" }, { include: "#expression" }]
    },
    "list-pattern": {
      begin: "(?=\\[)",
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [
        {
          begin: "\\[",
          beginCaptures: { 0: { name: "punctuation.squarebracket.open.cs" } },
          end: "\\]",
          endCaptures: { 0: { name: "punctuation.squarebracket.close.cs" } },
          patterns: [{ include: "#pattern" }, { include: "#punctuation-comma" }]
        },
        {
          begin: "(?<=\\])",
          end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
          patterns: [
            { include: "#intrusive" },
            { include: "#simple-designation-pattern" }
          ]
        }
      ]
    },
    literal: {
      patterns: [
        { include: "#boolean-literal" },
        { include: "#null-literal" },
        { include: "#numeric-literal" },
        { include: "#char-literal" },
        { include: "#raw-string-literal" },
        { include: "#string-literal" },
        { include: "#verbatim-string-literal" },
        { include: "#tuple-literal" }
      ]
    },
    "local-constant-declaration": {
      begin: "(?x)\n(?<const_keyword>\\b(?:const)\\b)\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)\\s*\n(?=,|;|=)",
      beginCaptures: {
        1: { name: "storage.modifier.const.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.local.cs" }
      },
      end: "(?=;)",
      patterns: [
        {
          match: "@?[_[:alpha:]][_[:alnum:]]*",
          name: "entity.name.variable.local.cs"
        },
        { include: "#punctuation-comma" },
        { include: "#comment" },
        { include: "#variable-initializer" }
      ]
    },
    "local-declaration": {
      patterns: [
        { include: "#local-constant-declaration" },
        { include: "#local-variable-declaration" },
        { include: "#local-function-declaration" },
        { include: "#local-tuple-var-deconstruction" }
      ]
    },
    "local-function-declaration": {
      begin: "(?x)\n\\b((?:(?:async|unsafe|static|extern)\\s+)*)\n(?<type_name>\n  (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n  (?:\n    (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n    (?<name_and_type_args> # identifier + type arguments (if any)\n      \\g<identifier>\\s*\n      (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n    )\n    (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n    (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n  )\n  (?:\\s*\\?)? # nullable suffix?\n  (?:\\s* # array suffix?\n    \\[\n      \\s*(?:,\\s*)* # commata for multi-dimensional arrays\n    \\]\n    (?:\\s*\\?)? # arrays can be nullable reference types\n  )*\n)\\s+\n(\\g<identifier>)\\s*\n(<[^<>]+>)?\\s*\n(?=\\()",
      beginCaptures: {
        1: { patterns: [{ include: "#storage-modifier" }] },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.function.cs" },
        8: { patterns: [{ include: "#type-parameter-list" }] }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#parenthesized-parameter-list" },
        { include: "#generic-constraints" },
        { include: "#expression-body" },
        { include: "#block" }
      ]
    },
    "local-tuple-var-deconstruction": {
      begin: "(?x) # e.g. var (x, y) = GetPoint();\n(?:\\b(var)\\b\\s*)\n(?<tuple>\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*\n(?=;|=|\\))",
      beginCaptures: {
        1: { name: "storage.type.var.cs" },
        2: {
          patterns: [
            { include: "#tuple-declaration-deconstruction-element-list" }
          ]
        }
      },
      end: "(?=;|\\))",
      patterns: [{ include: "#comment" }, { include: "#variable-initializer" }]
    },
    "local-variable-declaration": {
      begin: "(?x)\n(?:\n  (?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bvar\\b)| # ref local\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref local\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*[?*]\\s*)? # nullable or pointer suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\s*\n(?!=>)\n(?=,|;|=|\\))",
      beginCaptures: {
        1: { name: "storage.modifier.ref.cs" },
        2: { name: "storage.modifier.readonly.cs" },
        3: { name: "storage.type.var.cs" },
        4: { patterns: [{ include: "#type" }] },
        9: { name: "entity.name.variable.local.cs" }
      },
      end: "(?=[;)}])",
      patterns: [
        {
          match: "@?[_[:alpha:]][_[:alnum:]]*",
          name: "entity.name.variable.local.cs"
        },
        { include: "#punctuation-comma" },
        { include: "#comment" },
        { include: "#variable-initializer" }
      ]
    },
    "lock-statement": {
      begin: "\\b(lock)\\b",
      beginCaptures: { 1: { name: "keyword.control.context.lock.cs" } },
      end: "(?<=\\))|(?=;|})",
      patterns: [
        { include: "#intrusive" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#intrusive" }, { include: "#expression" }]
        }
      ]
    },
    "member-access-expression": {
      patterns: [
        {
          captures: {
            1: { name: "keyword.operator.null-conditional.cs" },
            2: { name: "punctuation.accessor.cs" },
            3: { name: "punctuation.accessor.pointer.cs" },
            4: { name: "variable.other.object.property.cs" }
          },
          match: "(?x)\n(?:\n  (?:(\\?)\\s*)?                    # preceding null-conditional operator?\n  (\\.)\\s*|                        # preceding dot?\n  (->)\\s*                         # preceding pointer arrow?\n)\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*  # property name\n(?![_[:alnum:]]|\\(|(\\?)?\\[|<)     # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?["
        },
        {
          captures: {
            1: { name: "punctuation.accessor.cs" },
            2: { name: "variable.other.object.cs" },
            3: { patterns: [{ include: "#type-arguments" }] }
          },
          match: "(?x)\n(\\.)?\\s*\n(@?[_[:alpha:]][_[:alnum:]]*)\n(?<type_params>\\s*<([^<>]|\\g<type_params>)+>\\s*)\n(?=\n  (\\s*\\?)?\n  \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\n)"
        },
        {
          captures: { 1: { name: "variable.other.object.cs" } },
          match: "(?x)\n(@?[_[:alpha:]][_[:alnum:]]*)\n(?=\n  \\s*(?:(?:\\?\\s*)?\\.|->)\n  \\s*@?[_[:alpha:]][_[:alnum:]]*\n)"
        }
      ]
    },
    "method-declaration": {
      begin: "(?x)\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(\\g<identifier>)\\s*\n(<([^<>]+)>)?\\s*\n(?=\\()",
      beginCaptures: {
        1: { patterns: [{ include: "#type" }] },
        7: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] },
        8: { name: "entity.name.function.cs" },
        9: { patterns: [{ include: "#type-parameter-list" }] }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#parenthesized-parameter-list" },
        { include: "#generic-constraints" },
        { include: "#expression-body" },
        { include: "#block" }
      ]
    },
    "named-argument": {
      begin: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
      beginCaptures: {
        1: { name: "entity.name.variable.parameter.cs" },
        2: { name: "punctuation.separator.colon.cs" }
      },
      end: "(?=(,|\\)|\\]))",
      patterns: [{ include: "#argument" }]
    },
    "namespace-declaration": {
      begin: "\\b(namespace)\\s+",
      beginCaptures: { 1: { name: "storage.type.namespace.cs" } },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        {
          match: "@?[_[:alpha:]][_[:alnum:]]*",
          name: "entity.name.type.namespace.cs"
        },
        { include: "#punctuation-accessor" },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [
            { include: "#declarations" },
            { include: "#using-directive" },
            { include: "#punctuation-semicolon" }
          ]
        }
      ]
    },
    "null-literal": {
      match: "(?<!\\.)\\bnull\\b",
      name: "constant.language.null.cs"
    },
    "numeric-literal": {
      captures: {
        0: {
          patterns: [
            {
              begin: "(?=.)",
              end: "$",
              patterns: [
                {
                  captures: {
                    10: { name: "keyword.operator.arithmetic.cs" },
                    11: {
                      name: "constant.numeric.decimal.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    12: { name: "constant.numeric.other.suffix.cs" },
                    2: {
                      name: "constant.numeric.decimal.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    3: { name: "constant.numeric.other.separator.thousands.cs" },
                    4: { name: "constant.numeric.other.separator.decimals.cs" },
                    5: {
                      name: "constant.numeric.decimal.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    6: { name: "constant.numeric.other.separator.thousands.cs" },
                    8: { name: "constant.numeric.other.exponent.cs" },
                    9: { name: "keyword.operator.arithmetic.cs" }
                  },
                  match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$"
                },
                {
                  captures: {
                    1: { name: "constant.numeric.other.preffix.binary.cs" },
                    2: {
                      name: "constant.numeric.binary.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    3: { name: "constant.numeric.other.separator.thousands.cs" },
                    4: { name: "constant.numeric.other.suffix.cs" }
                  },
                  match: "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
                },
                {
                  captures: {
                    1: { name: "constant.numeric.other.preffix.hex.cs" },
                    2: {
                      name: "constant.numeric.hex.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    3: { name: "constant.numeric.other.separator.thousands.cs" },
                    4: { name: "constant.numeric.other.suffix.cs" }
                  },
                  match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
                },
                {
                  captures: {
                    2: {
                      name: "constant.numeric.decimal.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    3: { name: "constant.numeric.other.separator.thousands.cs" },
                    5: { name: "constant.numeric.other.exponent.cs" },
                    6: { name: "keyword.operator.arithmetic.cs" },
                    7: { name: "keyword.operator.arithmetic.cs" },
                    8: {
                      name: "constant.numeric.decimal.cs",
                      patterns: [
                        {
                          match: "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                          name: "constant.numeric.other.separator.thousands.cs"
                        }
                      ]
                    },
                    9: { name: "constant.numeric.other.suffix.cs" }
                  },
                  match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$"
                },
                {
                  match: "(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\.\\d)+",
                  name: "invalid.illegal.constant.numeric.cs"
                }
              ]
            }
          ]
        }
      },
      match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\.\\d)*"
    },
    "object-creation-expression": {
      patterns: [
        { include: "#object-creation-expression-with-parameters" },
        { include: "#object-creation-expression-with-no-parameters" }
      ]
    },
    "object-creation-expression-with-no-parameters": {
      captures: {
        1: { name: "keyword.operator.expression.new.cs" },
        2: { patterns: [{ include: "#type" }] }
      },
      match: "(?x)\n(new)\\s+\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n(?=\\{|//|/\\*|$)"
    },
    "object-creation-expression-with-parameters": {
      begin: "(?x)\n(new)(?:\\s+\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n))?\\s*\n(?=\\()",
      beginCaptures: {
        1: { name: "keyword.operator.expression.new.cs" },
        2: { patterns: [{ include: "#type" }] }
      },
      end: "(?<=\\))",
      patterns: [{ include: "#argument-list" }]
    },
    "operator-assignment": {
      match: "(?<!=|!)(=)(?!=)",
      name: "keyword.operator.assignment.cs"
    },
    "operator-declaration": {
      begin: "(?x)\n(?<type_name>\n  (?:\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n\\b(?<operator_keyword>operator)\\b\\s*\n(?<operator>[+\\-*/%&|\\^!=~<>]+|true|false)\\s*\n(?=\\()",
      beginCaptures: {
        1: { patterns: [{ include: "#type" }] },
        6: { name: "storage.type.operator.cs" },
        7: { name: "entity.name.function.cs" }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#parenthesized-parameter-list" },
        { include: "#expression-body" },
        { include: "#block" }
      ]
    },
    "orderby-clause": {
      begin: "\\b(orderby)\\b\\s*",
      beginCaptures: {
        1: { name: "keyword.operator.expression.query.orderby.cs" }
      },
      end: "(?=;|\\))",
      patterns: [
        { include: "#ordering-direction" },
        { include: "#query-body" },
        { include: "#expression" },
        { include: "#punctuation-comma" }
      ]
    },
    "ordering-direction": {
      captures: { 1: { name: "keyword.operator.expression.query.$1.cs" } },
      match: "\\b(ascending|descending)\\b"
    },
    parameter: {
      captures: {
        1: { name: "storage.modifier.$1.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.parameter.cs" }
      },
      match: "(?x)\n(?:(?:\\b(ref|params|out|in|this)\\b)\\s+)?\n(?<type_name>\n  (?:\n    (?:ref\\s+)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^()]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)"
    },
    "parenthesized-expression": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [{ include: "#expression" }]
    },
    "parenthesized-parameter-list": {
      begin: "(\\()",
      beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
      end: "(\\))",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#attribute-section" },
        { include: "#parameter" },
        { include: "#punctuation-comma" },
        { include: "#variable-initializer" }
      ]
    },
    pattern: {
      patterns: [
        { include: "#intrusive" },
        { include: "#combinator-pattern" },
        { include: "#discard-pattern" },
        { include: "#constant-pattern" },
        { include: "#relational-pattern" },
        { include: "#var-pattern" },
        { include: "#type-pattern" },
        { include: "#positional-pattern" },
        { include: "#property-pattern" },
        { include: "#list-pattern" },
        { include: "#slice-pattern" }
      ]
    },
    "positional-pattern": {
      begin: "(?=\\()",
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#subpattern" }, { include: "#punctuation-comma" }]
        },
        {
          begin: "(?<=\\))",
          end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
          patterns: [
            { include: "#intrusive" },
            { include: "#property-pattern" },
            { include: "#simple-designation-pattern" }
          ]
        }
      ]
    },
    preprocessor: {
      begin: "^\\s*(\\#)\\s*",
      beginCaptures: { 1: { name: "punctuation.separator.hash.cs" } },
      end: "(?<=$)",
      name: "meta.preprocessor.cs",
      patterns: [
        { include: "#comment" },
        { include: "#preprocessor-define-or-undef" },
        { include: "#preprocessor-if-or-elif" },
        { include: "#preprocessor-else-or-endif" },
        { include: "#preprocessor-warning-or-error" },
        { include: "#preprocessor-region" },
        { include: "#preprocessor-endregion" },
        { include: "#preprocessor-load" },
        { include: "#preprocessor-r" },
        { include: "#preprocessor-line" },
        { include: "#preprocessor-pragma-warning" },
        { include: "#preprocessor-pragma-checksum" }
      ]
    },
    "preprocessor-define-or-undef": {
      captures: {
        1: { name: "keyword.preprocessor.define.cs" },
        2: { name: "keyword.preprocessor.undef.cs" },
        3: { name: "entity.name.variable.preprocessor.symbol.cs" }
      },
      match: "\\b(?:(define)|(undef))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b"
    },
    "preprocessor-else-or-endif": {
      captures: {
        1: { name: "keyword.preprocessor.else.cs" },
        2: { name: "keyword.preprocessor.endif.cs" }
      },
      match: "\\b(?:(else)|(endif))\\b"
    },
    "preprocessor-endregion": {
      captures: { 1: { name: "keyword.preprocessor.endregion.cs" } },
      match: "\\b(endregion)\\b"
    },
    "preprocessor-expression": {
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#preprocessor-expression" }]
        },
        {
          captures: {
            1: { name: "constant.language.boolean.true.cs" },
            2: { name: "constant.language.boolean.false.cs" },
            3: { name: "entity.name.variable.preprocessor.symbol.cs" }
          },
          match: "\\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\\b"
        },
        {
          captures: {
            1: { name: "keyword.operator.comparison.cs" },
            2: { name: "keyword.operator.logical.cs" }
          },
          match: "(==|!=)|(\\!|&&|\\|\\|)"
        }
      ]
    },
    "preprocessor-if-or-elif": {
      begin: "\\b(?:(if)|(elif))\\b",
      beginCaptures: {
        1: { name: "keyword.preprocessor.if.cs" },
        2: { name: "keyword.preprocessor.elif.cs" }
      },
      end: "(?=$)",
      patterns: [{ include: "#comment" }, { include: "#preprocessor-expression" }]
    },
    "preprocessor-line": {
      begin: "\\b(line)\\b",
      beginCaptures: { 1: { name: "keyword.preprocessor.line.cs" } },
      end: "(?=$)",
      patterns: [
        {
          captures: {
            1: { name: "keyword.preprocessor.default.cs" },
            2: { name: "keyword.preprocessor.hidden.cs" }
          },
          match: "\\b(?:(default|hidden))"
        },
        { captures: { 0: { name: "constant.numeric.decimal.cs" } }, match: "[0-9]+" },
        { captures: { 0: { name: "string.quoted.double.cs" } }, match: '\\"[^"]*\\"' }
      ]
    },
    "preprocessor-load": {
      begin: "\\b(load)\\b",
      beginCaptures: { 1: { name: "keyword.preprocessor.load.cs" } },
      end: "(?=$)",
      patterns: [
        { captures: { 0: { name: "string.quoted.double.cs" } }, match: '\\"[^"]*\\"' }
      ]
    },
    "preprocessor-pragma-checksum": {
      captures: {
        1: { name: "keyword.preprocessor.pragma.cs" },
        2: { name: "keyword.preprocessor.checksum.cs" },
        3: { name: "string.quoted.double.cs" },
        4: { name: "string.quoted.double.cs" },
        5: { name: "string.quoted.double.cs" }
      },
      match: '\\b(pragma)\\b\\s*\\b(checksum)\\b\\s*(\\"[^"]*\\")\\s*(\\"[^"]*\\")\\s*(\\"[^"]*\\")'
    },
    "preprocessor-pragma-warning": {
      captures: {
        1: { name: "keyword.preprocessor.pragma.cs" },
        2: { name: "keyword.preprocessor.warning.cs" },
        3: { name: "keyword.preprocessor.disable.cs" },
        4: { name: "keyword.preprocessor.restore.cs" },
        5: {
          patterns: [
            {
              captures: { 0: { name: "constant.numeric.decimal.cs" } },
              match: "[0-9]+"
            },
            { include: "#punctuation-comma" }
          ]
        }
      },
      match: "\\b(pragma)\\b\\s*\\b(warning)\\b\\s*\\b(?:(disable)|(restore))\\b(\\s*[0-9]+(?:\\s*,\\s*[0-9]+)?)?"
    },
    "preprocessor-r": {
      begin: "\\b(r)\\b",
      beginCaptures: { 1: { name: "keyword.preprocessor.r.cs" } },
      end: "(?=$)",
      patterns: [
        { captures: { 0: { name: "string.quoted.double.cs" } }, match: '\\"[^"]*\\"' }
      ]
    },
    "preprocessor-region": {
      captures: {
        1: { name: "keyword.preprocessor.region.cs" },
        2: { name: "string.unquoted.preprocessor.message.cs" }
      },
      match: "\\b(region)\\b\\s*(.*)(?=$)"
    },
    "preprocessor-warning-or-error": {
      captures: {
        1: { name: "keyword.preprocessor.warning.cs" },
        2: { name: "keyword.preprocessor.error.cs" },
        3: { name: "string.unquoted.preprocessor.message.cs" }
      },
      match: "\\b(?:(warning)|(error))\\b\\s*(.*)(?=$)"
    },
    "property-accessors": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#attribute-section" },
        {
          match: "\\b(private|protected|internal)\\b",
          name: "storage.modifier.$1.cs"
        },
        {
          begin: "\\b(get)\\b\\s*(?=\\{|;|=>|//|/\\*|$)",
          beginCaptures: { 1: { name: "storage.type.accessor.$1.cs" } },
          end: "(?<=\\}|;)|(?=\\})",
          patterns: [{ include: "#accessor-getter" }]
        },
        {
          begin: "\\b(set|init)\\b\\s*(?=\\{|;|=>|//|/\\*|$)",
          beginCaptures: { 1: { name: "storage.type.accessor.$1.cs" } },
          end: "(?<=\\}|;)|(?=\\})",
          patterns: [{ include: "#accessor-setter" }]
        }
      ]
    },
    "property-declaration": {
      begin: "(?x)\n\n# The negative lookahead below ensures that we don't match nested types\n# or other declarations as properties.\n(?![[:word:][:space:]]*\\b(?:class|interface|struct|enum|event)\\b)\n\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(?<property_name>\\g<identifier>)\\s*\n(?=\\{|=>|//|/\\*|$)",
      beginCaptures: {
        1: { patterns: [{ include: "#type" }] },
        7: { patterns: [{ include: "#type" }, { include: "#punctuation-accessor" }] },
        8: { name: "entity.name.variable.property.cs" }
      },
      end: "(?<=\\})|(?=;)",
      patterns: [
        { include: "#comment" },
        { include: "#property-accessors" },
        { include: "#accessor-getter-expression" },
        { include: "#variable-initializer" },
        { include: "#class-or-struct-members" }
      ]
    },
    "property-pattern": {
      begin: "(?={)",
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#subpattern" }, { include: "#punctuation-comma" }]
        },
        {
          begin: "(?<=\\})",
          end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
          patterns: [
            { include: "#intrusive" },
            { include: "#simple-designation-pattern" }
          ]
        }
      ]
    },
    "punctuation-accessor": { match: "\\.", name: "punctuation.accessor.cs" },
    "punctuation-comma": { match: ",", name: "punctuation.separator.comma.cs" },
    "punctuation-semicolon": {
      match: ";",
      name: "punctuation.terminator.statement.cs"
    },
    "query-body": {
      patterns: [
        { include: "#let-clause" },
        { include: "#where-clause" },
        { include: "#join-clause" },
        { include: "#orderby-clause" },
        { include: "#select-clause" },
        { include: "#group-clause" }
      ]
    },
    "query-expression": {
      begin: "(?x)\n\\b(from)\\b\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)?\n\\s+(\\g<identifier>)\\b\\s*\n\\b(in)\\b\\s*",
      beginCaptures: {
        1: { name: "keyword.operator.expression.query.from.cs" },
        2: { patterns: [{ include: "#type" }] },
        7: { name: "entity.name.variable.range-variable.cs" },
        8: { name: "keyword.operator.expression.query.in.cs" }
      },
      end: "(?=;|\\))",
      patterns: [{ include: "#query-body" }, { include: "#expression" }]
    },
    "raw-interpolated-string": {
      patterns: [
        {
          include: "#raw-interpolated-string-five-or-more-quote-one-or-more-interpolation"
        },
        {
          include: "#raw-interpolated-string-three-or-more-quote-three-or-more-interpolation"
        },
        {
          include: "#raw-interpolated-string-quadruple-quote-double-interpolation"
        },
        {
          include: "#raw-interpolated-string-quadruple-quote-single-interpolation"
        },
        { include: "#raw-interpolated-string-triple-quote-double-interpolation" },
        { include: "#raw-interpolated-string-triple-quote-single-interpolation" }
      ]
    },
    "raw-interpolated-string-five-or-more-quote-one-or-more-interpolation": {
      begin: '\\$+"""""+',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"""""+',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs"
    },
    "raw-interpolated-string-quadruple-quote-double-interpolation": {
      begin: '\\$\\$""""',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '""""',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs",
      patterns: [{ include: "#double-raw-interpolation" }]
    },
    "raw-interpolated-string-quadruple-quote-single-interpolation": {
      begin: '\\$""""',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '""""',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs",
      patterns: [{ include: "#raw-interpolation" }]
    },
    "raw-interpolated-string-three-or-more-quote-three-or-more-interpolation": {
      begin: '\\$\\$\\$+"""+',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"""+',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs"
    },
    "raw-interpolated-string-triple-quote-double-interpolation": {
      begin: '\\$\\$"""',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"""',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs",
      patterns: [{ include: "#double-raw-interpolation" }]
    },
    "raw-interpolated-string-triple-quote-single-interpolation": {
      begin: '\\$"""',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"""',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs",
      patterns: [{ include: "#raw-interpolation" }]
    },
    "raw-interpolation": {
      begin: "(?<=[^\\{]|^)((?:\\{)*)(\\{)(?=[^\\{])",
      beginCaptures: {
        1: { name: "string.quoted.double.cs" },
        2: { name: "punctuation.definition.interpolation.begin.cs" }
      },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.interpolation.end.cs" } },
      name: "meta.interpolation.cs",
      patterns: [{ include: "#expression" }]
    },
    "raw-string-literal": {
      patterns: [
        { include: "#raw-string-literal-more" },
        { include: "#raw-string-literal-quadruple" },
        { include: "#raw-string-literal-triple" }
      ]
    },
    "raw-string-literal-more": {
      begin: '"""""+',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"""""+',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs"
    },
    "raw-string-literal-quadruple": {
      begin: '""""',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '""""',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs"
    },
    "raw-string-literal-triple": {
      begin: '"""',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"""',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs"
    },
    "readonly-modifier": {
      match: "\\breadonly\\b",
      name: "storage.modifier.readonly.cs"
    },
    "record-declaration": {
      begin: "(?=\\brecord\\b)",
      end: "(?<=\\})|(?=;)",
      patterns: [
        {
          begin: "(?x)\n(record)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)",
          beginCaptures: {
            1: { name: "storage.type.record.cs" },
            2: { name: "entity.name.type.class.cs" }
          },
          end: "(?=\\{)|(?=;)",
          patterns: [
            { include: "#comment" },
            { include: "#type-parameter-list" },
            { include: "#parenthesized-parameter-list" },
            { include: "#base-types" },
            { include: "#generic-constraints" }
          ]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#class-or-struct-members" }]
        },
        { include: "#preprocessor" },
        { include: "#comment" }
      ]
    },
    "ref-modifier": { match: "\\bref\\b", name: "storage.modifier.ref.cs" },
    "relational-pattern": {
      begin: "<=?|>=?",
      beginCaptures: { 0: { name: "keyword.operator.relational.cs" } },
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [{ include: "#expression" }]
    },
    "return-statement": {
      begin: "(?<!\\.)\\b(return)\\b",
      beginCaptures: { 1: { name: "keyword.control.flow.return.cs" } },
      end: "(?=[;}])",
      patterns: [{ include: "#ref-modifier" }, { include: "#expression" }]
    },
    "script-top-level": {
      patterns: [
        { include: "#statement" },
        { include: "#method-declaration" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "select-clause": {
      begin: "\\b(select)\\b\\s*",
      beginCaptures: { 1: { name: "keyword.operator.expression.query.select.cs" } },
      end: "(?=;|\\))",
      patterns: [{ include: "#query-body" }, { include: "#expression" }]
    },
    "simple-designation-pattern": {
      patterns: [
        { include: "#discard-pattern" },
        {
          match: "@?[_[:alpha:]][_[:alnum:]]*",
          name: "entity.name.variable.local.cs"
        }
      ]
    },
    "slice-pattern": { match: "\\.\\.", name: "keyword.operator.range.cs" },
    statement: {
      patterns: [
        { include: "#preprocessor" },
        { include: "#comment" },
        { include: "#while-statement" },
        { include: "#do-statement" },
        { include: "#for-statement" },
        { include: "#foreach-statement" },
        { include: "#if-statement" },
        { include: "#else-part" },
        { include: "#goto-statement" },
        { include: "#return-statement" },
        { include: "#break-or-continue-statement" },
        { include: "#throw-statement" },
        { include: "#yield-statement" },
        { include: "#await-statement" },
        { include: "#try-statement" },
        { include: "#expression-operator-expression" },
        { include: "#context-control-statement" },
        { include: "#context-control-paren-statement" },
        { include: "#labeled-statement" },
        { include: "#object-creation-expression" },
        { include: "#array-creation-expression" },
        { include: "#anonymous-object-creation-expression" },
        { include: "#local-declaration" },
        { include: "#block" },
        { include: "#expression" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "storage-modifier": {
      match: "(?<!\\.)\\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref|required|file)\\b",
      name: "storage.modifier.$1.cs"
    },
    "string-character-escape": {
      match: "\\\\(x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|.)",
      name: "constant.character.escape.cs"
    },
    "string-literal": {
      begin: '(?<!@)"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '(")|((?:[^\\\\\\n])$)',
      endCaptures: {
        1: { name: "punctuation.definition.string.end.cs" },
        2: { name: "invalid.illegal.newline.cs" }
      },
      name: "string.quoted.double.cs",
      patterns: [{ include: "#string-character-escape" }]
    },
    "struct-declaration": {
      begin: "(?=(\\brecord\\b\\s+)?\\bstruct\\b)",
      end: "(?<=\\})|(?=;)",
      patterns: [
        {
          begin: "(?x)\n(\\b(record)\\b\\s+)?\n(struct)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)",
          beginCaptures: {
            2: { name: "storage.type.record.cs" },
            3: { name: "storage.type.struct.cs" },
            4: { name: "entity.name.type.struct.cs" }
          },
          end: "(?=\\{)|(?=;)",
          patterns: [
            { include: "#comment" },
            { include: "#type-parameter-list" },
            { include: "#parenthesized-parameter-list" },
            { include: "#base-types" },
            { include: "#generic-constraints" }
          ]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#class-or-struct-members" }]
        },
        { include: "#preprocessor" },
        { include: "#comment" }
      ]
    },
    subpattern: {
      patterns: [
        {
          captures: {
            1: {
              patterns: [
                {
                  match: "\\@?[_[:alpha:]][_[:alnum:]]*",
                  name: "variable.other.object.property.cs"
                },
                { include: "#punctuation-accessor" }
              ]
            },
            2: { name: "punctuation.separator.colon.cs" }
          },
          match: "(@?[_[:alpha:]][_[:alnum:]]*(?:\\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*)*)\\s*(:)"
        },
        { include: "#pattern" }
      ]
    },
    "switch-expression": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
      patterns: [
        { include: "#punctuation-comma" },
        {
          begin: "=>",
          beginCaptures: { 0: { name: "keyword.operator.arrow.cs" } },
          end: "(?=,|})",
          patterns: [{ include: "#expression" }]
        },
        {
          begin: "\\b(when)\\b",
          beginCaptures: { 1: { name: "keyword.control.conditional.when.cs" } },
          end: "(?==>|,|})",
          patterns: [{ include: "#case-guard" }]
        },
        {
          begin: "(?!\\s)",
          end: "(?=\\bwhen\\b|=>|,|})",
          patterns: [{ include: "#pattern" }]
        }
      ]
    },
    "switch-label": {
      begin: "\\b(case|default)\\b",
      beginCaptures: { 1: { name: "keyword.control.conditional.$1.cs" } },
      end: "(:)|(?=})",
      endCaptures: { 1: { name: "punctuation.separator.colon.cs" } },
      patterns: [
        {
          begin: "\\b(when)\\b",
          beginCaptures: { 1: { name: "keyword.control.conditional.when.cs" } },
          end: "(?=:|})",
          patterns: [{ include: "#case-guard" }]
        },
        {
          begin: "(?!\\s)",
          end: "(?=\\bwhen\\b|:|})",
          patterns: [{ include: "#pattern" }]
        }
      ]
    },
    "switch-statement": {
      patterns: [
        { include: "#intrusive" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#expression" }]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.curlybrace.open.cs" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.curlybrace.close.cs" } },
          patterns: [{ include: "#switch-label" }, { include: "#statement" }]
        }
      ]
    },
    "switch-statement-or-expression": {
      begin: "(?<!\\.)\\b(switch)\\b",
      beginCaptures: { 1: { name: "keyword.control.conditional.switch.cs" } },
      end: "(?<=})|(?=})",
      patterns: [
        { include: "#intrusive" },
        {
          begin: "(?=\\()",
          end: "(?<=\\})|(?=\\})",
          patterns: [{ include: "#switch-statement" }]
        },
        {
          begin: "(?=\\{)",
          end: "(?<=\\})|(?=\\})",
          patterns: [{ include: "#switch-expression" }]
        }
      ]
    },
    "throw-expression": {
      captures: { 1: { name: "keyword.control.flow.throw.cs" } },
      match: "\\b(throw)\\b"
    },
    "throw-statement": {
      begin: "(?<!\\.)\\b(throw)\\b",
      beginCaptures: { 1: { name: "keyword.control.flow.throw.cs" } },
      end: "(?=[;}])",
      patterns: [{ include: "#expression" }]
    },
    "try-block": {
      begin: "(?<!\\.)\\b(try)\\b",
      beginCaptures: { 1: { name: "keyword.control.exception.try.cs" } },
      end: "(?<=\\})",
      patterns: [{ include: "#comment" }, { include: "#block" }]
    },
    "try-statement": {
      patterns: [
        { include: "#try-block" },
        { include: "#catch-clause" },
        { include: "#finally-clause" }
      ]
    },
    "tuple-declaration-deconstruction-element-list": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#tuple-declaration-deconstruction-element-list" },
        { include: "#declaration-expression-tuple" },
        { include: "#punctuation-comma" },
        {
          captures: { 1: { name: "entity.name.variable.tuple-element.cs" } },
          match: "(?x) # e.g. x\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\n(?=[,)])"
        }
      ]
    },
    "tuple-deconstruction-assignment": {
      captures: {
        1: { patterns: [{ include: "#tuple-deconstruction-element-list" }] }
      },
      match: "(?x)\n(?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\\s*\n(?!=>|==)(?==)"
    },
    "tuple-deconstruction-element-list": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#tuple-deconstruction-element-list" },
        { include: "#declaration-expression-tuple" },
        { include: "#punctuation-comma" },
        {
          captures: { 1: { name: "variable.other.readwrite.cs" } },
          match: "(?x) # e.g. x\n(@?[_[:alpha:]][_[:alnum:]]*)\\b\\s*\n(?=[,)])"
        }
      ]
    },
    "tuple-element": {
      captures: {
        1: { patterns: [{ include: "#type" }] },
        6: { name: "entity.name.variable.tuple-element.cs" }
      },
      match: "(?x)\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\n(?:(?<tuple_name>\\g<identifier>)\\b)?"
    },
    "tuple-literal": {
      begin: "(\\()(?=.*[:,])",
      beginCaptures: { 1: { name: "punctuation.parenthesis.open.cs" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [
        { include: "#comment" },
        { include: "#tuple-literal-element" },
        { include: "#expression" },
        { include: "#punctuation-comma" }
      ]
    },
    "tuple-literal-element": {
      begin: "(?x)\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*\n(?=:)",
      beginCaptures: { 1: { name: "entity.name.variable.tuple-element.cs" } },
      end: "(:)",
      endCaptures: { 0: { name: "punctuation.separator.colon.cs" } }
    },
    "tuple-type": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [{ include: "#tuple-element" }, { include: "#punctuation-comma" }]
    },
    type: {
      patterns: [
        { include: "#comment" },
        { include: "#ref-modifier" },
        { include: "#readonly-modifier" },
        { include: "#tuple-type" },
        { include: "#type-builtin" },
        { include: "#type-name" },
        { include: "#type-arguments" },
        { include: "#type-array-suffix" },
        { include: "#type-nullable-suffix" },
        { include: "#type-pointer-suffix" }
      ]
    },
    "type-arguments": {
      begin: "<",
      beginCaptures: {
        0: { name: "punctuation.definition.typeparameters.begin.cs" }
      },
      end: ">",
      endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.cs" } },
      patterns: [{ include: "#type" }, { include: "#punctuation-comma" }]
    },
    "type-array-suffix": {
      begin: "\\[",
      beginCaptures: { 0: { name: "punctuation.squarebracket.open.cs" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.squarebracket.close.cs" } },
      patterns: [{ include: "#intrusive" }, { include: "#punctuation-comma" }]
    },
    "type-builtin": {
      captures: { 1: { name: "keyword.type.$1.cs" } },
      match: "\\b(bool|s?byte|u?short|n?u?int|u?long|float|double|decimal|char|string|object|void|dynamic)\\b"
    },
    "type-declarations": {
      patterns: [
        { include: "#preprocessor" },
        { include: "#comment" },
        { include: "#storage-modifier" },
        { include: "#class-declaration" },
        { include: "#delegate-declaration" },
        { include: "#enum-declaration" },
        { include: "#interface-declaration" },
        { include: "#struct-declaration" },
        { include: "#record-declaration" },
        { include: "#attribute-section" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "type-name": {
      patterns: [
        {
          captures: {
            1: { name: "entity.name.type.alias.cs" },
            2: { name: "punctuation.separator.coloncolon.cs" }
          },
          match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)"
        },
        {
          captures: {
            1: { name: "entity.name.type.cs" },
            2: { name: "punctuation.accessor.cs" }
          },
          match: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.cs" },
            2: { name: "entity.name.type.cs" }
          },
          match: "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)"
        },
        { match: "@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.cs" }
      ]
    },
    "type-nullable-suffix": {
      match: "\\?",
      name: "punctuation.separator.question-mark.cs"
    },
    "type-operator-expression": {
      begin: "\\b(default|sizeof|typeof)\\s*(\\()",
      beginCaptures: {
        1: { name: "keyword.operator.expression.$1.cs" },
        2: { name: "punctuation.parenthesis.open.cs" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [{ include: "#type" }]
    },
    "type-parameter-list": {
      begin: "\\<",
      beginCaptures: {
        0: { name: "punctuation.definition.typeparameters.begin.cs" }
      },
      end: "\\>",
      endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.cs" } },
      patterns: [
        { match: "\\b(in|out)\\b", name: "storage.modifier.$1.cs" },
        {
          match: "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
          name: "entity.name.type.type-parameter.cs"
        },
        { include: "#comment" },
        { include: "#punctuation-comma" },
        { include: "#attribute-section" }
      ]
    },
    "type-pattern": {
      begin: "(?=@?[_[:alpha:]][_[:alnum:]]*)",
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [
        {
          begin: "\\G",
          end: "(?!\\G[@_[:alpha:]])(?=[\\({@_[:alpha:])}\\],;:=&|^]|(?:\\s|^)\\?|!=|\\b(and|or|when)\\b)",
          patterns: [{ include: "#intrusive" }, { include: "#type-subpattern" }]
        },
        {
          begin: "(?=[\\({@_[:alpha:]])",
          end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
          patterns: [
            { include: "#intrusive" },
            { include: "#positional-pattern" },
            { include: "#property-pattern" },
            { include: "#simple-designation-pattern" }
          ]
        }
      ]
    },
    "type-pointer-suffix": {
      match: "\\*",
      name: "punctuation.separator.asterisk.cs"
    },
    "type-subpattern": {
      patterns: [
        { include: "#type-builtin" },
        {
          begin: "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(::)",
          beginCaptures: {
            1: { name: "entity.name.type.alias.cs" },
            2: { name: "punctuation.separator.coloncolon.cs" }
          },
          end: "(?<=[_[:alnum:]])|(?=[.<\\[\\({)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
          patterns: [
            { include: "#intrusive" },
            {
              match: "\\@?[_[:alpha:]][_[:alnum:]]*",
              name: "entity.name.type.cs"
            }
          ]
        },
        { match: "\\@?[_[:alpha:]][_[:alnum:]]*", name: "entity.name.type.cs" },
        {
          begin: "\\.",
          beginCaptures: { 0: { name: "punctuation.accessor.cs" } },
          end: "(?<=[_[:alnum:]])|(?=[<\\[\\({)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
          patterns: [
            { include: "#intrusive" },
            {
              match: "\\@?[_[:alpha:]][_[:alnum:]]*",
              name: "entity.name.type.cs"
            }
          ]
        },
        { include: "#type-arguments" },
        { include: "#type-array-suffix" },
        { match: "(?<!\\s)\\?", name: "punctuation.separator.question-mark.cs" }
      ]
    },
    "using-directive": {
      patterns: [
        {
          begin: "\\b(?:(global)\\s+)?(using)\\s+(static)\\b\\s*(?:(unsafe)\\b\\s*)?",
          beginCaptures: {
            1: { name: "keyword.other.directive.global.cs" },
            2: { name: "keyword.other.directive.using.cs" },
            3: { name: "keyword.other.directive.static.cs" },
            4: { name: "storage.modifier.unsafe.cs" }
          },
          end: "(?=;)",
          patterns: [{ include: "#type" }]
        },
        {
          begin: "\\b(?:(global)\\s+)?(using)\\b\\s*(?:(unsafe)\\b\\s*)?(@?[_[:alpha:]][_[:alnum:]]*)\\s*(=)",
          beginCaptures: {
            1: { name: "keyword.other.directive.global.cs" },
            2: { name: "keyword.other.directive.using.cs" },
            3: { name: "storage.modifier.unsafe.cs" },
            4: { name: "entity.name.type.alias.cs" },
            5: { name: "keyword.operator.assignment.cs" }
          },
          end: "(?=;)",
          patterns: [{ include: "#comment" }, { include: "#type" }]
        },
        {
          begin: "\\b(?:(global)\\s+)?(using)\\b\\s*+(?!\\(|var\\b)",
          beginCaptures: {
            1: { name: "keyword.other.directive.global.cs" },
            2: { name: "keyword.other.directive.using.cs" }
          },
          end: "(?=;)",
          patterns: [
            { include: "#comment" },
            {
              match: "\\@?[_[:alpha:]][_[:alnum:]]*",
              name: "entity.name.type.namespace.cs"
            },
            { include: "#punctuation-accessor" },
            { include: "#operator-assignment" }
          ]
        }
      ]
    },
    "using-statement": {
      begin: "\\b(using)\\b",
      beginCaptures: { 1: { name: "keyword.control.context.using.cs" } },
      end: "(?<=\\))|(?=;|})",
      patterns: [
        { include: "#intrusive" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [
            { include: "#intrusive" },
            { include: "#await-expression" },
            { include: "#local-variable-declaration" },
            { include: "#expression" }
          ]
        },
        { include: "#local-variable-declaration" }
      ]
    },
    "var-pattern": {
      begin: "\\b(var)\\b",
      beginCaptures: { 1: { name: "storage.type.var.cs" } },
      end: "(?=[)}\\],;:?=&|^]|!=|\\b(and|or|when)\\b)",
      patterns: [{ include: "#designation-pattern" }]
    },
    "variable-initializer": {
      begin: "(?<!=|!)(=)(?!=|>)",
      beginCaptures: { 1: { name: "keyword.operator.assignment.cs" } },
      end: "(?=[,\\)\\];}])",
      patterns: [{ include: "#ref-modifier" }, { include: "#expression" }]
    },
    "verbatim-interpolated-string": {
      begin: '(?:\\$@|@\\$)"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"(?=[^"])',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs",
      patterns: [
        { include: "#verbatim-string-character-escape" },
        { include: "#interpolation" }
      ]
    },
    "verbatim-string-character-escape": {
      match: '""',
      name: "constant.character.escape.cs"
    },
    "verbatim-string-literal": {
      begin: '@"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: '"(?=[^"])',
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.quoted.double.cs",
      patterns: [{ include: "#verbatim-string-character-escape" }]
    },
    "when-clause": {
      begin: "(?<!\\.)\\b(when)\\b\\s*(\\()",
      beginCaptures: {
        1: { name: "keyword.control.exception.when.cs" },
        2: { name: "punctuation.parenthesis.open.cs" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
      patterns: [{ include: "#expression" }, { include: "#comment" }]
    },
    "where-clause": {
      begin: "(?x)\n\\b(where)\\b\\s*",
      beginCaptures: { 1: { name: "keyword.operator.expression.query.where.cs" } },
      end: "(?=;|\\))",
      patterns: [{ include: "#query-body" }, { include: "#expression" }]
    },
    "while-statement": {
      begin: "(?<!\\.)\\b(while)\\b\\s*(?=\\()",
      beginCaptures: { 1: { name: "keyword.control.loop.while.cs" } },
      end: "(?<=\\})|(?=;)",
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.parenthesis.open.cs" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.parenthesis.close.cs" } },
          patterns: [{ include: "#expression" }]
        },
        { include: "#statement" }
      ]
    },
    "with-expression": {
      begin: "(?<!\\.)\\b(with)\\b\\s*(?=\\{|//|/\\*|$)",
      beginCaptures: { 1: { name: "keyword.operator.expression.with.cs" } },
      end: "(?<=\\})",
      patterns: [{ include: "#comment" }, { include: "#initializer-expression" }]
    },
    "xml-attribute": {
      patterns: [
        {
          captures: {
            1: { name: "entity.other.attribute-name.cs" },
            2: { name: "entity.other.attribute-name.namespace.cs" },
            3: { name: "punctuation.separator.colon.cs" },
            4: { name: "entity.other.attribute-name.localname.cs" },
            5: { name: "punctuation.separator.equals.cs" }
          },
          match: "(?x)\n(?:^|\\s+)\n(\n  (?:\n    ([-_[:alnum:]]+)\n    (:)\n  )?\n  ([-_[:alnum:]]+)\n)\n(=)"
        },
        { include: "#xml-string" }
      ]
    },
    "xml-cdata": {
      begin: "<!\\[CDATA\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
      end: "\\]\\]>",
      endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
      name: "string.unquoted.cdata.cs"
    },
    "xml-character-entity": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.constant.cs" },
            3: { name: "punctuation.definition.constant.cs" }
          },
          match: "(?x)\n(&)\n(\n  (?:[[:alpha:]:_][[:alnum:]:_.-]*)|\n  (?:\\#[[:digit:]]+)|\n  (?:\\#x[[:xdigit:]]+)\n)\n(;)",
          name: "constant.character.entity.cs"
        },
        { match: "&", name: "invalid.illegal.bad-ampersand.cs" }
      ]
    },
    "xml-comment": {
      begin: "<!--",
      beginCaptures: { 0: { name: "punctuation.definition.comment.cs" } },
      end: "-->",
      endCaptures: { 0: { name: "punctuation.definition.comment.cs" } },
      name: "comment.block.cs"
    },
    "xml-doc-comment": {
      patterns: [
        { include: "#xml-comment" },
        { include: "#xml-character-entity" },
        { include: "#xml-cdata" },
        { include: "#xml-tag" }
      ]
    },
    "xml-string": {
      patterns: [
        {
          begin: "\\'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
          end: "\\'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
          name: "string.quoted.single.cs",
          patterns: [{ include: "#xml-character-entity" }]
        },
        {
          begin: '\\"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.cs" } },
          end: '\\"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.cs" } },
          name: "string.quoted.double.cs",
          patterns: [{ include: "#xml-character-entity" }]
        }
      ]
    },
    "xml-tag": {
      begin: "(?x)\n(</?)\n(\n  (?:\n    ([-_[:alnum:]]+)\n    (:)\n  )?\n  ([-_[:alnum:]]+)\n)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.cs" },
        2: { name: "entity.name.tag.cs" },
        3: { name: "entity.name.tag.namespace.cs" },
        4: { name: "punctuation.separator.colon.cs" },
        5: { name: "entity.name.tag.localname.cs" }
      },
      end: "(/?>)",
      endCaptures: { 1: { name: "punctuation.definition.tag.cs" } },
      name: "meta.tag.cs",
      patterns: [{ include: "#xml-attribute" }]
    },
    "yield-break-statement": {
      captures: {
        1: { name: "keyword.control.flow.yield.cs" },
        2: { name: "keyword.control.flow.break.cs" }
      },
      match: "(?<!\\.)\\b(yield)\\b\\s*\\b(break)\\b"
    },
    "yield-return-statement": {
      begin: "(?<!\\.)\\b(yield)\\b\\s*\\b(return)\\b",
      beginCaptures: {
        1: { name: "keyword.control.flow.yield.cs" },
        2: { name: "keyword.control.flow.return.cs" }
      },
      end: "(?=[;}])",
      patterns: [{ include: "#expression" }]
    },
    "yield-statement": {
      patterns: [
        { include: "#yield-return-statement" },
        { include: "#yield-break-statement" }
      ]
    }
  },
  scopeName: "source.cs"
};
var source_cs_default = grammar4;

// node_modules/@wooorm/starry-night/lang/source.css.js
var grammar5 = {
  extensions: [".css"],
  names: ["css"],
  patterns: [
    { include: "#comment-block" },
    { include: "#escapes" },
    { include: "#combinators" },
    { include: "#selector" },
    { include: "#at-rules" },
    { include: "#rule-list" }
  ],
  repository: {
    "at-rules": {
      patterns: [
        {
          begin: "\\A(?:\\xEF\\xBB\\xBF)?(?i:(?=\\s*@charset\\b))",
          end: ";|(?=$)",
          endCaptures: { 0: { name: "punctuation.terminator.rule.css" } },
          name: "meta.at-rule.charset.css",
          patterns: [
            {
              captures: {
                1: { name: "invalid.illegal.not-lowercase.charset.css" },
                2: { name: "invalid.illegal.leading-whitespace.charset.css" },
                3: { name: "invalid.illegal.no-whitespace.charset.css" },
                4: { name: "invalid.illegal.whitespace.charset.css" },
                5: { name: "invalid.illegal.not-double-quoted.charset.css" },
                6: { name: "invalid.illegal.unclosed-string.charset.css" },
                7: { name: "invalid.illegal.unexpected-characters.charset.css" }
              },
              match: '(?x)        # Possible errors:\n\\G\n((?!@charset)@\\w+)   # Not lowercase (@charset is case-sensitive)\n|\n\\G(\\s+)             # Preceding whitespace\n|\n(@charset\\S[^;]*)    # No whitespace after @charset\n|\n(?<=@charset)         # Before quoted charset name\n(\\x20{2,}|\\t+)      # More than one space used, or a tab\n|\n(?<=@charset\\x20)    # Beginning of charset name\n([^";]+)              # Not double-quoted\n|\n("[^"]+$)             # Unclosed quote\n|\n(?<=")                # After charset name\n([^;]+)               # Unexpected junk instead of semicolon'
            },
            {
              captures: {
                1: { name: "keyword.control.at-rule.charset.css" },
                2: { name: "punctuation.definition.keyword.css" }
              },
              match: "((@)charset)(?=\\s)"
            },
            {
              begin: '"',
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.css" }
              },
              end: '"|$',
              endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
              name: "string.quoted.double.css",
              patterns: [
                {
                  begin: '(?:\\G|^)(?=(?:[^"])+$)',
                  end: "$",
                  name: "invalid.illegal.unclosed.string.css"
                }
              ]
            }
          ]
        },
        {
          begin: `(?i)((@)import)(?:\\s+|$|(?=['"]|/\\*))`,
          beginCaptures: {
            1: { name: "keyword.control.at-rule.import.css" },
            2: { name: "punctuation.definition.keyword.css" }
          },
          end: ";",
          endCaptures: { 0: { name: "punctuation.terminator.rule.css" } },
          name: "meta.at-rule.import.css",
          patterns: [
            {
              begin: "\\G\\s*(?=/\\*)",
              end: "(?<=\\*/)\\s*",
              patterns: [{ include: "#comment-block" }]
            },
            { include: "#string" },
            { include: "#url" },
            { include: "#media-query-list" }
          ]
        },
        {
          begin: "(?i)((@)font-face)(?=\\s*|{|/\\*|$)",
          beginCaptures: {
            1: { name: "keyword.control.at-rule.font-face.css" },
            2: { name: "punctuation.definition.keyword.css" }
          },
          end: "(?!\\G)",
          name: "meta.at-rule.font-face.css",
          patterns: [
            { include: "#comment-block" },
            { include: "#escapes" },
            { include: "#rule-list" }
          ]
        },
        {
          begin: "(?i)(@)page(?=[\\s:{]|/\\*|$)",
          captures: {
            0: { name: "keyword.control.at-rule.page.css" },
            1: { name: "punctuation.definition.keyword.css" }
          },
          end: "(?=\\s*($|[:{;]))",
          name: "meta.at-rule.page.css",
          patterns: [{ include: "#rule-list" }]
        },
        {
          begin: "(?i)(?=@media(\\s|\\(|/\\*|$))",
          end: "(?<=})(?!\\G)",
          patterns: [
            {
              begin: "(?i)\\G(@)media",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.media.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: "(?=\\s*[{;])",
              name: "meta.at-rule.media.header.css",
              patterns: [{ include: "#media-query-list" }]
            },
            {
              begin: "{",
              beginCaptures: {
                0: { name: "punctuation.section.media.begin.bracket.curly.css" }
              },
              end: "}",
              endCaptures: {
                0: { name: "punctuation.section.media.end.bracket.curly.css" }
              },
              name: "meta.at-rule.media.body.css",
              patterns: [{ include: "$self" }]
            }
          ]
        },
        {
          begin: `(?i)(?=@counter-style([\\s'"{;]|/\\*|$))`,
          end: "(?<=})(?!\\G)",
          patterns: [
            {
              begin: "(?i)\\G(@)counter-style",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.counter-style.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: "(?=\\s*{)",
              name: "meta.at-rule.counter-style.header.css",
              patterns: [
                { include: "#comment-block" },
                { include: "#escapes" },
                {
                  captures: { 0: { patterns: [{ include: "#escapes" }] } },
                  match: "(?x)\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                  name: "variable.parameter.style-name.css"
                }
              ]
            },
            {
              begin: "{",
              beginCaptures: {
                0: {
                  name: "punctuation.section.property-list.begin.bracket.curly.css"
                }
              },
              end: "}",
              endCaptures: {
                0: {
                  name: "punctuation.section.property-list.end.bracket.curly.css"
                }
              },
              name: "meta.at-rule.counter-style.body.css",
              patterns: [
                { include: "#comment-block" },
                { include: "#escapes" },
                { include: "#rule-list-innards" }
              ]
            }
          ]
        },
        {
          begin: `(?i)(?=@document([\\s'"{;]|/\\*|$))`,
          end: "(?<=})(?!\\G)",
          patterns: [
            {
              begin: "(?i)\\G(@)document",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.document.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: "(?=\\s*[{;])",
              name: "meta.at-rule.document.header.css",
              patterns: [
                {
                  begin: "(?i)(?<![\\w-])(url-prefix|domain|regexp)(\\()",
                  beginCaptures: {
                    1: { name: "support.function.document-rule.css" },
                    2: {
                      name: "punctuation.section.function.begin.bracket.round.css"
                    }
                  },
                  end: "\\)",
                  endCaptures: {
                    0: {
                      name: "punctuation.section.function.end.bracket.round.css"
                    }
                  },
                  name: "meta.function.document-rule.css",
                  patterns: [
                    { include: "#string" },
                    { include: "#comment-block" },
                    { include: "#escapes" },
                    {
                      match: `[^'")\\s]+`,
                      name: "variable.parameter.document-rule.css"
                    }
                  ]
                },
                { include: "#url" },
                { include: "#commas" },
                { include: "#comment-block" },
                { include: "#escapes" }
              ]
            },
            {
              begin: "{",
              beginCaptures: {
                0: {
                  name: "punctuation.section.document.begin.bracket.curly.css"
                }
              },
              end: "}",
              endCaptures: {
                0: { name: "punctuation.section.document.end.bracket.curly.css" }
              },
              name: "meta.at-rule.document.body.css",
              patterns: [{ include: "$self" }]
            }
          ]
        },
        {
          begin: `(?i)(?=@(?:-(?:webkit|moz|o|ms)-)?keyframes([\\s'"{;]|/\\*|$))`,
          end: "(?<=})(?!\\G)",
          patterns: [
            {
              begin: "(?i)\\G(@)(?:-(?:webkit|moz|o|ms)-)?keyframes",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.keyframes.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: "(?=\\s*{)",
              name: "meta.at-rule.keyframes.header.css",
              patterns: [
                { include: "#comment-block" },
                { include: "#escapes" },
                {
                  captures: { 0: { patterns: [{ include: "#escapes" }] } },
                  match: "(?x)\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                  name: "variable.parameter.keyframe-list.css"
                }
              ]
            },
            {
              begin: "{",
              beginCaptures: {
                0: {
                  name: "punctuation.section.keyframes.begin.bracket.curly.css"
                }
              },
              end: "}",
              endCaptures: {
                0: { name: "punctuation.section.keyframes.end.bracket.curly.css" }
              },
              name: "meta.at-rule.keyframes.body.css",
              patterns: [
                { include: "#comment-block" },
                { include: "#escapes" },
                {
                  captures: {
                    1: { name: "entity.other.keyframe-offset.css" },
                    2: { name: "entity.other.keyframe-offset.percentage.css" }
                  },
                  match: "(?xi)\n(?<![\\w-]) (from|to) (?![\\w-])         # Keywords for 0% | 100%\n|\n([-+]?(?:\\d+(?:\\.\\d+)?|\\.\\d+)%)     # Percentile value"
                },
                { include: "#rule-list" }
              ]
            }
          ]
        },
        {
          begin: "(?i)(?=@supports(\\s|\\(|/\\*|$))",
          end: "(?<=})(?!\\G)|(?=;)",
          patterns: [
            {
              begin: "(?i)\\G(@)supports",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.supports.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: "(?=\\s*[{;])",
              name: "meta.at-rule.supports.header.css",
              patterns: [
                { include: "#feature-query-operators" },
                { include: "#feature-query" },
                { include: "#comment-block" },
                { include: "#escapes" }
              ]
            },
            {
              begin: "{",
              beginCaptures: {
                0: {
                  name: "punctuation.section.supports.begin.bracket.curly.css"
                }
              },
              end: "}",
              endCaptures: {
                0: { name: "punctuation.section.supports.end.bracket.curly.css" }
              },
              name: "meta.at-rule.supports.body.css",
              patterns: [{ include: "$self" }]
            }
          ]
        },
        {
          begin: `(?i)((@)(-(ms|o)-)?viewport)(?=[\\s'"{;]|/\\*|$)`,
          beginCaptures: {
            1: { name: "keyword.control.at-rule.viewport.css" },
            2: { name: "punctuation.definition.keyword.css" }
          },
          end: "(?=\\s*[@{;])",
          name: "meta.at-rule.viewport.css",
          patterns: [{ include: "#comment-block" }, { include: "#escapes" }]
        },
        {
          begin: `(?i)((@)font-feature-values)(?=[\\s'"{;]|/\\*|$)\\s*`,
          beginCaptures: {
            1: { name: "keyword.control.at-rule.font-feature-values.css" },
            2: { name: "punctuation.definition.keyword.css" }
          },
          contentName: "variable.parameter.font-name.css",
          end: "(?=\\s*[@{;])",
          name: "meta.at-rule.font-features.css",
          patterns: [{ include: "#comment-block" }, { include: "#escapes" }]
        },
        { include: "#font-features" },
        {
          begin: `(?i)((@)namespace)(?=[\\s'";]|/\\*|$)`,
          beginCaptures: {
            1: { name: "keyword.control.at-rule.namespace.css" },
            2: { name: "punctuation.definition.keyword.css" }
          },
          end: ";|(?=[@{])",
          endCaptures: { 0: { name: "punctuation.terminator.rule.css" } },
          name: "meta.at-rule.namespace.css",
          patterns: [
            { include: "#url" },
            {
              captures: {
                1: { patterns: [{ include: "#comment-block" }] },
                2: {
                  name: "entity.name.function.namespace-prefix.css",
                  patterns: [{ include: "#escapes" }]
                }
              },
              match: "(?xi)\n(?:\\G|^|(?<=\\s))\n(?=\n  (?<=\\s|^)                             # Starts with whitespace\n  (?:[-a-zA-Z_]|[^\\x00-\\x7F])          # Then a valid identifier character\n  |\n  \\s*                                   # Possible adjoining whitespace\n  /\\*(?:[^*]|\\*[^/])*\\*/              # Injected comment\n)\n(.*?)                                    # Grouped to embed #comment-block\n(\n  (?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n  (?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n    |\\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n)"
            },
            { include: "#comment-block" },
            { include: "#escapes" },
            { include: "#string" }
          ]
        },
        {
          begin: "(?i)(?=@[\\w-]+[^;]+;s*$)",
          end: "(?<=;)(?!\\G)",
          patterns: [
            {
              begin: "(?i)\\G(@)[\\w-]+",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: ";",
              endCaptures: { 0: { name: "punctuation.terminator.rule.css" } },
              name: "meta.at-rule.header.css"
            }
          ]
        },
        {
          begin: "(?i)(?=@[\\w-]+(\\s|\\(|{|/\\*|$))",
          end: "(?<=})(?!\\G)",
          patterns: [
            {
              begin: "(?i)\\G(@)[\\w-]+",
              beginCaptures: {
                0: { name: "keyword.control.at-rule.css" },
                1: { name: "punctuation.definition.keyword.css" }
              },
              end: "(?=\\s*[{;])",
              name: "meta.at-rule.header.css"
            },
            {
              begin: "{",
              beginCaptures: {
                0: { name: "punctuation.section.begin.bracket.curly.css" }
              },
              end: "}",
              endCaptures: {
                0: { name: "punctuation.section.end.bracket.curly.css" }
              },
              name: "meta.at-rule.body.css",
              patterns: [{ include: "$self" }]
            }
          ]
        }
      ]
    },
    "color-keywords": {
      patterns: [
        {
          match: "(?i)(?<![\\w-])(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)(?![\\w-])",
          name: "support.constant.color.w3c-standard-color-name.css"
        },
        {
          match: "(?xi) (?<![\\w-])\n(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood\n|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan\n|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange\n|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise\n|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen\n|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki\n|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow\n|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray\n|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue\n|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise\n|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered\n|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum\n|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell\n|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato\n|transparent|turquoise|violet|wheat|whitesmoke|yellowgreen)\n(?![\\w-])",
          name: "support.constant.color.w3c-extended-color-name.css"
        },
        {
          match: "(?i)(?<![\\w-])currentColor(?![\\w-])",
          name: "support.constant.color.current.css"
        },
        {
          match: "(?xi) (?<![\\w-])\n(ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow\n|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption\n|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow\n|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)\n(?![\\w-])",
          name: "invalid.deprecated.color.system.css"
        }
      ]
    },
    combinators: {
      patterns: [
        { match: "/deep/|>>>", name: "invalid.deprecated.combinator.css" },
        { match: ">>|>|\\+|~", name: "keyword.operator.combinator.css" }
      ]
    },
    commas: { match: ",", name: "punctuation.separator.list.comma.css" },
    "comment-block": {
      begin: "/\\*",
      beginCaptures: { 0: { name: "punctuation.definition.comment.begin.css" } },
      end: "\\*/",
      endCaptures: { 0: { name: "punctuation.definition.comment.end.css" } },
      name: "comment.block.css"
    },
    escapes: {
      patterns: [
        {
          match: "\\\\[0-9a-fA-F]{1,6}",
          name: "constant.character.escape.codepoint.css"
        },
        {
          begin: "\\\\$\\s*",
          end: "^(?<!\\G)",
          name: "constant.character.escape.newline.css"
        },
        { match: "\\\\.", name: "constant.character.escape.css" }
      ]
    },
    "feature-query": {
      begin: "\\(",
      beginCaptures: {
        0: { name: "punctuation.definition.condition.begin.bracket.round.css" }
      },
      end: "\\)",
      endCaptures: {
        0: { name: "punctuation.definition.condition.end.bracket.round.css" }
      },
      name: "meta.feature-query.css",
      patterns: [
        { include: "#feature-query-operators" },
        { include: "#feature-query" }
      ]
    },
    "feature-query-operators": {
      patterns: [
        {
          match: "(?i)(?<=[\\s()]|^|\\*/)(and|not|or)(?=[\\s()]|/\\*|$)",
          name: "keyword.operator.logical.feature.$1.css"
        },
        { include: "#rule-list-innards" }
      ]
    },
    "font-features": {
      begin: `(?xi)
((@)(annotation|character-variant|ornaments|styleset|stylistic|swash))
(?=[\\s@'"{;]|/\\*|$)`,
      beginCaptures: {
        1: { name: "keyword.control.at-rule.${3:/downcase}.css" },
        2: { name: "punctuation.definition.keyword.css" }
      },
      end: "(?<=})",
      name: "meta.at-rule.${3:/downcase}.css",
      patterns: [
        {
          begin: "{",
          beginCaptures: {
            0: {
              name: "punctuation.section.property-list.begin.bracket.curly.css"
            }
          },
          end: "}",
          endCaptures: {
            0: { name: "punctuation.section.property-list.end.bracket.curly.css" }
          },
          name: "meta.property-list.font-feature.css",
          patterns: [
            {
              captures: { 0: { patterns: [{ include: "#escapes" }] } },
              match: "(?x)\n(?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n(?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n  | \\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
              name: "variable.font-feature.css"
            },
            { include: "#rule-list-innards" }
          ]
        }
      ]
    },
    "functional-pseudo-classes": {
      patterns: [
        {
          begin: "(?i)((:)dir)(\\()",
          beginCaptures: {
            1: { name: "entity.other.attribute-name.pseudo-class.css" },
            2: { name: "punctuation.definition.entity.css" },
            3: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          patterns: [
            { include: "#comment-block" },
            { include: "#escapes" },
            {
              match: "(?i)(?<![\\w-])(ltr|rtl)(?![\\w-])",
              name: "support.constant.text-direction.css"
            },
            { include: "#property-values" }
          ]
        },
        {
          begin: "(?i)((:)lang)(\\()",
          beginCaptures: {
            1: { name: "entity.other.attribute-name.pseudo-class.css" },
            2: { name: "punctuation.definition.entity.css" },
            3: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          patterns: [
            {
              match: "(?<=[(,\\s])[a-zA-Z]+(-[a-zA-Z0-9]*|\\\\(?:[0-9a-fA-F]{1,6}|.))*(?=[),\\s])",
              name: "support.constant.language-range.css"
            },
            {
              begin: '"',
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.css" }
              },
              end: '"',
              endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
              name: "string.quoted.double.css",
              patterns: [
                { include: "#escapes" },
                {
                  match: '(?<=["\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=["\\s])',
                  name: "support.constant.language-range.css"
                }
              ]
            },
            {
              begin: "'",
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.css" }
              },
              end: "'",
              endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
              name: "string.quoted.single.css",
              patterns: [
                { include: "#escapes" },
                {
                  match: "(?<=['\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=['\\s])",
                  name: "support.constant.language-range.css"
                }
              ]
            },
            { include: "#commas" }
          ]
        },
        {
          begin: "(?i)((:)(?:not|has|matches))(\\()",
          beginCaptures: {
            1: { name: "entity.other.attribute-name.pseudo-class.css" },
            2: { name: "punctuation.definition.entity.css" },
            3: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          patterns: [{ include: "#selector-innards" }]
        },
        {
          begin: "(?i)((:)nth-(?:last-)?(?:child|of-type))(\\()",
          beginCaptures: {
            1: { name: "entity.other.attribute-name.pseudo-class.css" },
            2: { name: "punctuation.definition.entity.css" },
            3: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          patterns: [
            {
              match: "(?i)[+-]?(\\d+n?|n)(\\s*[+-]\\s*\\d+)?",
              name: "constant.numeric.css"
            },
            { match: "(?i)even|odd", name: "support.constant.parity.css" }
          ]
        }
      ]
    },
    functions: {
      patterns: [
        {
          begin: "(?i)(?<![\\w-])(calc)(\\()",
          beginCaptures: {
            1: { name: "support.function.calc.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.calc.css",
          patterns: [
            {
              match: "[*/]|(?<=\\s|^)[-+](?=\\s|$)",
              name: "keyword.operator.arithmetic.css"
            },
            { include: "#property-values" }
          ]
        },
        {
          begin: "(?i)(?<![\\w-])(rgba?|hsla?|hwb|lab|lch)(\\()",
          beginCaptures: {
            1: { name: "support.function.misc.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.color.css",
          patterns: [{ include: "#property-values" }]
        },
        {
          begin: '(?xi) (?<![\\w-])\n(\n  (?:-webkit-|-moz-|-o-)?    # Accept prefixed/historical variants\n  (?:repeating-)?            # "Repeating"-type gradient\n  (?:linear|radial|conic)    # Shape\n  -gradient\n)\n(\\()',
          beginCaptures: {
            1: { name: "support.function.gradient.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.gradient.css",
          patterns: [
            {
              match: "(?i)(?<![\\w-])(from|to|at)(?![\\w-])",
              name: "keyword.operator.gradient.css"
            },
            { include: "#property-values" }
          ]
        },
        {
          begin: "(?i)(?<![\\w-])(-webkit-gradient)(\\()",
          beginCaptures: {
            1: { name: "invalid.deprecated.gradient.function.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.gradient.invalid.deprecated.gradient.css",
          patterns: [
            {
              begin: "(?i)(?<![\\w-])(from|to|color-stop)(\\()",
              beginCaptures: {
                1: { name: "invalid.deprecated.function.css" },
                2: {
                  name: "punctuation.section.function.begin.bracket.round.css"
                }
              },
              end: "\\)",
              endCaptures: {
                0: { name: "punctuation.section.function.end.bracket.round.css" }
              },
              patterns: [{ include: "#property-values" }]
            },
            { include: "#property-values" }
          ]
        },
        {
          begin: "(?xi) (?<![\\w-])\n(annotation|attr|blur|brightness|character-variant|clamp|contrast|counters?\n|cross-fade|drop-shadow|element|fit-content|format|grayscale|hue-rotate\n|image-set|invert|local|max|min|minmax|opacity|ornaments|repeat|saturate|sepia\n|styleset|stylistic|swash|symbols)\n(\\()",
          beginCaptures: {
            1: { name: "support.function.misc.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.misc.css",
          patterns: [
            {
              match: `(?i)(?<=[,\\s"]|\\*/|^)\\d+x(?=[\\s,"')]|/\\*|$)`,
              name: "constant.numeric.other.density.css"
            },
            { include: "#property-values" },
            { match: `[^'"),\\s]+`, name: "variable.parameter.misc.css" }
          ]
        },
        {
          begin: "(?i)(?<![\\w-])(circle|ellipse|inset|polygon|rect)(\\()",
          beginCaptures: {
            1: { name: "support.function.shape.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.shape.css",
          patterns: [
            {
              match: "(?i)(?<=\\s|^|\\*/)(at|round)(?=\\s|/\\*|$)",
              name: "keyword.operator.shape.css"
            },
            { include: "#property-values" }
          ]
        },
        {
          begin: "(?i)(?<![\\w-])(cubic-bezier|steps)(\\()",
          beginCaptures: {
            1: { name: "support.function.timing-function.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.timing-function.css",
          patterns: [
            {
              match: "(?i)(?<![\\w-])(start|end)(?=\\s*\\)|$)",
              name: "support.constant.step-direction.css"
            },
            { include: "#property-values" }
          ]
        },
        {
          begin: "(?xi) (?<![\\w-])\n( (?:translate|scale|rotate)(?:[XYZ]|3D)?\n| matrix(?:3D)?\n| skew[XY]?\n| perspective\n)\n(\\()",
          beginCaptures: {
            1: { name: "support.function.transform.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          patterns: [{ include: "#property-values" }]
        },
        { include: "#url" },
        {
          begin: "(?i)(?<![\\w-])(var)(\\()",
          beginCaptures: {
            1: { name: "support.function.misc.css" },
            2: { name: "punctuation.section.function.begin.bracket.round.css" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.section.function.end.bracket.round.css" }
          },
          name: "meta.function.variable.css",
          patterns: [
            {
              match: "(?x)\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
              name: "variable.argument.css"
            },
            { include: "#property-values" }
          ]
        }
      ]
    },
    "media-feature-keywords": {
      match: "(?xi)\n(?<=^|\\s|:|\\*/)\n(?: portrait                  # Orientation\n  | landscape\n  | progressive               # Scan types\n  | interlace\n  | fullscreen                # Display modes\n  | standalone\n  | minimal-ui\n  | browser\n  | hover\n)\n(?=\\s|\\)|$)",
      name: "support.constant.property-value.css"
    },
    "media-features": {
      captures: {
        1: { name: "support.type.property-name.media.css" },
        2: { name: "support.type.property-name.media.css" },
        3: { name: "support.type.vendored.property-name.media.css" }
      },
      match: "(?xi)\n(?<=^|\\s|\\(|\\*/)           # Preceded by whitespace, bracket or comment\n(?:\n  # Standardised features\n  (\n    (?:min-|max-)?            # Range features\n    (?: height\n      | width\n      | aspect-ratio\n      | color\n      | color-index\n      | monochrome\n      | resolution\n    )\n    | grid                    # Discrete features\n    | scan\n    | orientation\n    | display-mode\n    | hover\n  )\n  |\n  # Deprecated features\n  (\n    (?:min-|max-)?            # Deprecated in Media Queries 4\n    device-\n    (?: height\n      | width\n      | aspect-ratio\n    )\n  )\n  |\n  # Vendor extensions\n  (\n    (?:\n      # Spec-compliant syntax\n      [-_]\n      (?: webkit              # Webkit/Blink\n        | apple|khtml         # Webkit aliases\n        | epub                # ePub3\n        | moz                 # Gecko\n        | ms                  # Microsoft\n        | o                   # Presto (pre-Opera 15)\n        | xv|ah|rim|atsc|     # Less common vendors\n          hp|tc|wap|ro\n      )\n      |\n      # Non-standard prefixes\n      (?: mso                 # Microsoft Office\n        | prince              # YesLogic\n      )\n    )\n    -\n    [\\w-]+                   # Feature name\n    (?=                       # Terminates correctly\n      \\s*                    # Possible whitespace\n      (?:                     # Possible injected comment\n        /\\*\n        (?:[^*]|\\*[^/])*\n        \\*/\n      )?\n      \\s*\n      [:)]                    # Ends with a colon or closed bracket\n    )\n  )\n)\n(?=\\s|$|[><:=]|\\)|/\\*)     # Terminates cleanly"
    },
    "media-query": {
      begin: "\\G",
      end: "(?=\\s*[{;])",
      patterns: [
        { include: "#comment-block" },
        { include: "#escapes" },
        { include: "#media-types" },
        {
          match: "(?i)(?<=\\s|^|,|\\*/)(only|not)(?=\\s|{|/\\*|$)",
          name: "keyword.operator.logical.$1.media.css"
        },
        {
          match: "(?i)(?<=\\s|^|\\*/|\\))and(?=\\s|/\\*|$)",
          name: "keyword.operator.logical.and.media.css"
        },
        {
          match: ",(?:(?:\\s*,)+|(?=\\s*[;){]))",
          name: "invalid.illegal.comma.css"
        },
        { include: "#commas" },
        {
          begin: "\\(",
          beginCaptures: {
            0: {
              name: "punctuation.definition.parameters.begin.bracket.round.css"
            }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.parameters.end.bracket.round.css" }
          },
          patterns: [
            { include: "#media-features" },
            { include: "#media-feature-keywords" },
            { match: ":", name: "punctuation.separator.key-value.css" },
            { match: ">=|<=|=|<|>", name: "keyword.operator.comparison.css" },
            {
              captures: {
                1: { name: "constant.numeric.css" },
                2: { name: "keyword.operator.arithmetic.css" },
                3: { name: "constant.numeric.css" }
              },
              match: "(\\d+)\\s*(/)\\s*(\\d+)",
              name: "meta.ratio.css"
            },
            { include: "#numeric-values" },
            { include: "#comment-block" }
          ]
        }
      ]
    },
    "media-query-list": {
      begin: "(?=\\s*[^{;])",
      end: "(?=\\s*[{;])",
      patterns: [{ include: "#media-query" }]
    },
    "media-types": {
      captures: {
        1: { name: "support.constant.media.css" },
        2: { name: "invalid.deprecated.constant.media.css" }
      },
      match: "(?xi)\n(?<=^|\\s|,|\\*/)\n(?:\n  # Valid media types\n  (all|print|screen|speech)\n  |\n  # Deprecated in Media Queries 4: http://dev.w3.org/csswg/mediaqueries/#media-types\n  (aural|braille|embossed|handheld|projection|tty|tv)\n)\n(?=$|[{,\\s;]|/\\*)"
    },
    "numeric-values": {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.constant.css" } },
          match: "(#)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b",
          name: "constant.other.color.rgb-value.hex.css"
        },
        {
          captures: {
            1: { name: "keyword.other.unit.percentage.css" },
            2: { name: "keyword.other.unit.${2:/downcase}.css" }
          },
          match: "(?xi) (?<![\\w-])\n[-+]?                               # Sign indicator\n\n(?:                                 # Numerals\n    [0-9]+ (?:\\.[0-9]+)?           # Integer/float with leading digits\n  | \\.[0-9]+                       # Float without leading digits\n)\n\n(?:                                 # Scientific notation\n  (?<=[0-9])                        # Exponent must follow a digit\n  E                                 # Exponent indicator\n  [-+]?                             # Possible sign indicator\n  [0-9]+                            # Exponent value\n)?\n\n(?:                                 # Possible unit for data-type:\n  (%)                               # - Percentage\n  | ( deg|grad|rad|turn             # - Angle\n    | Hz|kHz                        # - Frequency\n    | ch|cm|em|ex|fr|in|mm|mozmm|   # - Length\n      pc|pt|px|q|rem|vh|vmax|vmin|\n      vw\n    | dpi|dpcm|dppx                 # - Resolution\n    | s|ms                          # - Time\n    )\n  \\b                               # Boundary checking intentionally lax to\n)?                                  # facilitate embedding in CSS-like grammars",
          name: "constant.numeric.css"
        }
      ]
    },
    "property-keywords": {
      patterns: [
        {
          match: "(?xi) (?<![\\w-])\n(above|absolute|active|add|additive|after-edge|alias|all|all-petite-caps|all-scroll|all-small-caps|alpha|alphabetic|alternate|alternate-reverse\n|always|antialiased|auto|auto-pos|available|avoid|avoid-column|avoid-page|avoid-region|backwards|balance|baseline|before-edge|below|bevel\n|bidi-override|blink|block|block-axis|block-start|block-end|bold|bolder|border|border-box|both|bottom|bottom-outside|break-all|break-word|bullets\n|butt|capitalize|caption|cell|center|central|char|circle|clip|clone|close-quote|closest-corner|closest-side|col-resize|collapse|color|color-burn\n|color-dodge|column|column-reverse|common-ligatures|compact|condensed|contain|content|content-box|contents|context-menu|contextual|copy|cover\n|crisp-edges|crispEdges|crosshair|cyclic|dark|darken|dashed|decimal|default|dense|diagonal-fractions|difference|digits|disabled|disc|discretionary-ligatures\n|distribute|distribute-all-lines|distribute-letter|distribute-space|dot|dotted|double|double-circle|downleft|downright|e-resize|each-line|ease|ease-in\n|ease-in-out|ease-out|economy|ellipse|ellipsis|embed|end|evenodd|ew-resize|exact|exclude|exclusion|expanded|extends|extra-condensed|extra-expanded\n|fallback|farthest-corner|farthest-side|fill|fill-available|fill-box|filled|fit-content|fixed|flat|flex|flex-end|flex-start|flip|flow-root|forwards|freeze\n|from-image|full-width|geometricPrecision|georgian|grab|grabbing|grayscale|grid|groove|hand|hanging|hard-light|help|hidden|hide\n|historical-forms|historical-ligatures|horizontal|horizontal-tb|hue|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space\n|ideographic|inactive|infinite|inherit|initial|inline|inline-axis|inline-block|inline-end|inline-flex|inline-grid|inline-list-item|inline-start\n|inline-table|inset|inside|inter-character|inter-ideograph|inter-word|intersect|invert|isolate|isolate-override|italic|jis04|jis78|jis83\n|jis90|justify|justify-all|kannada|keep-all|landscape|large|larger|left|light|lighten|lighter|line|line-edge|line-through|linear|linearRGB\n|lining-nums|list-item|local|loose|lowercase|lr|lr-tb|ltr|luminance|luminosity|main-size|mandatory|manipulation|manual|margin-box|match-parent\n|match-source|mathematical|max-content|medium|menu|message-box|middle|min-content|miter|mixed|move|multiply|n-resize|narrower|ne-resize\n|nearest-neighbor|nesw-resize|newspaper|no-change|no-clip|no-close-quote|no-common-ligatures|no-contextual|no-discretionary-ligatures\n|no-drop|no-historical-ligatures|no-open-quote|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|numbers|numeric|nw-resize|nwse-resize\n|oblique|oldstyle-nums|open|open-quote|optimizeLegibility|optimizeQuality|optimizeSpeed|optional|ordinal|outset|outside|over|overlay|overline|padding\n|padding-box|page|painted|pan-down|pan-left|pan-right|pan-up|pan-x|pan-y|paused|petite-caps|pixelated|plaintext|pointer|portrait|pre|pre-line\n|pre-wrap|preserve-3d|progress|progressive|proportional-nums|proportional-width|proximity|radial|recto|region|relative|remove|repeat|repeat-[xy]\n|reset-size|reverse|revert|ridge|right|rl|rl-tb|round|row|row-resize|row-reverse|row-severse|rtl|ruby|ruby-base|ruby-base-container|ruby-text\n|ruby-text-container|run-in|running|s-resize|saturation|scale-down|screen|scroll|scroll-position|se-resize|semi-condensed|semi-expanded|separate\n|sesame|show|sideways|sideways-left|sideways-lr|sideways-right|sideways-rl|simplified|slashed-zero|slice|small|small-caps|small-caption|smaller\n|smooth|soft-light|solid|space|space-around|space-between|space-evenly|spell-out|square|sRGB|stacked-fractions|start|static|status-bar|swap\n|step-end|step-start|sticky|stretch|strict|stroke|stroke-box|style|sub|subgrid|subpixel-antialiased|subtract|super|sw-resize|symbolic|table\n|table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|tabular-nums|tb|tb-rl\n|text|text-after-edge|text-before-edge|text-bottom|text-top|thick|thin|titling-caps|top|top-outside|touch|traditional|transparent|triangle\n|ultra-condensed|ultra-expanded|under|underline|unicase|unset|upleft|uppercase|upright|use-glyph-orientation|use-script|verso|vertical\n|vertical-ideographic|vertical-lr|vertical-rl|vertical-text|view-box|visible|visibleFill|visiblePainted|visibleStroke|w-resize|wait|wavy\n|weight|whitespace|wider|words|wrap|wrap-reverse|x|x-large|x-small|xx-large|xx-small|y|zero|zoom-in|zoom-out)\n(?![\\w-])",
          name: "support.constant.property-value.css"
        },
        {
          match: "(?xi) (?<![\\w-])\n(arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|cjk-ideographic\n|decimal|decimal-leading-zero|devanagari|disc|disclosure-closed|disclosure-open|ethiopic-halehame-am\n|ethiopic-halehame-ti-e[rt]|ethiopic-numeric|georgian|gujarati|gurmukhi|hangul|hangul-consonant|hebrew\n|hiragana|hiragana-iroha|japanese-formal|japanese-informal|kannada|katakana|katakana-iroha|khmer\n|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek\n|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal\n|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian\n|upper-latin|upper-roman|urdu)\n(?![\\w-])",
          name: "support.constant.property-value.list-style-type.css"
        },
        {
          match: "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+",
          name: "support.constant.vendored.property-value.css"
        },
        {
          match: "(?<![\\w-])(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system-ui|system|tahoma|times|trebuchet|ui-monospace|ui-rounded|ui-sans-serif|ui-serif|utopia|verdana|webdings|sans-serif|serif|monospace)(?![\\w-])",
          name: "support.constant.font-name.css"
        }
      ]
    },
    "property-names": {
      patterns: [
        {
          match: "(?xi) (?<![\\w-])\n(?:\n  # Standard CSS\n  accent-color|additive-symbols|align-content|align-items|align-self|all|animation|animation-delay|animation-direction|animation-duration\n  | animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|backdrop-filter\n  | backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image\n  | background-origin|background-position|background-position-[xy]|background-repeat|background-size|bleed|block-size|border\n  | border-block-end|border-block-end-color|border-block-end-style|border-block-end-width|border-block-start|border-block-start-color\n  | border-block-start-style|border-block-start-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius\n  | border-bottom-style|border-bottom-width|border-collapse|border-color|border-end-end-radius|border-end-start-radius|border-image\n  | border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline-end\n  | border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start|border-inline-start-color\n  | border-inline-start-style|border-inline-start-width|border-left|border-left-color|border-left-style|border-left-width\n  | border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-start-end-radius\n  | border-start-start-radius|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style\n  | border-top-width|border-width|bottom|box-decoration-break|box-shadow|box-sizing|break-after|break-before|break-inside|caption-side\n  | caret-color|clear|clip|clip-path|clip-rule|color|color-adjust|color-interpolation-filters|color-scheme|column-count|column-fill|column-gap\n  | column-rule|column-rule-color|column-rule-style|column-rule-width|column-span|column-width|columns|contain|content|counter-increment\n  | counter-reset|cursor|direction|display|empty-cells|enable-background|fallback|fill|fill-opacity|fill-rule|filter|flex|flex-basis\n  | flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|flood-color|flood-opacity|font|font-display|font-family\n  | font-feature-settings|font-kerning|font-language-override|font-optical-sizing|font-size|font-size-adjust|font-stretch\n  | font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps|font-variant-east-asian|font-variant-ligatures\n  | font-variant-numeric|font-variant-position|font-variation-settings|font-weight|gap|glyph-orientation-horizontal|glyph-orientation-vertical\n  | grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap|grid-column-start\n  | grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows\n  | hanging-punctuation|height|hyphens|image-orientation|image-rendering|image-resolution|ime-mode|initial-letter|initial-letter-align\n  | inline-size|inset|inset-block|inset-block-end|inset-block-start|inset-inline|inset-inline-end|inset-inline-start|isolation\n  | justify-content|justify-items|justify-self|kerning|left|letter-spacing|lighting-color|line-break|line-clamp|line-height|list-style\n  | list-style-image|list-style-position|list-style-type|margin|margin-block|margin-block-end|margin-block-start|margin-bottom|margin-inline|margin-inline-end|margin-inline-start\n  | margin-left|margin-right|margin-top|marker-end|marker-mid|marker-start|marks|mask|mask-border|mask-border-mode|mask-border-outset\n  | mask-border-repeat|mask-border-slice|mask-border-source|mask-border-width|mask-clip|mask-composite|mask-image|mask-mode\n  | mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-block-size|max-height|max-inline-size|max-lines|max-width\n  | max-zoom|min-block-size|min-height|min-inline-size|min-width|min-zoom|mix-blend-mode|negative|object-fit|object-position\n  | offset|offset-anchor|offset-distance|offset-path|offset-position|offset-rotation|opacity|order|orientation|orphans\n  | outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-anchor|overflow-block|overflow-inline\n  | overflow-wrap|overflow-[xy]|overscroll-behavior|overscroll-behavior-block|overscroll-behavior-inline|overscroll-behavior-[xy]\n  | pad|padding|padding-block|padding-block-end|padding-block-start|padding-bottom|padding-inline|padding-inline-end|padding-inline-start|padding-left\n  | padding-right|padding-top|page-break-after|page-break-before|page-break-inside|paint-order|perspective|perspective-origin\n  | place-content|place-items|place-self|pointer-events|position|prefix|quotes|range|resize|right|rotate|row-gap|ruby-align\n  | ruby-merge|ruby-position|scale|scroll-behavior|scroll-margin|scroll-margin-block|scroll-margin-block-end|scroll-margin-block-start\n  | scroll-margin-bottom|scroll-margin-inline|scroll-margin-inline-end|scroll-margin-inline-start|scroll-margin-left|scroll-margin-right\n  | scroll-margin-top|scroll-padding|scroll-padding-block|scroll-padding-block-end|scroll-padding-block-start|scroll-padding-bottom\n  | scroll-padding-inline|scroll-padding-inline-end|scroll-padding-inline-start|scroll-padding-left|scroll-padding-right\n  | scroll-padding-top|scroll-snap-align|scroll-snap-coordinate|scroll-snap-destination|scroll-snap-stop|scroll-snap-type\n  | scrollbar-color|scrollbar-gutter|scrollbar-width|shape-image-threshold|shape-margin|shape-outside|shape-rendering|size\n  | speak-as|src|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit\n  | stroke-opacity|stroke-width|suffix|symbols|system|tab-size|table-layout|text-align|text-align-last|text-anchor|text-combine-upright\n  | text-decoration|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-skip-ink|text-decoration-style\n  | text-emphasis|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-justify|text-orientation\n  | text-overflow|text-rendering|text-shadow|text-size-adjust|text-transform|text-underline-offset|text-underline-position|top|touch-action|transform\n  | transform-box|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function\n  | translate|unicode-bidi|unicode-range|user-select|user-zoom|vertical-align|visibility|white-space|widows|width|will-change\n  | word-break|word-spacing|word-wrap|writing-mode|z-index|zoom\n\n  # SVG attributes\n  | alignment-baseline|baseline-shift|clip-rule|color-interpolation|color-interpolation-filters|color-profile\n  | color-rendering|cx|cy|dominant-baseline|enable-background|fill|fill-opacity|fill-rule|flood-color|flood-opacity\n  | glyph-orientation-horizontal|glyph-orientation-vertical|height|kerning|lighting-color|marker-end|marker-mid\n  | marker-start|r|rx|ry|shape-rendering|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap\n  | stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|text-anchor|width|x|y\n\n  # Not listed on MDN; presumably deprecated\n  | adjust|after|align|align-last|alignment|alignment-adjust|appearance|attachment|azimuth|background-break\n  | balance|baseline|before|bidi|binding|bookmark|bookmark-label|bookmark-level|bookmark-target|border-length\n  | bottom-color|bottom-left-radius|bottom-right-radius|bottom-style|bottom-width|box|box-align|box-direction\n  | box-flex|box-flex-group|box-lines|box-ordinal-group|box-orient|box-pack|break|character|collapse|column\n  | column-break-after|column-break-before|count|counter|crop|cue|cue-after|cue-before|decoration|decoration-break\n  | delay|display-model|display-role|down|drop|drop-initial-after-adjust|drop-initial-after-align|drop-initial-before-adjust\n  | drop-initial-before-align|drop-initial-size|drop-initial-value|duration|elevation|emphasis|family|fit|fit-position\n  | flex-group|float-offset|gap|grid-columns|grid-rows|hanging-punctuation|header|hyphenate|hyphenate-after|hyphenate-before\n  | hyphenate-character|hyphenate-lines|hyphenate-resource|icon|image|increment|indent|index|initial-after-adjust\n  | initial-after-align|initial-before-adjust|initial-before-align|initial-size|initial-value|inline-box-align|iteration-count\n  | justify|label|left-color|left-style|left-width|length|level|line|line-stacking|line-stacking-ruby|line-stacking-shift\n  | line-stacking-strategy|lines|list|mark|mark-after|mark-before|marks|marquee|marquee-direction|marquee-play-count|marquee-speed\n  | marquee-style|max|min|model|move-to|name|nav|nav-down|nav-index|nav-left|nav-right|nav-up|new|numeral|offset|ordinal-group\n  | orient|origin|overflow-style|overhang|pack|page|page-policy|pause|pause-after|pause-before|phonemes|pitch|pitch-range\n  | play-count|play-during|play-state|point|presentation|presentation-level|profile|property|punctuation|punctuation-trim\n  | radius|rate|rendering-intent|repeat|replace|reset|resolution|resource|respond-to|rest|rest-after|rest-before|richness\n  | right-color|right-style|right-width|role|rotation|rotation-point|rows|ruby|ruby-overhang|ruby-span|rule|rule-color\n  | rule-style|rule-width|shadow|size|size-adjust|sizing|space|space-collapse|spacing|span|speak|speak-header|speak-numeral\n  | speak-punctuation|speech|speech-rate|speed|stacking|stacking-ruby|stacking-shift|stacking-strategy|stress|stretch\n  | string-set|style|style-image|style-position|style-type|target|target-name|target-new|target-position|text|text-height\n  | text-justify|text-outline|text-replace|text-wrap|timing-function|top-color|top-left-radius|top-right-radius|top-style\n  | top-width|trim|unicode|up|user-select|variant|voice|voice-balance|voice-duration|voice-family|voice-pitch|voice-pitch-range\n  | voice-rate|voice-stress|voice-volume|volume|weight|white|white-space-collapse|word|wrap\n)\n(?![\\w-])",
          name: "support.type.property-name.css"
        },
        {
          match: "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+",
          name: "support.type.vendored.property-name.css"
        }
      ]
    },
    "property-values": {
      patterns: [
        { include: "#commas" },
        { include: "#comment-block" },
        { include: "#escapes" },
        { include: "#functions" },
        { include: "#property-keywords" },
        { include: "#unicode-range" },
        { include: "#numeric-values" },
        { include: "#color-keywords" },
        { include: "#string" },
        { match: "!\\s*important(?![\\w-])", name: "keyword.other.important.css" }
      ]
    },
    "pseudo-classes": {
      captures: {
        1: { name: "punctuation.definition.entity.css" },
        2: { name: "invalid.illegal.colon.css" }
      },
      match: "(?xi)\n(:)(:*)\n(?: active|any-link|checked|default|disabled|empty|enabled|first\n  | (?:first|last|only)-(?:child|of-type)|focus|focus-visible|focus-within|fullscreen|host|hover\n  | in-range|indeterminate|invalid|left|link|optional|out-of-range\n  | read-only|read-write|required|right|root|scope|target|unresolved\n  | valid|visited\n)(?![\\w-]|\\s*[;}])",
      name: "entity.other.attribute-name.pseudo-class.css"
    },
    "pseudo-elements": {
      captures: {
        1: { name: "punctuation.definition.entity.css" },
        2: { name: "punctuation.definition.entity.css" }
      },
      match: "(?xi)\n(?:\n  (::?)                       # Elements using both : and :: notation\n  (?: after\n    | before\n    | first-letter\n    | first-line\n    | (?:-(?:ah|apple|atsc|epub|hp|khtml|moz\n            |ms|o|rim|ro|tc|wap|webkit|xv)\n        | (?:mso|prince))\n      -[a-z-]+\n  )\n  |\n  (::)                        # Double-colon only\n  (?: backdrop\n    | content\n    | grammar-error\n    | marker\n    | placeholder\n    | selection\n    | shadow\n    | spelling-error\n  )\n)\n(?![\\w-]|\\s*[;}])",
      name: "entity.other.attribute-name.pseudo-element.css"
    },
    "rule-list": {
      begin: "{",
      beginCaptures: {
        0: { name: "punctuation.section.property-list.begin.bracket.curly.css" }
      },
      end: "}",
      endCaptures: {
        0: { name: "punctuation.section.property-list.end.bracket.curly.css" }
      },
      name: "meta.property-list.css",
      patterns: [{ include: "#rule-list-innards" }]
    },
    "rule-list-innards": {
      patterns: [
        { include: "#comment-block" },
        { include: "#escapes" },
        { include: "#font-features" },
        {
          match: "(?x) (?<![\\w-])\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
          name: "variable.css"
        },
        {
          begin: "(?<![-a-zA-Z])(?=[-a-zA-Z])",
          end: "$|(?![-a-zA-Z])",
          name: "meta.property-name.css",
          patterns: [{ include: "#property-names" }]
        },
        {
          begin: "(:)\\s*",
          beginCaptures: { 1: { name: "punctuation.separator.key-value.css" } },
          contentName: "meta.property-value.css",
          end: "\\s*(;)|\\s*(?=}|\\))",
          endCaptures: { 1: { name: "punctuation.terminator.rule.css" } },
          patterns: [{ include: "#comment-block" }, { include: "#property-values" }]
        },
        { match: ";", name: "punctuation.terminator.rule.css" }
      ]
    },
    selector: {
      begin: "(?x)\n(?=\n  (?:\\|)?                    # Possible anonymous namespace prefix\n  (?:\n    [-\\[:.*\\#a-zA-Z_]       # Valid selector character\n    |\n    [^\\x00-\\x7F]            # Which can include non-ASCII symbols\n    |\n    \\\\                      # Or an escape sequence\n    (?:[0-9a-fA-F]{1,6}|.)\n  )\n)",
      end: "(?=\\s*[/@{)])",
      name: "meta.selector.css",
      patterns: [{ include: "#selector-innards" }]
    },
    "selector-innards": {
      patterns: [
        { include: "#comment-block" },
        { include: "#commas" },
        { include: "#escapes" },
        { include: "#combinators" },
        {
          captures: {
            1: { name: "entity.other.namespace-prefix.css" },
            2: { name: "punctuation.separator.css" }
          },
          match: "(?x)\n(?:^|(?<=[\\s,(};]))         # Follows whitespace, comma, semicolon, or bracket\n(?!\n  [-\\w*]+\n  \\|\n  (?!\n      [-\\[:.*\\#a-zA-Z_]    # Make sure there's a selector to match\n    | [^\\x00-\\x7F]\n  )\n)\n(\n  (?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n  (?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n  |\n  \\*     # Universal namespace\n)?\n(\\|)     # Namespace separator"
        },
        { include: "#tag-names" },
        { match: "\\*", name: "entity.name.tag.wildcard.css" },
        {
          captures: {
            1: { name: "punctuation.definition.entity.css" },
            2: { patterns: [{ include: "#escapes" }] }
          },
          match: "(?x) (?<![@\\w-])\n([.\\#])\n# Invalid identifier\n(\n  (?:\n    # Starts with ASCII digits, with possible hyphen preceding it\n    -?[0-9]\n    |\n    # Consists of a hyphen only\n    -                                      # Terminated by either:\n    (?= $                                  # - End-of-line\n      | [\\s,.\\#)\\[:{>+~|]               # - Followed by another selector\n      | /\\*                               # - Followed by a block comment\n    )\n    |\n    # Name contains unescaped ASCII symbol\n    (?:                                    # Check for acceptable preceding characters\n        [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # - Valid selector character\n      | \\\\(?:[0-9a-fA-F]{1,6}|.)         # - Escape sequence\n    )*\n    (?:                                    # Invalid punctuation\n      [!\"'%&(*;<?@^`|\\]}]                 # - NOTE: We exempt `)` from the list of checked\n      |                                    #   symbols to avoid matching `:not(.invalid)`\n      / (?!\\*)                            # - Avoid invalidating the start of a comment\n    )+\n  )\n  # Mark remainder of selector invalid\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]         # - Otherwise valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)           # - Escape sequence\n  )*\n)",
          name: "invalid.illegal.bad-identifier.css"
        },
        {
          captures: {
            1: { name: "punctuation.definition.entity.css" },
            2: { patterns: [{ include: "#escapes" }] }
          },
          match: "(?x)\n(\\.)                                  # Valid class-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | /\\*                               # - A block comment\n)",
          name: "entity.other.attribute-name.class.css"
        },
        {
          captures: {
            1: { name: "punctuation.definition.entity.css" },
            2: { patterns: [{ include: "#escapes" }] }
          },
          match: "(?x)\n(\\#)\n(\n  -?\n  (?![0-9])\n  (?:[-a-zA-Z0-9_]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n)\n(?=$|[\\s,.\\#)\\[:{>+~|]|/\\*)",
          name: "entity.other.attribute-name.id.css"
        },
        {
          begin: "\\[",
          beginCaptures: {
            0: { name: "punctuation.definition.entity.begin.bracket.square.css" }
          },
          end: "\\]",
          endCaptures: {
            0: { name: "punctuation.definition.entity.end.bracket.square.css" }
          },
          name: "meta.attribute-selector.css",
          patterns: [
            { include: "#comment-block" },
            { include: "#string" },
            {
              captures: { 1: { name: "storage.modifier.ignore-case.css" } },
              match: `(?<=["'\\s]|^|\\*/)\\s*([iI])\\s*(?=[\\s\\]]|/\\*|$)`
            },
            {
              captures: {
                1: {
                  name: "string.unquoted.attribute-value.css",
                  patterns: [{ include: "#escapes" }]
                }
              },
              match: `(?x)(?<==)\\s*((?!/\\*)(?:[^\\\\"'\\s\\]]|\\\\.)+)`
            },
            { include: "#escapes" },
            { match: "[~|^$*]?=", name: "keyword.operator.pattern.css" },
            { match: "\\|", name: "punctuation.separator.css" },
            {
              captures: {
                1: {
                  name: "entity.other.namespace-prefix.css",
                  patterns: [{ include: "#escapes" }]
                }
              },
              match: "(?x)\n# Qualified namespace prefix\n( -?(?!\\d)(?:[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n| \\*\n)\n# Lookahead to ensure there's a valid identifier ahead\n(?=\n  \\| (?!\\s|=|$|\\])\n  (?: -?(?!\\d)\n   |   [\\\\\\w-]\n   |   [^\\x00-\\x7F]\n   )\n)"
            },
            {
              captures: {
                1: {
                  name: "entity.other.attribute-name.css",
                  patterns: [{ include: "#escapes" }]
                }
              },
              match: "(?x)\n(-?(?!\\d)(?>[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+)\n\\s*\n(?=[~|^\\]$*=]|/\\*)"
            }
          ]
        },
        { include: "#pseudo-classes" },
        { include: "#pseudo-elements" },
        { include: "#functional-pseudo-classes" },
        {
          match: "(?x) (?<![@\\w-])\n(?=            # Custom element names must:\n  [a-z]        # - start with a lowercase ASCII letter,\n  \\w* -       # - contain at least one dash\n)\n(?:\n  (?![A-Z])    # No uppercase ASCII letters are allowed\n  [\\w-]       # Allow any other word character or dash\n)+\n(?![(\\w-])",
          name: "entity.name.tag.custom.css"
        }
      ]
    },
    string: {
      patterns: [
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } },
          end: '"|(?<!\\\\)(?=$|\\n)',
          endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
          name: "string.quoted.double.css",
          patterns: [
            {
              begin: '(?:\\G|^)(?=(?:[^\\\\"]|\\\\.)+$)',
              end: "$",
              name: "invalid.illegal.unclosed.string.css",
              patterns: [{ include: "#escapes" }]
            },
            { include: "#escapes" }
          ]
        },
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } },
          end: "'|(?<!\\\\)(?=$|\\n)",
          endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
          name: "string.quoted.single.css",
          patterns: [
            {
              begin: "(?:\\G|^)(?=(?:[^\\\\']|\\\\.)+$)",
              end: "$",
              name: "invalid.illegal.unclosed.string.css",
              patterns: [{ include: "#escapes" }]
            },
            { include: "#escapes" }
          ]
        }
      ]
    },
    "tag-names": {
      match: "(?xi) (?<![\\w:-])\n(?:\n    # HTML\n    a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound\n  | big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command\n  | content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|element|em|embed|fieldset\n  | figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i\n  | iframe|image|img|input|ins|isindex|kbd|keygen|label|legend|li|link|listing|main|map|mark\n  | marquee|math|menu|menuitem|meta|meter|multicol|nav|nextid|nobr|noembed|noframes|noscript\n  | object|ol|optgroup|option|output|p|param|picture|plaintext|pre|progress|q|rb|rp|rt|rtc\n  | ruby|s|samp|script|section|select|shadow|slot|small|source|spacer|span|strike|strong\n  | style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr\n  | track|tt|u|ul|var|video|wbr|xmp\n\n  # SVG\n  | altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform\n  | circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix\n  | feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap\n  | feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur\n  | feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting\n  | feSpotLight|feTile|feTurbulence|filter|font-face|font-face-format|font-face-name\n  | font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern\n  | line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata\n  | missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor\n  | stop|svg|switch|symbol|text|textPath|tref|tspan|use|view|vkern\n\n  # MathML\n  | annotation|annotation-xml|maction|maligngroup|malignmark|math|menclose|merror|mfenced\n  | mfrac|mglyph|mi|mlabeledtr|mlongdiv|mmultiscripts|mn|mo|mover|mpadded|mphantom|mroot\n  | mrow|ms|mscarries|mscarry|msgroup|msline|mspace|msqrt|msrow|mstack|mstyle|msub|msubsup\n  | msup|mtable|mtd|mtext|mtr|munder|munderover|semantics\n)\n(?=[+~>\\s,.\\#|){:\\[]|/\\*|$)",
      name: "entity.name.tag.css"
    },
    "unicode-range": {
      captures: {
        0: { name: "constant.other.unicode-range.css" },
        1: { name: "punctuation.separator.dash.unicode-range.css" }
      },
      match: "(?<![\\w-])[Uu]\\+[0-9A-Fa-f?]{1,6}(?:(-)[0-9A-Fa-f]{1,6})?(?![\\w-])"
    },
    url: {
      begin: "(?i)(?<![\\w@-])(url)(\\()",
      beginCaptures: {
        1: { name: "support.function.url.css" },
        2: { name: "punctuation.section.function.begin.bracket.round.css" }
      },
      end: "\\)",
      endCaptures: {
        0: { name: "punctuation.section.function.end.bracket.round.css" }
      },
      name: "meta.function.url.css",
      patterns: [
        { match: `[^'")\\s]+`, name: "variable.parameter.url.css" },
        { include: "#string" },
        { include: "#comment-block" },
        { include: "#escapes" }
      ]
    }
  },
  scopeName: "source.css"
};
var source_css_default = grammar5;

// node_modules/@wooorm/starry-night/lang/source.css.less.js
var grammar6 = {
  dependencies: ["source.css"],
  extensions: [".less"],
  names: ["less", "less-css"],
  patterns: [
    { include: "#strings" },
    {
      captures: { 1: { name: "entity.other.attribute-name.class.mixin.css" } },
      match: "(\\.[_a-zA-Z][a-zA-Z0-9_-]*(?=\\())"
    },
    {
      captures: {
        1: { name: "entity.other.attribute-name.class.css" },
        2: { name: "punctuation.definition.entity.css" },
        4: { name: "variable.other.interpolation.less" }
      },
      match: "((\\.)([_a-zA-Z]|(@{[a-zA-Z0-9_-]+}))[a-zA-Z0-9_-]*)"
    },
    {
      captures: {
        0: { name: "entity.other.attribute-name.parent-selector.css" },
        1: { name: "punctuation.definition.entity.css" }
      },
      match: "(&)[a-zA-Z0-9_-]*"
    },
    {
      begin: "(format|local|url|attr|counter|counters)\\s*(\\()",
      beginCaptures: {
        1: { name: "support.function.misc.css" },
        2: { name: "punctuation.section.function.css" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.function.css" } },
      patterns: [
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
          name: "string.quoted.single.css",
          patterns: [{ match: "\\\\.", name: "constant.character.escape.css" }]
        },
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
          name: "string.quoted.double.css",
          patterns: [
            { match: "\\\\(\\d{1,6}|.)", name: "constant.character.escape.css" }
          ]
        },
        { match: `[^'") \\t]+`, name: "variable.parameter.misc.css" }
      ]
    },
    {
      match: "(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\\b(?!.*?(?<!@){)",
      name: "constant.other.rgb-value.css"
    },
    {
      captures: {
        1: { name: "entity.other.attribute-name.id" },
        2: { name: "punctuation.definition.entity.css" },
        4: { name: "variable.other.interpolation.less" }
      },
      match: "((#)([_a-zA-Z]|(@{[a-zA-Z0-9_-]+}))[a-zA-Z0-9_-]*)",
      name: "meta.selector.css"
    },
    {
      begin: "/\\*",
      beginCaptures: { 0: { name: "punctuation.definition.comment.begin.css" } },
      end: "\\*/",
      endCaptures: { 0: { name: "punctuation.definition.comment.end.css" } },
      name: "comment.block.css"
    },
    { include: "source.css#numeric-values" },
    {
      captures: {
        1: { name: "punctuation.definition.begin.entity.css" },
        2: { name: "entity.other.attribute-name.attribute.css" },
        3: { name: "punctuation.separator.operator.css" },
        4: { name: "string.unquoted.attribute-value.css" },
        5: { name: "string.quoted.double.attribute-value.css" },
        6: { name: "punctuation.definition.string.begin.css" },
        7: { name: "punctuation.definition.string.end.css" },
        8: { name: "punctuation.definition.end.entity.css" }
      },
      match: `(?i)(\\[)\\s*(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)(?:\\s*([~|^$*]?=)\\s*(?:(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)|((?>(['"])(?:[^\\\\]|\\\\.)*?(\\6)))))?\\s*(\\])`,
      name: "meta.attribute-selector.css"
    },
    {
      begin: "((@)import\\b)",
      beginCaptures: {
        1: { name: "keyword.control.at-rule.import.less" },
        2: { name: "punctuation.definition.keyword.less" }
      },
      end: ";",
      endCaptures: { 0: { name: "punctuation.terminator.rule.css" } },
      name: "meta.at-rule.import.css",
      patterns: [
        {
          match: "(?<=\\(|,|\\s)\\b(reference|optional|once|multiple|less|inline)\\b(?=\\)|,)",
          name: "keyword.control.import.option.less"
        },
        { include: "#brace_round" },
        { include: "source.css#commas" },
        { include: "#strings" }
      ]
    },
    {
      captures: {
        1: { name: "keyword.control.at-rule.fontface.css" },
        2: { name: "punctuation.definition.keyword.css" }
      },
      match: "^\\s*((@)font-face\\b)",
      name: "meta.at-rule.fontface.css"
    },
    {
      captures: {
        1: { name: "keyword.control.at-rule.media.css" },
        2: { name: "punctuation.definition.keyword.css" }
      },
      match: "^\\s*((@)media\\b)",
      name: "meta.at-rule.media.css"
    },
    { include: "source.css#media-features" },
    {
      match: "\\b(tv|tty|screen|projection|print|handheld|embossed|braille|aural|all)\\b",
      name: "support.constant.media-type.media.css"
    },
    {
      match: "\\b(portrait|landscape)\\b",
      name: "support.constant.property-value.media-property.media.css"
    },
    {
      captures: { 1: { name: "support.function.less" } },
      match: "(\\.[a-zA-Z0-9_-]+)\\s*(;|\\()"
    },
    {
      begin: "(^[ \\t]+)?(?=//)",
      beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.less" } },
      end: "(?!\\G)",
      patterns: [
        {
          begin: "//",
          beginCaptures: { 0: { name: "punctuation.definition.comment.less" } },
          end: "\\n",
          name: "comment.line.double-slash.less"
        }
      ]
    },
    {
      captures: { 1: { name: "punctuation.definition.variable.less" } },
      match: "(@|\\-\\-)[\\w-]+(?=\\s*)",
      name: "variable.other.less"
    },
    { include: "#variable_interpolation" },
    {
      begin: "{",
      beginCaptures: {
        0: { name: "punctuation.section.property-list.begin.bracket.curly.css" }
      },
      end: "}",
      endCaptures: {
        0: { name: "punctuation.section.property-list.end.bracket.curly.css" }
      },
      name: "meta.property-list.css",
      patterns: [
        { include: "source.css#pseudo-elements" },
        { include: "source.css#pseudo-classes" },
        { include: "source.css#tag-names" },
        { include: "source.css#commas" },
        { include: "#variable_interpolation" },
        { include: "source.css#property-names" },
        { include: "#property_values" },
        { include: "$self" }
      ]
    },
    { match: "\\!\\s*important", name: "keyword.other.important.css" },
    { match: "\\*|\\/|\\-|\\+|~|=|<=|>=|<|>", name: "keyword.operator.less" },
    {
      match: "\\b(not|and|when)\\b",
      name: "keyword.control.logical.operator.less"
    },
    { include: "source.css#tag-names" },
    {
      match: "(?<![\\w-])[a-z][\\w&&[^A-Z]]*+-[\\w-&&[^A-Z]]+",
      name: "entity.name.tag.custom.css"
    },
    { include: "source.css#pseudo-elements" },
    { include: "source.css#pseudo-classes" },
    {
      captures: {
        1: { name: "punctuation.section.property-list.begin.css" },
        2: { name: "punctuation.section.property-list.end.css" }
      },
      match: "(\\{)(\\})",
      name: "meta.brace.curly.css"
    },
    { match: "\\{|\\}", name: "meta.brace.curly.css" },
    { include: "#brace_round" },
    { match: "\\[|\\]", name: "meta.brace.square.less" },
    { match: ";", name: "punctuation.terminator.rule.css" },
    { match: ":", name: "punctuation.separator.key-value.css" },
    { match: "\\btrue\\b", name: "constant.language.boolean.less" },
    { match: "\\bdefault\\b", name: "support.function.default.less" },
    {
      match: "\\b(isurl|isstring|isnumber|iskeyword|iscolor)\\b",
      name: "support.function.type-checking.less"
    },
    {
      match: "\\b(isunit|ispixel|ispercentage|isem)\\b",
      name: "support.function.unit-checking.less"
    },
    { include: "source.css#property-keywords" },
    { include: "source.css#color-keywords" },
    { include: "source.css#commas" },
    { include: "#less_builtin_functions" },
    { include: "source.css#functions" }
  ],
  repository: {
    brace_round: { match: "\\(|\\)", name: "meta.brace.round.css" },
    less_builtin_functions: {
      match: "\\b(abs|acos|alpha|argb|asin|atan|average|blue|calc|ceil|color|contrast|convert|convert|cos|darken|data-uri|desaturate|difference|e|escape|exclusion|extract|fade|fadein|fadeout|floor|format|green|greyscale|hardlight|hsl|hsla|hsv|hsva|hsvhue|hsvsaturation|hsvvalue|hue|length|lighten|lightness|luma|max|min|mix|mod|multiply|negation|overlay|percentage|pi|pow|red|replace|round|saturate|saturation|screen|sin|softlight|spin|sqrt|tan|unit)\\b",
      name: "support.function.any-method.builtin.less"
    },
    property_values: {
      begin: "(?<!&)(:)\\s*(?!(\\s*{))(?!.*(?<!@){)",
      beginCaptures: { 1: { name: "punctuation.separator.key-value.css" } },
      contentName: "meta.property-value.css",
      end: "\\s*(;)|\\s*(?=})",
      endCaptures: { 1: { name: "punctuation.terminator.rule.css" } },
      patterns: [
        {
          begin: "url(\\()",
          beginCaptures: { 1: { name: "meta.brace.round.css" } },
          end: "\\)",
          endCaptures: { 0: { name: "meta.brace.round.css" } },
          name: "support.function.any-method.builtin.url.css",
          patterns: [
            { include: "#strings" },
            { match: "(\\b|\\.{0,2}/)[^)]*\\b", name: "string.url.css" }
          ]
        },
        { include: "source.css#property-keywords" },
        { include: "source.css#color-keywords" },
        { include: "source.css#commas" },
        { include: "#less_builtin_functions" },
        { include: "source.css#functions" },
        { include: "$self" }
      ]
    },
    strings: {
      patterns: [
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
          name: "string.quoted.double.css",
          patterns: [
            {
              match: "\\\\([0-9A-Fa-f]{1,6}|.)",
              name: "constant.character.escape.css"
            },
            { include: "#variable_interpolation" }
          ]
        },
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.css" } },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.css" } },
          name: "string.quoted.single.css",
          patterns: [
            {
              match: "\\\\([0-9A-Fa-f]{1,6}|.)",
              name: "constant.character.escape.css"
            },
            { include: "#variable_interpolation" }
          ]
        }
      ]
    },
    variable_interpolation: {
      match: "@{[a-zA-Z0-9_-]+}",
      name: "variable.other.interpolation.less"
    }
  },
  scopeName: "source.css.less"
};
var source_css_less_default = grammar6;

// node_modules/@wooorm/starry-night/lang/source.css.scss.js
var grammar7 = {
  dependencies: ["source.css"],
  extensions: [".scss"],
  names: ["scss"],
  patterns: [
    { include: "#variable_setting" },
    { include: "#at_rule_forward" },
    { include: "#at_rule_use" },
    { include: "#at_rule_include" },
    { include: "#at_rule_import" },
    { include: "#general" },
    { include: "#flow_control" },
    { include: "#rules" },
    { include: "#property_list" },
    { include: "#at_rule_mixin" },
    { include: "#at_rule_media" },
    { include: "#at_rule_function" },
    { include: "#at_rule_charset" },
    { include: "#at_rule_option" },
    { include: "#at_rule_namespace" },
    { include: "#at_rule_fontface" },
    { include: "#at_rule_page" },
    { include: "#at_rule_keyframes" },
    { include: "#at_rule_at_root" },
    { include: "#at_rule_supports" },
    { match: ";", name: "punctuation.terminator.rule.css" }
  ],
  repository: {
    at_rule_at_root: {
      begin: "\\s*((@)(at-root))(\\s+|$)",
      beginCaptures: {
        1: { name: "keyword.control.at-rule.at-root.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?={)",
      name: "meta.at-rule.at-root.scss",
      patterns: [
        { include: "#function_attributes" },
        { include: "#functions" },
        { include: "#selectors" }
      ]
    },
    at_rule_charset: {
      begin: "\\s*((@)charset\\b)\\s*",
      captures: {
        1: { name: "keyword.control.at-rule.charset.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*((?=;|$))",
      name: "meta.at-rule.charset.scss",
      patterns: [
        { include: "#variable" },
        { include: "#string_single" },
        { include: "#string_double" }
      ]
    },
    at_rule_content: {
      begin: "\\s*((@)content\\b)\\s*",
      captures: { 1: { name: "keyword.control.content.scss" } },
      end: "\\s*((?=;))",
      name: "meta.content.scss",
      patterns: [
        { include: "#variable" },
        { include: "#selectors" },
        { include: "#property_values" }
      ]
    },
    at_rule_each: {
      begin: "\\s*((@)each\\b)\\s*",
      captures: {
        1: { name: "keyword.control.each.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*((?=}))",
      name: "meta.at-rule.each.scss",
      patterns: [
        { match: "\\b(in|,)\\b", name: "keyword.control.operator" },
        { include: "#variable" },
        { include: "#property_values" },
        { include: "$self" }
      ]
    },
    at_rule_else: {
      begin: "\\s*((@)else(\\s*(if)?))\\s*",
      captures: {
        1: { name: "keyword.control.else.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?={)",
      name: "meta.at-rule.else.scss",
      patterns: [
        { include: "#conditional_operators" },
        { include: "#variable" },
        { include: "#property_values" }
      ]
    },
    at_rule_extend: {
      begin: "\\s*((@)extend\\b)\\s*",
      captures: {
        1: { name: "keyword.control.at-rule.extend.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?=;)",
      name: "meta.at-rule.extend.scss",
      patterns: [
        { include: "#variable" },
        { include: "#selectors" },
        { include: "#property_values" }
      ]
    },
    at_rule_fontface: {
      patterns: [
        {
          begin: "^\\s*((@)font-face\\b)",
          beginCaptures: {
            1: { name: "keyword.control.at-rule.fontface.scss" },
            2: { name: "punctuation.definition.keyword.scss" }
          },
          end: "\\s*(?={)",
          name: "meta.at-rule.fontface.scss",
          patterns: [{ include: "#function_attributes" }]
        }
      ]
    },
    at_rule_for: {
      begin: "\\s*((@)for\\b)\\s*",
      captures: {
        1: { name: "keyword.control.for.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?={)",
      name: "meta.at-rule.for.scss",
      patterns: [
        {
          match: "(==|!=|<=|>=|<|>|from|to|through)",
          name: "keyword.control.operator"
        },
        { include: "#variable" },
        { include: "#property_values" },
        { include: "$self" }
      ]
    },
    at_rule_forward: {
      begin: "\\s*((@)forward\\b)\\s*",
      captures: {
        1: { name: "keyword.control.at-rule.forward.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?=;)",
      name: "meta.at-rule.forward.scss",
      patterns: [
        { match: "\\b(as|hide|show)\\b", name: "keyword.control.operator" },
        {
          captures: {
            1: { name: "entity.other.attribute-name.module.scss" },
            2: { name: "punctuation.definition.wildcard.scss" }
          },
          match: "\\b([\\w-]+)(\\*)"
        },
        { match: "\\b[\\w-]+\\b", name: "entity.name.function.scss" },
        { include: "#variable" },
        { include: "#string_single" },
        { include: "#string_double" },
        { include: "#comment_line" },
        { include: "#comment_block" }
      ]
    },
    at_rule_function: {
      patterns: [
        {
          begin: "\\s*((@)function\\b)\\s*",
          captures: {
            1: { name: "keyword.control.at-rule.function.scss" },
            2: { name: "punctuation.definition.keyword.scss" },
            3: { name: "entity.name.function.scss" }
          },
          end: "\\s*(?={)",
          name: "meta.at-rule.function.scss",
          patterns: [{ include: "#function_attributes" }]
        },
        {
          captures: {
            1: { name: "keyword.control.at-rule.function.scss" },
            2: { name: "punctuation.definition.keyword.scss" },
            3: { name: "entity.name.function.scss" }
          },
          match: "\\s*((@)function\\b)\\s*",
          name: "meta.at-rule.function.scss"
        }
      ]
    },
    at_rule_if: {
      begin: "\\s*((@)if\\b)\\s*",
      captures: {
        1: { name: "keyword.control.if.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?={)",
      name: "meta.at-rule.if.scss",
      patterns: [
        { include: "#conditional_operators" },
        { include: "#variable" },
        { include: "#property_values" }
      ]
    },
    at_rule_import: {
      begin: "\\s*((@)import\\b)\\s*",
      captures: {
        1: { name: "keyword.control.at-rule.import.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*((?=;)|(?=}))",
      name: "meta.at-rule.import.scss",
      patterns: [
        { include: "#variable" },
        { include: "#string_single" },
        { include: "#string_double" },
        { include: "#functions" },
        { include: "#comment_line" }
      ]
    },
    at_rule_include: {
      patterns: [
        {
          begin: "(?<=@include)\\s+(?:([\\w-]+)\\s*(\\.))?([\\w-]+)\\s*(\\()",
          beginCaptures: {
            1: { name: "variable.scss" },
            2: { name: "punctuation.access.module.scss" },
            3: { name: "entity.name.function.scss" },
            4: {
              name: "punctuation.definition.parameters.begin.bracket.round.scss"
            }
          },
          end: "\\)",
          endCaptures: {
            0: {
              name: "punctuation.definition.parameters.end.bracket.round.scss"
            }
          },
          name: "meta.at-rule.include.scss",
          patterns: [{ include: "#function_attributes" }]
        },
        {
          captures: {
            0: { name: "meta.at-rule.include.scss" },
            1: { name: "variable.scss" },
            2: { name: "punctuation.access.module.scss" },
            3: { name: "entity.name.function.scss" }
          },
          match: "(?<=@include)\\s+(?:([\\w-]+)\\s*(\\.))?([\\w-]+)"
        },
        {
          captures: {
            0: { name: "meta.at-rule.include.scss" },
            1: { name: "keyword.control.at-rule.include.scss" },
            2: { name: "punctuation.definition.keyword.scss" }
          },
          match: "((@)include)\\b"
        }
      ]
    },
    at_rule_keyframes: {
      begin: "(?<=^|\\s)(@)(?:-(?:webkit|moz)-)?keyframes\\b",
      beginCaptures: {
        0: { name: "keyword.control.at-rule.keyframes.scss" },
        1: { name: "punctuation.definition.keyword.scss" }
      },
      end: "(?<=})",
      name: "meta.at-rule.keyframes.scss",
      patterns: [
        {
          captures: { 1: { name: "entity.name.function.scss" } },
          match: "(?<=@keyframes)\\s+((?:[_A-Za-z][-\\w]|-[_A-Za-z])[-\\w]*)"
        },
        {
          begin: '(?<=@keyframes)\\s+(")',
          beginCaptures: {
            1: { name: "punctuation.definition.string.begin.scss" }
          },
          contentName: "entity.name.function.scss",
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } },
          name: "string.quoted.double.scss",
          patterns: [
            {
              match: "\\\\([[:xdigit:]]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { include: "#interpolation" }
          ]
        },
        {
          begin: "(?<=@keyframes)\\s+(')",
          beginCaptures: {
            1: { name: "punctuation.definition.string.begin.scss" }
          },
          contentName: "entity.name.function.scss",
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } },
          name: "string.quoted.single.scss",
          patterns: [
            {
              match: "\\\\([[:xdigit:]]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { include: "#interpolation" }
          ]
        },
        {
          begin: "{",
          beginCaptures: {
            0: { name: "punctuation.section.keyframes.begin.scss" }
          },
          end: "}",
          endCaptures: { 0: { name: "punctuation.section.keyframes.end.scss" } },
          patterns: [
            {
              match: "\\b(?:(?:100|[1-9]\\d|\\d)%|from|to)(?=\\s*{)",
              name: "entity.other.attribute-name.scss"
            },
            { include: "#flow_control" },
            { include: "#interpolation" },
            { include: "#property_list" },
            { include: "#rules" }
          ]
        }
      ]
    },
    at_rule_media: {
      patterns: [
        {
          begin: "^\\s*((@)media)\\b",
          beginCaptures: {
            1: { name: "keyword.control.at-rule.media.scss" },
            2: { name: "punctuation.definition.keyword.scss" }
          },
          end: "\\s*(?={)",
          name: "meta.at-rule.media.scss",
          patterns: [
            { include: "#comment_docblock" },
            { include: "#comment_block" },
            { include: "#comment_line" },
            { match: "\\b(only)\\b", name: "keyword.control.operator.css.scss" },
            {
              begin: "\\(",
              beginCaptures: {
                0: {
                  name: "punctuation.definition.media-query.begin.bracket.round.scss"
                }
              },
              end: "\\)",
              endCaptures: {
                0: {
                  name: "punctuation.definition.media-query.end.bracket.round.scss"
                }
              },
              name: "meta.property-list.media-query.scss",
              patterns: [
                {
                  begin: "(?<![-a-z])(?=[-a-z])",
                  end: "$|(?![-a-z])",
                  name: "meta.property-name.media-query.scss",
                  patterns: [
                    { include: "source.css#media-features" },
                    { include: "source.css#property-names" }
                  ]
                },
                {
                  begin: "(:)\\s*(?!(\\s*{))",
                  beginCaptures: {
                    1: { name: "punctuation.separator.key-value.scss" }
                  },
                  contentName: "meta.property-value.media-query.scss",
                  end: "\\s*(;|(?=}|\\)))",
                  endCaptures: { 1: { name: "punctuation.terminator.rule.scss" } },
                  patterns: [
                    { include: "#general" },
                    { include: "#property_values" }
                  ]
                }
              ]
            },
            { include: "#variable" },
            { include: "#conditional_operators" },
            { include: "source.css#media-types" }
          ]
        }
      ]
    },
    at_rule_mixin: {
      patterns: [
        {
          begin: "(?<=@mixin)\\s+([\\w-]+)\\s*(\\()",
          beginCaptures: {
            1: { name: "entity.name.function.scss" },
            2: {
              name: "punctuation.definition.parameters.begin.bracket.round.scss"
            }
          },
          end: "\\)",
          endCaptures: {
            0: {
              name: "punctuation.definition.parameters.end.bracket.round.scss"
            }
          },
          name: "meta.at-rule.mixin.scss",
          patterns: [{ include: "#function_attributes" }]
        },
        {
          captures: { 1: { name: "entity.name.function.scss" } },
          match: "(?<=@mixin)\\s+([\\w-]+)",
          name: "meta.at-rule.mixin.scss"
        },
        {
          captures: {
            1: { name: "keyword.control.at-rule.mixin.scss" },
            2: { name: "punctuation.definition.keyword.scss" }
          },
          match: "((@)mixin)\\b",
          name: "meta.at-rule.mixin.scss"
        }
      ]
    },
    at_rule_namespace: {
      patterns: [
        {
          begin: "(?<=@namespace)\\s+(?=url)",
          end: "(?=;|$)",
          name: "meta.at-rule.namespace.scss",
          patterns: [
            { include: "#property_values" },
            { include: "#string_single" },
            { include: "#string_double" }
          ]
        },
        {
          begin: "(?<=@namespace)\\s+([\\w-]*)",
          captures: { 1: { name: "entity.name.namespace-prefix.scss" } },
          end: "(?=;|$)",
          name: "meta.at-rule.namespace.scss",
          patterns: [
            { include: "#variables" },
            { include: "#property_values" },
            { include: "#string_single" },
            { include: "#string_double" }
          ]
        },
        {
          captures: {
            1: { name: "keyword.control.at-rule.namespace.scss" },
            2: { name: "punctuation.definition.keyword.scss" }
          },
          match: "((@)namespace)\\b",
          name: "meta.at-rule.namespace.scss"
        }
      ]
    },
    at_rule_option: {
      captures: {
        1: { name: "keyword.control.at-rule.charset.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      match: "^\\s*((@)option\\b)\\s*",
      name: "meta.at-rule.option.scss"
    },
    at_rule_page: {
      patterns: [
        {
          begin: "^\\s*((@)page)(?=:|\\s)\\s*([-:\\w]*)",
          captures: {
            1: { name: "keyword.control.at-rule.page.scss" },
            2: { name: "punctuation.definition.keyword.scss" },
            3: { name: "entity.name.function.scss" }
          },
          end: "\\s*(?={)",
          name: "meta.at-rule.page.scss"
        }
      ]
    },
    at_rule_return: {
      begin: "\\s*((@)(return)\\b)",
      captures: {
        1: { name: "keyword.control.return.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*((?=;))",
      name: "meta.at-rule.return.scss",
      patterns: [{ include: "#variable" }, { include: "#property_values" }]
    },
    at_rule_supports: {
      begin: "(?<=^|\\s)(@)supports\\b",
      captures: {
        0: { name: "keyword.control.at-rule.supports.scss" },
        1: { name: "punctuation.definition.keyword.scss" }
      },
      end: "(?={)|$",
      name: "meta.at-rule.supports.scss",
      patterns: [
        { include: "#logical_operators" },
        { include: "#properties" },
        {
          match: "\\(",
          name: "punctuation.definition.condition.begin.bracket.round.scss"
        },
        {
          match: "\\)",
          name: "punctuation.definition.condition.end.bracket.round.scss"
        }
      ]
    },
    at_rule_use: {
      begin: "\\s*((@)use\\b)\\s*",
      captures: {
        1: { name: "keyword.control.at-rule.use.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?=;)",
      name: "meta.at-rule.use.scss",
      patterns: [
        { match: "\\b(as|with)\\b", name: "keyword.control.operator" },
        { match: "\\b[\\w-]+\\b", name: "variable.scss" },
        { match: "\\*", name: "variable.language.expanded-namespace.scss" },
        { include: "#string_single" },
        { include: "#string_double" },
        { include: "#comment_line" },
        { include: "#comment_block" },
        {
          begin: "\\(",
          beginCaptures: {
            0: {
              name: "punctuation.definition.parameters.begin.bracket.round.scss"
            }
          },
          end: "\\)",
          endCaptures: {
            0: {
              name: "punctuation.definition.parameters.end.bracket.round.scss"
            }
          },
          patterns: [{ include: "#function_attributes" }]
        }
      ]
    },
    at_rule_warn: {
      begin: "\\s*((@)(warn|debug|error)\\b)\\s*",
      captures: {
        1: { name: "keyword.control.warn.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?=;)",
      name: "meta.at-rule.warn.scss",
      patterns: [
        { include: "#variable" },
        { include: "#string_double" },
        { include: "#string_single" }
      ]
    },
    at_rule_while: {
      begin: "\\s*((@)while\\b)\\s*",
      captures: {
        1: { name: "keyword.control.while.scss" },
        2: { name: "punctuation.definition.keyword.scss" }
      },
      end: "\\s*(?=})",
      name: "meta.at-rule.while.scss",
      patterns: [
        { include: "#conditional_operators" },
        { include: "#variable" },
        { include: "#property_values" },
        { include: "$self" }
      ]
    },
    comment_block: {
      begin: "/\\*",
      beginCaptures: { 0: { name: "punctuation.definition.comment.scss" } },
      end: "\\*/",
      endCaptures: { 0: { name: "punctuation.definition.comment.scss" } },
      name: "comment.block.scss"
    },
    comment_docblock: {
      begin: "///",
      beginCaptures: { 0: { name: "punctuation.definition.comment.scss" } },
      end: "(?=$)",
      name: "comment.block.documentation.scss",
      patterns: [{ include: "source.sassdoc" }]
    },
    comment_line: {
      begin: "//",
      beginCaptures: { 0: { name: "punctuation.definition.comment.scss" } },
      end: "\\n",
      name: "comment.line.scss"
    },
    comparison_operators: {
      match: "==|!=|<=|>=|<|>",
      name: "keyword.operator.comparison.scss"
    },
    conditional_operators: {
      patterns: [
        { include: "#comparison_operators" },
        { include: "#logical_operators" }
      ]
    },
    constant_default: { match: "!default", name: "keyword.other.default.scss" },
    constant_functions: {
      begin: "(?:([\\w-]+)(\\.))?([\\w-]+)(\\()",
      beginCaptures: {
        1: { name: "variable.scss" },
        2: { name: "punctuation.access.module.scss" },
        3: { name: "support.function.misc.scss" },
        4: { name: "punctuation.section.function.scss" }
      },
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.section.function.scss" } },
      patterns: [{ include: "#parameters" }]
    },
    constant_important: {
      match: "!important",
      name: "keyword.other.important.scss"
    },
    constant_mathematical_symbols: {
      match: "\\b(\\+|-|\\*|/)\\b",
      name: "support.constant.mathematical-symbols.scss"
    },
    constant_optional: {
      match: "!optional",
      name: "keyword.other.optional.scss"
    },
    constant_sass_functions: {
      begin: "(headings|stylesheet-url|rgba?|hsla?|ie-hex-str|red|green|blue|alpha|opacity|hue|saturation|lightness|prefixed|prefix|-moz|-svg|-css2|-pie|-webkit|-ms|font-(?:files|url)|grid-image|image-(?:width|height|url|color)|sprites?|sprite-(?:map|map-name|file|url|position)|inline-(?:font-files|image)|opposite-position|grad-point|grad-end-position|color-stops|color-stops-in-percentages|grad-color-stops|(?:radial|linear)-(?:gradient|svg-gradient)|opacify|fade-?in|transparentize|fade-?out|lighten|darken|saturate|desaturate|grayscale|adjust-(?:hue|lightness|saturation|color)|scale-(?:lightness|saturation|color)|change-color|spin|complement|invert|mix|-compass-(?:list|space-list|slice|nth|list-size)|blank|compact|nth|first-value-of|join|length|append|nest|append-selector|headers|enumerate|range|percentage|unitless|unit|if|type-of|comparable|elements-of-type|quote|unquote|escape|e|sin|cos|tan|abs|round|ceil|floor|pi|translate(?:X|Y))(\\()",
      beginCaptures: {
        1: { name: "support.function.misc.scss" },
        2: { name: "punctuation.section.function.scss" }
      },
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.section.function.scss" } },
      patterns: [{ include: "#parameters" }]
    },
    flow_control: {
      patterns: [
        { include: "#at_rule_if" },
        { include: "#at_rule_else" },
        { include: "#at_rule_warn" },
        { include: "#at_rule_for" },
        { include: "#at_rule_while" },
        { include: "#at_rule_each" },
        { include: "#at_rule_return" }
      ]
    },
    function_attributes: {
      patterns: [
        { match: ":", name: "punctuation.separator.key-value.scss" },
        { include: "#general" },
        { include: "#property_values" },
        { match: "[={}\\?;@]", name: "invalid.illegal.scss" }
      ]
    },
    functions: {
      patterns: [
        {
          begin: "([\\w-]{1,})(\\()\\s*",
          beginCaptures: {
            1: { name: "support.function.misc.scss" },
            2: { name: "punctuation.section.function.scss" }
          },
          end: "(\\))",
          endCaptures: { 1: { name: "punctuation.section.function.scss" } },
          patterns: [{ include: "#parameters" }]
        },
        { match: "([\\w-]{1,})", name: "support.function.misc.scss" }
      ]
    },
    general: {
      patterns: [
        { include: "#variable" },
        { include: "#comment_docblock" },
        { include: "#comment_block" },
        { include: "#comment_line" }
      ]
    },
    interpolation: {
      begin: "#{",
      beginCaptures: {
        0: {
          name: "punctuation.definition.interpolation.begin.bracket.curly.scss"
        }
      },
      end: "}",
      endCaptures: {
        0: { name: "punctuation.definition.interpolation.end.bracket.curly.scss" }
      },
      name: "variable.interpolation.scss",
      patterns: [{ include: "#variable" }, { include: "#property_values" }]
    },
    logical_operators: {
      match: "\\b(not|or|and)\\b",
      name: "keyword.operator.logical.scss"
    },
    map: {
      begin: "\\(",
      beginCaptures: {
        0: { name: "punctuation.definition.map.begin.bracket.round.scss" }
      },
      end: "\\)",
      endCaptures: {
        0: { name: "punctuation.definition.map.end.bracket.round.scss" }
      },
      name: "meta.definition.variable.map.scss",
      patterns: [
        { include: "#comment_docblock" },
        { include: "#comment_block" },
        { include: "#comment_line" },
        {
          captures: {
            1: { name: "support.type.map.key.scss" },
            2: { name: "punctuation.separator.key-value.scss" }
          },
          match: "\\b([\\w-]+)\\s*(:)"
        },
        { match: ",", name: "punctuation.separator.delimiter.scss" },
        { include: "#map" },
        { include: "#variable" },
        { include: "#property_values" }
      ]
    },
    operators: { match: "[-+*/](?!\\s*[-+*/])", name: "keyword.operator.css" },
    parameters: {
      patterns: [
        { include: "#variable" },
        {
          begin: "\\(",
          beginCaptures: {
            0: { name: "punctuation.definition.begin.bracket.round.scss" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.end.bracket.round.scss" }
          },
          patterns: [{ include: "#function_attributes" }]
        },
        { include: "#property_values" },
        { include: "#comment_block" },
        { match: `[^'",) \\t]+`, name: "variable.parameter.url.scss" },
        { match: ",", name: "punctuation.separator.delimiter.scss" }
      ]
    },
    parent_selector_suffix: {
      captures: {
        1: { name: "punctuation.definition.entity.css" },
        2: {
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.identifier.scss" }
          ]
        }
      },
      match: "(?x)\n(?<=&)\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\$                              # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | /\\*                               # - A block comment\n)",
      name: "entity.other.attribute-name.parent-selector-suffix.css"
    },
    properties: {
      patterns: [
        {
          begin: "(?<![-a-z])(?=[-a-z])",
          end: "$|(?![-a-z])",
          name: "meta.property-name.scss",
          patterns: [
            { include: "source.css#property-names" },
            { include: "#at_rule_include" }
          ]
        },
        {
          begin: "(:)\\s*(?!(\\s*{))",
          beginCaptures: { 1: { name: "punctuation.separator.key-value.scss" } },
          contentName: "meta.property-value.scss",
          end: "\\s*(;|(?=}|\\)))",
          endCaptures: { 1: { name: "punctuation.terminator.rule.scss" } },
          patterns: [{ include: "#general" }, { include: "#property_values" }]
        }
      ]
    },
    property_list: {
      begin: "{",
      beginCaptures: {
        0: { name: "punctuation.section.property-list.begin.bracket.curly.scss" }
      },
      end: "}",
      endCaptures: {
        0: { name: "punctuation.section.property-list.end.bracket.curly.scss" }
      },
      name: "meta.property-list.scss",
      patterns: [
        { include: "#flow_control" },
        { include: "#rules" },
        { include: "#properties" },
        { include: "$self" }
      ]
    },
    property_values: {
      patterns: [
        { include: "#string_single" },
        { include: "#string_double" },
        { include: "#constant_functions" },
        { include: "#constant_sass_functions" },
        { include: "#constant_important" },
        { include: "#constant_default" },
        { include: "#constant_optional" },
        { include: "source.css#numeric-values" },
        { include: "source.css#property-keywords" },
        { include: "source.css#color-keywords" },
        { include: "source.css#property-names" },
        { include: "#constant_mathematical_symbols" },
        { include: "#operators" },
        {
          begin: "\\(",
          beginCaptures: {
            0: { name: "punctuation.definition.begin.bracket.round.scss" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.end.bracket.round.scss" }
          },
          patterns: [{ include: "#general" }, { include: "#property_values" }]
        }
      ]
    },
    rules: {
      patterns: [
        { include: "#general" },
        { include: "#at_rule_extend" },
        { include: "#at_rule_content" },
        { include: "#at_rule_include" },
        { include: "#at_rule_media" },
        { include: "#selectors" }
      ]
    },
    selector_attribute: {
      captures: {
        1: {
          name: "punctuation.definition.attribute-selector.begin.bracket.square.scss"
        },
        10: { name: "punctuation.definition.string.begin.scss" },
        11: {
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.scss" }
          ]
        },
        12: { name: "punctuation.definition.string.end.scss" },
        13: {
          name: "punctuation.definition.attribute-selector.end.bracket.square.scss"
        },
        2: {
          name: "entity.other.attribute-name.attribute.scss",
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.scss" }
          ]
        },
        3: { name: "keyword.operator.scss" },
        4: {
          name: "string.unquoted.attribute-value.scss",
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.scss" }
          ]
        },
        5: { name: "string.quoted.double.attribute-value.scss" },
        6: { name: "punctuation.definition.string.begin.scss" },
        7: {
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.scss" }
          ]
        },
        8: { name: "punctuation.definition.string.end.scss" },
        9: { name: "string.quoted.single.attribute-value.scss" }
      },
      match: `(?xi)
(\\[)
\\s*
(
  (?:
    [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # Valid identifier characters
    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)
    | \\.?\\$                          # Possible start of interpolation variable
    | }                                # Possible end of interpolation
  )+?
)
(?:
  \\s*([~|^$*]?=)\\s*
  (?:
    (
      (?:
        [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # Valid identifier characters
        | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence
        | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)
        | \\.?\\$                          # Possible start of interpolation variable
        | }                                # Possible end of interpolation
      )+
    )
    |
    ((")(.*?)("))
    |
    ((')(.*?)('))
  )
)?
\\s*
(\\])`,
      name: "meta.attribute-selector.scss"
    },
    selector_class: {
      captures: {
        1: { name: "punctuation.definition.entity.css" },
        2: {
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.scss" }
          ]
        }
      },
      match: "(?x)\n(\\.)                                  # Valid class-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.?\\$                          # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,\\#)\\[:{>+~|]                # - Another selector\n  | \\.[^$]                            # - Class selector, negating module variable\n  | /\\*                               # - A block comment\n  | ;                                  # - A semicolon\n)",
      name: "entity.other.attribute-name.class.css"
    },
    selector_custom: {
      match: "\\b([a-zA-Z0-9]+(-[a-zA-Z0-9]+)+)(?=\\.|\\s++[^:]|\\s*[,\\[{]|:(link|visited|hover|active|focus|target|lang|disabled|enabled|checked|indeterminate|root|nth-(child|last-child|of-type|last-of-type)|first-child|last-child|first-of-type|last-of-type|only-child|only-of-type|empty|not|valid|invalid)(\\([0-9A-Za-z]*\\))?)",
      name: "entity.name.tag.custom.scss"
    },
    selector_id: {
      captures: {
        1: { name: "punctuation.definition.entity.css" },
        2: {
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.identifier.scss" }
          ]
        }
      },
      match: "(?x)\n(\\#)                                  # Valid id-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.?\\$                          # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,\\#)\\[:{>+~|]                # - Another selector\n  | \\.[^$]                            # - Class selector, negating module variable\n  | /\\*                               # - A block comment\n)",
      name: "entity.other.attribute-name.id.css"
    },
    selector_placeholder: {
      captures: {
        1: { name: "punctuation.definition.entity.css" },
        2: {
          patterns: [
            { include: "#interpolation" },
            {
              match: "\\\\([0-9a-fA-F]{1,6}|.)",
              name: "constant.character.escape.scss"
            },
            { match: "\\$|}", name: "invalid.illegal.identifier.scss" }
          ]
        }
      },
      match: "(?x)\n(%)                                    # Valid placeholder-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n    | \\#\\{                           # Interpolation (escaped to avoid Coffeelint errors)\n    | \\.\\$                           # Possible start of interpolation module scope variable\n    | \\$                              # Possible start of interpolation variable\n    | }                                # Possible end of interpolation\n  )+\n)                                      # Followed by either:\n(?= ;                                  # - End of statement\n  | $                                  # - End of the line\n  | [\\s,\\#)\\[:{>+~|]                # - Another selector\n  | \\.[^$]                            # - Class selector, negating module variable\n  | /\\*                               # - A block comment\n)",
      name: "entity.other.attribute-name.placeholder.css"
    },
    selector_pseudo_class: {
      patterns: [
        {
          begin: "((:)\\bnth-(?:child|last-child|of-type|last-of-type))(\\()",
          beginCaptures: {
            1: { name: "entity.other.attribute-name.pseudo-class.css" },
            2: { name: "punctuation.definition.entity.css" },
            3: {
              name: "punctuation.definition.pseudo-class.begin.bracket.round.css"
            }
          },
          end: "\\)",
          endCaptures: {
            0: {
              name: "punctuation.definition.pseudo-class.end.bracket.round.css"
            }
          },
          patterns: [
            { include: "#interpolation" },
            { match: "\\d+", name: "constant.numeric.css" },
            {
              match: "(?<=\\d)n\\b|\\b(n|even|odd)\\b",
              name: "constant.other.scss"
            },
            { match: "\\w+", name: "invalid.illegal.scss" }
          ]
        },
        { include: "source.css#pseudo-classes" },
        { include: "source.css#pseudo-elements" },
        { include: "source.css#functional-pseudo-classes" }
      ]
    },
    selectors: {
      patterns: [
        { include: "source.css#tag-names" },
        { include: "#selector_custom" },
        { include: "#selector_class" },
        { include: "#selector_id" },
        { include: "#selector_pseudo_class" },
        { include: "#tag_wildcard" },
        { include: "#tag_parent_reference" },
        { include: "source.css#pseudo-elements" },
        { include: "#selector_attribute" },
        { include: "#selector_placeholder" },
        { include: "#parent_selector_suffix" }
      ]
    },
    string_double: {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.scss" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } },
      name: "string.quoted.double.scss",
      patterns: [
        {
          match: "\\\\([[:xdigit:]]{1,6}|.)",
          name: "constant.character.escape.scss"
        },
        { include: "#interpolation" }
      ]
    },
    string_single: {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.scss" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.scss" } },
      name: "string.quoted.single.scss",
      patterns: [
        {
          match: "\\\\([[:xdigit:]]{1,6}|.)",
          name: "constant.character.escape.scss"
        },
        { include: "#interpolation" }
      ]
    },
    tag_parent_reference: { match: "&", name: "entity.name.tag.reference.scss" },
    tag_wildcard: { match: "\\*", name: "entity.name.tag.wildcard.scss" },
    variable: {
      patterns: [{ include: "#variables" }, { include: "#interpolation" }]
    },
    variable_setting: {
      begin: "(?=\\$[\\w-]+\\s*:)",
      contentName: "meta.definition.variable.scss",
      end: ";",
      endCaptures: { 0: { name: "punctuation.terminator.rule.scss" } },
      patterns: [
        { match: "\\$[\\w-]+(?=\\s*:)", name: "variable.scss" },
        {
          begin: ":",
          beginCaptures: { 0: { name: "punctuation.separator.key-value.scss" } },
          end: "(?=;)",
          patterns: [
            { include: "#comment_docblock" },
            { include: "#comment_block" },
            { include: "#comment_line" },
            { include: "#map" },
            { include: "#property_values" },
            { include: "#variable" },
            { match: ",", name: "punctuation.separator.delimiter.scss" }
          ]
        }
      ]
    },
    variables: {
      patterns: [
        {
          captures: {
            1: { name: "variable.scss" },
            2: { name: "punctuation.access.module.scss" },
            3: { name: "variable.scss" }
          },
          match: "\\b([\\w-]+)(\\.)(\\$[\\w-]+)\\b"
        },
        { match: "(\\$|\\-\\-)[A-Za-z0-9_-]+\\b", name: "variable.scss" }
      ]
    }
  },
  scopeName: "source.css.scss"
};
var source_css_scss_default = grammar7;

// node_modules/@wooorm/starry-night/lang/source.diff.js
var grammar8 = {
  extensions: [".diff", ".patch"],
  names: ["diff", "udiff"],
  patterns: [
    {
      captures: { 1: { name: "punctuation.definition.separator.diff" } },
      match: "^((\\*{15})|(={67})|(-{3}))$\\n?",
      name: "meta.separator.diff"
    },
    {
      match: "^\\d+(,\\d+)*(a|d|c)\\d+(,\\d+)*$\\n?",
      name: "meta.diff.range.normal"
    },
    {
      captures: {
        1: { name: "punctuation.definition.range.diff" },
        2: { name: "meta.toc-list.line-number.diff" },
        3: { name: "punctuation.definition.range.diff" }
      },
      match: "^(@@)\\s*(.+?)\\s*(@@)($\\n?)?",
      name: "meta.diff.range.unified"
    },
    {
      captures: {
        3: { name: "punctuation.definition.range.diff" },
        4: { name: "punctuation.definition.range.diff" },
        6: { name: "punctuation.definition.range.diff" },
        7: { name: "punctuation.definition.range.diff" }
      },
      match: "^(((\\-{3}) .+ (\\-{4}))|((\\*{3}) .+ (\\*{4})))$\\n?",
      name: "meta.diff.range.context"
    },
    { match: "^diff --git a/.*$\\n?", name: "meta.diff.header.git" },
    { match: "^diff (-|\\S+\\s+\\S+).*$\\n?", name: "meta.diff.header.command" },
    {
      captures: {
        4: { name: "punctuation.definition.from-file.diff" },
        6: { name: "punctuation.definition.from-file.diff" },
        7: { name: "punctuation.definition.from-file.diff" }
      },
      match: "(^(((-{3}) .+)|((\\*{3}) .+))$\\n?|^(={4}) .+(?= - ))",
      name: "meta.diff.header.from-file"
    },
    {
      captures: {
        2: { name: "punctuation.definition.to-file.diff" },
        3: { name: "punctuation.definition.to-file.diff" },
        4: { name: "punctuation.definition.to-file.diff" }
      },
      match: "(^(\\+{3}) .+$\\n?| (-) .* (={4})$\\n?)",
      name: "meta.diff.header.to-file"
    },
    {
      captures: {
        3: { name: "punctuation.definition.inserted.diff" },
        6: { name: "punctuation.definition.inserted.diff" }
      },
      match: "^(((>)( .*)?)|((\\+).*))$\\n?",
      name: "markup.inserted.diff"
    },
    {
      captures: { 1: { name: "punctuation.definition.changed.diff" } },
      match: "^(!).*$\\n?",
      name: "markup.changed.diff"
    },
    {
      captures: {
        3: { name: "punctuation.definition.deleted.diff" },
        6: { name: "punctuation.definition.deleted.diff" }
      },
      match: "^(((<)( .*)?)|((-).*))$\\n?",
      name: "markup.deleted.diff"
    },
    {
      begin: "^(#)",
      captures: { 1: { name: "punctuation.definition.comment.diff" } },
      end: "\\n",
      name: "comment.line.number-sign.diff"
    },
    {
      match: "^index [0-9a-f]{7,40}\\.\\.[0-9a-f]{7,40}.*$\\n?",
      name: "meta.diff.index.git"
    },
    {
      captures: {
        1: { name: "punctuation.separator.key-value.diff" },
        2: { name: "meta.toc-list.file-name.diff" }
      },
      match: "^Index(:) (.+)$\\n?",
      name: "meta.diff.index"
    },
    { match: "^Only in .*: .*$\\n?", name: "meta.diff.only-in" }
  ],
  scopeName: "source.diff"
};
var source_diff_default = grammar8;

// node_modules/@wooorm/starry-night/lang/source.go.js
var grammar9 = {
  extensions: [".go"],
  names: ["go", "golang"],
  patterns: [
    { include: "#receiver_function_declaration" },
    { include: "#plain_function_declaration" },
    { include: "#basic_things" },
    { include: "#exported_variables" },
    {
      begin: "^[[:blank:]]*(import)\\b\\s+",
      beginCaptures: { 1: { name: "keyword.control.import.go" } },
      end: "(?=(?://|/\\*))|$",
      name: "meta.preprocessor.go.import",
      patterns: [
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.go" } },
          name: "string.quoted.double.import.go"
        }
      ]
    },
    { include: "#block" },
    { include: "#root_parens" },
    { include: "#function_calls" }
  ],
  repository: {
    access: {
      match: "(?<=\\.)[[:alpha:]_][[:alnum:]_]*\\b(?!\\s*\\()",
      name: "variable.other.dot-access.go"
    },
    basic_things: {
      patterns: [
        { include: "#comments" },
        { include: "#initializers" },
        { include: "#access" },
        { include: "#strings" },
        { include: "#keywords" }
      ]
    },
    block: {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.section.block.begin.go" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.section.block.end.go" } },
      name: "meta.block.go",
      patterns: [{ include: "#block_innards" }]
    },
    block_innards: {
      patterns: [
        { include: "#function_block_innards" },
        { include: "#exported_variables" }
      ]
    },
    comments: {
      patterns: [
        {
          captures: { 1: { name: "meta.toc-list.banner.block.go" } },
          match: "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
          name: "comment.block.go"
        },
        {
          begin: "/\\*",
          captures: { 0: { name: "punctuation.definition.comment.go" } },
          end: "\\*/",
          name: "comment.block.go"
        },
        { match: "\\*/.*\\n", name: "invalid.illegal.stray-comment-end.go" },
        {
          captures: {
            1: { name: "punctuation.definition.comment.go" },
            2: { name: "meta.toc-list.banner.line.go" }
          },
          match: "^(//) =(\\s*.*?)\\s*=\\s*$\\n?",
          name: "comment.line.double-slash.banner.go"
        },
        {
          begin: "(^[ \\t]+)?(?=//)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.go" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "//",
              beginCaptures: { 0: { name: "punctuation.definition.comment.go" } },
              end: "\\n",
              name: "comment.line.double-slash.go",
              patterns: [
                {
                  match: "(?>\\\\\\s*\\n)",
                  name: "punctuation.separator.continuation.go"
                }
              ]
            }
          ]
        }
      ]
    },
    exported_variables: {
      match: "(?<=\\s|\\[\\])([[:upper:]][[:alnum:]_]*)(?=\\W+)",
      name: "variable.exported.go"
    },
    fn_parens: {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.section.parens.begin.go" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.parens.end.go" } },
      name: "meta.parens.go",
      patterns: [{ include: "#basic_things" }, { include: "#function_calls" }]
    },
    function_block: {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.section.function-block.begin.go" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.section.function-block.end.go" } },
      name: "meta.block.go",
      patterns: [{ include: "#function_block_innards" }]
    },
    function_block_innards: {
      patterns: [
        { include: "#basic_things" },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading.go" },
            2: { name: "support.function.builtin.go" }
          },
          match: "(\\s*)\\b(new|c(lose|ap)|p(anic|rint(ln)?)|len|make|append)(?:\\b|\\()"
        },
        { include: "#function_block" },
        { include: "#function_calls" },
        { include: "#fn_parens" }
      ]
    },
    function_calls: {
      captures: {
        1: { name: "punctuation.whitespace.function-call.leading.go" },
        2: { name: "support.function.any-method.go" },
        3: { name: "punctuation.definition.parameters.go" }
      },
      match: "(?x)\n                (?: (?= \\s ) (?:(?<=else|new|return) | (?<!\\w)) (\\s+) )?\n                (\\b\n                    (?!(for|if|else|switch|return)\\s*\\()\n                    (?:[[:alpha:]_][[:alnum:]_]*+\\b)            # method name\n                )\n                \\s*(\\()\n            ",
      name: "meta.function-call.go"
    },
    initializers: {
      patterns: [
        {
          captures: {
            1: { name: "keyword.control.go" },
            2: {
              patterns: [
                { match: "[[:alpha:]_][[:alnum:]_]*", name: "variable.other.go" }
              ]
            }
          },
          match: "^[[:blank:]]*(var)\\s+((?:[[:alpha:]_][[:alnum:]_]*)(?:,\\s+[[:alpha:]_][[:alnum:]_]*)*)",
          name: "meta.initialization.explicit.go"
        },
        {
          captures: {
            1: {
              patterns: [
                { match: "[[:alpha:]_][[:alnum:]_]*", name: "variable.other.go" }
              ]
            },
            2: { name: "keyword.operator.go" }
          },
          match: "((?:[[:alpha:]_][[:alnum:]_]*)(?:\\s*,\\s+[[:alpha:]_][[:alnum:]_]*)*)\\s*(:=)",
          name: "meta.initialization.short.go"
        }
      ]
    },
    keywords: {
      patterns: [
        {
          match: "\\b(s(elect|witch)|c(ontinue|ase)|type|i(nterface|f|mport)|def(er|ault)|package|else|var|f(or|unc|allthrough)|r(eturn|ange)|go(to)?|break)\\b",
          name: "keyword.control.go"
        },
        {
          match: "(\\b|(?<=\\]))(int(16|8|32|64)?|uint(16|8|32|64|ptr)?|float(32|64)|complex(64|128)|b(yte|ool)|string|error|struct)\\b",
          name: "storage.type.go"
        },
        { match: "\\b(c(onst|han)|map)\\b", name: "storage.modifier.go" },
        { match: "\\b(nil|true|false|iota)\\b", name: "constant.language.go" },
        {
          match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b",
          name: "constant.numeric.go"
        },
        { match: "\\<\\-", name: "keyword.operator.channel.go" }
      ]
    },
    plain_function_declaration: {
      begin: "(?x)\n    	            (^[[:blank:]]*(func)\\s*\n    	             (?: ([[:alpha:]_][[:alnum:]_]*)? )          # name of function is optional\n    	             (?: \\( ((?:[\\[\\]\\w\\d\\s\\/,._*&<>-]|(?:interface\\{\\}))*)? \\) )             # required braces for parameters (even if empty)\n    	             \\s*\n    	             (?: \\(? ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)? )?             # optional return types, optionally within braces\n                    )\n    	    ",
      beginCaptures: {
        1: { name: "meta.function.declaration.go" },
        2: { name: "keyword.control.go" },
        3: { name: "entity.name.function.go" },
        4: {
          patterns: [
            { match: "[[:alpha:]_][[:alnum:]_]*", name: "variable.parameters.go" }
          ]
        },
        5: {
          patterns: [
            {
              match: "[[:alpha:]_][[:alnum:]_]*",
              name: "variable.return-types.go"
            }
          ]
        }
      },
      end: "(?<=\\})",
      name: "meta.function.plain.go",
      patterns: [
        { include: "#comments" },
        { include: "#storage_type" },
        { include: "#storage_modifier" },
        { include: "#function_block" }
      ]
    },
    receiver_function_declaration: {
      begin: "(?x)\n    	            (\n                     (func)\\s*\n    	             (\n    	             (?: \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)\\s+ )                # receiver variable declarations, in brackets\n    	             (?: ([[:alpha:]_][[:alnum:]_]*)? )          # name of function is optional\n    	             )\n    	             (?: \\( ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*)? \\) )               # required braces for parameters (even if empty)\n    	             \\s*\n    	             (?: \\(? ((?:[\\[\\]\\w\\d\\s,._*&<>-]|(?:interface\\{\\}))*) \\)? )?             # optional return types, optionally within braces\n                    )\n    	    ",
      beginCaptures: {
        1: { name: "meta.function.receiver.declaration.go" },
        2: { name: "keyword.control.go" },
        3: { name: "entity.name.function.go.full-name" },
        4: {
          patterns: [
            { match: "[[:alpha:]_][[:alnum:]_]*", name: "variable.receiver.go" }
          ]
        },
        5: { name: "entity.name.function.go.name" },
        6: {
          patterns: [
            { match: "[[:alpha:]_][[:alnum:]_]*", name: "variable.parameters.go" }
          ]
        },
        7: {
          patterns: [
            {
              match: "[[:alpha:]_][[:alnum:]_]*",
              name: "variable.return-types.go"
            }
          ]
        }
      },
      end: "(?<=\\})",
      name: "meta.function.receiver.go",
      patterns: [
        { include: "#comments" },
        { include: "#storage_type" },
        { include: "#storage_modifier" },
        { include: "#function_block" }
      ]
    },
    root_parens: {
      begin: "\\(",
      end: "(?<=\\()(\\))?|(?:\\))",
      endCaptures: { 1: { name: "meta.parens.empty.go" } },
      name: "meta.parens.go",
      patterns: [
        { include: "#basic_things" },
        { include: "#exported_variables" },
        { include: "#function_calls" }
      ]
    },
    string_escaped_char: {
      patterns: [
        {
          match: `\\\\(\\\\|[abfnrutv'"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8}|[0-7]{3})`,
          name: "constant.character.escape.go"
        },
        { match: "\\\\.", name: "invalid.illegal.unknown-escape.go" }
      ]
    },
    string_placeholder: {
      patterns: [
        {
          match: "(?x)%\n                        (\\d+\\$)?                                    # field (argument #)\n                        [#0\\- +']*                                  # flags\n                        [,;:_]?                                     # separator character (AltiVec)\n                        ((-?\\d+)|\\*(-?\\d+\\$)?)?                     # minimum field width\n                        (\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?                # precision\n                        [diouxXDOUeEfFgGaAcCsSpnvtTbyYhHmMzZq%]      # conversion type\n                    ",
          name: "constant.other.placeholder.go"
        },
        { match: "%", name: "invalid.illegal.placeholder.go" }
      ]
    },
    strings: {
      patterns: [
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.go" } },
          name: "string.quoted.double.go",
          patterns: [
            { include: "#string_placeholder" },
            { include: "#string_escaped_char" }
          ]
        },
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.go" } },
          name: "string.quoted.single.go",
          patterns: [{ include: "#string_escaped_char" }]
        },
        {
          begin: "`",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.go" } },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.go" } },
          name: "string.quoted.raw.go"
        }
      ]
    }
  },
  scopeName: "source.go"
};
var source_go_default = grammar9;

// node_modules/@wooorm/starry-night/lang/source.graphql.js
var grammar10 = {
  extensions: [".graphql", ".gql", ".graphqls"],
  names: ["graphql"],
  patterns: [{ include: "#graphql" }],
  repository: {
    graphql: {
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-fragment-definition" },
        { include: "#graphql-directive-definition" },
        { include: "#graphql-type-interface" },
        { include: "#graphql-enum" },
        { include: "#graphql-scalar" },
        { include: "#graphql-union" },
        { include: "#graphql-schema" },
        { include: "#graphql-operation-def" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-ampersand": {
      captures: { 1: { name: "keyword.operator.logical.graphql" } },
      match: "\\s*(&)"
    },
    "graphql-arguments": {
      begin: "\\s*(\\()",
      beginCaptures: { 1: { name: "meta.brace.round.directive.graphql" } },
      end: "\\s*(\\))",
      endCaptures: { 1: { name: "meta.brace.round.directive.graphql" } },
      name: "meta.arguments.graphql",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        {
          begin: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?:\\s*(:))",
          beginCaptures: {
            1: { name: "variable.parameter.graphql" },
            2: { name: "punctuation.colon.graphql" }
          },
          end: "(?=\\s*(?:(?:([_A-Za-z][_0-9A-Za-z]*)\\s*(:))|\\)))|\\s*(,)",
          endCaptures: { 3: { name: "punctuation.comma.graphql" } },
          patterns: [
            { include: "#graphql-comment" },
            { include: "#graphql-description-docstring" },
            { include: "#graphql-description-singleline" },
            { include: "#graphql-directive" },
            { include: "#graphql-value" },
            { include: "#graphql-skip-newlines" }
          ]
        },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-boolean-value": {
      captures: { 1: { name: "constant.language.boolean.graphql" } },
      match: "\\s*\\b(true|false)\\b"
    },
    "graphql-colon": {
      captures: { 1: { name: "punctuation.colon.graphql" } },
      match: "\\s*(:)"
    },
    "graphql-comma": {
      captures: { 1: { name: "punctuation.comma.graphql" } },
      match: "\\s*(,)"
    },
    "graphql-comment": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.whitespace.comment.leading.graphql" }
          },
          match: "(\\s*)(#).*",
          name: "comment.line.graphql.js"
        },
        {
          begin: '(""")',
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.graphql" }
          },
          end: '(""")',
          name: "comment.line.graphql.js"
        },
        {
          begin: '(")',
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.graphql" }
          },
          end: '(")',
          name: "comment.line.graphql.js"
        }
      ]
    },
    "graphql-description-docstring": {
      begin: '"""',
      end: '"""',
      name: "comment.block.graphql"
    },
    "graphql-description-singleline": {
      match: '#(?=([^"]*"[^"]*")*[^"]*$).*$',
      name: "comment.line.number-sign.graphql"
    },
    "graphql-directive": {
      applyEndPatternLast: true,
      begin: "\\s*((@)\\s*([_A-Za-z][_0-9A-Za-z]*))",
      beginCaptures: { 1: { name: "entity.name.function.directive.graphql" } },
      end: "(?=.)",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-arguments" },
        { include: "#literal-quasi-embedded" },
        { include: "#graphql-skip-newlines" }
      ]
    },
    "graphql-directive-definition": {
      applyEndPatternLast: true,
      begin: "\\s*(\\bdirective\\b)\\s*(@[_A-Za-z][_0-9A-Za-z]*)",
      beginCaptures: {
        1: { name: "keyword.directive.graphql" },
        2: { name: "entity.name.function.directive.graphql" },
        3: { name: "keyword.on.graphql" },
        4: { name: "support.type.graphql" }
      },
      end: "(?=.)",
      patterns: [
        { include: "#graphql-variable-definitions" },
        {
          applyEndPatternLast: true,
          begin: "\\s*(\\bon\\b)\\s*([_A-Za-z]*)",
          beginCaptures: {
            1: { name: "keyword.on.graphql" },
            2: { name: "support.type.location.graphql" }
          },
          end: "(?=.)",
          patterns: [
            { include: "#graphql-skip-newlines" },
            { include: "#graphql-comment" },
            { include: "#literal-quasi-embedded" },
            {
              captures: { 2: { name: "support.type.location.graphql" } },
              match: "\\s*(\\|)\\s*([_A-Za-z]*)"
            }
          ]
        },
        { include: "#graphql-skip-newlines" },
        { include: "#graphql-comment" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-enum": {
      begin: "\\s*+\\b(enum)\\b\\s*([_A-Za-z][_0-9A-Za-z]*)",
      beginCaptures: {
        1: { name: "keyword.enum.graphql" },
        2: { name: "support.type.enum.graphql" }
      },
      end: "(?<=})",
      name: "meta.enum.graphql",
      patterns: [
        {
          begin: "\\s*({)",
          beginCaptures: { 1: { name: "punctuation.operation.graphql" } },
          end: "\\s*(})",
          endCaptures: { 1: { name: "punctuation.operation.graphql" } },
          name: "meta.type.object.graphql",
          patterns: [
            { include: "#graphql-object-type" },
            { include: "#graphql-comment" },
            { include: "#graphql-description-docstring" },
            { include: "#graphql-description-singleline" },
            { include: "#graphql-directive" },
            { include: "#graphql-enum-value" },
            { include: "#literal-quasi-embedded" }
          ]
        },
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-directive" }
      ]
    },
    "graphql-enum-value": {
      match: "\\s*(?!=\\b(true|false|null)\\b)([_A-Za-z][_0-9A-Za-z]*)",
      name: "constant.character.enum.graphql"
    },
    "graphql-field": {
      patterns: [
        {
          captures: {
            1: { name: "string.unquoted.alias.graphql" },
            2: { name: "punctuation.colon.graphql" }
          },
          match: "\\s*([_A-Za-z][_0-9A-Za-z]*)\\s*(:)"
        },
        {
          captures: { 1: { name: "variable.graphql" } },
          match: "\\s*([_A-Za-z][_0-9A-Za-z]*)"
        },
        { include: "#graphql-arguments" },
        { include: "#graphql-directive" },
        { include: "#graphql-selection-set" },
        { include: "#literal-quasi-embedded" },
        { include: "#graphql-skip-newlines" }
      ]
    },
    "graphql-float-value": {
      captures: { 1: { name: "constant.numeric.float.graphql" } },
      match: "\\s*(-?(0|[1-9][0-9]*)(\\.[0-9]+)?((e|E)(\\+|-)?[0-9]+)?)"
    },
    "graphql-fragment-definition": {
      begin: "\\s*(?:(\\bfragment\\b)\\s*([_A-Za-z][_0-9A-Za-z]*)?)",
      captures: {
        1: { name: "keyword.fragment.graphql" },
        2: { name: "entity.name.fragment.graphql" }
      },
      end: "(?<=})",
      name: "meta.fragment.graphql",
      patterns: [
        {
          captures: {
            1: { name: "keyword.on.graphql" },
            2: { name: "support.type.graphql" }
          },
          match: "\\s*(?:(\\bon\\b)\\s*([_A-Za-z][_0-9A-Za-z]*))"
        },
        { include: "#graphql-variable-definitions" },
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-selection-set" },
        { include: "#graphql-directive" },
        { include: "#graphql-skip-newlines" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-fragment-spread": {
      applyEndPatternLast: true,
      begin: "\\s*(\\.\\.\\.)\\s*(?!\\bon\\b)([_A-Za-z][_0-9A-Za-z]*)",
      captures: {
        1: { name: "keyword.operator.spread.graphql" },
        2: { name: "variable.fragment.graphql" }
      },
      end: "(?=.)",
      patterns: [
        { include: "#graphql-arguments" },
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-selection-set" },
        { include: "#graphql-directive" },
        { include: "#literal-quasi-embedded" },
        { include: "#graphql-skip-newlines" }
      ]
    },
    "graphql-ignore-spaces": { match: "\\s*" },
    "graphql-inline-fragment": {
      applyEndPatternLast: true,
      begin: "\\s*(\\.\\.\\.)\\s*(?:(\\bon\\b)\\s*([_A-Za-z][_0-9A-Za-z]*))?",
      captures: {
        1: { name: "keyword.operator.spread.graphql" },
        2: { name: "keyword.on.graphql" },
        3: { name: "support.type.graphql" }
      },
      end: "(?=.)",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-selection-set" },
        { include: "#graphql-directive" },
        { include: "#graphql-skip-newlines" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-input-types": {
      patterns: [
        { include: "#graphql-scalar-type" },
        {
          captures: {
            1: { name: "support.type.graphql" },
            2: { name: "keyword.operator.nulltype.graphql" }
          },
          match: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?:\\s*(!))?"
        },
        {
          begin: "\\s*(\\[)",
          captures: {
            1: { name: "meta.brace.square.graphql" },
            2: { name: "keyword.operator.nulltype.graphql" }
          },
          end: "\\s*(\\])(?:\\s*(!))?",
          name: "meta.type.list.graphql",
          patterns: [
            { include: "#graphql-comment" },
            { include: "#graphql-description-docstring" },
            { include: "#graphql-description-singleline" },
            { include: "#graphql-input-types" },
            { include: "#graphql-comma" },
            { include: "#literal-quasi-embedded" }
          ]
        }
      ]
    },
    "graphql-list-value": {
      patterns: [
        {
          begin: "\\s*+(\\[)",
          beginCaptures: { 1: { name: "meta.brace.square.graphql" } },
          end: "\\s*(\\])",
          endCaptures: { 1: { name: "meta.brace.square.graphql" } },
          name: "meta.listvalues.graphql",
          patterns: [{ include: "#graphql-value" }]
        }
      ]
    },
    "graphql-name": {
      captures: { 1: { name: "entity.name.function.graphql" } },
      match: "\\s*([_A-Za-z][_0-9A-Za-z]*)"
    },
    "graphql-null-value": {
      captures: { 1: { name: "constant.language.null.graphql" } },
      match: "\\s*\\b(null)\\b"
    },
    "graphql-object-field": {
      captures: {
        1: { name: "constant.object.key.graphql" },
        2: { name: "string.unquoted.graphql" },
        3: { name: "punctuation.graphql" }
      },
      match: "\\s*(([_A-Za-z][_0-9A-Za-z]*))\\s*(:)"
    },
    "graphql-object-value": {
      patterns: [
        {
          begin: "\\s*+({)",
          beginCaptures: { 1: { name: "meta.brace.curly.graphql" } },
          end: "\\s*(})",
          endCaptures: { 1: { name: "meta.brace.curly.graphql" } },
          name: "meta.objectvalues.graphql",
          patterns: [
            { include: "#graphql-object-field" },
            { include: "#graphql-value" }
          ]
        }
      ]
    },
    "graphql-operation-def": {
      patterns: [
        { include: "#graphql-query-mutation" },
        { include: "#graphql-name" },
        { include: "#graphql-variable-definitions" },
        { include: "#graphql-directive" },
        { include: "#graphql-selection-set" }
      ]
    },
    "graphql-query-mutation": {
      captures: { 1: { name: "keyword.operation.graphql" } },
      match: "\\s*\\b(query|mutation)\\b"
    },
    "graphql-scalar": {
      captures: {
        1: { name: "keyword.scalar.graphql" },
        2: { name: "entity.scalar.graphql" }
      },
      match: "\\s*\\b(scalar)\\b\\s*([_A-Za-z][_0-9A-Za-z]*)"
    },
    "graphql-scalar-type": {
      captures: {
        1: { name: "support.type.builtin.graphql" },
        2: { name: "keyword.operator.nulltype.graphql" }
      },
      match: "\\s*\\b(Int|Float|String|Boolean|ID)\\b(?:\\s*(!))?"
    },
    "graphql-schema": {
      begin: "\\s*\\b(schema)\\b",
      beginCaptures: { 1: { name: "keyword.schema.graphql" } },
      end: "(?<=})",
      patterns: [
        {
          begin: "\\s*({)",
          beginCaptures: { 1: { name: "punctuation.operation.graphql" } },
          end: "\\s*(})",
          endCaptures: { 1: { name: "punctuation.operation.graphql" } },
          patterns: [
            {
              begin: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?=\\s*\\(|:)",
              beginCaptures: { 1: { name: "variable.arguments.graphql" } },
              end: "(?=\\s*(([_A-Za-z][_0-9A-Za-z]*)\\s*(\\(|:)|(})))|\\s*(,)",
              endCaptures: { 5: { name: "punctuation.comma.graphql" } },
              patterns: [
                {
                  captures: { 1: { name: "support.type.graphql" } },
                  match: "\\s*([_A-Za-z][_0-9A-Za-z]*)"
                },
                { include: "#graphql-comment" },
                { include: "#graphql-description-docstring" },
                { include: "#graphql-description-singleline" },
                { include: "#graphql-colon" },
                { include: "#graphql-skip-newlines" }
              ]
            },
            { include: "#graphql-comment" },
            { include: "#graphql-description-docstring" },
            { include: "#graphql-description-singleline" },
            { include: "#graphql-skip-newlines" }
          ]
        },
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-directive" },
        { include: "#graphql-skip-newlines" }
      ]
    },
    "graphql-selection-set": {
      begin: "\\s*({)",
      beginCaptures: { 1: { name: "punctuation.operation.graphql" } },
      end: "\\s*(})",
      endCaptures: { 1: { name: "punctuation.operation.graphql" } },
      name: "meta.selectionset.graphql",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-field" },
        { include: "#graphql-fragment-spread" },
        { include: "#graphql-inline-fragment" },
        { include: "#graphql-comma" },
        { include: "#native-interpolation" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-skip-newlines": { match: "\\s*\n" },
    "graphql-string-content": {
      patterns: [
        {
          match: `\\\\[/'"\\\\nrtbf]`,
          name: "constant.character.escape.graphql"
        },
        {
          match: "\\\\u([0-9a-fA-F]{4})",
          name: "constant.character.escape.graphql"
        }
      ]
    },
    "graphql-string-value": {
      begin: '\\s*+(("))',
      beginCaptures: {
        1: { name: "string.quoted.double.graphql" },
        2: { name: "punctuation.definition.string.begin.graphql" }
      },
      contentName: "string.quoted.double.graphql",
      end: '\\s*+(?:(("))|(\n))',
      endCaptures: {
        1: { name: "string.quoted.double.graphql" },
        2: { name: "punctuation.definition.string.end.graphql" },
        3: { name: "invalid.illegal.newline.graphql" }
      },
      patterns: [
        { include: "#graphql-string-content" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-type-definition": {
      begin: "\\s*([_A-Za-z][_0-9A-Za-z]*)(?=\\s*\\(|:)",
      beginCaptures: { 1: { name: "variable.graphql" } },
      end: "(?=\\s*(([_A-Za-z][_0-9A-Za-z]*)\\s*(\\(|:)|(})))|\\s*(,)",
      endCaptures: { 5: { name: "punctuation.comma.graphql" } },
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-directive" },
        { include: "#graphql-variable-definitions" },
        { include: "#graphql-type-object" },
        { include: "#graphql-colon" },
        { include: "#graphql-input-types" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-type-interface": {
      applyEndPatternLast: true,
      begin: "\\s*\\b(?:(extends?)?\\b\\s*\\b(type)|(interface)|(input))\\b\\s*([_A-Za-z][_0-9A-Za-z]*)?",
      captures: {
        1: { name: "keyword.type.graphql" },
        2: { name: "keyword.type.graphql" },
        3: { name: "keyword.interface.graphql" },
        4: { name: "keyword.input.graphql" },
        5: { name: "support.type.graphql" }
      },
      end: "(?=.)",
      name: "meta.type.interface.graphql",
      patterns: [
        {
          begin: "\\s*\\b(implements)\\b\\s*",
          beginCaptures: { 1: { name: "keyword.implements.graphql" } },
          end: "\\s*(?={)",
          patterns: [
            {
              captures: { 1: { name: "support.type.graphql" } },
              match: "\\s*([_A-Za-z][_0-9A-Za-z]*)"
            },
            { include: "#graphql-comment" },
            { include: "#graphql-description-docstring" },
            { include: "#graphql-description-singleline" },
            { include: "#graphql-directive" },
            { include: "#graphql-ampersand" },
            { include: "#graphql-comma" }
          ]
        },
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-directive" },
        { include: "#graphql-type-object" },
        { include: "#literal-quasi-embedded" },
        { include: "#graphql-ignore-spaces" }
      ]
    },
    "graphql-type-object": {
      begin: "\\s*({)",
      beginCaptures: { 1: { name: "punctuation.operation.graphql" } },
      end: "\\s*(})",
      endCaptures: { 1: { name: "punctuation.operation.graphql" } },
      name: "meta.type.object.graphql",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-object-type" },
        { include: "#graphql-type-definition" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-union": {
      applyEndPatternLast: true,
      begin: "\\s*\\b(union)\\b\\s*([_A-Za-z][_0-9A-Za-z]*)",
      captures: {
        1: { name: "keyword.union.graphql" },
        2: { name: "support.type.graphql" }
      },
      end: "(?=.)",
      patterns: [
        {
          applyEndPatternLast: true,
          begin: "\\s*(=)\\s*([_A-Za-z][_0-9A-Za-z]*)",
          captures: {
            1: { name: "punctuation.assignment.graphql" },
            2: { name: "support.type.graphql" }
          },
          end: "(?=.)",
          patterns: [
            { include: "#graphql-comment" },
            { include: "#graphql-description-docstring" },
            { include: "#graphql-description-singleline" },
            { include: "#graphql-skip-newlines" },
            { include: "#literal-quasi-embedded" },
            {
              captures: {
                1: { name: "punctuation.or.graphql" },
                2: { name: "support.type.graphql" }
              },
              match: "\\s*(\\|)\\s*([_A-Za-z][_0-9A-Za-z]*)"
            }
          ]
        },
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-skip-newlines" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-union-mark": {
      captures: { 1: { name: "punctuation.union.graphql" } },
      match: "\\s*(\\|)"
    },
    "graphql-value": {
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-variable-name" },
        { include: "#graphql-float-value" },
        { include: "#graphql-string-value" },
        { include: "#graphql-boolean-value" },
        { include: "#graphql-null-value" },
        { include: "#graphql-enum-value" },
        { include: "#graphql-list-value" },
        { include: "#graphql-object-value" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-variable-assignment": {
      applyEndPatternLast: true,
      begin: "\\s(=)",
      beginCaptures: { 1: { name: "punctuation.assignment.graphql" } },
      end: "(?=[\n,)])",
      patterns: [{ include: "#graphql-value" }]
    },
    "graphql-variable-definition": {
      begin: "\\s*(\\$?[_A-Za-z][_0-9A-Za-z]*)(?=\\s*\\(|:)",
      beginCaptures: { 1: { name: "variable.parameter.graphql" } },
      end: "(?=\\s*((\\$?[_A-Za-z][_0-9A-Za-z]*)\\s*(\\(|:)|(}|\\))))|\\s*(,)",
      endCaptures: { 5: { name: "punctuation.comma.graphql" } },
      name: "meta.variables.graphql",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-directive" },
        { include: "#graphql-colon" },
        { include: "#graphql-input-types" },
        { include: "#graphql-variable-assignment" },
        { include: "#literal-quasi-embedded" },
        { include: "#graphql-skip-newlines" }
      ]
    },
    "graphql-variable-definitions": {
      begin: "\\s*(\\()",
      captures: { 1: { name: "meta.brace.round.graphql" } },
      end: "\\s*(\\))",
      patterns: [
        { include: "#graphql-comment" },
        { include: "#graphql-description-docstring" },
        { include: "#graphql-description-singleline" },
        { include: "#graphql-variable-definition" },
        { include: "#literal-quasi-embedded" }
      ]
    },
    "graphql-variable-name": {
      captures: { 1: { name: "variable.graphql" } },
      match: "\\s*(\\$[_A-Za-z][_0-9A-Za-z]*)"
    },
    "native-interpolation": {
      begin: "\\s*(\\${)",
      beginCaptures: { 1: { name: "keyword.other.substitution.begin" } },
      end: "(})",
      endCaptures: { 1: { name: "keyword.other.substitution.end" } },
      name: "native.interpolation",
      patterns: [
        { include: "source.js" },
        { include: "source.ts" },
        { include: "source.tsx" }
      ]
    }
  },
  scopeName: "source.graphql"
};
var source_graphql_default = grammar10;

// node_modules/@wooorm/starry-night/lang/source.ini.js
var grammar11 = {
  extensions: [
    ".cnf",
    ".dof",
    ".ini",
    ".lektorproject",
    ".outjob",
    ".pcbdoc",
    ".prefs",
    ".prjpcb",
    ".properties",
    ".schdoc",
    ".url"
  ],
  names: ["altium", "altium-designer", "dosini", "ini"],
  patterns: [
    {
      begin: "(^[ \\t]+)?(?=#)",
      beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ini" } },
      end: "(?!\\G)",
      patterns: [
        {
          begin: "#",
          beginCaptures: { 0: { name: "punctuation.definition.comment.ini" } },
          end: "\\n",
          name: "comment.line.number-sign.ini"
        }
      ]
    },
    {
      begin: "(^[ \\t]+)?(?=;)",
      beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ini" } },
      end: "(?!\\G)",
      patterns: [
        {
          begin: ";",
          beginCaptures: { 0: { name: "punctuation.definition.comment.ini" } },
          end: "\\n",
          name: "comment.line.semicolon.ini"
        }
      ]
    },
    {
      captures: {
        1: { name: "keyword.other.definition.ini" },
        2: { name: "punctuation.separator.key-value.ini" }
      },
      match: "\\b([a-zA-Z0-9_.-]+)\\b\\s*(=)"
    },
    {
      captures: {
        1: { name: "punctuation.definition.entity.ini" },
        3: { name: "punctuation.definition.entity.ini" }
      },
      match: "^(\\[)(.*?)(\\])",
      name: "entity.name.section.group-title.ini"
    },
    {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ini" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ini" } },
      name: "string.quoted.single.ini",
      patterns: [{ match: "\\\\.", name: "constant.character.escape.ini" }]
    },
    {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ini" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.ini" } },
      name: "string.quoted.double.ini"
    }
  ],
  scopeName: "source.ini"
};
var source_ini_default = grammar11;

// node_modules/@wooorm/starry-night/lang/source.java.js
var grammar12 = {
  extensions: [".ck", ".jav", ".java", ".jsh", ".uc"],
  names: ["chuck", "java", "unrealscript"],
  patterns: [
    {
      captures: {
        1: { name: "keyword.other.package.java" },
        2: { name: "storage.modifier.package.java" },
        3: { name: "punctuation.terminator.java" }
      },
      match: "^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*(;)?)?",
      name: "meta.package.java"
    },
    {
      begin: "(import static)\\b\\s*",
      beginCaptures: { 1: { name: "keyword.other.import.static.java" } },
      captures: {
        1: { name: "keyword.other.import.java" },
        2: { name: "storage.modifier.import.java" },
        3: { name: "punctuation.terminator.java" }
      },
      contentName: "storage.modifier.import.java",
      end: "\\s*(?:$|(;))",
      endCaptures: { 1: { name: "punctuation.terminator.java" } },
      name: "meta.import.java",
      patterns: [
        { match: "\\.", name: "punctuation.separator.java" },
        { match: "\\s", name: "invalid.illegal.character_not_allowed_here.java" }
      ]
    },
    {
      begin: "(import)\\b\\s*",
      beginCaptures: { 1: { name: "keyword.other.import.java" } },
      captures: {
        1: { name: "keyword.other.import.java" },
        2: { name: "storage.modifier.import.java" },
        3: { name: "punctuation.terminator.java" }
      },
      contentName: "storage.modifier.import.java",
      end: "\\s*(?:$|(;))",
      endCaptures: { 1: { name: "punctuation.terminator.java" } },
      name: "meta.import.java",
      patterns: [
        { match: "\\.", name: "punctuation.separator.java" },
        { match: "\\s", name: "invalid.illegal.character_not_allowed_here.java" }
      ]
    },
    { include: "#code" }
  ],
  repository: {
    "all-types": {
      patterns: [
        { include: "#primitive-arrays" },
        { include: "#primitive-types" },
        { include: "#object-types" }
      ]
    },
    annotations: {
      patterns: [
        {
          begin: "(@[^ (]+)(\\()",
          beginCaptures: {
            1: { name: "storage.type.annotation.java" },
            2: { name: "punctuation.definition.annotation-arguments.begin.java" }
          },
          end: "(\\))",
          endCaptures: {
            1: { name: "punctuation.definition.annotation-arguments.end.java" }
          },
          name: "meta.declaration.annotation.java",
          patterns: [
            {
              captures: {
                1: { name: "constant.other.key.java" },
                2: { name: "keyword.operator.assignment.java" }
              },
              match: "(\\w*)\\s*(=)"
            },
            { include: "#code" },
            { match: ",", name: "punctuation.separator.property.java" }
          ]
        },
        { match: "@\\w*", name: "storage.type.annotation.java" }
      ]
    },
    "anonymous-classes-and-new": {
      begin: "\\bnew\\b",
      beginCaptures: { 0: { name: "keyword.control.new.java" } },
      end: "(?<=\\)|\\])(?!\\s*{)|(?<=})|(?=;)",
      patterns: [
        {
          begin: "(\\w+)\\s*(?=\\[)",
          beginCaptures: { 1: { name: "storage.type.java" } },
          end: "(})|(?=\\s*(?:,|;|\\)))",
          endCaptures: { 1: { name: "punctuation.section.block.end.java" } },
          patterns: [
            { begin: "\\[", end: "\\]", patterns: [{ include: "#code" }] },
            {
              begin: "{",
              beginCaptures: {
                0: { name: "punctuation.section.block.begin.java" }
              },
              end: "(?=})",
              patterns: [{ include: "#code" }]
            }
          ]
        },
        {
          begin: "(?=\\w.*\\()",
          end: "(?<=\\))",
          patterns: [
            { include: "#object-types" },
            {
              begin: "\\(",
              beginCaptures: { 1: { name: "storage.type.java" } },
              end: "\\)",
              patterns: [{ include: "#code" }]
            }
          ]
        },
        {
          begin: "{",
          beginCaptures: {
            0: { name: "punctuation.section.inner-class.begin.java" }
          },
          end: "}",
          endCaptures: { 0: { name: "punctuation.section.inner-class.end.java" } },
          name: "meta.inner-class.java",
          patterns: [{ include: "#class-body" }]
        }
      ]
    },
    assertions: {
      patterns: [
        {
          begin: "\\b(assert)\\s",
          beginCaptures: { 1: { name: "keyword.control.assert.java" } },
          end: "$",
          name: "meta.declaration.assertion.java",
          patterns: [
            {
              match: ":",
              name: "keyword.operator.assert.expression-seperator.java"
            },
            { include: "#code" }
          ]
        }
      ]
    },
    class: {
      begin: "(?=\\w?[\\w\\s]*(?:class|(?:@)?interface|enum)\\s+\\w+)",
      end: "}",
      endCaptures: { 0: { name: "punctuation.section.class.end.java" } },
      name: "meta.class.java",
      patterns: [
        { include: "#storage-modifiers" },
        { include: "#comments" },
        {
          captures: {
            1: { name: "storage.modifier.java" },
            2: { name: "entity.name.type.class.java" }
          },
          match: "(class|(?:@)?interface|enum)\\s+(\\w+)",
          name: "meta.class.identifier.java"
        },
        {
          begin: "extends",
          beginCaptures: { 0: { name: "storage.modifier.extends.java" } },
          end: "(?={|implements)",
          name: "meta.definition.class.inherited.classes.java",
          patterns: [
            { include: "#object-types-inherited" },
            { include: "#comments" }
          ]
        },
        {
          begin: "(implements)\\s",
          beginCaptures: { 1: { name: "storage.modifier.implements.java" } },
          end: "(?=\\s*extends|\\{)",
          name: "meta.definition.class.implemented.interfaces.java",
          patterns: [
            { include: "#object-types-inherited" },
            { include: "#comments" }
          ]
        },
        {
          begin: "{",
          beginCaptures: { 0: { name: "punctuation.section.class.begin.java" } },
          end: "(?=})",
          name: "meta.class.body.java",
          patterns: [{ include: "#class-body" }]
        }
      ]
    },
    "class-body": {
      patterns: [
        { include: "#comments" },
        { include: "#class" },
        { include: "#enums" },
        { include: "#variables" },
        { include: "#methods" },
        { include: "#annotations" },
        { include: "#storage-modifiers" },
        { include: "#code" }
      ]
    },
    code: {
      patterns: [
        { include: "#comments" },
        { include: "#class" },
        {
          begin: "{",
          beginCaptures: { 0: { name: "punctuation.section.block.begin.java" } },
          end: "}",
          endCaptures: { 0: { name: "punctuation.section.block.end.java" } },
          patterns: [{ include: "#code" }]
        },
        { include: "#assertions" },
        { include: "#parens" },
        { include: "#constants-and-special-vars" },
        { include: "#anonymous-classes-and-new" },
        { include: "#annotations" },
        { include: "#keywords" },
        { include: "#storage-modifiers" },
        { include: "#method-call" },
        { include: "#strings" },
        { include: "#all-types" }
      ]
    },
    comments: {
      patterns: [
        {
          captures: { 0: { name: "punctuation.definition.comment.java" } },
          match: "/\\*\\*/",
          name: "comment.block.empty.java"
        },
        { include: "text.html.javadoc" },
        { include: "#comments-inline" }
      ]
    },
    "comments-inline": {
      patterns: [
        {
          begin: "/\\*",
          captures: { 0: { name: "punctuation.definition.comment.java" } },
          end: "\\*/",
          name: "comment.block.java"
        },
        {
          begin: "(^[ \\t]+)?(?=//)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.java" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "//",
              beginCaptures: { 0: { name: "punctuation.definition.comment.java" } },
              end: "\\n",
              name: "comment.line.double-slash.java"
            }
          ]
        }
      ]
    },
    "constants-and-special-vars": {
      patterns: [
        { match: "\\b(true|false|null)\\b", name: "constant.language.java" },
        { match: "\\b(this|super)\\b", name: "variable.language.java" },
        {
          match: "\\b0[xX][0-9A-Fa-f]([0-9A-Fa-f_]*[0-9A-Fa-f])?[lL]?(?!\\w|\\.)",
          name: "constant.numeric.hex.java"
        },
        {
          match: "\\b0[0-7_]*[0-7][lL]?\\b",
          name: "constant.numeric.octal.java"
        },
        {
          match: "\\b0[bB][01]([01_]*[01])?[lL]?\\b",
          name: "constant.numeric.binary.java"
        },
        {
          match: "\\b(0|[1-9]([0-9_]*[0-9])?)[lL]?(?!\\w|\\.)",
          name: "constant.numeric.integer.java"
        },
        {
          match: "(?x)\n						(?<!\\w)										# Ensure word boundry\n						(?>\n							0[xX]									# Start literal\n							([0-9A-Fa-f]([0-9A-Fa-f_]*[0-9A-Fa-f])?)?						# Optional Number\n							(\n								(?<=[0-9A-Fa-f])\\.							# A number must exist on\n						      | \\.(?=[0-9A-Fa-f])							#   one side of the decimal\n						      | (?<=[0-9A-Fa-f])								# Decimal not required\n							)\n							([0-9A-Fa-f]([0-9A-Fa-f_]*[0-9A-Fa-f])?)?						# Optional Number\n							[pP]									# Exponent Indicator\n							[+-]?(0|[1-9]([0-9_]*[0-9])?)			# Signed Integer\n							[fFdD]?									# Float Type Suffix\n						)\n						(?!\\w)										# Ensure word boundry\n					",
          name: "constant.numeric.hex-float.java"
        },
        {
          match: "(?x)\n						(?<!\\w)											# Ensure word boundry\n						(?>\n							(\n								(0|[1-9]([0-9_]*[0-9])?)				# Leading digits\n								(?=[eEfFdD.])							# Allow for numbers without .\n							)?\n							(\n								(?<=[0-9])(?=[eEfFdD])					# Allow for numbers without .\n							  | \\.\n							)\n							(\n								[0-9]([0-9_]*[0-9])?					# Numbers after .\n							)?\n							(\n								[eE][+-]?(0|[1-9]([0-9_]*[0-9])?)		# Exponent\n							)?\n							[fFdD]?										# Float Type Suffix\n						)\n						(?!\\w)											# Ensure word boundry\n					",
          name: "constant.numeric.float.java"
        },
        {
          captures: { 1: { name: "keyword.operator.dereference.java" } },
          match: "(\\.)?\\b([A-Z][A-Z0-9_]+)(?!<|\\.class|\\s*\\w+\\s*=)\\b",
          name: "constant.other.java"
        }
      ]
    },
    enums: {
      begin: "^(?=\\s*[A-Z0-9_]+\\s*({|\\(|,))",
      end: "(?=;|})",
      patterns: [
        {
          begin: "\\w+",
          beginCaptures: { 0: { name: "constant.other.enum.java" } },
          end: "(?=,|;|})",
          name: "meta.enum.java",
          patterns: [
            { include: "#parens" },
            {
              begin: "{",
              beginCaptures: { 0: { name: "punctuation.section.enum.begin.java" } },
              end: "}",
              endCaptures: { 0: { name: "punctuation.section.enum.end.java" } },
              patterns: [{ include: "#class-body" }]
            }
          ]
        },
        { include: "#comments" },
        { include: "#annotations" }
      ]
    },
    keywords: {
      patterns: [
        {
          match: "\\b(try|catch|finally|throw)\\b",
          name: "keyword.control.catch-exception.java"
        },
        { match: "\\?|:", name: "keyword.control.ternary.java" },
        {
          match: "\\b(return|break|case|continue|default|do|while|for|switch|if|else)\\b",
          name: "keyword.control.java"
        },
        { match: "\\b(instanceof)\\b", name: "keyword.operator.java" },
        { match: "(<<|>>>?|~|\\^)", name: "keyword.operator.bitwise.java" },
        {
          match: "((&|\\^|\\||<<|>>>?)=)",
          name: "keyword.operator.assignment.bitwise.java"
        },
        {
          match: "(===?|!=|<=|>=|<>|<|>)",
          name: "keyword.operator.comparison.java"
        },
        {
          match: "([+*/%-]=)",
          name: "keyword.operator.assignment.arithmetic.java"
        },
        { match: "(=)", name: "keyword.operator.assignment.java" },
        {
          match: "(\\-\\-|\\+\\+)",
          name: "keyword.operator.increment-decrement.java"
        },
        {
          match: "(\\-|\\+|\\*|\\/|%)",
          name: "keyword.operator.arithmetic.java"
        },
        { match: "(!|&&|\\|\\|)", name: "keyword.operator.logical.java" },
        { match: "(\\||&)", name: "keyword.operator.bitwise.java" },
        {
          match: "(?<=\\S)\\.(?=\\S)",
          name: "keyword.operator.dereference.java"
        },
        { match: ";", name: "punctuation.terminator.java" }
      ]
    },
    "method-call": {
      begin: "([\\w$]+)(\\()",
      beginCaptures: {
        1: { name: "meta.method.java" },
        2: { name: "punctuation.definition.method-parameters.begin.java" }
      },
      end: "\\)",
      endCaptures: {
        0: { name: "punctuation.definition.method-parameters.end.java" }
      },
      name: "meta.method-call.java",
      patterns: [
        { match: ",", name: "punctuation.definition.seperator.parameter.java" },
        { include: "#code" }
      ]
    },
    methods: {
      begin: "(?!new)(?=[\\w<].*\\s+)(?=([^=/]|/(?!/))+\\()",
      end: "(})|(?=;)",
      endCaptures: { 1: { name: "punctuation.section.method.end.java" } },
      name: "meta.method.java",
      patterns: [
        { include: "#storage-modifiers" },
        {
          begin: "(\\w+)\\s*\\(",
          beginCaptures: { 1: { name: "entity.name.function.java" } },
          end: "\\)",
          name: "meta.method.identifier.java",
          patterns: [{ include: "#parameters" }, { include: "#comments" }]
        },
        {
          begin: "<",
          end: ">",
          name: "storage.type.token.java",
          patterns: [
            { include: "#object-types" },
            {
              begin: "<",
              end: ">|[^\\w\\s,\\[\\]<]",
              name: "storage.type.generic.java"
            }
          ]
        },
        {
          begin: "(?=\\w.*\\s+\\w+\\s*\\()",
          end: "(?=\\w+\\s*\\()",
          name: "meta.method.return-type.java",
          patterns: [{ include: "#all-types" }, { include: "#comments" }]
        },
        { include: "#throws" },
        {
          begin: "{",
          beginCaptures: { 0: { name: "punctuation.section.method.begin.java" } },
          end: "(?=})",
          name: "meta.method.body.java",
          patterns: [{ include: "#code" }]
        },
        { include: "#comments" }
      ]
    },
    "object-types": {
      patterns: [
        {
          begin: "\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)<",
          end: ">|[^\\w\\s,\\?<\\[\\]]",
          name: "storage.type.generic.java",
          patterns: [
            { include: "#object-types" },
            {
              begin: "<",
              end: ">|[^\\w\\s,\\[\\]<]",
              name: "storage.type.generic.java"
            }
          ]
        },
        {
          begin: "\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)(?=\\[)",
          end: "(?=[^\\]\\s])",
          name: "storage.type.object.array.java",
          patterns: [{ begin: "\\[", end: "\\]", patterns: [{ include: "#code" }] }]
        },
        {
          captures: { 1: { name: "keyword.operator.dereference.java" } },
          match: "\\b(?:[a-z]\\w*(\\.))*[A-Z]+\\w*\\b",
          name: "storage.type.java"
        }
      ]
    },
    "object-types-inherited": {
      patterns: [
        {
          begin: "\\b((?:[a-z]\\w*\\.)*[A-Z]+\\w*)<",
          end: ">|[^\\w\\s,<]",
          name: "entity.other.inherited-class.java",
          patterns: [
            { include: "#object-types" },
            {
              begin: "<",
              end: ">|[^\\w\\s,<]",
              name: "storage.type.generic.java"
            }
          ]
        },
        {
          captures: { 1: { name: "keyword.operator.dereference.java" } },
          match: "\\b(?:[a-z]\\w*(\\.))*[A-Z]+\\w*",
          name: "entity.other.inherited-class.java"
        }
      ]
    },
    parameters: {
      patterns: [
        { match: "final", name: "storage.modifier.java" },
        { include: "#annotations" },
        { include: "#primitive-arrays" },
        { include: "#primitive-types" },
        { include: "#object-types" },
        { match: "\\w+", name: "variable.parameter.java" }
      ]
    },
    parens: { begin: "\\(", end: "\\)", patterns: [{ include: "#code" }] },
    "primitive-arrays": {
      patterns: [
        {
          match: "\\b(?:void|boolean|byte|char|short|int|float|long|double)(\\[\\])*\\b",
          name: "storage.type.primitive.array.java"
        }
      ]
    },
    "primitive-types": {
      patterns: [
        {
          match: "\\b(?:void|var|boolean|byte|char|short|int|float|long|double)\\b",
          name: "storage.type.primitive.java"
        }
      ]
    },
    "storage-modifiers": {
      captures: { 1: { name: "storage.modifier.java" } },
      match: "\\b(public|private|protected|static|final|native|synchronized|volatile|abstract|threadsafe|transient)\\b"
    },
    strings: {
      patterns: [
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.java" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.java" } },
          name: "string.quoted.double.java",
          patterns: [{ match: "\\\\.", name: "constant.character.escape.java" }]
        },
        {
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.java" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.java" } },
          name: "string.quoted.single.java",
          patterns: [{ match: "\\\\.", name: "constant.character.escape.java" }]
        }
      ]
    },
    throws: {
      begin: "throws",
      beginCaptures: { 0: { name: "storage.modifier.java" } },
      end: "(?={|;)",
      name: "meta.throwables.java",
      patterns: [{ include: "#object-types" }]
    },
    values: {
      patterns: [
        { include: "#strings" },
        { include: "#object-types" },
        { include: "#constants-and-special-vars" }
      ]
    },
    variables: {
      applyEndPatternLast: true,
      patterns: [
        {
          begin: "(?x:(?=\n                        (?:\n                            (?:private|protected|public|native|synchronized|volatile|abstract|threadsafe|transient|static|final) # visibility/modifier\n                                |\n                            (?:def)\n                                |\n                            (?:void|boolean|byte|char|short|int|float|long|double)\n                                |\n                            (?:(?:[a-z]\\w*\\.)*[A-Z]+\\w*) # object type\n                        )\n                        \\s+\n                        (?!private|protected|public|native|synchronized|volatile|abstract|threadsafe|transient|static|final|def|void|boolean|byte|char|short|int|float|long|double)\n                        [\\w\\d_<>\\[\\],\\?][\\w\\d_<>\\[\\],\\? \\t]*\n                        (?:=|$)\n                        \n					))",
          end: "(?=;)",
          name: "meta.definition.variable.java",
          patterns: [
            { match: "\\s" },
            {
              captures: { 1: { name: "constant.other.variable.java" } },
              match: "([A-Z_0-9]+)\\s+(?=\\=)"
            },
            {
              captures: { 1: { name: "meta.definition.variable.name.java" } },
              match: "(\\w[^\\s,]*)\\s+(?=\\=)"
            },
            {
              begin: "=",
              beginCaptures: { 0: { name: "keyword.operator.assignment.java" } },
              end: "(?=;)",
              patterns: [{ include: "#code" }]
            },
            {
              captures: { 1: { name: "meta.definition.variable.name.java" } },
              match: "(\\w[^\\s=]*)(?=\\s*;)"
            },
            { include: "#code" }
          ]
        }
      ]
    }
  },
  scopeName: "source.java"
};
var source_java_default = grammar12;

// node_modules/@wooorm/starry-night/lang/source.js.js
var grammar13 = {
  extensions: [
    "._js",
    ".bones",
    ".cjs",
    ".code-snippets",
    ".code-workspace",
    ".cy",
    ".es6",
    ".jake",
    ".javascript",
    ".js",
    ".js.erb",
    ".jsb",
    ".jscad",
    ".jsfl",
    ".jslib",
    ".jsm",
    ".json5",
    ".jsonc",
    ".jsonld",
    ".jspre",
    ".jss",
    ".jsx",
    ".mjs",
    ".njs",
    ".pac",
    ".sjs",
    ".ssjs",
    ".sublime-build",
    ".sublime-color-scheme",
    ".sublime-commands",
    ".sublime-completions",
    ".sublime-keymap",
    ".sublime-macro",
    ".sublime-menu",
    ".sublime-mousemap",
    ".sublime-project",
    ".sublime-settings",
    ".sublime-theme",
    ".sublime-workspace",
    ".sublime_metrics",
    ".sublime_session",
    ".xsjs",
    ".xsjslib"
  ],
  names: [
    "cycript",
    "javascript",
    "javascript+erb",
    "js",
    "json-with-comments",
    "json5",
    "jsonc",
    "jsonld",
    "node",
    "qt-script"
  ],
  patterns: [
    {
      begin: "(?<!\\.)\\b(import)(?!\\s*[:(])\\b",
      beginCaptures: { 1: { name: "keyword.control.js" } },
      end: "(?=;|$)",
      name: "meta.import.js",
      patterns: [
        {
          begin: "{",
          beginCaptures: { 0: { name: "punctuation.definition.modules.begin.js" } },
          end: "}",
          endCaptures: { 0: { name: "punctuation.definition.modules.end.js" } },
          patterns: [
            {
              captures: {
                1: { name: "variable.language.default.js" },
                2: { name: "variable.other.module.js" },
                3: { name: "keyword.control.js" },
                4: { name: "invalid.illegal.js" },
                5: { name: "variable.other.module-alias.js" }
              },
              match: "(?x)\n(?: \\b(default)\\b | \\b([a-zA-Z_$][\\w$]*)\\b)\n\\s*\n(\\b as \\b)\n\\s*\n(?: (\\b default \\b | \\*) | \\b([a-zA-Z_$][\\w$]*)\\b)"
            },
            { match: ",", name: "meta.delimiter.object.comma.js" },
            { include: "#comments" },
            {
              match: "\\b([a-zA-Z_$][\\w$]*)\\b",
              name: "variable.other.module.js"
            }
          ]
        },
        {
          captures: {
            1: { name: "variable.language.default.js" },
            2: { name: "variable.language.import-all.js" },
            3: { name: "variable.other.module.js" },
            4: { name: "keyword.control.js" },
            5: { name: "invalid.illegal.js" },
            6: { name: "variable.other.module-alias.js" }
          },
          match: "(?x)\n(?: \\b(default)\\b | (\\*) | \\b([a-zA-Z_$][\\w$]*)\\b)\n\\s*\n(\\b as \\b)\n\\s*\n(?: (\\b default \\b | \\*) | \\b([a-zA-Z_$][\\w$]*)\\b)"
        },
        { match: "\\*", name: "variable.language.import-all.js" },
        { match: "\\b(default)\\b", name: "variable.language.default.js" },
        { include: "#strings" },
        { include: "#comments" },
        { match: "\\b(from)\\b", name: "keyword.control.js" },
        {
          match: "\\b([a-zA-Z_$][\\w$]*)\\b(?=.*\\bfrom\\b)",
          name: "variable.other.module.js"
        },
        { match: ",", name: "meta.delimiter.object.comma.js" }
      ]
    },
    {
      captures: {
        0: { name: "meta.export.js" },
        1: { name: "keyword.control.js" },
        2: { name: "variable.language.default.js" },
        3: { name: "variable.other.module.js" }
      },
      match: "(?x)\n\\b(export)\\b\\s*\n\\b(default)\\b\\s*\n\\b((?!\\b(?:function|class|let|var|const)\\b)[a-zA-Z_$][\\w$]*)?\\b"
    },
    {
      begin: "(?<!\\.)\\b(export)(?!\\s*[:(])\\b",
      beginCaptures: { 1: { name: "keyword.control.js" } },
      end: "(?=;|\\bfunction\\b|\\bclass\\b|\\blet\\b|\\bvar\\b|\\bconst\\b|$)",
      name: "meta.export.js",
      patterns: [
        { include: "#numbers" },
        {
          begin: "(?![a-zA-Z_$0-9]){",
          beginCaptures: { 0: { name: "punctuation.definition.modules.begin.js" } },
          end: "}",
          endCaptures: { 0: { name: "punctuation.definition.modules.end.js" } },
          patterns: [
            {
              captures: {
                1: { name: "variable.language.default.js" },
                2: { name: "variable.other.module.js" },
                3: { name: "keyword.control.js" },
                4: { name: "variable.language.default.js" },
                5: { name: "invalid.illegal.js" },
                6: { name: "variable.other.module-alias.js" }
              },
              match: "(?x)\n(?: \\b(default)\\b | \\b([a-zA-Z_$][\\w$]*)\\b)\n\\s*\n(\\b as \\b)\n\\s*\n(?: \\b(default)\\b | (\\*) | \\b([a-zA-Z_$][\\w$]*)\\b)"
            },
            { include: "#comments" },
            { match: ",", name: "meta.delimiter.object.comma.js" },
            {
              match: "\\b([a-zA-Z_$][\\w$]*)\\b",
              name: "variable.other.module.js"
            }
          ]
        },
        { match: "\\*(?=.*\\bfrom\\b)", name: "variable.language.import-all.js" },
        { match: "\\b(default)\\b", name: "variable.language.default.js" },
        { include: "#strings" },
        { include: "#comments" },
        { match: "\\b(from)\\b", name: "keyword.control.js" },
        { match: "\\b([a-zA-Z_$][\\w$]*)\\b", name: "variable.other.module.js" },
        { match: ",", name: "meta.delimiter.object.comma.js" },
        { include: "#operators" }
      ]
    },
    {
      match: "(?:(?<=\\.{3})|(?<!\\.)\\b)(?<!\\$)(super|this|arguments)(?!\\s*:|\\$)\\b",
      name: "variable.language.js"
    },
    {
      begin: "(?=(\\basync\\b\\s*)?\\bfunction\\b(?!\\s*:))",
      end: "(?<=})",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=\\))",
          name: "meta.function.js",
          patterns: [{ include: "#function_innards" }]
        }
      ]
    },
    {
      begin: "(?=(\\.)?[a-zA-Z_$][\\w$]*\\s*=\\s*(\\basync\\b\\s*)?\\bfunction\\b)",
      end: "(?<=})",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?!\\G)(?<=\\))",
          name: "meta.function.js",
          patterns: [
            {
              captures: {
                1: { name: "meta.delimiter.method.period.js" },
                2: { name: "entity.name.function.js" },
                3: { name: "keyword.operator.assignment.js" }
              },
              match: "(\\.)?([a-zA-Z_$][\\w$]*)\\s*(=)\\s*"
            },
            { include: "#function_innards" }
          ]
        }
      ]
    },
    {
      begin: "(?=\\b[a-zA-Z_$][\\w$]*\\s*:\\s*(\\basync\\b\\s*)?\\bfunction\\b)",
      end: "(?<=})",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=\\))",
          name: "meta.function.json.js",
          patterns: [
            {
              captures: {
                1: { name: "entity.name.function.js" },
                2: { name: "keyword.operator.assignment.js" }
              },
              match: "\\b([a-zA-Z_$][\\w$]*)\\s*(:)\\s*"
            },
            { include: "#function_innards" }
          ]
        }
      ]
    },
    {
      begin: `(?=(('[^']*?')|("[^"]*?"))\\s*:\\s*(\\basync\\b\\s*)?\\bfunction\\b)`,
      end: "(?<=})",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=\\))",
          name: "meta.function.json.js",
          patterns: [
            {
              captures: {
                1: { name: "string.quoted.single.js" },
                2: { name: "punctuation.definition.string.begin.js" },
                3: { name: "entity.name.function.js" },
                4: { name: "punctuation.definition.string.end.js" },
                5: { name: "string.quoted.double.js" },
                6: { name: "punctuation.definition.string.begin.js" },
                7: { name: "entity.name.function.js" },
                8: { name: "punctuation.definition.string.end.js" },
                9: { name: "keyword.operator.assignment.js" }
              },
              match: `(?:((')([^']*?)('))|((")([^"]*?)(")))\\s*(:)`
            },
            { include: "#function_innards" }
          ]
        }
      ]
    },
    {
      begin: "(?=\\bconstructor\\b\\s*)",
      end: "(?<=})",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=\\))",
          name: "meta.function.js",
          patterns: [
            {
              match: "\\b(constructor)\\s*",
              name: "entity.name.function.constructor.js"
            },
            { include: "#function_innards" }
          ]
        }
      ]
    },
    {
      begin: `(?x)
(?=
  (?!
    (break|case|catch|continue|do|else|finally|for|function|if|
    return|switch|throw|try|while|with)
    [\\s\\(]
  )
  (
    \\b(get|set)            # Property getter/setter: get foo(){}
    (?:\\s+|(?=\\[))        # Followed by whitespace or square bracket
  )?+
  (                         # Method name
    \\b[a-zA-Z_$][\\w$]*    # Fixed name
    |
    \\[                     # Computed property key
      [^\\[\\]]++           # Contains at least one non-brace character
    \\]
  )
  \\s*\\(\\s*               # Start of arguments list
    (
      "[^"]*"  |            # Double-quoted string
      '[^']*'  |            # Single-quoted string
       [^"()']              # Any non-bracket or non-quote
    )*
  \\)\\s*                   # End of arguments
  {                         # Beginning of body
)`,
      end: "(?<=})",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=\\))",
          name: "meta.function.method.definition.js",
          patterns: [
            {
              captures: {
                1: {
                  name: "punctuation.definition.computed-key.begin.bracket.square.js"
                },
                2: {
                  patterns: [
                    { include: "$self" },
                    {
                      match: "[a-zA-Z_$][\\w$]*",
                      name: "variable.parameter.property.js"
                    }
                  ]
                },
                3: {
                  name: "punctuation.definition.computed-key.end.bracket.square.js"
                }
              },
              match: "(\\[)(.+)(\\])(?=\\s*\\()",
              name: "meta.computed-key.js"
            },
            {
              match: "\\b(get|set)(?=\\s*\\[.+\\]\\s*\\(|\\s+[^\\s\\[(]+\\s*\\()",
              name: "keyword.operator.$1ter.js"
            },
            { match: "\\b([a-zA-Z_$][\\w$]*)", name: "entity.name.function.js" },
            { include: "#function_params" }
          ]
        }
      ]
    },
    {
      begin: "(?x)\n(?=\n  (?<![A-Za-z0-9])\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
      end: "(?x)\n(?<=})|\n((?!\n  \\s*{|\n  \\G\\(|\n  \\G[\\w$]+|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=(=>))",
          name: "meta.function.arrow.js",
          patterns: [{ include: "#arrow_function_innards" }]
        }
      ]
    },
    {
      begin: "(?x)\n(?=\n  (\\.)?[a-zA-Z_$][\\w$]*\n  \\s*(=)\\s*\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
      end: "(?x)\n(?<=})|\n((?!\n  \\s*{|\n  \\G(\\.)?[a-zA-Z_$][\\w$]*\\s*(=)\\s*\\(|\n  \\G(\\.)?[a-zA-Z_$][\\w$]*\\s*(=)\\s*[\\w$]+|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=(=>))",
          name: "meta.function.arrow.js",
          patterns: [
            {
              captures: {
                1: { name: "meta.delimiter.method.period.js" },
                2: { name: "entity.name.function.js" },
                3: { name: "keyword.operator.assignment.js" }
              },
              match: "\\G(\\.)?([a-zA-Z_$][\\w$]*)\\s*(=)"
            },
            { include: "#arrow_function_innards" }
          ]
        }
      ]
    },
    {
      begin: "(?x)\n(?=\n  \\b[a-zA-Z_$][\\w$]*\n  \\s*:\\s*\n  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)\n  \\s*=>\n)",
      end: "(?x)\n(?<=})|\n((?!\n  \\s*{|\n  \\G[\\w$]+\\s*:|\n  \\s*/\\*|\\s*//\n)(?=\\s*\\S))",
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=(=>))",
          name: "meta.function.arrow.json.js",
          patterns: [
            {
              captures: {
                1: { name: "entity.name.function.js" },
                2: { name: "keyword.operator.assignment.js" }
              },
              match: "\\b([a-zA-Z_$][\\w$]*)\\s*(:)\\s*"
            },
            { include: "#arrow_function_innards" }
          ]
        }
      ]
    },
    {
      begin: `(?x)
(?=
  (('[^']*?')|("[^"]*?"))
  \\s*:\\s*
  ((\\(([^\\(\\)]*)?\\))|[\\w$]+)
  \\s*=>
)`,
      end: `(?x)
(?<=})|
((?!
  \\G(('[^']*?')|("[^"]*?"))|
  \\s*{|
  \\s*/\\*|\\s*//
)(?=\\s*\\S))`,
      patterns: [
        { include: "#comments" },
        { include: "#function_body" },
        {
          begin: "\\G",
          end: "(?<=(=>))",
          name: "meta.function.arrow.json.js",
          patterns: [
            {
              captures: {
                1: { name: "string.quoted.single.js" },
                2: { name: "punctuation.definition.string.begin.js" },
                3: { name: "entity.name.function.js" },
                4: { name: "punctuation.definition.string.end.js" },
                5: { name: "string.quoted.double.js" },
                6: { name: "punctuation.definition.string.begin.js" },
                7: { name: "entity.name.function.js" },
                8: { name: "punctuation.definition.string.end.js" },
                9: { name: "keyword.operator.assignment.js" }
              },
              match: `(?:((')([^']*?)('))|((")([^"]*?)(")))\\s*(:)`
            },
            { include: "#arrow_function_innards" }
          ]
        }
      ]
    },
    {
      captures: {
        0: { name: "meta.function.arrow.js" },
        1: { name: "storage.type.function.arrow.js" }
      },
      match: "(=>)"
    },
    {
      captures: {
        1: { name: "storage.type.class.js" },
        2: { name: "storage.modifier.js" },
        3: { name: "entity.other.inherited-class.js" },
        4: { name: "entity.name.type.class.js" },
        5: { name: "storage.modifier.js" },
        6: { name: "entity.other.inherited-class.js" }
      },
      match: "(?x)\n\\b(class)\n(?:\n  (?:\\s+(extends)\\s+([a-zA-Z_$][\\w$]*))\n  |\n  (?:\n    (?:\\s+([a-zA-Z_$][\\w$]*))\n    (?:\\s+(extends)\\s+([a-zA-Z_$][\\w$]*))?\n  )\n)",
      name: "meta.class.js"
    },
    {
      captures: {
        1: { name: "keyword.operator.new.js" },
        2: {
          name: "entity.name.type.instance.js",
          patterns: [{ match: "\\.", name: "meta.delimiter.property.period.js" }]
        }
      },
      match: "(new)\\s+([\\w$]+[\\w.$]*)",
      name: "meta.class.instance.constructor.js"
    },
    {
      begin: "(?<![\\w$])console(?![\\w$]|\\s*:)",
      beginCaptures: { 0: { name: "entity.name.type.object.console.js" } },
      end: "(?x)\n(?<=\\)) | (?=\n  (?! (\\s*//)|(\\s*/\\*)|(\\s*(\\.)\\s*\n    (assert|clear|debug|error|info|log|profile|profileEnd|time|timeEnd|warn)\n    \\s*\\(\n  )) \\s*\\S\n)",
      patterns: [
        { include: "#comments" },
        {
          begin: "\\s*(\\.)\\s*(\\w+)\\s*(?=\\()",
          beginCaptures: {
            1: { name: "meta.delimiter.method.period.js" },
            2: { name: "support.function.console.js" }
          },
          end: "(?<=\\))",
          name: "meta.method-call.js",
          patterns: [{ include: "#arguments" }]
        }
      ]
    },
    {
      begin: "(?<![\\w$])Math(?![\\w$]|\\s*:)",
      beginCaptures: { 0: { name: "support.class.math.js" } },
      end: "(?x)\n(?<=E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2|\\)\n) | (?=\n  (?! (\\s*//)|(\\s*/\\*)|(\\s*\\.\\s* (\n    ((abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n    expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n    round|sign|sin|sinh|sqrt|tan|tanh|trunc)\\s*\\(\n    ) | (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)(?!\\s*[\\w$(]))\n  )) \\s*\\S\n)",
      patterns: [
        { include: "#comments" },
        {
          begin: "\\s*(\\.)\\s*(\\w+)\\s*(?=\\()",
          beginCaptures: {
            1: { name: "meta.delimiter.method.period.js" },
            2: { name: "support.function.math.js" }
          },
          end: "(?<=\\))",
          name: "meta.method-call.js",
          patterns: [{ include: "#arguments" }]
        },
        {
          captures: {
            1: { name: "meta.delimiter.property.period.js" },
            2: { name: "support.constant.property.math.js" }
          },
          match: "\\s*(\\.)\\s*(\\w+)\\b"
        }
      ]
    },
    {
      begin: "(?<![\\w$])Promise(?![\\w$]|\\s*:)",
      beginCaptures: { 0: { name: "support.class.promise.js" } },
      end: "(?x)\n(?<=\\)) | (?=\n  (?! (\\s*//)|(\\s*/\\*)|(\\s*\\.\\s*(all|race|reject|resolve)\\s*\\() )\\s*\\S\n)",
      patterns: [
        { include: "#comments" },
        {
          begin: "\\s*(\\.)\\s*(\\w+)\\s*(?=\\()",
          beginCaptures: {
            1: { name: "meta.delimiter.method.period.js" },
            2: { name: "support.function.promise.js" }
          },
          end: "(?<=\\))",
          name: "meta.method-call.js",
          patterns: [{ include: "#arguments" }]
        }
      ]
    },
    { include: "#strings" },
    { include: "#comments" },
    {
      captures: {
        0: { name: "punctuation.definition.comment.html.js" },
        2: { name: "punctuation.definition.comment.html.js" }
      },
      match: "(<!--|-->)",
      name: "comment.block.html.js"
    },
    {
      match: "(?<!\\.)\\b(class|enum|function|interface)(?!\\s*:)\\b",
      name: "storage.type.js"
    },
    {
      match: "(?<!\\.)\\b(async|export|extends|implements|private|protected|public|static)(?!\\s*:)\\b",
      name: "storage.modifier.js"
    },
    { match: "(?<!\\.)\\b(let|var)(?!\\s*:)\\b", name: "storage.type.var.js" },
    {
      begin: "(?<!\\.)\\b(const)(?!\\s*:)\\b",
      beginCaptures: { 1: { name: "storage.type.const.js" } },
      end: "(\\bof\\b|\\bin\\b)|(;)|(=)|(?<![,{])\\n",
      endCaptures: {
        1: { name: "keyword.operator.$1.js" },
        2: { name: "punctuation.terminator.statement.js" },
        3: { name: "keyword.operator.assignment.js" }
      },
      patterns: [
        {
          captures: {
            2: { name: "keyword.operator.assignment.js" },
            3: { name: "constant.other.js" }
          },
          match: "([$_a-zA-Z][$_a-zA-Z0-9]*)\\s*(:)\\s*([$_a-zA-Z][$_a-zA-Z0-9]*)?"
        },
        {
          captures: { 1: { name: "constant.other.js" } },
          match: "([$_a-zA-Z][$_a-zA-Z0-9]*)"
        },
        { match: "\\.\\.\\.", name: "keyword.operator.spread.js" },
        { match: ",", name: "meta.delimiter.object.comma.js" },
        { match: "\\(|\\)", name: "meta.brace.round.js" },
        { match: "{|}", name: "meta.brace.curly.js" },
        { match: "\\[|\\]", name: "meta.brace.square.js" },
        { include: "#comments" }
      ]
    },
    {
      captures: {
        1: { name: "keyword.control.js" },
        2: { name: "storage.modifier.js" }
      },
      match: "(?<!\\.)\\b(yield)(?!\\s*:)\\b(?:\\s*(\\*))?",
      name: "meta.control.yield.js"
    },
    {
      match: "(?:(?<=\\.{3})|(?<!\\.))\\b(await)(?!\\s*:)\\b",
      name: "keyword.control.js"
    },
    {
      match: "(?<!\\.)\\b(break|catch|continue|do|else|finally|for|if|import|package|return|throw|try|while|with)(?!\\s*:)\\b",
      name: "keyword.control.js"
    },
    { include: "#switch_statement" },
    {
      match: "(?<!\\.)\\b(delete|in|of|instanceof|new|typeof|void)(?!\\s*:)\\b",
      name: "keyword.operator.$1.js"
    },
    { match: "\\.\\.\\.", name: "keyword.operator.spread.js" },
    {
      match: "(?<!\\.)\\b(true|false)(?!\\s*:)\\b",
      name: "constant.language.boolean.$1.js"
    },
    { match: "(?<!\\.)\\b(null)(?!\\s*:)\\b", name: "constant.language.null.js" },
    {
      match: "(?<!\\.)\\b(debugger)(?!\\s*:)\\b",
      name: "keyword.other.debugger.js"
    },
    {
      match: "(?x) (?<!\\$) \\b\n(AggregateError|Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Error|EvalError|Float32Array|Float64Array\n|Function|Generator|GeneratorFunction|Int16Array|Int32Array|Int8Array|InternalError|Intl|JSON|Map|Number\n|Object|Proxy|RangeError|ReferenceError|Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|SyntaxError\n|TypeError|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray|URIError|WeakMap|WeakSet)\n\\b",
      name: "support.class.js"
    },
    {
      captures: {
        1: { name: "meta.delimiter.property.period.js" },
        2: { name: "support.variable.property.js" },
        3: { name: "support.constant.js" }
      },
      match: "(?x) (\\.) \\s* (?:\n  (constructor|length|prototype) |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\n)\\b"
    },
    {
      captures: {
        1: { name: "support.variable.dom.js" },
        2: { name: "support.class.dom.js" }
      },
      match: "(?x) (?<!\\$) \\b (?:\n  (document|event|navigator|performance|screen|window|self|frames)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor)\n)\\b"
    },
    {
      captures: {
        1: { name: "meta.delimiter.property.period.js" },
        2: { name: "support.constant.dom.js" },
        3: { name: "support.variable.property.dom.js" }
      },
      match: "(?x) (\\.) \\s*\n(?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex)\n)\n\\b"
    },
    {
      match: "(?<!\\.)\\b(module|exports|__filename|__dirname|global|globalThis|process)(?!\\s*:)\\b",
      name: "support.variable.js"
    },
    { match: "\\b(Infinity|NaN|undefined)\\b", name: "constant.language.js" },
    {
      begin: "(?<=[\\[{=(?:+*,!~-]|^|return|=>|&&|\\|\\|)\\s*(/)(?![/*+?])(?=.*/)",
      beginCaptures: { 1: { name: "punctuation.definition.string.begin.js" } },
      end: "(/)([gimsuy]*)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.js" },
        2: { name: "meta.flag.regexp" }
      },
      name: "string.regexp.js",
      patterns: [{ include: "source.js.regexp" }]
    },
    {
      begin: "\\?",
      beginCaptures: { 0: { name: "keyword.operator.ternary.js" } },
      end: ":",
      endCaptures: { 0: { name: "keyword.operator.ternary.js" } },
      patterns: [{ include: "#prevent_object_keys_matching" }, { include: "$self" }]
    },
    { include: "#operators" },
    { include: "#method_calls" },
    { include: "#function_calls" },
    { include: "#numbers" },
    { include: "#objects" },
    { include: "#properties" },
    {
      match: "((?<!\\.|[\\w$])(?![_\\$]+[^A-Z0-9_$])\\$*\\b(?:[A-Z_$][A-Z0-9_$]*)\\b\\$*)",
      name: "constant.other.js"
    },
    { match: "(?<!\\$)\\b[0-9]+[\\w$]*", name: "invalid.illegal.identifier.js" },
    { match: "\\;", name: "punctuation.terminator.statement.js" },
    { match: ",", name: "meta.delimiter.object.comma.js" },
    { match: "\\.", name: "meta.delimiter.method.period.js" },
    {
      captures: {
        1: { name: "punctuation.section.scope.begin.js" },
        2: { name: "punctuation.section.scope.end.js" }
      },
      match: "({)(})"
    },
    {
      begin: "{",
      beginCaptures: { 0: { name: "meta.brace.curly.js" } },
      end: "}",
      endCaptures: { 0: { name: "meta.brace.curly.js" } },
      patterns: [{ include: "$self" }]
    },
    {
      begin: "\\(",
      beginCaptures: { 0: { name: "meta.brace.round.js" } },
      end: "\\)",
      endCaptures: { 0: { name: "meta.brace.round.js" } },
      patterns: [{ include: "$self" }]
    },
    { match: "\\[|\\]", name: "meta.brace.square.js" },
    { match: "\\A#!.*$", name: "comment.line.shebang.js" }
  ],
  repository: {
    arguments: {
      patterns: [
        {
          begin: "\\(",
          beginCaptures: {
            0: { name: "punctuation.definition.arguments.begin.bracket.round.js" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.bracket.round.js" }
          },
          name: "meta.arguments.js",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    arrow_function_innards: {
      patterns: [
        { match: "=>", name: "storage.type.function.arrow.js" },
        { include: "#function_params" },
        {
          captures: {
            0: { name: "meta.parameters.js" },
            1: { name: "variable.parameter.function.js" }
          },
          match: "([a-zA-Z_$][\\w$]*)(?=\\s*=>)"
        },
        {
          captures: {
            0: { name: "meta.parameters.js" },
            1: { name: "invalid.illegal.identifier.js" }
          },
          match: "(\\d[\\w$]*)"
        }
      ]
    },
    comments: {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.comment.begin.js" },
            2: { name: "punctuation.definition.comment.end.js" }
          },
          match: "(/\\*)(\\*/)",
          name: "comment.block.empty.js"
        },
        {
          begin: "/\\*\\*",
          beginCaptures: { 0: { name: "punctuation.definition.comment.begin.js" } },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.js" } },
          name: "comment.block.documentation.js",
          patterns: [{ include: "source.jsdoc" }]
        },
        {
          begin: "/\\*",
          beginCaptures: { 0: { name: "punctuation.definition.comment.begin.js" } },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.js" } },
          name: "comment.block.js"
        },
        {
          begin: "//",
          beginCaptures: { 0: { name: "punctuation.definition.comment.js" } },
          end: "$",
          name: "comment.line.double-slash.js"
        }
      ]
    },
    function_body: {
      patterns: [
        {
          begin: "{",
          beginCaptures: {
            0: {
              name: "punctuation.definition.function.body.begin.bracket.curly.js"
            }
          },
          end: "}",
          endCaptures: {
            0: {
              name: "punctuation.definition.function.body.end.bracket.curly.js"
            }
          },
          patterns: [{ include: "$self" }]
        }
      ]
    },
    function_calls: {
      patterns: [
        {
          begin: "([\\w$]+)\\s*(?=\\()",
          beginCaptures: {
            1: {
              patterns: [
                {
                  match: "(?x)\n\\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|\ndecodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|\nrequire|set(Interval|Timeout)|clear(Interval|Timeout))\\b",
                  name: "support.function.js"
                },
                { match: "[a-zA-Z_$][\\w$]*", name: "entity.name.function.js" },
                { match: "\\d[\\w$]*", name: "invalid.illegal.identifier.js" }
              ]
            }
          },
          end: "(?<=\\))",
          name: "meta.function-call.js",
          patterns: [{ include: "#arguments" }]
        }
      ]
    },
    function_innards: {
      patterns: [
        {
          captures: {
            1: { name: "storage.modifier.async.js" },
            2: { name: "storage.type.function.js" },
            3: { name: "storage.modifier.generator.js" }
          },
          match: "(?:\\b(async)\\b\\s*)?\\b(function)\\b(?:\\s*(\\*))?"
        },
        {
          match: "[a-zA-Z_$][\\w$]*(?=\\s*\\()",
          name: "entity.name.function.js"
        },
        { include: "#function_params" },
        { include: "#comments" }
      ]
    },
    function_params: {
      patterns: [
        {
          begin: "\\(",
          beginCaptures: {
            0: {
              name: "punctuation.definition.parameters.begin.bracket.round.js"
            }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.parameters.end.bracket.round.js" }
          },
          name: "meta.parameters.js",
          patterns: [
            {
              captures: {
                1: { name: "keyword.operator.spread.js" },
                2: { name: "variable.parameter.rest.function.js" }
              },
              match: "(\\.\\.\\.)([a-zA-Z_$][\\w$]*)"
            },
            { include: "$self" },
            { match: "[a-zA-Z_$][\\w$]*", name: "variable.parameter.function.js" }
          ]
        }
      ]
    },
    interpolated_js: {
      patterns: [
        {
          begin: "\\${",
          captures: { 0: { name: "punctuation.section.embedded.js" } },
          end: "}",
          name: "source.js.embedded.source",
          patterns: [
            {
              begin: "{",
              beginCaptures: { 0: { name: "meta.brace.curly.js" } },
              end: "}",
              endCaptures: { 0: { name: "meta.brace.curly.js" } },
              patterns: [{ include: "$self" }]
            },
            { include: "$self" }
          ]
        }
      ]
    },
    method_calls: {
      patterns: [
        {
          begin: "(\\.)\\s*([\\w$]+)\\s*(?=\\()",
          beginCaptures: {
            1: { name: "meta.delimiter.method.period.js" },
            2: {
              patterns: [
                {
                  match: "(?x)\n\\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\nReadystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\nBefore(cut|deactivate|unload|update|paste|print|editfocus|activate)|\nBlur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\nChange|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\nDatasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\nDragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\nErrorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b",
                  name: "support.function.event-handler.js"
                },
                {
                  match: "(?x)\n\\b(catch|finally|then|shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\nscrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\nsup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|\nMonth|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\nTime|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\nsavePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\ncontextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\ncreateEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\ntest|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\nuntaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|stringify|\nprint|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\nfileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\nforward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\nabort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\nreleaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\nTime|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\nAttention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\nmoveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b",
                  name: "support.function.js"
                },
                {
                  match: "(?x)\n\\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\nappendChild|appendData|before|blur|canPlayType|captureStream|\ncaretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\ncloneContents|cloneNode|cloneRange|close|closest|collapse|\ncompareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\nconvertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\ncreateAttributeNS|createCaption|createCDATASection|createComment|\ncreateContextualFragment|createDocument|createDocumentFragment|\ncreateDocumentType|createElement|createElementNS|createEntityReference|\ncreateEvent|createExpression|createHTMLDocument|createNodeIterator|\ncreateNSResolver|createProcessingInstruction|createRange|createShadowRoot|\ncreateTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\ndeleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\ndeleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\nenableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\nexitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\ngetAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\ngetAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\ngetClientRects|getContext|getDestinationInsertionPoints|getElementById|\ngetElementsByClassName|getElementsByName|getElementsByTagName|\ngetElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\ngetVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\nhasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\ninsertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\ninsertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\nisPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\nlookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\nmoveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\nparentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\npreviousSibling|probablySupportsContext|queryCommandEnabled|\nqueryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\nquerySelector|querySelectorAll|registerContentHandler|registerElement|\nregisterProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\nremoveAttributeNode|removeAttributeNS|removeChild|removeEventListener|\nremoveItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\nrequestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\nscrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\nsetAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\nsetCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\nsetRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\nslice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\nsubmit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\ntoDataURL|toggle|toString|values|write|writeln)\\b",
                  name: "support.function.dom.js"
                },
                { match: "[a-zA-Z_$][\\w$]*", name: "entity.name.function.js" },
                { match: "\\d[\\w$]*", name: "invalid.illegal.identifier.js" }
              ]
            }
          },
          end: "(?<=\\))",
          name: "meta.method-call.js",
          patterns: [{ include: "#arguments" }]
        }
      ]
    },
    numbers: {
      patterns: [
        {
          captures: { 0: { patterns: [{ include: "#numeric_separators" }] } },
          match: "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+(?:_[0-9a-fA-F]+)*n?\\b(?!\\$)",
          name: "constant.numeric.hex.js"
        },
        {
          captures: { 0: { patterns: [{ include: "#numeric_separators" }] } },
          match: "\\b(?<!\\$)0(b|B)[01]+(?:_[01]+)*n?\\b(?!\\$)",
          name: "constant.numeric.binary.js"
        },
        {
          captures: { 0: { patterns: [{ include: "#numeric_separators" }] } },
          match: "\\b(?<!\\$)0(o|O)?[0-7]+(?:_[0-7]+)*n?\\b(?!\\$)",
          name: "constant.numeric.octal.js"
        },
        {
          captures: { 0: { patterns: [{ include: "#numeric_separators" }] } },
          match: "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(?:_[0-9]+)*\\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*\\b)|   # 1.1E+3\n  (?:\\b[0-9]+(?:_[0-9]+)*\\.[eE][+-]?[0-9]+(?:_[0-9]+)*\\b)|                     # 1.E+3\n  (?:\\B\\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*\\b)|                     # .1E+3\n  (?:\\b[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*\\b)|                        # 1E+3\n  (?:\\b[0-9]+(?:_[0-9]+)*\\.[0-9]+(?:_[0-9]+)*\\b)|                              # 1.1\n  (?:\\b[0-9]+(?:_[0-9]+)*\\.\\B)|                                                # 1.\n  (?:\\B\\.[0-9]+(?:_[0-9]+)*\\b)|                                                # .1\n  (?:\\b[0-9]+(?:_[0-9]+)*n?\\b(?!\\.))                                           # 1n\n)(?!\\$)",
          name: "constant.numeric.decimal.js"
        }
      ]
    },
    numeric_separators: {
      patterns: [
        {
          captures: {
            1: { name: "meta.delimiter.numeric.separator.js" },
            2: { name: "meta.delimiter.decimal.period.js" }
          },
          match: "(_)|(\\.)"
        }
      ]
    },
    objects: {
      patterns: [
        {
          match: "[A-Z][A-Z0-9_$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)",
          name: "constant.other.object.js"
        },
        {
          match: "[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)",
          name: "variable.other.object.js"
        }
      ]
    },
    operators: {
      patterns: [
        {
          match: "%=|\\+=|-=|\\*=|(?<!\\()/=",
          name: "keyword.operator.assignment.compound.js"
        },
        {
          match: "&=|\\^=|<<=|>>=|>>>=|\\|=",
          name: "keyword.operator.assignment.compound.bitwise.js"
        },
        { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.js" },
        {
          match: "!==|!=|<=|>=|===|==|<|>",
          name: "keyword.operator.comparison.js"
        },
        { match: "&&|!!|!|\\|\\|", name: "keyword.operator.logical.js" },
        { match: "&|\\||\\^|~", name: "keyword.operator.bitwise.js" },
        { match: "=|:", name: "keyword.operator.assignment.js" },
        { match: "--", name: "keyword.operator.decrement.js" },
        { match: "\\+\\+", name: "keyword.operator.increment.js" },
        { match: "%|\\*|/|-|\\+", name: "keyword.operator.js" }
      ]
    },
    prevent_object_keys_matching: {
      patterns: [
        {
          captures: { 1: { patterns: [{ include: "$self" }] } },
          match: "(\\w+)(?=\\s*:)"
        }
      ]
    },
    properties: {
      patterns: [
        {
          captures: {
            1: { name: "meta.delimiter.property.period.js" },
            2: { name: "constant.other.object.property.js" }
          },
          match: "(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)"
        },
        {
          captures: {
            1: { name: "meta.delimiter.property.period.js" },
            2: { name: "variable.other.object.property.js" }
          },
          match: "(\\.)\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\.\\s*[a-zA-Z_$]\\w*)"
        },
        {
          captures: {
            1: { name: "meta.delimiter.property.period.js" },
            2: { name: "constant.other.property.js" }
          },
          match: "(\\.)\\s*([A-Z][A-Z0-9_$]*\\b\\$*)"
        },
        {
          captures: {
            1: { name: "meta.delimiter.property.period.js" },
            2: { name: "variable.other.property.js" }
          },
          match: "(\\.)\\s*(\\$*[a-zA-Z_$][\\w$]*)"
        },
        {
          captures: {
            1: { name: "meta.delimiter.property.period.js" },
            2: { name: "invalid.illegal.identifier.js" }
          },
          match: "(\\.)\\s*([0-9][\\w$]*)"
        }
      ]
    },
    string_escapes: {
      patterns: [
        {
          match: `\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^'"]*`,
          name: "invalid.illegal.unicode-escape.js"
        },
        {
          captures: {
            1: {
              name: "punctuation.definition.unicode-escape.begin.bracket.curly.js"
            },
            2: {
              patterns: [
                {
                  match: "[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}",
                  name: "invalid.illegal.unicode-escape.js"
                }
              ]
            },
            3: {
              name: "punctuation.definition.unicode-escape.end.bracket.curly.js"
            }
          },
          match: "\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))",
          name: "constant.character.escape.js"
        },
        {
          match: "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
          name: "constant.character.escape.js"
        }
      ]
    },
    strings: {
      patterns: [
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          name: "string.quoted.single.js",
          patterns: [{ include: "#string_escapes" }]
        },
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          name: "string.quoted.double.js",
          patterns: [{ include: "#string_escapes" }]
        },
        {
          begin: "((\\w+)?(html|HTML|Html))\\s*(`)",
          beginCaptures: {
            1: { name: "entity.name.function.js" },
            4: { name: "punctuation.definition.string.begin.js" }
          },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          name: "string.quoted.template.html.js",
          patterns: [
            { include: "#string_escapes" },
            { include: "#interpolated_js" },
            { include: "text.html.basic" }
          ]
        },
        {
          begin: "(?<=innerHTML)\\s*(\\+?=)\\s*(?=`)",
          beginCaptures: { 1: { name: "keyword.operator.assignment.js" } },
          contentName: "string.quoted.template.html.js",
          end: "(?<=`)",
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          patterns: [
            {
              begin: "`",
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.js" }
              },
              end: "`",
              endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
              patterns: [
                { include: "#string_escapes" },
                { include: "#interpolated_js" },
                { include: "text.html.basic" }
              ]
            }
          ]
        },
        {
          begin: "(Relay\\.QL|gql)\\s*(`)",
          beginCaptures: {
            1: { name: "entity.name.function.js" },
            2: { name: "punctuation.definition.string.begin.js" }
          },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          name: "string.quoted.template.graphql.js",
          patterns: [
            { include: "#string_escapes" },
            { include: "#interpolated_js" },
            { include: "source.graphql" }
          ]
        },
        {
          begin: "(sql|SQL|Sql)\\s*(`)",
          beginCaptures: {
            1: { name: "entity.name.function.js" },
            2: { name: "punctuation.definition.string.begin.js" }
          },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          name: "string.quoted.template.sql.js",
          patterns: [
            { include: "#string_escapes" },
            { include: "#interpolated_js" },
            { include: "source.sql" }
          ]
        },
        {
          begin: "`",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.js" } },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.js" } },
          name: "string.quoted.template.js",
          patterns: [
            { include: "#string_escapes" },
            { include: "#interpolated_js" }
          ]
        }
      ]
    },
    switch_statement: {
      patterns: [
        {
          begin: "\\bswitch\\b",
          beginCaptures: { 0: { name: "keyword.control.switch.js" } },
          end: "}",
          endCaptures: {
            0: {
              name: "punctuation.definition.section.switch-block.end.bracket.curly.js"
            }
          },
          name: "meta.switch-statement.js",
          patterns: [
            {
              begin: "\\(",
              beginCaptures: {
                0: {
                  name: "punctuation.definition.switch-expression.begin.bracket.round.js"
                }
              },
              end: "\\)",
              endCaptures: {
                0: {
                  name: "punctuation.definition.switch-expression.end.bracket.round.js"
                }
              },
              patterns: [{ include: "$self" }]
            },
            {
              begin: "{",
              beginCaptures: {
                0: {
                  name: "punctuation.definition.section.switch-block.begin.bracket.curly.js"
                }
              },
              end: "(?=})",
              patterns: [
                {
                  begin: "\\bcase\\b",
                  beginCaptures: { 0: { name: "keyword.control.case.js" } },
                  end: ":",
                  endCaptures: {
                    0: {
                      name: "punctuation.definition.section.case-statement.js"
                    }
                  },
                  patterns: [
                    { include: "#prevent_object_keys_matching" },
                    { include: "$self" }
                  ]
                },
                {
                  captures: {
                    1: { name: "keyword.control.default.js" },
                    2: {
                      name: "punctuation.definition.section.case-statement.js"
                    }
                  },
                  match: "(?:^\\s*)?\\b(default)\\b\\s*(:)"
                },
                { include: "$self" }
              ]
            }
          ]
        }
      ]
    }
  },
  scopeName: "source.js"
};
var source_js_default = grammar13;

// node_modules/@wooorm/starry-night/lang/source.json.js
var grammar14 = {
  extensions: [
    ".4dform",
    ".4dproject",
    ".avsc",
    ".epj",
    ".geojson",
    ".gltf",
    ".har",
    ".ice",
    ".ipynb",
    ".json",
    ".json",
    ".json",
    ".json-tmlanguage",
    ".jsonl",
    ".maxhelp",
    ".maxpat",
    ".maxproj",
    ".mcmeta",
    ".mxt",
    ".pat",
    ".sarif",
    ".tfstate",
    ".tfstate.backup",
    ".topojson",
    ".webapp",
    ".webmanifest",
    ".yy",
    ".yyp"
  ],
  names: [
    "ecere-projects",
    "geojson",
    "ipython-notebook",
    "json",
    "jsonl",
    "jupyter-notebook",
    "max",
    "max/msp",
    "maxmsp",
    "oasv2-json",
    "oasv3-json",
    "sarif",
    "topojson"
  ],
  patterns: [{ include: "#main" }],
  repository: {
    array: {
      begin: "\\[",
      beginCaptures: {
        0: { name: "punctuation.definition.block.array.begin.json" }
      },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.definition.block.array.end.json" } },
      name: "meta.block.array.json",
      patterns: [{ include: "#main" }]
    },
    boolean: {
      match: "(?<=^|[,:\\s\\[])(true|false)(?=$|[,\\s}\\]])",
      name: "constant.language.boolean.$1.json"
    },
    delimiters: {
      patterns: [
        {
          match: '(?<=")\\s*:',
          name: "punctuation.separator.key-value.colon.json"
        },
        { match: ",(?!\\s*[}\\]])", name: "punctuation.separator.comma.json" }
      ]
    },
    escapes: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.escape.backslash.json" } },
          match: '(\\\\)["\\\\/bfnrt]',
          name: "constant.character.escape.json"
        },
        {
          captures: { 1: { name: "punctuation.definition.escape.backslash.json" } },
          match: "(\\\\)u[0-9A-Fa-f]{4}",
          name: "constant.character.escape.unicode.json"
        },
        { match: "\\\\.", name: "invalid.illegal.unrecognised-escape.json" }
      ]
    },
    invalid: {
      match: "\\S[^}\\]]*",
      name: "invalid.illegal.unexpected-character.json"
    },
    key: {
      captures: {
        1: { name: "punctuation.definition.key.start.json" },
        2: { patterns: [{ include: "#escapes" }] },
        3: { name: "punctuation.definition.key.end.json" }
      },
      match: '(")((?:[^\\\\"]|\\\\.)*+)(")(?=\\s*:)',
      name: "entity.name.tag.key.json"
    },
    main: {
      patterns: [
        { include: "#object" },
        { include: "#key" },
        { include: "#array" },
        { include: "#string" },
        { include: "#number" },
        { include: "#boolean" },
        { include: "#null" },
        { include: "#delimiters" },
        { include: "#invalid" }
      ]
    },
    null: {
      match: "(?<=^|[,:\\s\\[])null(?=$|[,\\s}\\]])",
      name: "constant.language.null.json"
    },
    number: {
      patterns: [
        {
          match: "-?0\\d+(?:\\.\\d+)?(?:[eE][-+]?[0-9]+)?",
          name: "invalid.illegal.leading-zero.json"
        },
        {
          match: "-?\\d+(?:\\.\\d+)?(?:[eE][-+]?[0-9]+)?",
          name: "constant.numeric.json"
        }
      ]
    },
    object: {
      begin: "{",
      beginCaptures: {
        0: { name: "punctuation.definition.block.object.begin.json" }
      },
      end: "}",
      endCaptures: { 0: { name: "punctuation.definition.block.object.end.json" } },
      name: "meta.block.object.json",
      patterns: [{ include: "#main" }]
    },
    string: {
      captures: {
        1: { name: "punctuation.definition.string.begin.json" },
        2: { patterns: [{ include: "#escapes" }] },
        3: { name: "punctuation.definition.string.end.json" }
      },
      match: '(")((?:[^\\\\"]|\\\\.)*+)(")(?!\\s*:)',
      name: "string.quoted.double.json"
    }
  },
  scopeName: "source.json"
};
var source_json_default = grammar14;

// node_modules/@wooorm/starry-night/lang/source.kotlin.js
var grammar15 = {
  extensions: [".gradle.kts", ".kt", ".ktm", ".kts"],
  names: ["gradle-kotlin-dsl", "kotlin"],
  patterns: [
    { include: "#comments" },
    { include: "#package" },
    { include: "#imports" },
    { include: "#code" }
  ],
  repository: {
    annotations: {
      patterns: [
        {
          match: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:\\s*?[a-zA-Z_]\\w*",
          name: "meta.annotation.kotlin"
        },
        {
          begin: "@[a-zA-Z_]\\w*\\s*(\\()",
          beginCaptures: {
            1: { name: "punctuation.definition.arguments.begin.kotlin" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.kotlin" }
          },
          name: "meta.annotation.kotlin",
          patterns: [
            { include: "#code" },
            { match: ",", name: "punctuation.seperator.property.kotlin" }
          ]
        },
        { match: "@[a-zA-Z_]\\w*", name: "meta.annotation.kotlin" }
      ]
    },
    braces: {
      patterns: [
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.section.group.begin.kotlin" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.section.group.end.kotlin" } },
          name: "meta.block.kotlin",
          patterns: [{ include: "#code" }]
        }
      ]
    },
    brackets: {
      patterns: [
        {
          begin: "\\[",
          beginCaptures: {
            0: { name: "punctuation.section.brackets.begin.kotlin" }
          },
          end: "\\]",
          endCaptures: { 0: { name: "punctuation.section.brackets.end.kotlin" } },
          name: "meta.brackets.kotlin",
          patterns: [{ include: "#code" }]
        }
      ]
    },
    "builtin-functions": {
      patterns: [
        {
          captures: { 1: { name: "support.function.kotlin" } },
          match: "\\b(apply|also|let|run|takeIf|takeWhile|takeUnless|with|print|println)\\b\\s*(?={|\\()"
        },
        {
          captures: { 1: { name: "support.function.kotlin" } },
          match: "\\b(arrayListOf|mutableListOf|listOf|mutableMapOf|mapOf|mutableSetOf|setOf)\\b\\s*(?={|\\()"
        }
      ]
    },
    "class-ident": {
      patterns: [
        { match: "\\b[A-Z_]\\w*\\b", name: "entity.name.type.class.kotlin" }
      ]
    },
    "class-literal": {
      patterns: [
        {
          begin: "(?=\\b(?:(?:(?:data|value)\\s+)?class|(?:data\\s+)?object|(?:(?:fun|value)\\s+)?interface)\\s+\\w+)\\b",
          end: "(?=\\}|$)",
          name: "meta.class.kotlin",
          patterns: [
            { include: "#keywords" },
            {
              begin: "\\b((?:(?:data|value)\\s+)?class|(?:data\\s+)?object|(?:(?:fun|value)\\s+)?interface)\\b\\s+(\\w+)",
              beginCaptures: {
                1: { name: "storage.modifier.kotlin" },
                2: { name: "entity.name.class.kotlin" }
              },
              end: "(?=\\(|\\{|$)",
              patterns: [
                { include: "#comments" },
                { include: "#annotations" },
                { include: "#types" }
              ]
            },
            {
              begin: "(\\()",
              beginCaptures: {
                0: { name: "punctuation.section.group.begin.kotlin" },
                1: { name: "punctuation.definition.parameters.begin.kotlin" }
              },
              end: "(\\))",
              endCaptures: {
                0: { name: "punctuation.section.group.end.kotlin" },
                1: { name: "punctuation.definition.parameters.end.kotlin" }
              },
              name: "meta.parameters.kotlin",
              patterns: [
                { include: "#class-parameter-list" },
                { include: "#comments" }
              ]
            },
            {
              begin: "\\{",
              beginCaptures: {
                0: { name: "punctuation.section.group.begin.kotlin" }
              },
              end: "\\}",
              endCaptures: { 0: { name: "punctuation.section.group.end.kotlin" } },
              name: "meta.block.kotlin",
              patterns: [{ include: "#code" }]
            }
          ]
        }
      ],
      repository: {
        "class-parameter-list": {
          patterns: [
            { include: "#generic" },
            { include: "#annotations" },
            { include: "#keywords" },
            {
              captures: {
                1: { name: "variable.parameter.function.kotlin" },
                2: { name: "keyword.operator.declaration.kotlin" }
              },
              match: "(\\w+)\\s*(:)"
            },
            { match: ",", name: "punctuation.seperator.kotlin" },
            { include: "#types" },
            { include: "#literals" }
          ]
        }
      }
    },
    code: {
      patterns: [
        { include: "#comments" },
        { include: "#annotations" },
        { include: "#parens" },
        { include: "#braces" },
        { include: "#brackets" },
        { include: "#class-literal" },
        { include: "#literal-functions" },
        { include: "#literals" },
        { include: "#keywords" },
        { include: "#types" },
        { include: "#operators" },
        { include: "#constants" },
        { include: "#punctuations" },
        { include: "#builtin-functions" }
      ]
    },
    comments: {
      patterns: [
        { include: "#inline" },
        {
          begin: "/\\*",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.kotlin" }
          },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.kotlin" } },
          name: "comment.block.kotlin",
          patterns: [{ include: "#nested" }]
        }
      ],
      repository: {
        inline: {
          patterns: [
            {
              captures: {
                0: { name: "punctuation.definition.comment.kotlin" },
                1: { name: "comment.line.double-slash.kotlin" }
              },
              match: "(//).*$\\n?"
            }
          ]
        },
        nested: {
          patterns: [
            { begin: "/\\*", end: "\\*/", patterns: [{ include: "#nested" }] }
          ]
        }
      }
    },
    constants: {
      patterns: [
        { match: "\\b(class)\\b", name: "constant.language.kotlin" },
        { match: "\\b(this|super)\\b", name: "variable.language.kotlin" }
      ]
    },
    generic: {
      patterns: [
        {
          begin: "(?=\\<(?:[A-Z_]|\\*|in|out))",
          end: "(?<=\\>)(?!\\>)",
          patterns: [
            { match: "<", name: "punctuation.bracket.angle.begin.kotlin" },
            { match: ">", name: "punctuation.bracket.angle.end.kotlin" },
            { match: "\\*", name: "entity.name.type.generic.wildcard.kotlin" },
            { include: "#generic-parameter-list" },
            { match: ",", name: "punctuation.seperator.kotlin" }
          ]
        }
      ],
      repository: {
        "generic-parameter-list": {
          patterns: [
            { include: "#annotations" },
            {
              match: "\\b(in|out)\\b",
              name: "storage.modifier.generic.variance.kotlin"
            },
            { include: "#built-in-types" },
            { include: "#class-ident" },
            { include: "#generic" },
            { include: "#operators" }
          ]
        }
      }
    },
    imports: {
      patterns: [
        {
          captures: {
            1: { name: "keyword.other.import.kotlin" },
            2: { name: "storage.modifier.import.kotlin" },
            3: { name: "keyword.other.kotlin" },
            4: { name: "entity.name.type" }
          },
          match: "^\\s*(import)\\s+((?:[`][^$`]+[`]|[^` $.]+)(?:\\.(?:[`][^$`]+[`]|[^` $.]+))*)(?:\\s+(as)\\s+([`][^$`]+[`]|[^` $.]+))?",
          name: "meta.import.kotlin"
        }
      ]
    },
    keywords: {
      patterns: [
        { match: "(\\!in|\\!is|as\\?)\\b", name: "keyword.operator.kotlin" },
        { match: "\\b(in|is|as|assert)\\b", name: "keyword.operator.kotlin" },
        { match: "\\b(val|var)\\b", name: "storage.type.kotlin" },
        { match: "\\b(\\_)\\b", name: "punctuation.definition.variable.kotlin" },
        {
          match: "\\b(tailrec|operator|infix|typealias|reified|copy(?=\\s+fun|\\s+var))\\b",
          name: "storage.type.kotlin"
        },
        {
          match: "\\b(out|in|yield|typealias|override)\\b",
          name: "storage.modifier.kotlin"
        },
        {
          match: "\\b(?<![+-/%*=(,]\\s)(inline|inner|external|public|private|protected|internal|abstract|final|sealed|enum|open|annotation|expect|actual|const|lateinit)(?=\\s(?!(?:\\s*)(?:[+-/%*=:).,]|$)))\\b",
          name: "storage.modifier.kotlin"
        },
        { match: "\\b(vararg(?=\\s+\\w+:))\\b", name: "storage.modifier.kotlin" },
        {
          match: "\\b(suspend(?!\\s*[\\(]?\\s*\\{))\\b",
          name: "storage.modifier.kotlin"
        },
        {
          match: "\\b(try|catch|finally|throw)\\b",
          name: "keyword.control.catch-exception.kotlin"
        },
        {
          match: "\\b(if|else|when)\\b",
          name: "keyword.control.conditional.kotlin"
        },
        {
          match: "\\b(while|for|do|return|break|continue)\\b",
          name: "keyword.control.kotlin"
        },
        {
          match: "\\b(constructor|init)\\b",
          name: "entity.name.function.constructor"
        },
        { match: "\\b(companion|object)\\b", name: "storage.type.kotlin" }
      ]
    },
    "literal-functions": {
      patterns: [
        {
          begin: "(?=\\b(?:fun)\\b)",
          end: "(?<=$|=|\\})",
          name: "meta.function.kotlin",
          patterns: [
            { include: "#keywords" },
            {
              begin: "\\bfun\\b",
              beginCaptures: { 0: { name: "keyword.other.kotlin" } },
              end: "(?=\\()",
              patterns: [
                { include: "#generic" },
                {
                  captures: {
                    0: { name: "entity.name.function.kotlin" },
                    1: { name: "string.quoted.backtick.kotlin" }
                  },
                  match: "(`[^`]*`)"
                },
                {
                  captures: { 2: { name: "entity.name.function.kotlin" } },
                  match: "([\\.<\\?>\\w]+\\.)?(\\w+)"
                },
                { include: "#types" }
              ]
            },
            {
              begin: "(\\()",
              beginCaptures: {
                0: { name: "punctuation.section.group.begin.kotlin" },
                1: { name: "punctuation.definition.parameters.begin.kotlin" }
              },
              end: "(\\))",
              endCaptures: {
                0: { name: "punctuation.section.group.end.kotlin" },
                1: { name: "punctuation.definition.parameters.end.kotlin" }
              },
              name: "meta.parameters.kotlin",
              patterns: [{ include: "#function-parameter-list" }]
            },
            { match: "=", name: "keyword.operator.single-expression.kotlin" },
            {
              begin: "\\{",
              beginCaptures: {
                0: { name: "punctuation.section.group.begin.kotlin" }
              },
              end: "\\}",
              endCaptures: { 0: { name: "punctuation.section.group.end.kotlin" } },
              name: "meta.block.kotlin",
              patterns: [{ include: "#code" }]
            },
            { include: "#return-type" }
          ]
        }
      ],
      repository: {
        "function-parameter-list": {
          patterns: [
            { include: "#comments" },
            { include: "#annotations" },
            { include: "#keywords" },
            {
              captures: {
                1: { name: "variable.parameter.function.kotlin" },
                2: { name: "keyword.operator.declaration.kotlin" }
              },
              match: "(\\w+)\\s*(:)"
            },
            { match: ",", name: "punctuation.seperator.kotlin" },
            { include: "#types" }
          ]
        },
        "return-type": {
          patterns: [
            {
              begin: "(?<=\\))\\s*(:)(?=\\s*\\S)",
              end: "(?<![:|&])(?=$|^|[={};,]|//)",
              name: "meta.return.type.kotlin",
              patterns: [{ include: "#types" }]
            }
          ]
        }
      }
    },
    literals: {
      patterns: [
        { include: "#boolean" },
        { include: "#numeric" },
        { include: "#string" },
        { include: "#null" }
      ],
      repository: {
        boolean: {
          patterns: [
            {
              match: "\\b(true|false)\\b",
              name: "constant.language.boolean.kotlin"
            }
          ]
        },
        null: {
          patterns: [
            { match: "\\b(null)\\b", name: "constant.language.null.kotlin" }
          ]
        },
        numeric: {
          patterns: [
            {
              match: "\\b(0(x|X)[0-9A-Fa-f_]*)([LuU]|[uU]L)?\\b",
              name: "constant.numeric.hex.kotlin"
            },
            {
              match: "\\b(0(b|B)[0-1_]*)([LuU]|[uU]L)?\\b",
              name: "constant.numeric.binary.kotlin"
            },
            {
              match: "\\b([0-9][0-9_]*\\.[0-9][0-9_]*[fFL]?)\\b",
              name: "constant.numeric.float.kotlin"
            },
            {
              match: "\\b([0-9][0-9_]*([fFLuU]|[uU]L)?)\\b",
              name: "constant.numeric.integer.kotlin"
            }
          ]
        },
        string: {
          patterns: [
            {
              begin: '"""',
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.kotlin" }
              },
              end: '"""(?!")',
              endCaptures: {
                0: { name: "punctuation.definition.string.end.kotlin" }
              },
              name: "string.quoted.triple.kotlin",
              patterns: [{ include: "#raw-string-content" }]
            },
            {
              begin: `(?!')"`,
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.kotlin" }
              },
              end: '"',
              endCaptures: {
                0: { name: "punctuation.definition.string.end.kotlin" }
              },
              name: "string.quoted.double.kotlin",
              patterns: [{ include: "#string-content" }]
            },
            {
              begin: "'",
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.kotlin" }
              },
              end: "'",
              endCaptures: {
                0: { name: "punctuation.definition.string.end.kotlin" }
              },
              name: "string.quoted.single.kotlin",
              patterns: [{ include: "#string-content" }]
            }
          ],
          repository: {
            "raw-string-content": {
              patterns: [
                {
                  begin: "\\$(\\{)",
                  beginCaptures: {
                    1: { name: "punctuation.section.block.begin.kotlin" }
                  },
                  end: "\\}",
                  endCaptures: {
                    0: { name: "punctuation.section.block.end.kotlin" }
                  },
                  name: "entity.string.template.element.kotlin",
                  patterns: [{ include: "#code" }]
                },
                {
                  match: "\\$[a-zA-Z_]\\w*",
                  name: "entity.string.template.element.kotlin"
                }
              ]
            },
            "string-content": {
              patterns: [
                {
                  match: `\\\\[0\\\\tnr"']`,
                  name: "constant.character.escape.kotlin"
                },
                {
                  match: "\\\\(x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|.)",
                  name: "constant.character.escape.unicode.kotlin"
                },
                {
                  begin: "\\$(\\{)",
                  beginCaptures: {
                    1: { name: "punctuation.section.block.begin.kotlin" }
                  },
                  end: "\\}",
                  endCaptures: {
                    0: { name: "punctuation.section.block.end.kotlin" }
                  },
                  name: "entity.string.template.element.kotlin",
                  patterns: [{ include: "#code" }]
                },
                {
                  match: "\\$[a-zA-Z_]\\w*",
                  name: "entity.string.template.element.kotlin"
                }
              ]
            }
          }
        }
      }
    },
    "object-literal": {
      patterns: [
        {
          begin: "(?=\\b(?:object)\\b((\\s*:\\s*)|\\s+)\\w+)",
          end: "(?=\\}|$)",
          name: "meta.class.kotlin",
          patterns: [
            { include: "#annotation" },
            {
              begin: "\\b(object)\\b\\s*(:)\\s*(\\w+)",
              beginCaptures: {
                1: { name: "storage.modifier.kotlin" },
                2: { name: "keyword.operator.declaration.kotlin" },
                3: { name: "entity.name.class.kotlin" }
              },
              end: "(?=\\(|\\{|$)",
              patterns: [
                { include: "#comments" },
                { include: "#annotations" },
                { include: "#types" }
              ]
            },
            {
              begin: "(\\()",
              beginCaptures: {
                0: { name: "punctuation.section.group.begin.kotlin" },
                1: { name: "punctuation.definition.parameters.begin.kotlin" }
              },
              end: "(\\))",
              endCaptures: {
                0: { name: "punctuation.section.group.end.kotlin" },
                1: { name: "punctuation.definition.parameters.end.kotlin" }
              },
              name: "meta.parameters.kotlin",
              patterns: [
                { include: "#comments" },
                { include: "#class-parameter-list" }
              ]
            },
            {
              begin: "\\{",
              beginCaptures: {
                0: { name: "punctuation.section.group.begin.kotlin" }
              },
              end: "\\}",
              endCaptures: { 0: { name: "punctuation.section.group.end.kotlin" } },
              name: "meta.block.kotlin",
              patterns: [{ include: "#code" }]
            }
          ]
        }
      ],
      repository: {
        "class-parameter-list": {
          patterns: [
            { include: "#annotations" },
            { include: "#keywords" },
            {
              captures: {
                1: { name: "variable.parameter.function.kotlin" },
                2: { name: "keyword.operator.declaration.kotlin" }
              },
              match: "(\\w+)\\s*(:)"
            },
            { match: ",", name: "punctuation.seperator.kotlin" },
            { include: "#types" }
          ]
        }
      }
    },
    operators: {
      patterns: [
        {
          match: "\\b(and|or|not|inv)\\b",
          name: "keyword.operator.bitwise.kotlin"
        },
        {
          match: "(==|!=|===|!==|<=|>=|<|>)",
          name: "keyword.operator.comparison.kotlin"
        },
        { match: "(=)", name: "keyword.operator.assignment.kotlin" },
        { match: "(:(?!:))", name: "keyword.operator.declaration.kotlin" },
        { match: "(\\?:)", name: "keyword.operator.elvis.kotlin" },
        {
          match: "(\\-\\-|\\+\\+)",
          name: "keyword.operator.increment-decrement.kotlin"
        },
        {
          match: "(\\-|\\+|\\*|\\/|%)",
          name: "keyword.operator.arithmetic.kotlin"
        },
        {
          match: "(\\+\\=|\\-\\=|\\*\\=|\\/\\=)",
          name: "keyword.operator.arithmetic.assign.kotlin"
        },
        { match: "(\\!|\\&\\&|\\|\\|)", name: "keyword.operator.logical.kotlin" },
        { match: "(\\.\\.)", name: "keyword.operator.range.kotlin" }
      ]
    },
    package: {
      patterns: [
        {
          captures: {
            1: { name: "keyword.other.kotlin" },
            2: { name: "entity.name.package.kotlin" }
          },
          match: "^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*)?"
        }
      ]
    },
    parens: {
      patterns: [
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.section.group.begin.kotlin" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.section.group.end.kotlin" } },
          name: "meta.group.kotlin",
          patterns: [{ include: "#code" }]
        }
      ]
    },
    punctuations: {
      patterns: [
        { match: "::", name: "punctuation.accessor.reference.kotlin" },
        { match: "\\?\\.", name: "punctuation.accessor.dot.safe.kotlin" },
        { match: "(?<!\\?)\\.", name: "punctuation.accessor.dot.kotlin" },
        { match: "\\,", name: "punctuation.seperator.kotlin" },
        { match: "\\;", name: "punctuation.terminator.kotlin" }
      ]
    },
    types: {
      patterns: [
        { include: "#built-in-types" },
        { include: "#class-ident" },
        { include: "#generic" },
        {
          captures: { 1: { name: "keyword.operator.type.function.kotlin" } },
          match: "(?<![/=\\-+!*%<>&|\\^~.])(->)(?![/=\\-+!*%<>&|\\^~.])"
        },
        { match: "\\?(?!\\.)", name: "keyword.operator.type.nullable.kotlin" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.section.group.begin.kotlin" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.section.group.end.kotlin" } },
          patterns: [{ include: "#types" }]
        }
      ],
      repository: {
        "built-in-types": {
          patterns: [
            {
              match: "\\b(Nothing|Any|Unit|String|CharSequence|Int|Boolean|Char|Long|Double|Float|Short|Byte|UByte|UShort|UInt|ULong|Array|List|Map|Set|dynamic)\\b(\\?)?",
              name: "support.class.kotlin"
            },
            {
              match: "\\b(IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray|UByteArray|UShortArray|UIntArray|ULongArray)\\b(\\?)?",
              name: "support.class.kotlin"
            }
          ]
        }
      }
    }
  },
  scopeName: "source.kotlin"
};
var source_kotlin_default = grammar15;

// node_modules/@wooorm/starry-night/lang/source.lua.js
var grammar16 = {
  extensions: [
    ".lua",
    ".fcgi",
    ".nse",
    ".p8",
    ".pd_lua",
    ".rbxs",
    ".rockspec",
    ".wlua"
  ],
  names: ["lua"],
  patterns: [
    {
      begin: "\\b(?:(local)\\s+)?(function)\\b(?![,:])",
      beginCaptures: {
        1: { name: "keyword.local.lua" },
        2: { name: "keyword.control.lua" }
      },
      end: `(?<=[\\)\\-{}\\[\\]"'])`,
      name: "meta.function.lua",
      patterns: [
        { include: "#comment" },
        {
          begin: "(\\()",
          beginCaptures: {
            1: { name: "punctuation.definition.parameters.begin.lua" }
          },
          end: `(\\))|(?=[\\-\\.{}\\[\\]"'])`,
          endCaptures: {
            1: { name: "punctuation.definition.parameters.finish.lua" }
          },
          name: "meta.parameter.lua",
          patterns: [
            { include: "#comment" },
            {
              match: "[a-zA-Z_][a-zA-Z0-9_]*",
              name: "variable.parameter.function.lua"
            },
            { match: ",", name: "punctuation.separator.arguments.lua" },
            {
              begin: ":",
              beginCaptures: { 0: { name: "punctuation.separator.arguments.lua" } },
              end: "(?=[\\),])",
              patterns: [{ include: "#emmydoc.type" }]
            }
          ]
        },
        {
          match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\s*(?=:)",
          name: "entity.name.class.lua"
        },
        {
          match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          name: "entity.name.function.lua"
        }
      ]
    },
    {
      match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]*)?([eE]-?\\d*)?([pP][-+]\\d+)?",
      name: "constant.numeric.float.hexadecimal.lua"
    },
    {
      match: "(?<![\\w\\d.])0[xX]\\.[0-9A-Fa-f]+([eE]-?\\d*)?([pP][-+]\\d+)?",
      name: "constant.numeric.float.hexadecimal.lua"
    },
    {
      match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
      name: "constant.numeric.integer.hexadecimal.lua"
    },
    {
      match: "(?<![\\w\\d.])\\d+(\\.\\d*)?([eE]-?\\d*)?",
      name: "constant.numeric.float.lua"
    },
    {
      match: "(?<![\\w\\d.])\\.\\d+([eE]-?\\d*)?",
      name: "constant.numeric.float.lua"
    },
    {
      match: "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
      name: "constant.numeric.integer.lua"
    },
    { include: "#string" },
    {
      captures: { 1: { name: "punctuation.definition.comment.lua" } },
      match: "\\A(#!).*$\\n?",
      name: "comment.line.shebang.lua"
    },
    { include: "#comment" },
    {
      captures: {
        1: { name: "keyword.control.goto.lua" },
        2: { name: "string.tag.lua" }
      },
      match: "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
    },
    {
      captures: {
        1: { name: "punctuation.section.embedded.begin.lua" },
        2: { name: "punctuation.section.embedded.end.lua" }
      },
      match: "(::)\\s*[a-zA-Z_][a-zA-Z0-9_]*\\s*(::)",
      name: "string.tag.lua"
    },
    {
      captures: { 0: { name: "storage.type.attribute.lua" } },
      match: "<\\s*(const|close)\\s*>"
    },
    {
      match: "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>",
      name: "storage.type.generic.lua"
    },
    {
      match: "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|in)\\b",
      name: "keyword.control.lua"
    },
    { match: "\\b(local)\\b", name: "keyword.local.lua" },
    { match: "\\b(function)\\b(?![,:])", name: "keyword.control.lua" },
    {
      match: "(?<![^.]\\.|:)\\b(false|nil(?!:)|true|_ENV|_G|_VERSION|math\\.(pi|huge|maxinteger|mininteger)|utf8\\.charpattern|io\\.(stdin|stdout|stderr)|package\\.(config|cpath|loaded|loaders|path|preload|searchers))\\b|(?<![.])\\.{3}(?!\\.)",
      name: "constant.language.lua"
    },
    { match: "(?<![^.]\\.|:)\\b(self)\\b", name: "variable.language.self.lua" },
    {
      match: "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?!\\s*=(?!=))",
      name: "support.function.lua"
    },
    {
      match: "(?<![^.]\\.|:)\\b(async)\\b(?!\\s*=(?!=))",
      name: "entity.name.tag.lua"
    },
    {
      match: "(?<![^.]\\.|:)\\b(coroutine\\.(create|isyieldable|close|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)|table\\.(concat|insert|maxn|move|pack|remove|sort|unpack)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?|tointeger|type)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(loadlib|seeall|searchpath)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|[gs]etuservalue|set[Cc]stacklimit|traceback|upvalueid|upvaluejoin)|bit32\\.(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)|utf8\\.(char|codes|codepoint|len|offset))\\b(?!\\s*=(?!=))",
      name: "support.function.library.lua"
    },
    {
      match: "\\b(and|or|not|\\|\\||\\&\\&|\\!)\\b",
      name: "keyword.operator.lua"
    },
    {
      match: `\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({"']|\\[\\[))`,
      name: "support.function.any-method.lua"
    },
    {
      match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*\\??:)",
      name: "entity.name.class.lua"
    },
    {
      match: "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)",
      name: "entity.other.attribute.lua"
    },
    {
      match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)",
      name: "variable.other.lua"
    },
    {
      match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*=\\s*\\b(function)\\b)",
      name: "entity.name.function.lua"
    },
    {
      match: "\\+|-|%|#|\\*|\\/|\\^|==?|~=|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
      name: "keyword.operator.lua"
    }
  ],
  repository: {
    comment: {
      patterns: [
        {
          begin: "(^[ \\t]+)?(?=--)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.lua" }
          },
          end: "(?!\\G)((?!^)[ \\t]+\\n)?",
          endCaptures: {
            1: { name: "punctuation.whitespace.comment.trailing.lua" }
          },
          patterns: [
            {
              begin: "--\\[(=*)\\[@@@",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.begin.lua" }
              },
              end: "(--)?\\]\\1\\]",
              endCaptures: {
                0: { name: "punctuation.definition.comment.end.lua" }
              },
              patterns: [{ include: "source.lua" }]
            },
            {
              begin: "--\\[(=*)\\[",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.begin.lua" }
              },
              end: "(--)?\\]\\1\\]",
              endCaptures: {
                0: { name: "punctuation.definition.comment.end.lua" }
              },
              name: "comment.block.lua",
              patterns: [{ include: "#emmydoc" }, { include: "#ldoc_tag" }]
            },
            {
              begin: "----",
              beginCaptures: { 0: { name: "punctuation.definition.comment.lua" } },
              end: "\\n",
              name: "comment.line.double-dash.lua"
            },
            {
              begin: "---",
              beginCaptures: { 0: { name: "punctuation.definition.comment.lua" } },
              end: "\\n",
              name: "comment.line.double-dash.documentation.lua",
              patterns: [{ include: "#emmydoc" }, { include: "#ldoc_tag" }]
            },
            {
              begin: "--",
              beginCaptures: { 0: { name: "punctuation.definition.comment.lua" } },
              end: "\\n",
              name: "comment.line.double-dash.lua",
              patterns: [{ include: "#ldoc_tag" }]
            }
          ]
        },
        {
          begin: "\\/\\*",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.lua" }
          },
          end: "\\*\\/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.lua" } },
          name: "comment.block.lua",
          patterns: [{ include: "#emmydoc" }, { include: "#ldoc_tag" }]
        }
      ]
    },
    emmydoc: {
      patterns: [
        {
          begin: "(?<=---)[ \\t]*@class",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              match: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
              name: "support.class.lua"
            },
            { match: ":|,", name: "keyword.operator.lua" }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@enum",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
              beginCaptures: { 0: { name: "variable.lua" } },
              end: "(?=\\n)"
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@type",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [{ include: "#emmydoc.type" }]
        },
        {
          begin: "(?<=---)[ \\t]*@alias",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
              beginCaptures: { 0: { name: "variable.lua" } },
              end: "(?=[\\n#])",
              patterns: [{ include: "#emmydoc.type" }]
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*(@operator)\\s*(\\b[a-z]+)?",
          beginCaptures: {
            1: { name: "storage.type.annotation.lua" },
            2: { name: "support.function.library.lua" }
          },
          end: "(?=[\\n@#])",
          patterns: [{ include: "#emmydoc.type" }]
        },
        {
          begin: "(?<=---)[ \\t]*@cast",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
              beginCaptures: { 0: { name: "variable.other.lua" } },
              end: "(?=\\n)",
              patterns: [
                { include: "#emmydoc.type" },
                { match: "([+-|])", name: "keyword.operator.lua" }
              ]
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@param",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(\\??)",
              beginCaptures: {
                1: { name: "entity.name.variable.lua" },
                2: { name: "keyword.operator.lua" }
              },
              end: "(?=[\\n#])",
              patterns: [{ include: "#emmydoc.type" }]
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@return",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            { match: "\\?", name: "keyword.operator.lua" },
            { include: "#emmydoc.type" }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@field",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "(\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b|(\\[))(\\??)",
              beginCaptures: {
                2: { name: "entity.name.variable.lua" },
                3: { name: "keyword.operator.lua" }
              },
              end: "(?=[\\n#])",
              patterns: [
                { include: "#string" },
                { include: "#emmydoc.type" },
                { match: "\\]", name: "keyword.operator.lua" }
              ]
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@generic",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
              beginCaptures: { 0: { name: "storage.type.generic.lua" } },
              end: "(?=\\n)|(,)",
              endCaptures: { 0: { name: "keyword.operator.lua" } },
              patterns: [
                { match: ":", name: "keyword.operator.lua" },
                { include: "#emmydoc.type" }
              ]
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@vararg",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [{ include: "#emmydoc.type" }]
        },
        {
          begin: "(?<=---)[ \\t]*@overload",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [{ include: "#emmydoc.type" }]
        },
        {
          begin: "(?<=---)[ \\t]*@deprecated",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])"
        },
        {
          begin: "(?<=---)[ \\t]*@meta",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])"
        },
        {
          begin: "(?<=---)[ \\t]*@private",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])"
        },
        {
          begin: "(?<=---)[ \\t]*@protected",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])"
        },
        {
          begin: "(?<=---)[ \\t]*@package",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])"
        },
        {
          begin: "(?<=---)[ \\t]*@version",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              match: "\\b(5\\.1|5\\.2|5\\.3|5\\.4|JIT)\\b",
              name: "support.class.lua"
            },
            { match: ",|\\>|\\<", name: "keyword.operator.lua" }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@see",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              match: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*)",
              name: "support.class.lua"
            },
            { match: "#", name: "keyword.operator.lua" }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@diagnostic",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [
            {
              begin: "([a-zA-Z_\\-0-9]+)[ \\t]*(:)?",
              beginCaptures: {
                1: { name: "keyword.other.unit" },
                2: { name: "keyword.operator.unit" }
              },
              end: "(?=\\n)",
              patterns: [
                {
                  match: "\\b([a-zA-Z_\\*][a-zA-Z0-9_\\-]*)",
                  name: "support.class.lua"
                },
                { match: ",", name: "keyword.operator.lua" }
              ]
            }
          ]
        },
        {
          begin: "(?<=---)[ \\t]*@module",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [{ include: "#string" }]
        },
        {
          match: "(?<=---)[ \\t]*@(async|nodiscard)",
          name: "storage.type.annotation.lua"
        },
        {
          begin: "(?<=---)\\|\\s*[\\>\\+]?",
          beginCaptures: { 0: { name: "storage.type.annotation.lua" } },
          end: "(?=[\\n@#])",
          patterns: [{ include: "#string" }]
        }
      ]
    },
    "emmydoc.type": {
      patterns: [
        {
          begin: "\\bfun\\b",
          beginCaptures: { 0: { name: "keyword.control.lua" } },
          end: "(?=[\\s#])",
          patterns: [
            { match: "[\\(\\),:\\?][ \\t]*", name: "keyword.operator.lua" },
            {
              match: "([a-zA-Z_][a-zA-Z0-9_\\.\\*\\[\\]\\<\\>\\,\\-]*)(?<!,)[ \\t]*(?=\\??:)",
              name: "entity.name.variable.lua"
            },
            { include: "#emmydoc.type" },
            { include: "#string" }
          ]
        },
        {
          match: "\\<[a-zA-Z_\\*][a-zA-Z0-9_\\.\\*\\-]*\\>",
          name: "storage.type.generic.lua"
        },
        { match: "\\basync\\b", name: "entity.name.tag.lua" },
        { match: "[\\{\\}\\:\\,\\?\\|\\`][ \\t]*", name: "keyword.operator.lua" },
        {
          begin: `(?=[a-zA-Z_\\.\\*"'\\[])`,
          end: "(?=[\\s\\)\\,\\?\\:\\}\\|#])",
          patterns: [
            {
              match: "([a-zA-Z0-9_\\.\\*\\[\\]\\<\\>\\,\\-]+)(?<!,)[ \\t]*",
              name: "support.type.lua"
            },
            { match: "(\\.\\.\\.)[ \\t]*", name: "constant.language.lua" },
            { include: "#string" }
          ]
        }
      ]
    },
    escaped_char: {
      patterns: [
        {
          match: `\\\\[abfnrtv\\\\"'\\n]`,
          name: "constant.character.escape.lua"
        },
        { match: "\\\\z[\\n\\t ]*", name: "constant.character.escape.lua" },
        { match: "\\\\\\d{1,3}", name: "constant.character.escape.byte.lua" },
        {
          match: "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
          name: "constant.character.escape.byte.lua"
        },
        {
          match: "\\\\u\\{[0-9A-Fa-f]+\\}",
          name: "constant.character.escape.unicode.lua"
        },
        { match: "\\\\.", name: "invalid.illegal.character.escape.lua" }
      ]
    },
    ldoc_tag: {
      captures: {
        1: { name: "punctuation.definition.block.tag.ldoc" },
        2: { name: "storage.type.class.ldoc" }
      },
      match: "\\G[ \\t]*(@)(alias|annotation|author|charset|class|classmod|comment|constructor|copyright|description|example|export|factory|field|file|fixme|function|include|lfunction|license|local|module|name|param|pragma|private|raise|release|return|script|section|see|set|static|submodule|summary|tfield|thread|tparam|treturn|todo|topic|type|usage|warning|within)\\b"
    },
    string: {
      patterns: [
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } },
          end: "'[ \\t]*|(?=\\n)",
          endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } },
          name: "string.quoted.single.lua",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } },
          end: '"[ \\t]*|(?=\\n)',
          endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } },
          name: "string.quoted.double.lua",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "`",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } },
          end: "`[ \\t]*|(?=\\n)",
          endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } },
          name: "string.quoted.double.lua"
        },
        {
          begin: "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
          beginCaptures: {
            0: { name: "string.quoted.other.multiline.lua" },
            1: { name: "punctuation.definition.string.begin.lua" }
          },
          contentName: "meta.embedded.lua",
          end: "(\\]\\2\\])[ \\t]*",
          endCaptures: {
            0: { name: "string.quoted.other.multiline.lua" },
            1: { name: "punctuation.definition.string.end.lua" }
          },
          patterns: [{ include: "source.c" }]
        },
        {
          begin: "(?<!--)\\[(=*)\\[",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.lua" } },
          end: "\\]\\1\\][ \\t]*",
          endCaptures: { 0: { name: "punctuation.definition.string.end.lua" } },
          name: "string.quoted.other.multiline.lua"
        }
      ]
    }
  },
  scopeName: "source.lua"
};
var source_lua_default = grammar16;

// node_modules/@wooorm/starry-night/lang/source.makefile.js
var grammar17 = {
  dependencies: ["source.shell"],
  extensions: [".mak", ".make", ".makefile", ".mk", ".mkfile"],
  names: ["makefile", "bsdmake", "make", "mf"],
  patterns: [
    { include: "#comment" },
    { include: "#variable-assignment" },
    { include: "#recipe" },
    { include: "#directives" }
  ],
  repository: {
    comment: {
      begin: "(^[ \\t]+)?(?=#)",
      beginCaptures: {
        1: { name: "punctuation.whitespace.comment.leading.makefile" }
      },
      end: "(?!\\G)",
      patterns: [
        {
          begin: "#",
          beginCaptures: { 0: { name: "punctuation.definition.comment.makefile" } },
          end: "\\n",
          name: "comment.line.number-sign.makefile",
          patterns: [
            {
              match: "\\\\\\n",
              name: "constant.character.escape.continuation.makefile"
            }
          ]
        }
      ]
    },
    directives: {
      patterns: [
        {
          begin: "^[ ]*([s\\-]?include)\\b",
          beginCaptures: { 1: { name: "keyword.control.include.makefile" } },
          end: "^",
          patterns: [
            { include: "#comment" },
            { include: "#variables" },
            { match: "%", name: "constant.other.placeholder.makefile" }
          ]
        },
        {
          begin: "^[ ]*(vpath)\\b",
          beginCaptures: { 1: { name: "keyword.control.vpath.makefile" } },
          end: "^",
          patterns: [
            { include: "#comment" },
            { include: "#variables" },
            { match: "%", name: "constant.other.placeholder.makefile" }
          ]
        },
        {
          begin: "^(?:(override)\\s*)?(define)\\s*([^\\s]+)\\s*(=|\\?=|:=|\\+=)?(?=\\s)",
          captures: {
            1: { name: "keyword.control.override.makefile" },
            2: { name: "keyword.control.define.makefile" },
            3: { name: "variable.other.makefile" },
            4: { name: "punctuation.separator.key-value.makefile" }
          },
          end: "^(endef)\\b",
          name: "meta.scope.conditional.makefile",
          patterns: [
            { begin: "\\G(?!\\n)", end: "^", patterns: [{ include: "#comment" }] },
            { include: "#variables" },
            { include: "#comment" },
            { include: "#directives" }
          ]
        },
        {
          begin: "^[ ]*(export)\\b",
          beginCaptures: { 1: { name: "keyword.control.$1.makefile" } },
          end: "^",
          patterns: [
            { include: "#comment" },
            { include: "#variable-assignment" },
            { match: "[^\\s]+", name: "variable.other.makefile" }
          ]
        },
        {
          begin: "^[ ]*(override|private)\\b",
          beginCaptures: { 1: { name: "keyword.control.$1.makefile" } },
          end: "^",
          patterns: [{ include: "#comment" }, { include: "#variable-assignment" }]
        },
        {
          begin: "^[ ]*(unexport|undefine)\\b",
          beginCaptures: { 1: { name: "keyword.control.$1.makefile" } },
          end: "^",
          patterns: [
            { include: "#comment" },
            { match: "[^\\s]+", name: "variable.other.makefile" }
          ]
        },
        {
          begin: "^(ifdef|ifndef)\\s*([^\\s]+)(?=\\s)",
          captures: {
            1: { name: "keyword.control.$1.makefile" },
            2: { name: "variable.other.makefile" },
            3: { name: "punctuation.separator.key-value.makefile" }
          },
          end: "^(endif)\\b",
          name: "meta.scope.conditional.makefile",
          patterns: [
            { begin: "\\G(?!\\n)", end: "^", patterns: [{ include: "#comment" }] },
            { include: "$self" }
          ]
        },
        {
          begin: "^(ifeq|ifneq)(?=\\s)",
          captures: { 1: { name: "keyword.control.$1.makefile" } },
          end: "^(endif)\\b",
          name: "meta.scope.conditional.makefile",
          patterns: [
            {
              begin: "\\G",
              end: "^",
              name: "meta.scope.condition.makefile",
              patterns: [{ include: "#variables" }, { include: "#comment" }]
            },
            {
              begin: "^else(?=\\s)",
              beginCaptures: { 0: { name: "keyword.control.else.makefile" } },
              end: "^"
            },
            { include: "$self" }
          ]
        }
      ]
    },
    interpolation: {
      begin: "(?=`)",
      end: "(?!\\G)",
      name: "meta.embedded.line.shell",
      patterns: [
        {
          begin: "`",
          beginCaptures: { 0: { name: "punctuation.definition.string.makefile" } },
          contentName: "source.shell",
          end: "(`)",
          endCaptures: {
            0: { name: "punctuation.definition.string.makefile" },
            1: { name: "source.shell" }
          },
          name: "string.interpolated.backtick.makefile",
          patterns: [{ include: "source.shell" }]
        }
      ]
    },
    recipe: {
      begin: "^(?!\\t)([^:]*)(:)(?!\\=)",
      beginCaptures: {
        1: {
          patterns: [
            {
              captures: { 1: { name: "support.function.target.$1.makefile" } },
              match: "^\\s*(\\.(PHONY|SUFFIXES|DEFAULT|PRECIOUS|INTERMEDIATE|SECONDARY|SECONDEXPANSION|DELETE_ON_ERROR|IGNORE|LOW_RESOLUTION_TIME|SILENT|EXPORT_ALL_VARIABLES|NOTPARALLEL|ONESHELL|POSIX))\\s*$"
            },
            {
              begin: "(?=\\S)",
              end: "(?=\\s|$)",
              name: "entity.name.function.target.makefile",
              patterns: [
                { include: "#variables" },
                { match: "%", name: "constant.other.placeholder.makefile" }
              ]
            }
          ]
        },
        2: { name: "punctuation.separator.key-value.makefile" }
      },
      end: "^(?!\\t)",
      name: "meta.scope.target.makefile",
      patterns: [
        {
          begin: "\\G",
          end: "^",
          name: "meta.scope.prerequisites.makefile",
          patterns: [
            {
              match: "\\\\\\n",
              name: "constant.character.escape.continuation.makefile"
            },
            { match: "%|\\*", name: "constant.other.placeholder.makefile" },
            { include: "#comment" },
            { include: "#variables" }
          ]
        },
        {
          begin: "^\\t",
          name: "meta.scope.recipe.makefile",
          patterns: [
            {
              captures: {
                0: {
                  patterns: [
                    {
                      match: "\\\\\\n",
                      name: "constant.character.escape.continuation.makefile"
                    },
                    { include: "#variables" },
                    { include: "source.shell" }
                  ]
                }
              },
              match: ".+\\n?"
            }
          ],
          while: "^\\t"
        }
      ]
    },
    "variable-assignment": {
      begin: "(^[ ]*|\\G\\s*)([^\\s]+)\\s*(=|\\?=|:=|\\+=)",
      beginCaptures: {
        2: { name: "variable.other.makefile" },
        3: { name: "punctuation.separator.key-value.makefile" }
      },
      end: "\\n",
      patterns: [
        {
          match: "\\\\\\n",
          name: "constant.character.escape.continuation.makefile"
        },
        { include: "#comment" },
        { include: "#variables" },
        { include: "#interpolation" }
      ]
    },
    variables: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.variable.makefile" } },
          match: "(\\$?\\$)[@%<?^+*]",
          name: "variable.language.makefile"
        },
        {
          begin: "\\$?\\$\\(",
          captures: { 0: { name: "punctuation.definition.variable.makefile" } },
          end: "\\)",
          name: "string.interpolated.makefile",
          patterns: [
            { include: "#variables" },
            {
              match: "\\G(MAKEFILES|VPATH|SHELL|MAKESHELL|MAKE|MAKELEVEL|MAKEFLAGS|MAKECMDGOALS|CURDIR|SUFFIXES|\\.LIBPATTERNS)(?=\\s*\\))",
              name: "variable.language.makefile"
            },
            {
              begin: "\\G(subst|patsubst|strip|findstring|filter(-out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile)\\s",
              beginCaptures: { 1: { name: "support.function.$1.makefile" } },
              end: "(?=\\))",
              name: "meta.scope.function-call.makefile",
              patterns: [
                { include: "#variables" },
                { match: "%|\\*", name: "constant.other.placeholder.makefile" }
              ]
            },
            {
              begin: "\\G(origin|flavor)\\s(?=[^\\s)]+\\s*\\))",
              contentName: "variable.other.makefile",
              end: "(?=\\))",
              name: "meta.scope.function-call.makefile",
              patterns: [{ include: "#variables" }]
            },
            {
              begin: "\\G(?!\\))",
              end: "(?=\\))",
              name: "variable.other.makefile",
              patterns: [{ include: "#variables" }]
            }
          ]
        }
      ]
    }
  },
  scopeName: "source.makefile"
};
var source_makefile_default = grammar17;

// node_modules/@wooorm/starry-night/lang/source.objc.js
var grammar18 = {
  dependencies: ["source.c", "source.c.platform", "source.objc.platform"],
  extensions: [],
  names: ["objective-c", "obj-c", "objc", "objectivec"],
  patterns: [
    {
      begin: "((@)(interface|protocol))(?!.+;)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*((:)(?:\\s*)([A-Za-z][A-Za-z0-9]*))?(\\s|\\n)?",
      captures: {
        1: { name: "storage.type.objc" },
        2: { name: "punctuation.definition.storage.type.objc" },
        4: { name: "entity.name.type.objc" },
        6: { name: "punctuation.definition.entity.other.inherited-class.objc" },
        7: { name: "entity.other.inherited-class.objc" },
        8: { name: "meta.divider.objc" },
        9: { name: "meta.inherited-class.objc" }
      },
      contentName: "meta.scope.interface.objc",
      end: "((@)end)\\b",
      name: "meta.interface-or-protocol.objc",
      patterns: [{ include: "#interface_innards" }]
    },
    {
      begin: "((@)(implementation))\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(?::\\s*([A-Za-z][A-Za-z0-9]*))?",
      captures: {
        1: { name: "storage.type.objc" },
        2: { name: "punctuation.definition.storage.type.objc" },
        4: { name: "entity.name.type.objc" },
        5: { name: "entity.other.inherited-class.objc" }
      },
      contentName: "meta.scope.implementation.objc",
      end: "((@)end)\\b",
      name: "meta.implementation.objc",
      patterns: [{ include: "#implementation_innards" }]
    },
    {
      applyEndPatternLast: true,
      begin: '(?=@")',
      end: "(?=\\S)",
      patterns: [
        {
          begin: '@?"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.objc" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.objc" } },
          name: "string.quoted.double.objc",
          patterns: [
            { include: "source.c#string_escaped_char" },
            {
              match: "(?x)%\n    						(\\d+\\$)?                             # field (argument #)\n    						[#0\\- +']*                          # flags\n    						((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    						(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    						[@]                                  # conversion type\n    					",
              name: "constant.other.placeholder.objc"
            },
            { include: "source.c#string_placeholder" }
          ]
        }
      ]
    },
    {
      begin: "\\b(id)\\s*(?=<)",
      beginCaptures: { 1: { name: "storage.type.objc" } },
      end: "(?<=>)",
      name: "meta.id-with-protocol.objc",
      patterns: [{ include: "#protocol_list" }]
    },
    {
      match: "\\b(NS_DURING|NS_HANDLER|NS_ENDHANDLER)\\b",
      name: "keyword.control.macro.objc"
    },
    {
      captures: { 1: { name: "punctuation.definition.keyword.objc" } },
      match: "(@)(try|catch|finally|throw)\\b",
      name: "keyword.control.exception.objc"
    },
    {
      captures: { 1: { name: "punctuation.definition.keyword.objc" } },
      match: "(@)(synchronized)\\b",
      name: "keyword.control.synchronize.objc"
    },
    {
      captures: { 1: { name: "punctuation.definition.keyword.objc" } },
      match: "(@)(required|optional)\\b",
      name: "keyword.control.protocol-specification.objc"
    },
    {
      captures: { 1: { name: "punctuation.definition.keyword.objc" } },
      match: "(@)(defs|encode)\\b",
      name: "keyword.other.objc"
    },
    {
      captures: { 1: { name: "punctuation.definition.storage.type.objc" } },
      match: "(@)(class|protocol)\\b",
      name: "storage.type.objc"
    },
    {
      begin: "((@)selector)\\s*(\\()",
      beginCaptures: {
        1: { name: "storage.type.objc" },
        2: { name: "punctuation.definition.storage.type.objc" },
        3: { name: "punctuation.definition.storage.type.objc" }
      },
      contentName: "meta.selector.method-name.objc",
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.definition.storage.type.objc" } },
      name: "meta.selector.objc",
      patterns: [
        {
          captures: { 1: { name: "punctuation.separator.arguments.objc" } },
          match: "\\b(?:[a-zA-Z_:][\\w]*)+",
          name: "support.function.any-method.name-of-parameter.objc"
        }
      ]
    },
    {
      captures: { 1: { name: "punctuation.definition.storage.modifier.objc" } },
      match: "(@)(synchronized|public|package|private|protected)\\b",
      name: "storage.modifier.objc"
    },
    { match: "\\b(YES|NO|Nil|nil)\\b", name: "constant.language.objc" },
    { include: "source.objc.platform" },
    { include: "source.objc.platform#functions" },
    { include: "source.c" },
    { include: "#bracketed_content" }
  ],
  repository: {
    bracketed_content: {
      begin: "\\[",
      beginCaptures: { 0: { name: "punctuation.section.scope.begin.objc" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.section.scope.end.objc" } },
      name: "meta.bracketed.objc",
      patterns: [
        {
          begin: "(?=predicateWithFormat:)(?<=NSPredicate )(predicateWithFormat:)",
          beginCaptures: {
            1: { name: "support.function.any-method.objc" },
            2: { name: "punctuation.separator.arguments.objc" }
          },
          end: "(?=\\])",
          name: "meta.function-call.predicate.objc",
          patterns: [
            {
              captures: { 1: { name: "punctuation.separator.arguments.objc" } },
              match: "\\bargument(Array|s)(:)",
              name: "support.function.any-method.name-of-parameter.objc"
            },
            {
              captures: { 1: { name: "punctuation.separator.arguments.objc" } },
              match: "\\b\\w+(:)",
              name: "invalid.illegal.unknown-method.objc"
            },
            {
              begin: '@"',
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.objc" }
              },
              end: '"',
              endCaptures: {
                0: { name: "punctuation.definition.string.end.objc" }
              },
              name: "string.quoted.double.objc",
              patterns: [
                {
                  match: "\\b(AND|OR|NOT|IN)\\b",
                  name: "keyword.operator.logical.predicate.cocoa"
                },
                {
                  match: "\\b(ALL|ANY|SOME|NONE)\\b",
                  name: "constant.language.predicate.cocoa"
                },
                {
                  match: "\\b(NULL|NIL|SELF|TRUE|YES|FALSE|NO|FIRST|LAST|SIZE)\\b",
                  name: "constant.language.predicate.cocoa"
                },
                {
                  match: "\\b(MATCHES|CONTAINS|BEGINSWITH|ENDSWITH|BETWEEN)\\b",
                  name: "keyword.operator.comparison.predicate.cocoa"
                },
                {
                  match: "\\bC(ASEINSENSITIVE|I)\\b",
                  name: "keyword.other.modifier.predicate.cocoa"
                },
                {
                  match: "\\b(ANYKEY|SUBQUERY|CAST|TRUEPREDICATE|FALSEPREDICATE)\\b",
                  name: "keyword.other.predicate.cocoa"
                },
                {
                  match: `\\\\(\\\\|[abefnrtv'"?]|[0-3]\\d{0,2}|[4-7]\\d?|x[a-zA-Z0-9]+)`,
                  name: "constant.character.escape.objc"
                },
                { match: "\\\\.", name: "invalid.illegal.unknown-escape.objc" }
              ]
            },
            { include: "#special_variables" },
            { include: "#c_functions" },
            { include: "$base" }
          ]
        },
        {
          begin: '(?=\\w)(?<=[\\w\\]\\s)"]\\s)(\\w+(?:(:)|(?=\\])))',
          beginCaptures: {
            1: { name: "support.function.any-method.objc" },
            2: { name: "punctuation.separator.arguments.objc" }
          },
          end: "(?=\\])",
          name: "meta.function-call.objc",
          patterns: [
            {
              captures: { 1: { name: "punctuation.separator.arguments.objc" } },
              match: "\\b\\w+(:)",
              name: "support.function.any-method.name-of-parameter.objc"
            },
            { include: "#special_variables" },
            { include: "#c_functions" },
            { include: "$base" }
          ]
        },
        { include: "#special_variables" },
        { include: "#c_functions" },
        { include: "$self" }
      ]
    },
    c_functions: {
      patterns: [
        { include: "source.c.platform#functions" },
        {
          captures: {
            1: { name: "punctuation.whitespace.function-call.leading.c" },
            2: { name: "support.function.any-method.c" },
            3: { name: "punctuation.definition.parameters.c" }
          },
          match: "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n            			(\\b \n            				(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n            			)\n            			 \\s*(\\()",
          name: "meta.function-call.c"
        }
      ]
    },
    comment: {
      patterns: [
        {
          begin: "/\\*",
          captures: { 0: { name: "punctuation.definition.comment.objc" } },
          end: "\\*/",
          name: "comment.block.objc"
        },
        {
          begin: "(^[ \\t]+)?(?=//)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.objc" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "//",
              beginCaptures: { 0: { name: "punctuation.definition.comment.objc" } },
              end: "\\n",
              name: "comment.line.double-slash.objc",
              patterns: [
                {
                  match: "(?>\\\\\\s*\\n)",
                  name: "punctuation.separator.continuation.objc"
                }
              ]
            }
          ]
        }
      ]
    },
    disabled: {
      begin: "^\\s*#\\s*if(n?def)?\\b.*$",
      end: "^\\s*#\\s*endif\\b.*$",
      patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
    },
    implementation_innards: {
      patterns: [
        { include: "#preprocessor-rule-enabled-implementation" },
        { include: "#preprocessor-rule-disabled-implementation" },
        { include: "#preprocessor-rule-other-implementation" },
        { include: "#property_directive" },
        { include: "#special_variables" },
        { include: "#method_super" },
        { include: "$base" }
      ]
    },
    interface_innards: {
      patterns: [
        { include: "#preprocessor-rule-enabled-interface" },
        { include: "#preprocessor-rule-disabled-interface" },
        { include: "#preprocessor-rule-other-interface" },
        { include: "#properties" },
        { include: "#protocol_list" },
        { include: "#method" },
        { include: "$base" }
      ]
    },
    method: {
      begin: "^(-|\\+)\\s*",
      end: "(?=\\{|#)|;",
      name: "meta.function.objc",
      patterns: [
        {
          begin: "(\\()",
          beginCaptures: { 1: { name: "punctuation.definition.type.begin.objc" } },
          end: "(\\))\\s*(\\w+\\b)",
          endCaptures: {
            1: { name: "punctuation.definition.type.end.objc" },
            2: { name: "entity.name.function.objc" }
          },
          name: "meta.return-type.objc",
          patterns: [
            { include: "#protocol_list" },
            { include: "#protocol_type_qualifier" },
            { include: "$base" }
          ]
        },
        {
          match: "\\b\\w+(?=:)",
          name: "entity.name.function.name-of-parameter.objc"
        },
        {
          begin: "((:))\\s*(\\()",
          beginCaptures: {
            1: { name: "entity.name.function.name-of-parameter.objc" },
            2: { name: "punctuation.separator.arguments.objc" },
            3: { name: "punctuation.definition.type.begin.objc" }
          },
          end: "(\\))\\s*(\\w+\\b)?",
          endCaptures: {
            1: { name: "punctuation.definition.type.end.objc" },
            2: { name: "variable.parameter.function.objc" }
          },
          name: "meta.argument-type.objc",
          patterns: [
            { include: "#protocol_list" },
            { include: "#protocol_type_qualifier" },
            { include: "$base" }
          ]
        },
        { include: "#comment" }
      ]
    },
    method_super: {
      begin: "^(?=-|\\+)",
      end: "(?<=\\})|(?=#)",
      name: "meta.function-with-body.objc",
      patterns: [{ include: "#method" }, { include: "$base" }]
    },
    "pragma-mark": {
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.pragma.c" },
        3: { name: "meta.toc-list.pragma-mark.c" }
      },
      match: "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))",
      name: "meta.section"
    },
    "preprocessor-rule-disabled-implementation": {
      begin: "^\\s*(#(if)\\s+(0)\\b).*",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b)",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          end: "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
          patterns: [{ include: "#interface_innards" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
          name: "comment.block.preprocessor.if-branch.c",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        }
      ]
    },
    "preprocessor-rule-disabled-interface": {
      begin: "^\\s*(#(if)\\s+(0)\\b).*",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b)",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          end: "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
          patterns: [{ include: "#interface_innards" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
          name: "comment.block.preprocessor.if-branch.c",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        }
      ]
    },
    "preprocessor-rule-enabled-implementation": {
      begin: "^\\s*(#(if)\\s+(0*1)\\b)",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b).*",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          contentName: "comment.block.preprocessor.else-branch.c",
          end: "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
          patterns: [{ include: "#implementation_innards" }]
        }
      ]
    },
    "preprocessor-rule-enabled-interface": {
      begin: "^\\s*(#(if)\\s+(0*1)\\b)",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.if.c" },
        3: { name: "constant.numeric.preprocessor.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b.*?(?:(?=(?://|/\\*))|$))",
      patterns: [
        {
          begin: "^\\s*(#\\s*(else)\\b).*",
          captures: {
            1: { name: "meta.preprocessor.c" },
            2: { name: "keyword.control.import.else.c" }
          },
          contentName: "comment.block.preprocessor.else-branch.c",
          end: "(?=^\\s*#\\s*endif\\b.*?(?:(?=(?://|/\\*))|$))",
          patterns: [{ include: "#disabled" }, { include: "#pragma-mark" }]
        },
        {
          end: "(?=^\\s*#\\s*(else|endif)\\b.*?(?:(?=(?://|/\\*))|$))",
          patterns: [{ include: "#interface_innards" }]
        }
      ]
    },
    "preprocessor-rule-other-implementation": {
      begin: "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b).*?(?:(?=(?://|/\\*))|$)",
      patterns: [{ include: "#implementation_innards" }]
    },
    "preprocessor-rule-other-interface": {
      begin: "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
      captures: {
        1: { name: "meta.preprocessor.c" },
        2: { name: "keyword.control.import.c" }
      },
      end: "^\\s*(#\\s*(endif)\\b).*?(?:(?=(?://|/\\*))|$)",
      patterns: [{ include: "#interface_innards" }]
    },
    properties: {
      patterns: [
        {
          begin: "((@)property)\\s*(\\()",
          beginCaptures: {
            1: { name: "keyword.other.property.objc" },
            2: { name: "punctuation.definition.keyword.objc" },
            3: { name: "punctuation.section.scope.begin.objc" }
          },
          end: "(\\))",
          endCaptures: { 1: { name: "punctuation.section.scope.end.objc" } },
          name: "meta.property-with-attributes.objc",
          patterns: [
            {
              match: "\\b(getter|setter|readonly|readwrite|assign|retain|copy|atomic|nonatomic|strong|weak|nullable|nonnull|class)\\b",
              name: "keyword.other.property.attribute"
            }
          ]
        },
        {
          captures: {
            1: { name: "keyword.other.property.objc" },
            2: { name: "punctuation.definition.keyword.objc" }
          },
          match: "((@)property)\\b",
          name: "meta.property.objc"
        }
      ]
    },
    property_directive: {
      captures: { 1: { name: "punctuation.definition.keyword.objc" } },
      match: "(@)(dynamic|synthesize)\\b",
      name: "keyword.other.property.directive.objc"
    },
    protocol_list: {
      begin: "(<)",
      beginCaptures: { 1: { name: "punctuation.section.scope.begin.objc" } },
      end: "(>)",
      endCaptures: { 1: { name: "punctuation.section.scope.end.objc" } },
      name: "meta.protocol-list.objc",
      patterns: [{ include: "source.objc.platform#protocols" }]
    },
    protocol_type_qualifier: {
      match: "\\b(in|out|inout|oneway|bycopy|byref)\\b",
      name: "storage.modifier.protocol.objc"
    },
    special_variables: {
      patterns: [
        { match: "\\b_cmd\\b", name: "variable.other.selector.objc" },
        { match: "\\b(self|super)\\b", name: "variable.language.objc" }
      ]
    }
  },
  scopeName: "source.objc"
};
var source_objc_default = grammar18;

// node_modules/@wooorm/starry-night/lang/source.objc.platform.js
var grammar19 = {
  extensions: [],
  names: [],
  patterns: [
    {
      match: "\\bNS(?:AnyType|CompositingOperationHighlight|DoubleType|FloatType|IntType|Positive(?:DoubleType|FloatType|IntType))\\b",
      name: "invalid.deprecated.10.0.support.constant.cocoa.objc"
    },
    {
      match: "\\bNS(?:CompositeHighlight|SmallIconButtonBezelStyle)\\b",
      name: "invalid.deprecated.10.0.support.variable.cocoa.objc"
    },
    {
      match: "\\bNS(?:CalendarDate|Form|GarbageCollector)\\b",
      name: "invalid.deprecated.10.10.support.class.cocoa.objc"
    },
    {
      match: "\\bNS(?:Alert(?:AlternateReturn|DefaultReturn|ErrorReturn|OtherReturn)|Ca(?:lendarCalendarUnit|ncelButton)|D(?:ayCalendarUnit|ragOperationAll(?:_Obsolete)?)|EraCalendarUnit|H(?:PUXOperatingSystem|ourCalendarUnit)|M(?:ACHOperatingSystem|inuteCalendarUnit|onthCalendarUnit)|O(?:KButton|SF1OperatingSystem)|PopoverAppearance(?:HUD|Minimal)|QuarterCalendarUnit|Run(?:AbortedResponse|ContinuesResponse|StoppedResponse)|S(?:cale(?:None|Proportionally|ToFit)|econdCalendarUnit|olarisOperatingSystem|unOSOperatingSystem)|TimeZoneCalendarUnit|UndefinedDateComponent|W(?:eek(?:CalendarUnit|Of(?:MonthCalendarUnit|YearCalendarUnit)|day(?:CalendarUnit|OrdinalCalendarUnit))|indows(?:95OperatingSystem|NTOperatingSystem)|rapCalendarComponents)|Year(?:CalendarUnit|ForWeekOfYearCalendarUnit))\\b",
      name: "invalid.deprecated.10.10.support.constant.cocoa.objc"
    },
    {
      match: "\\bNSPopoverAppearance\\b",
      name: "invalid.deprecated.10.10.support.type.cocoa.objc"
    },
    {
      match: "\\bNS(?:A(?:ccessibilityMatte(?:ContentUIElementAttribute|HoleAttribute)|ppearanceNameLightContent)|BuddhistCalendar|ChineseCalendar|GregorianCalendar|HebrewCalendar|I(?:SO8601Calendar|ndianCalendar|slamicC(?:alendar|ivilCalendar))|JapaneseCalendar|PersianCalendar|RepublicOfChinaCalendar)\\b",
      name: "invalid.deprecated.10.10.support.variable.cocoa.objc"
    },
    {
      match: "\\bNS(?:Glyph(?:Attribute(?:BidiLevel|Elastic|Inscribe|Soft)|Inscribe(?:Above|B(?:ase|elow)|Over(?:Below|strike)))|StringDrawing(?:DisableScreenFontSubstitution|OneShot)|TextWritingDirection(?:Embedding|Override)|WorkspaceLaunch(?:AllowingClassicStartup|PreferringClassic))\\b",
      name: "invalid.deprecated.10.11.support.constant.cocoa.objc"
    },
    {
      match: "\\bNSConfinementConcurrencyType\\b",
      name: "invalid.deprecated.10.11.support.constant.objc"
    },
    {
      match: "\\bNS(?:GlyphInscription|WorkspaceFileOperationName)\\b",
      name: "invalid.deprecated.10.11.support.type.cocoa.objc"
    },
    {
      match: "\\bNS(?:AccessibilityException|CharacterShapeAttributeName|U(?:nderlineByWordMask|sesScreenFontsDocumentAttribute)|Workspace(?:Co(?:mpressOperation|pyOperation)|D(?:e(?:c(?:ompressOperation|ryptOperation)|stroyOperation)|idPerformFileOperationNotification|uplicateOperation)|EncryptOperation|LinkOperation|MoveOperation|RecycleOperation))\\b",
      name: "invalid.deprecated.10.11.support.variable.cocoa.objc"
    },
    {
      match: "\\bPDFAnnotation(?:ButtonWidget|C(?:hoiceWidget|ircle)|FreeText|Ink|Lin(?:e|k)|Markup|Popup|S(?:quare|tamp)|Text(?:Widget)?)\\b",
      name: "invalid.deprecated.10.12.support.class.objc"
    },
    {
      match: "\\bNSOpenGLPFAStereo\\b",
      name: "invalid.deprecated.10.12.support.constant.cocoa.objc"
    },
    {
      match: "\\bNSPersistentStoreUbiquitousTransitionType(?:Account(?:Added|Removed)|ContentRemoved|InitialImportCompleted)\\b",
      name: "invalid.deprecated.10.12.support.constant.objc"
    },
    {
      match: "\\bNSGradientType\\b",
      name: "invalid.deprecated.10.12.support.type.cocoa.objc"
    },
    {
      match: "\\bNSPersistentStoreUbiquitousTransitionType\\b",
      name: "invalid.deprecated.10.12.support.type.objc"
    },
    {
      match: "\\bNS(?:A(?:WTEventType|l(?:phaShiftKeyMask|ternateKeyMask)|nyEventMask|pp(?:KitDefined(?:Mask)?|lication(?:ActivatedEventType|De(?:activatedEventType|fined(?:Mask)?))))|BorderlessWindowMask|C(?:enterTextAlignment|ircularSlider|losableWindowMask|o(?:m(?:mandKeyMask|posite(?:C(?:lear|o(?:lor(?:Burn|Dodge)?|py))|D(?:arken|estination(?:Atop|In|O(?:ut|ver))|ifference)|Exclusion|H(?:ardLight|ue)|L(?:ighten|uminosity)|Multiply|Overlay|Plus(?:Darker|Lighter)|S(?:aturation|creen|o(?:ftLight|urce(?:Atop|In|O(?:ut|ver))))|XOR))|ntrolKeyMask)|riticalAlertStyle|ursor(?:PointingDevice|Update(?:Mask)?))|D(?:eviceIndependentModifierFlagsMask|ocModalWindowMask)|EraserPointingDevice|F(?:lagsChanged(?:Mask)?|u(?:llS(?:creenWindowMask|izeContentViewWindowMask)|nctionKeyMask))|H(?:UDWindowMask|elpKeyMask)|InformationalAlertStyle|JustifiedTextAlignment|Key(?:Down(?:Mask)?|Up(?:Mask)?)|L(?:eft(?:Mouse(?:D(?:own(?:Mask)?|ragged(?:Mask)?)|Up(?:Mask)?)|TextAlignment)|inearSlider)|M(?:ini(?:ControlSize|aturizableWindowMask)|ouse(?:E(?:ntered(?:Mask)?|ventSubtype|xited(?:Mask)?)|Moved(?:Mask)?))|N(?:aturalTextAlignment|onactivatingPanelMask|umericPadKeyMask)|OtherMouse(?:D(?:own(?:Mask)?|ragged(?:Mask)?)|Up(?:Mask)?)|P(?:e(?:n(?:LowerSideMask|PointingDevice|TipMask|UpperSideMask)|riodic(?:Mask)?)|owerOffEventType)|R(?:e(?:gularControlSize|sizableWindowMask)|ight(?:Mouse(?:D(?:own(?:Mask)?|ragged(?:Mask)?)|Up(?:Mask)?)|TextAlignment))|S(?:cr(?:eenChangedEventType|ollWheel(?:Mask)?)|hiftKeyMask|mallControlSize|ystemDefined(?:Mask)?)|T(?:abletP(?:oint(?:EventSubtype|Mask)?|roximity(?:EventSubtype|Mask)?)|exturedBackgroundWindowMask|hick(?:SquareBezelStyle|erSquareBezelStyle)|i(?:ckMark(?:Above|Below|Left|Right)|tledWindowMask)|ouchEventSubtype)|U(?:n(?:ifiedTitleAndToolbarWindowMask|knownPointingDevice)|tilityWindowMask)|W(?:arningAlertStyle|indow(?:ExposedEventType|FullScreenButton|MovedEventType)))\\b",
      name: "invalid.deprecated.10.12.support.variable.cocoa.objc"
    },
    {
      match: "\\bNSPersistentStore(?:DidImportUbiquitousContentChangesNotification|Re(?:buildFromUbiquitousContentOption|moveUbiquitousMetadataOption)|Ubiquitous(?:Cont(?:ainerIdentifierKey|ent(?:NameKey|URLKey))|PeerTokenOption|TransitionTypeKey))\\b",
      name: "invalid.deprecated.10.12.support.variable.objc"
    },
    {
      match: "\\bNS(?:Archiver|Connection|D(?:istantObject(?:Request)?|rawer)|M(?:achBootstrapServer|essagePortNameServer)|Port(?:Coder|NameServer)|SocketPortNameServer|Unarchiver)\\b",
      name: "invalid.deprecated.10.13.support.class.cocoa.objc"
    },
    {
      match: "\\bNS(?:BackingStore(?:Nonretained|Retained)|Drawer(?:Clos(?:edState|ingState)|Open(?:State|ingState))|FileHandlingPanel(?:CancelButton|OKButton)|NativeShortGlyphPacking)\\b",
      name: "invalid.deprecated.10.13.support.constant.cocoa.objc"
    },
    {
      match: "\\bNSMultibyteGlyphPacking\\b",
      name: "invalid.deprecated.10.13.support.type.cocoa.objc"
    },
    {
      match: "\\bNS(?:Connection(?:Did(?:DieNotification|InitializeNotification)|ReplyMode)|D(?:ockWindowLevel|ra(?:gPboard|wer(?:Did(?:CloseNotification|OpenNotification)|Will(?:CloseNotification|OpenNotification))))|F(?:ailedAuthenticationException|indPboard|ontPboard)|GeneralPboard|RulerPboard)\\b",
      name: "invalid.deprecated.10.13.support.variable.cocoa.objc"
    },
    {
      match: "\\b(?:NS(?:BinaryExternalRecordType|E(?:ntityNameInPathKey|xternalRecord(?:ExtensionOption|s(?:DirectoryOption|FileFormatOption)))|ModelPathKey|ObjectURIKey|Store(?:PathKey|UUIDInPathKey)|XMLExternalRecordType)|kPDFAnnotationKey_(?:A(?:ction|dditionalActions|ppearance(?:Dictionary|State))|Border(?:Style)?|Co(?:lor|ntents)|D(?:ate|e(?:faultAppearance|stination))|Flags|HighlightingMode|I(?:conName|n(?:klist|teriorColor))|Line(?:EndingStyles|Points)|Name|Open|P(?:a(?:ge|rent)|opup)|Quad(?:Points|ding)|Rect|Subtype|TextLabel|Widget(?:AppearanceDictionary|DefaultValue|Field(?:Flags|Type)|MaxLen|Options|TextLabelUI|Value)))\\b",
      name: "invalid.deprecated.10.13.support.variable.objc"
    },
    {
      match: "\\b(?:DOM(?:A(?:bstractView|ttr)|Blob|C(?:DATASection|SS(?:CharsetRule|FontFaceRule|ImportRule|MediaRule|P(?:ageRule|rimitiveValue)|Rule(?:List)?|Style(?:Declaration|Rule|Sheet)|UnknownRule|Value(?:List)?)|haracterData|o(?:mment|unter))|Document(?:Fragment|Type)?|E(?:lement|ntity(?:Reference)?|vent)|File(?:List)?|HTML(?:A(?:nchorElement|ppletElement|reaElement)|B(?:RElement|ase(?:Element|FontElement)|odyElement|uttonElement)|Collection|D(?:ListElement|i(?:rectoryElement|vElement)|ocument)|E(?:lement|mbedElement)|F(?:ieldSetElement|o(?:ntElement|rmElement)|rame(?:Element|SetElement))|H(?:RElement|ead(?:Element|ingElement)|tmlElement)|I(?:FrameElement|mageElement|nputElement)|L(?:IElement|abelElement|egendElement|inkElement)|M(?:a(?:pElement|rqueeElement)|e(?:nuElement|taElement)|odElement)|O(?:ListElement|bjectElement|pt(?:GroupElement|ion(?:Element|sCollection)))|P(?:ara(?:graphElement|mElement)|reElement)|QuoteElement|S(?:criptElement|electElement|tyleElement)|T(?:able(?:C(?:aptionElement|ellElement|olElement)|Element|RowElement|SectionElement)|extAreaElement|itleElement)|UListElement)|Implementation|KeyboardEvent|M(?:ediaList|ouseEvent|utationEvent)|N(?:amedNodeMap|ode(?:Iterator|List)?)|O(?:bject|verflowEvent)|Pro(?:cessingInstruction|gressEvent)|R(?:GBColor|ange|ect)|StyleSheet(?:List)?|T(?:ext|reeWalker)|UIEvent|WheelEvent|XPath(?:Expression|Result))|NSOpenGL(?:Context|Layer|PixelFormat|View)|Web(?:Archive|BackForwardList|D(?:ataSource|ownload)|Frame(?:View)?|History(?:Item)?|Preferences|ScriptObject|Undefined|View))\\b",
      name: "invalid.deprecated.10.14.support.class.cocoa.objc"
    },
    {
      match: "\\b(?:CAOpenGLLayer|IKImageBrowserView|QCCompositionLayer)\\b",
      name: "invalid.deprecated.10.14.support.class.objc"
    },
    {
      match: "\\b(?:DOM_(?:A(?:DDITION|LLOW_KEYBOARD_INPUT|NY_(?:TYPE|UNORDERED_NODE_TYPE)|T(?:TRIBUTE_NODE|_TARGET))|B(?:AD_BOUNDARYPOINTS_ERR|O(?:OLEAN_TYPE|TH)|UBBLING_PHASE)|C(?:APTURING_PHASE|DATA_SECTION_NODE|HARSET_RULE|OMMENT_NODE|SS_(?:ATTR|C(?:M|OUNTER|USTOM)|D(?:EG|IMENSION)|E(?:MS|XS)|GRAD|HZ|I(?:DENT|N(?:HERIT)?)|KHZ|M(?:M|S)|NUMBER|P(?:C|ERCENTAGE|RIMITIVE_VALUE|T|X)|R(?:AD|ECT|GBCOLOR)|S(?:TRING)?|U(?:NKNOWN|RI)|V(?:ALUE_LIST|H|M(?:AX|IN)|W)))|DO(?:CUMENT_(?:FRAGMENT_NODE|NODE|POSITION_(?:CONTAIN(?:ED_BY|S)|DISCONNECTED|FOLLOWING|IMPLEMENTATION_SPECIFIC|PRECEDING)|TYPE_NODE)|M(?:STRING_SIZE_ERR|_DELTA_(?:LINE|P(?:AGE|IXEL))))|E(?:LEMENT_NODE|N(?:D_TO_(?:END|START)|TITY_(?:NODE|REFERENCE_NODE)))|F(?:I(?:LTER_(?:ACCEPT|REJECT|SKIP)|RST_ORDERED_NODE_TYPE)|ONT_FACE_RULE)|H(?:IERARCHY_REQUEST_ERR|ORIZONTAL)|I(?:MPORT_RULE|N(?:DEX_SIZE_ERR|USE_ATTRIBUTE_ERR|VALID_(?:ACCESS_ERR|CHARACTER_ERR|EXPRESSION_ERR|MODIFICATION_ERR|NODE_TYPE_ERR|STATE_ERR)))|KEY(?:FRAME(?:S_RULE|_RULE)|_LOCATION_(?:LEFT|NUMPAD|RIGHT|STANDARD))|M(?:EDIA_RULE|ODIFICATION)|N(?:AMESPACE_(?:ERR|RULE)|O(?:DE_(?:AFTER|BEFORE(?:_AND_AFTER)?|INSIDE)|NE|T(?:ATION_NODE|_(?:FOUND_ERR|SUPPORTED_ERR))|_(?:DATA_ALLOWED_ERR|MODIFICATION_ALLOWED_ERR))|UMBER_TYPE)|ORDERED_NODE_(?:ITERATOR_TYPE|SNAPSHOT_TYPE)|P(?:AGE_RULE|ROCESSING_INSTRUCTION_NODE)|REMOVAL|S(?:HOW_(?:A(?:LL|TTRIBUTE)|C(?:DATA_SECTION|OMMENT)|DOCUMENT(?:_(?:FRAGMENT|TYPE))?|E(?:LEMENT|NTITY(?:_REFERENCE)?)|NOTATION|PROCESSING_INSTRUCTION|TEXT)|T(?:ART_TO_(?:END|START)|RING_TYPE|YLE_RULE)|UPPORTS_RULE|YNTAX_ERR)|T(?:EXT_NODE|YPE_ERR)|UN(?:KNOWN_RULE|ORDERED_NODE_(?:ITERATOR_TYPE|SNAPSHOT_TYPE)|SPECIFIED_EVENT_TYPE_ERR)|VERTICAL|W(?:EBKIT_(?:KEYFRAME(?:S_RULE|_RULE)|REGION_RULE)|RONG_DOCUMENT_ERR))|NS(?:LandscapeOrientation|O(?:nlyScrollerArrows|penGL(?:ContextParameter(?:CurrentRendererID|GPU(?:FragmentProcessing|VertexProcessing)|HasDrawable|MPSwapsInFlight|R(?:asterizationEnable|eclaimResources)|S(?:tateValidation|urface(?:BackingSize|O(?:pacity|rder)|SurfaceVolatile)|wap(?:Interval|Rectangle(?:Enable)?)))|GO(?:ClearFormatCache|FormatCacheSize|RetainRenderers|UseBuildCache)|P(?:FA(?:A(?:cc(?:elerated(?:Compute)?|umSize)|l(?:l(?:Renderers|owOfflineRenderers)|phaSize)|ux(?:Buffers|DepthStencil))|BackingStore|C(?:losestPolicy|olor(?:Float|Size))|D(?:epthSize|oubleBuffer)|M(?:aximumPolicy|inimumPolicy|ultisample)|NoRecovery|OpenGLProfile|RendererID|S(?:ample(?:Alpha|Buffers|s)|creenMask|tencilSize|upersample)|TripleBuffer|VirtualScreenCount)|rofileVersion(?:3_2Core|4_1Core|Legacy))))|PortraitOrientation|Scroller(?:DecrementLine|IncrementLine))|Web(?:CacheModel(?:Document(?:Browser|Viewer)|PrimaryWebBrowser)|Drag(?:DestinationAction(?:Any|DHTML|Edit|Load|None)|SourceAction(?:Any|DHTML|Image|Link|None|Selection))|KitError(?:BlockedPlugInVersion|Cannot(?:FindPlugIn|LoadPlugIn|Show(?:MIMEType|URL))|FrameLoadInterruptedByPolicyChange|JavaUnavailable)|MenuItem(?:PDF(?:A(?:ctualSize|utoSize)|Continuous|FacingPages|NextPage|PreviousPage|SinglePage|Zoom(?:In|Out))|Tag(?:C(?:opy(?:ImageToClipboard|LinkToClipboard)?|ut)|Download(?:ImageToDisk|LinkToDisk)|Go(?:Back|Forward)|IgnoreSpelling|L(?:earnSpelling|ookUpInDictionary)|NoGuessesFound|O(?:pen(?:FrameInNewWindow|ImageInNewWindow|LinkInNewWindow|WithDefaultApplication)|ther)|Paste|Reload|S(?:earch(?:InSpotlight|Web)|pellingGuess|top)))|NavigationType(?:BackForward|Form(?:Resubmitted|Submitted)|LinkClicked|Other|Reload)|ViewInsertAction(?:Dropped|Pasted|Typed)))\\b",
      name: "invalid.deprecated.10.14.support.constant.cocoa.objc"
    },
    {
      match: "\\b(?:DOM(?:E(?:ventExceptionCode|xceptionCode)|RangeExceptionCode|XPathExceptionCode)|NS(?:CellStateValue|OpenGL(?:ContextParameter|GlobalOption|PixelFormatAttribute)|Pr(?:intingOrientation|ogressIndicatorThickness)|Scroll(?:ArrowPosition|erArrow)|WindowBackingLocation)|Web(?:CacheModel|Drag(?:DestinationAction|SourceAction)|NavigationType|ViewInsertAction))\\b",
      name: "invalid.deprecated.10.14.support.type.cocoa.objc"
    },
    {
      match: "\\bQLPreviewItemLoadingBlock\\b",
      name: "invalid.deprecated.10.14.support.type.objc"
    },
    {
      match: "\\b(?:DOM(?:E(?:ventException|xception)|RangeException|XPathException)|NS(?:16Bit(?:BigEndianBitmapFormat|LittleEndianBitmapFormat)|32Bit(?:BigEndianBitmapFormat|LittleEndianBitmapFormat)|A(?:cceleratorButton|lpha(?:FirstBitmapFormat|NonpremultipliedBitmapFormat))|BMPFileType|C(?:MYK(?:ColorSpaceModel|ModeColorPanel)|ircularBezelStyle|o(?:lor(?:ListModeColorPanel|PboardType)|ntinuousCapacityLevelIndicatorStyle)|rayonModeColorPanel|ustomPaletteModeColorPanel)|D(?:e(?:faultTokenStyle|viceNColorSpaceModel)|isc(?:losureBezelStyle|reteCapacityLevelIndicatorStyle))|F(?:ile(?:namesPboardType|sPromisePboardType)|loatingPointSamplesBitmapFormat|ontPboardType)|G(?:IFFileType|ray(?:ColorSpaceModel|ModeColorPanel))|H(?:SBModeColorPanel|TMLPboardType|elpButtonBezelStyle)|In(?:dexedColorSpaceModel|kTextPboardType|lineBezelStyle)|JPEG(?:2000FileType|FileType)|KeyedUnarchiveFromDataTransformerName|LABColorSpaceModel|M(?:ixedState|omentary(?:ChangeButton|LightButton|PushInButton)|ulti(?:LevelAcceleratorButton|pleTextSelectionPboardType))|NoModeColorPanel|O(?:ffState|n(?:OffButton|State)|penGLCP(?:CurrentRendererID|GPU(?:FragmentProcessing|VertexProcessing)|HasDrawable|MPSwapsInFlight|R(?:asterizationEnable|eclaimResources)|S(?:tateValidation|urface(?:BackingSize|O(?:pacity|rder)|SurfaceVolatile)|wap(?:Interval|Rectangle(?:Enable)?))))|P(?:DFPboardType|NGFileType|a(?:steboardTypeFindPanelSearchOptions|tternColorSpaceModel)|lainTextTokenStyle|ostScriptPboardType|rogressIndicator(?:BarStyle|SpinningStyle)|ushOnPushOffButton)|R(?:GB(?:ColorSpaceModel|ModeColorPanel)|TF(?:DPboardType|PboardType)|a(?:dioButton|tingLevelIndicatorStyle)|e(?:cessedBezelStyle|gularSquareBezelStyle|levancyLevelIndicatorStyle)|ound(?:RectBezelStyle|ed(?:BezelStyle|DisclosureBezelStyle|TokenStyle))|ulerPboardType)|S(?:ha(?:dowlessSquareBezelStyle|ringServiceName(?:Post(?:ImageOnFlickr|On(?:Facebook|LinkedIn|SinaWeibo|T(?:encentWeibo|witter))|VideoOn(?:Tudou|Vimeo|Youku))|UseAs(?:FacebookProfileImage|LinkedInProfileImage|TwitterProfileImage)))|mallSquareBezelStyle|tringPboardType|witchButton)|T(?:IFF(?:FileType|PboardType)|abularTextPboardType|extured(?:RoundedBezelStyle|SquareBezelStyle)|oggleButton)|U(?:RLPboardType|n(?:archiveFromDataTransformerName|knownColorSpaceModel))|V(?:CardPboardType|iew(?:GlobalFrameDidChangeNotification|NoInstrinsicMetric))|WheelModeColorPanel)|Web(?:A(?:ction(?:ButtonKey|ElementKey|ModifierFlagsKey|NavigationTypeKey|OriginalURLKey)|rchivePboardType)|Element(?:DOMNodeKey|FrameKey|I(?:mage(?:AltStringKey|Key|RectKey|URLKey)|sSelectedKey)|Link(?:LabelKey|T(?:argetFrameKey|itleKey)|URLKey))|History(?:AllItemsRemovedNotification|Item(?:ChangedNotification|s(?:AddedNotification|Key|RemovedNotification))|LoadedNotification|SavedNotification)|KitError(?:Domain|MIMETypeKey|PlugIn(?:NameKey|PageURLStringKey))|P(?:lugIn(?:AttributesKey|BaseURLKey|Contain(?:erKey|ingElementKey)|ShouldLoadMainResourceKey)|referencesChangedNotification)|ViewProgress(?:EstimateChangedNotification|FinishedNotification|StartedNotification)))\\b",
      name: "invalid.deprecated.10.14.support.variable.cocoa.objc"
    },
    {
      match: "\\b(?:IOSurfacePropertyAllocSizeKey|QCComposition(?:InputRSS(?:ArticleDurationKey|FeedURLKey)|ProtocolRSSVisualizer)|kCIImageTexture(?:Format|Target))\\b",
      name: "invalid.deprecated.10.14.support.variable.objc"
    },
    {
      match: "\\bQC(?:Composition(?:P(?:arameterView|icker(?:Panel|View))|Repository)?|P(?:atchController|lugIn(?:ViewController)?)|Renderer|View)\\b",
      name: "invalid.deprecated.10.15.support.class.objc"
    },
    {
      match: "\\bNSURLNetworkServiceTypeVoIP\\b",
      name: "invalid.deprecated.10.15.support.constant.cocoa.objc"
    },
    {
      match: "\\bQCPlugIn(?:BufferReleaseCallback|ExecutionMode|T(?:extureReleaseCallback|imeMode))\\b",
      name: "invalid.deprecated.10.15.support.type.objc"
    },
    {
      match: "\\bQC(?:Composition(?:Attribute(?:BuiltInKey|C(?:ategoryKey|opyrightKey)|DescriptionKey|HasConsumersKey|IsTimeDependentKey|NameKey)|Category(?:Distortion|Stylize|Utility)|Input(?:Audio(?:PeakKey|SpectrumKey)|DestinationImageKey|ImageKey|Pr(?:eviewModeKey|imaryColorKey)|S(?:creenImageKey|econdaryColorKey|ourceImageKey)|Track(?:InfoKey|PositionKey|SignalKey)|XKey|YKey)|Output(?:ImageKey|WebPageURLKey)|P(?:icker(?:PanelDidSelectCompositionNotification|ViewDidSelectCompositionNotification)|rotocol(?:Graphic(?:Animation|Transition)|ImageFilter|MusicVisualizer|ScreenSaver))|RepositoryDidUpdateNotification)|P(?:lugIn(?:Attribute(?:C(?:ategoriesKey|opyrightKey)|DescriptionKey|ExamplesKey|NameKey)|ExecutionArgument(?:EventKey|MouseLocationKey)|PixelFormat(?:ARGB8|BGRA8|I(?:8|f)|RGBAf))|ort(?:Attribute(?:DefaultValueKey|M(?:aximumValueKey|enuItemsKey|inimumValueKey)|NameKey|TypeKey)|Type(?:Boolean|Color|I(?:mage|ndex)|Number|Str(?:ing|ucture))))|Renderer(?:EventKey|MouseLocationKey)|ViewDidSt(?:artRenderingNotification|opRenderingNotification))\\b",
      name: "invalid.deprecated.10.15.support.variable.objc"
    },
    {
      match: "\\bNSPrint(?:FormName|JobFeatures|ManualFeed|Pa(?:gesPerSheet|perFeed))\\b",
      name: "invalid.deprecated.10.2.support.variable.cocoa.objc"
    },
    {
      match: "\\bNSOpenGLGOResetLibrary\\b",
      name: "invalid.deprecated.10.4.support.constant.cocoa.objc"
    },
    {
      match: "\\bNS(?:F(?:TPProperty(?:ActiveTransferModeKey|F(?:TPProxy|ileOffsetKey)|User(?:LoginKey|PasswordKey))|ontColorAttribute)|HTTPProperty(?:ErrorPageDataKey|HTTPProxy|RedirectionHeadersKey|S(?:erverHTTPVersionKey|tatus(?:CodeKey|ReasonKey)))|ViewFocusDidChangeNotification)\\b",
      name: "invalid.deprecated.10.4.support.variable.cocoa.objc"
    },
    {
      match: "\\bNSMovie\\b",
      name: "invalid.deprecated.10.5.support.class.cocoa.objc"
    },
    {
      match: "\\bNSOpenGLPFA(?:M(?:PSafe|ultiScreen)|Robust)\\b",
      name: "invalid.deprecated.10.5.support.constant.cocoa.objc"
    },
    {
      match: "\\bNS(?:AMPMDesignation|CurrencySymbol|D(?:ate(?:FormatString|TimeOrdering)|ecimal(?:Digits|Separator))|EarlierTimeDesignations|HourNameDesignations|Int(?:HashCallBacks|Map(?:KeyCallBacks|ValueCallBacks)|ernationalCurrencyString)|LaterTimeDesignations|MonthNameArray|Ne(?:gativeCurrencyFormatString|xt(?:DayDesignations|NextDayDesignations))|P(?:ositiveCurrencyFormatString|riorDayDesignations)|Short(?:DateFormatString|MonthNameArray|TimeDateFormatString|WeekDayNameArray)|T(?:h(?:isDayDesignations|ousandsSeparator)|ime(?:DateFormatString|FormatString))|VoiceLanguage|WeekDayNameArray|YearMonthWeekDesignations)\\b",
      name: "invalid.deprecated.10.5.support.variable.cocoa.objc"
    },
    {
      match: "\\bNS(?:CachedImageRep|Input(?:Manager|Server))\\b",
      name: "invalid.deprecated.10.6.support.class.cocoa.objc"
    },
    {
      match: "\\bNSOpenGLPFAFullScreen\\b",
      name: "invalid.deprecated.10.6.support.constant.cocoa.objc"
    },
    {
      match: "\\bNS(?:A(?:ccessibilitySortButtonRole|pplicationFileType)|CalibratedBlackColorSpace|D(?:eviceBlackColorSpace|irectoryFileType)|ErrorFailingURLStringKey|FilesystemFileType|P(?:ICTPboardType|lainFileType|rintSavePath)|ShellCommandFileType)\\b",
      name: "invalid.deprecated.10.6.support.variable.cocoa.objc"
    },
    {
      match: "\\bNSOpenGLPixelBuffer\\b",
      name: "invalid.deprecated.10.7.support.class.cocoa.objc"
    },
    {
      match: "\\bNS(?:AutosaveOperation|OpenGLPFA(?:OffScreen|PixelBuffer|RemotePixelBuffer)|PathStyleNavigationBar)\\b",
      name: "invalid.deprecated.10.7.support.constant.cocoa.objc"
    },
    {
      match: "\\b(?:NS(?:FileHandleNotificationMonitorModes|ImageNameDotMac)|kAB(?:AIM(?:HomeLabel|InstantProperty|MobileMeLabel|WorkLabel)|ICQ(?:HomeLabel|InstantProperty|WorkLabel)|Jabber(?:HomeLabel|InstantProperty|WorkLabel)|MSN(?:HomeLabel|InstantProperty|WorkLabel)|Yahoo(?:HomeLabel|InstantProperty|WorkLabel)))\\b",
      name: "invalid.deprecated.10.7.support.variable.cocoa.objc"
    },
    {
      match: "\\bNS(?:MacintoshInterfaceStyle|N(?:extStepInterfaceStyle|oInterfaceStyle)|PointerFunctionsZeroingWeakMemory|Windows95InterfaceStyle)\\b",
      name: "invalid.deprecated.10.8.support.constant.cocoa.objc"
    },
    {
      match: "\\bNSInterfaceStyle\\b",
      name: "invalid.deprecated.10.8.support.type.cocoa.objc"
    },
    { match: "\\bCalSpan\\b", name: "invalid.deprecated.10.8.support.type.objc" },
    {
      match: "\\bNS(?:ApplicationLaunchRemoteNotificationKey|HashTableZeroingWeakMemory|InterfaceStyleDefault|MapTableZeroingWeakMemory|Nib(?:Owner|TopLevelObjects)|URLUbiquitousItemPercent(?:DownloadedKey|UploadedKey))\\b",
      name: "invalid.deprecated.10.8.support.variable.cocoa.objc"
    },
    {
      match: "\\bCal(?:AlarmAction(?:Display|Email|Procedure|Sound)|Calendar(?:StoreErrorDomain|Type(?:Birthday|CalDAV|Exchange|IMAP|Local|Subscription)|sChanged(?:ExternallyNotification|Notification))|DefaultRecurrenceInterval|EventsChanged(?:ExternallyNotification|Notification)|SenderProcessIDKey|TasksChanged(?:ExternallyNotification|Notification)|UserUIDKey)\\b",
      name: "invalid.deprecated.10.8.support.variable.objc"
    },
    {
      match: "\\bNS(?:NoUnderlineStyle|OpenGLPFA(?:Compliant|SingleRenderer|Window)|SingleUnderlineStyle|URLBookmarkCreationPreferFileIDResolution)\\b",
      name: "invalid.deprecated.10.9.support.constant.cocoa.objc"
    },
    {
      match: "\\bNS(?:M(?:etadataUbiquitousItemIsDownloadedKey|omentary(?:Light|PushButton))|U(?:RLUbiquitousItemIsDownloadedKey|n(?:derlineStrikethroughMask|scaledWindowMask)))\\b",
      name: "invalid.deprecated.10.9.support.variable.cocoa.objc"
    },
    {
      match: "\\bNSUserNotification(?:Action|Center)?\\b",
      name: "invalid.deprecated.tba.support.class.cocoa.objc"
    },
    {
      match: "\\bNS(?:AtomicWrite|DataReadingMapped|JSONReadingAllowFragments|MappedRead|U(?:ncachedRead|serNotificationActivationType(?:ActionButtonClicked|ContentsClicked|None))|VisualEffectMaterial(?:AppearanceBased|Dark|Light|MediumLight|UltraDark)|W(?:indowStyleMaskTexturedBackground|orkspaceLaunch(?:A(?:nd(?:Hide(?:Others)?|Print)|sync)|Default|InhibitingBackgroundOnly|NewInstance|With(?:ErrorPresentation|outA(?:ctivation|ddingToRecents)))))\\b",
      name: "invalid.deprecated.tba.support.constant.cocoa.objc"
    },
    {
      match: "\\bNS(?:UserNotificationActivationType|WorkspaceLaunchConfigurationKey)\\b",
      name: "invalid.deprecated.tba.support.type.cocoa.objc"
    },
    {
      match: "\\bNS(?:AutoPagination|B(?:ackgroundStyle(?:Dark|Light)|evelLineJoinStyle|ox(?:OldStyle|Secondary)|uttLineCapStyle)|C(?:l(?:ipPagination|o(?:ckAndCalendarDatePickerStyle|sePathBezierPathElement))|ontrolTintDidChangeNotification|urveToBezierPathElement)|E(?:raDatePickerElementFlag|venOddWindingRule)|FitPagination|HourMinute(?:DatePickerElementFlag|SecondDatePickerElementFlag)|LineToBezierPathElement|M(?:iterLineJoinStyle|oveToBezierPathElement|ultipleValuesMarker)|No(?:SelectionMarker|nZeroWindingRule|tApplicableMarker)|R(?:angeDateMode|oundLine(?:CapStyle|JoinStyle))|S(?:ingleDateMode|quareLineCapStyle)|T(?:extField(?:AndStepperDatePickerStyle|DatePickerStyle)|humbnail1024x1024SizeKey|imeZoneDatePickerElementFlag|oolbar(?:CustomizeToolbarItemIdentifier|SeparatorItemIdentifier))|U(?:RLThumbnail(?:DictionaryKey|Key)|serNotificationDefaultSoundName)|WorkspaceLaunchConfiguration(?:A(?:ppleEvent|r(?:chitecture|guments))|Environment)|YearMonthDa(?:tePickerElementFlag|yDatePickerElementFlag))\\b",
      name: "invalid.deprecated.tba.support.variable.cocoa.objc"
    },
    {
      match: "\\bIB(?:Action|Inspectable|Outlet|_DESIGNABLE)\\b",
      name: "storage.type.cocoa.objc"
    },
    { match: "\\binstancetype\\b", name: "storage.type.objc" },
    {
      match: "\\b(?:CI(?:QRCodeFeature|RectangleFeature)|NS(?:AsynchronousFetchRe(?:quest|sult)|BatchUpdateRe(?:quest|sult)|PersistentStore(?:AsynchronousResult|Result)))\\b",
      name: "support.class.10.10.objc"
    },
    {
      match: "\\b(?:AU(?:AudioUnit(?:Bus(?:Array)?|Preset|V2Bridge)?|Parameter(?:Group|Node|Tree)?)|C(?:A(?:MetalLayer|SpringAnimation)|I(?:ColorKernel|TextFeature|WarpKernel))|M(?:DL(?:A(?:reaLight|sset)|C(?:amera|heckerboardTexture|olorSwatchTexture)|Light(?:Probe)?|M(?:aterial(?:Property)?|esh(?:Buffer(?:Data(?:Allocator)?|Map))?)|No(?:iseTexture|rmalMapTexture)|Object(?:Container)?|Ph(?:otometricLight|ysicallyPlausible(?:Light|ScatteringFunction))|S(?:catteringFunction|kyCubeTexture|tereoscopicCamera|ubmesh(?:Topology)?)|T(?:exture(?:Filter|Sampler)?|ransform)|URLTexture|V(?:ertex(?:Attribute(?:Data)?|BufferLayout|Descriptor)|oxelArray))|T(?:K(?:Mesh(?:Buffer(?:Allocator)?)?|Submesh|TextureLoader|View)|L(?:Ar(?:gument|rayType)|Comp(?:ileOptions|utePipeline(?:Descriptor|Reflection))|DepthStencilDescriptor|RenderP(?:ass(?:AttachmentDescriptor|ColorAttachmentDescriptor(?:Array)?|De(?:pthAttachmentDescriptor|scriptor)|StencilAttachmentDescriptor)|ipeline(?:ColorAttachmentDescriptor(?:Array)?|Descriptor|Reflection))|S(?:amplerDescriptor|t(?:encilDescriptor|ruct(?:Member|Type)))|TextureDescriptor|Vertex(?:Attribute(?:Descriptor(?:Array)?)?|BufferLayoutDescriptor(?:Array)?|Descriptor))))|NS(?:BatchDeleteRe(?:quest|sult)|ConstraintConflict))\\b",
      name: "support.class.10.11.objc"
    },
    {
      match: "\\b(?:CIImageProcessorKernel|IOSurface|M(?:DLMaterialProperty(?:Connection|Graph|Node)|TL(?:Attribute(?:Descriptor(?:Array)?)?|BufferLayoutDescriptor(?:Array)?|FunctionConstant(?:Values)?|StageInputOutputDescriptor))|NS(?:FetchedResultsController|Persistent(?:Container|StoreDescription)|QueryGenerationToken))\\b",
      name: "support.class.10.12.objc"
    },
    {
      match: "\\b(?:CI(?:AztecCodeDescriptor|B(?:arcodeDescriptor|lendKernel)|DataMatrixCodeDescriptor|PDF417CodeDescriptor|QRCodeDescriptor|Render(?:Destination|Info|Task))|M(?:DL(?:Animat(?:ed(?:Matrix4x4|QuaternionArray|Scalar(?:Array)?|V(?:alue|ector(?:2|3(?:Array)?|4)))|ionBindComponent)|BundleAssetResolver|M(?:atrix4x4Array|eshBufferZoneDefault)|Pa(?:ckedJointAnimation|thAssetResolver)|RelativeAssetResolver|Skeleton|Transform(?:MatrixOp|Rotate(?:Op|XOp|YOp|ZOp)|S(?:caleOp|tack)|TranslateOp))|TL(?:ArgumentDescriptor|CaptureManager|HeapDescriptor|P(?:ipelineBufferDescriptor(?:Array)?|ointerType)|T(?:extureReferenceType|ype)))|NS(?:CoreDataCoreSpotlightDelegate|FetchIndex(?:Description|ElementDescription)|PersistentHistory(?:Change(?:Request)?|Result|T(?:oken|ransaction)))|PDFAppearanceCharacteristics)\\b",
      name: "support.class.10.13.objc"
    },
    {
      match: "\\bM(?:DL(?:AnimatedQuaternion|TransformOrientOp)|TL(?:IndirectCommandBufferDescriptor|Shared(?:Event(?:Handle|Listener)|TextureHandle)))\\b",
      name: "support.class.10.14.objc"
    },
    {
      match: "\\b(?:CAEDRMetadata|MTL(?:C(?:aptureDescriptor|ounterSampleBufferDescriptor)|RasterizationRate(?:Layer(?:Array|Descriptor)|MapDescriptor|SampleArray))|NS(?:BatchInsertRe(?:quest|sult)|DerivedAttributeDescription|PersistentCloudKitContainer(?:Options)?))\\b",
      name: "support.class.10.15.objc"
    },
    {
      match: "\\b(?:NS(?:AccessibilityElement|BackgroundActivityScheduler|ClickGestureRecognizer|Date(?:ComponentsFormatter|IntervalFormatter)|E(?:nergyFormatter|xtension(?:Context|Item))|FileAccessIntent|GestureRecognizer|ItemProvider|LengthFormatter|Ma(?:gnificationGestureRecognizer|ssFormatter)|P(?:a(?:nGestureRecognizer|thControlItem)|ress(?:GestureRecognizer|ureConfiguration))|RotationGestureRecognizer|S(?:plitView(?:Controller|Item)|t(?:atusBarButton|oryboard(?:Segue)?))|T(?:abViewController|itlebarAccessoryViewController)|U(?:RLQueryItem|serActivity)|VisualEffectView)|WK(?:BackForwardList(?:Item)?|FrameInfo|Navigation(?:Action|Response)?|Pr(?:eferences|ocessPool)|ScriptMessage|User(?:ContentController|Script)|W(?:ebView(?:Configuration)?|indowFeatures)))\\b",
      name: "support.class.cocoa.10.10.objc"
    },
    {
      match: "\\b(?:NS(?:AlignmentFeedbackFilter|CollectionView(?:FlowLayout(?:InvalidationContext)?|GridLayout|Layout(?:Attributes|InvalidationContext)?|TransitionLayout|UpdateItem)|D(?:ataAsset|ictionaryControllerKeyValuePair)|HapticFeedbackManager|Layout(?:Anchor|Dimension|Guide|XAxisAnchor|YAxisAnchor)|PersonNameComponents(?:Formatter)?|StringDrawingContext|TableViewRowAction|URLSessionStreamTask)|WK(?:SecurityOrigin|WebsiteData(?:Record|Store)))\\b",
      name: "support.class.cocoa.10.11.objc"
    },
    {
      match: "\\b(?:NS(?:C(?:andidateListTouchBarItem|olorPickerTouchBarItem|ustomTouchBarItem)|D(?:ateInterval|imension)|FilePromise(?:Provider|Receiver)|Gr(?:id(?:C(?:ell|olumn)|Row|View)|oupTouchBarItem)|ISO8601DateFormatter|Measurement(?:Formatter)?|PopoverTouchBarItem|S(?:crubber(?:ArrangedView|FlowLayout|I(?:mageItemView|temView)|Layout(?:Attributes)?|ProportionalLayout|Selection(?:Style|View)|TextItemView)?|haringServicePickerTouchBarItem|lider(?:Accessory(?:Behavior)?|TouchBarItem))|TouchBar(?:Item)?|U(?:RLSessionTask(?:Metrics|TransactionMetrics)|nit(?:A(?:cceleration|ngle|rea)|Con(?:centrationMass|verter(?:Linear)?)|D(?:ispersion|uration)|E(?:lectric(?:C(?:harge|urrent)|PotentialDifference|Resistance)|nergy)|F(?:requency|uelEfficiency)|Illuminance|Length|Mass|P(?:ower|ressure)|Speed|Temperature|Volume)?))|WKOpenPanelParameters)\\b",
      name: "support.class.cocoa.10.12.objc"
    },
    {
      match: "\\b(?:NS(?:AccessibilityCustom(?:Action|Rotor(?:ItemResult|SearchParameters)?)|F(?:ileProviderService|ontAssetRequest)|UserInterfaceCompressionOptions|WindowTab(?:Group)?)|WK(?:ContentRuleList(?:Store)?|HTTPCookieStore|SnapshotConfiguration))\\b",
      name: "support.class.cocoa.10.13.objc"
    },
    {
      match: "\\b(?:NS(?:BindingSelectionMarker|SecureUnarchiveFromDataTransformer|WorkspaceAuthorization)|UN(?:CalendarNotificationTrigger|MutableNotificationContent|Notification(?:A(?:ction|ttachment)|C(?:ategory|ontent)|Re(?:quest|sponse)|S(?:e(?:rviceExtension|ttings)|ound)|Trigger)?|PushNotificationTrigger|T(?:extInputNotification(?:Action|Response)|imeIntervalNotificationTrigger)|UserNotificationCenter))\\b",
      name: "support.class.cocoa.10.14.objc"
    },
    {
      match: "\\b(?:NS(?:ButtonTouchBarItem|Col(?:lection(?:Layout(?:Anchor|BoundarySupplementaryItem|D(?:ecorationItem|imension)|EdgeSpacing|Group(?:CustomItem)?|Item|S(?:ection|ize|pacing|upplementaryItem))|View(?:CompositionalLayout(?:Configuration)?|DiffableDataSource))|orSampler)|DiffableDataSourceSnapshot|ListFormatter|MenuToolbarItem|OrderedCollection(?:Change|Difference)|PickerTouchBarItem|RelativeDateTimeFormatter|S(?:haringServicePickerToolbarItem|tepperTouchBarItem|witch)|TextCheckingController|U(?:RLSessionWebSocket(?:Message|Task)|nitInformationStorage)|WorkspaceOpenConfiguration)|WKWebpagePreferences)\\b",
      name: "support.class.cocoa.10.15.objc"
    },
    {
      match: "\\bNS(?:ByteCountFormatter|PageController|SharingService(?:Picker)?|TextAlternatives|U(?:UID|ser(?:A(?:ppleScriptTask|utomatorTask)|ScriptTask|UnixTask))|XPC(?:Co(?:der|nnection)|Interface|Listener(?:Endpoint)?))\\b",
      name: "support.class.cocoa.10.8.objc"
    },
    {
      match: "\\bNS(?:Appearance|MediaLibraryBrowserController|P(?:DF(?:Info|Panel)|rogress)|StackView|URL(?:Components|Session(?:Configuration|Task)?))\\b",
      name: "support.class.cocoa.10.9.objc"
    },
    {
      match: "\\b(?:AB(?:AddressBook|Group|Mu(?:ltiValue|tableMultiValue)|Pe(?:oplePickerView|rson(?:View)?)|Record|SearchElement)|NS(?:A(?:TSTypesetter|ctionCell|ffineTransform|lert|nimation(?:Context)?|ppl(?:e(?:Event(?:Descriptor|Manager)|Script)|ication)|rray(?:Controller)?|ssertionHandler|ttributedString|utoreleasePool)|B(?:ezierPath|itmapImageRep|lockOperation|ox|rowser(?:Cell)?|u(?:ndle(?:ResourceRequest)?|tton(?:Cell)?))|C(?:IImageRep|a(?:che(?:dURLResponse)?|lendar)|ell|haracterSet|l(?:assDescription|ipView|o(?:neCommand|seCommand))|o(?:der|l(?:lectionView(?:Item)?|or(?:List|P(?:anel|icker)|Space|Well)?)|m(?:boBox(?:Cell)?|p(?:arisonPredicate|oundPredicate))|n(?:dition(?:Lock)?|stantString|trol(?:ler)?)|unt(?:Command|edSet))|reateCommand|u(?:rsor|stomImageRep))|D(?:at(?:a(?:Detector)?|e(?:Components|Formatter|Picker(?:Cell)?)?)|e(?:cimalNumber(?:Handler)?|leteCommand)|i(?:ctionary(?:Controller)?|rectoryEnumerator|stributed(?:Lock|NotificationCenter))|oc(?:kTile|ument(?:Controller)?)|ragging(?:I(?:mageComponent|tem)|Session))|E(?:PSImageRep|numerator|rror|vent|x(?:ception(?:Handler)?|istsCommand|pression))|F(?:ile(?:Coordinator|Handle|Manager|Security|Version|Wrapper)|o(?:nt(?:Collection|Descriptor|Manager|Panel)?|rm(?:Cell|atter)))|G(?:etCommand|lyph(?:Generator|Info)|ra(?:dient|phicsContext))|H(?:TTP(?:Cookie(?:Storage)?|URLResponse)|ashTable|elpManager|ost)|I(?:mage(?:Cell|Rep|View)?|n(?:dex(?:Path|S(?:et|pecifier))|putStream|vocation(?:Operation)?))|JSONSerialization|Keyed(?:Archiver|Unarchiver)|L(?:ayout(?:Constraint|Manager)|evelIndicator(?:Cell)?|inguisticTagger|o(?:c(?:ale|k)|gicalTest))|M(?:a(?:chPort|pTable|trix)|e(?:nu(?:Item(?:Cell)?)?|ssagePort|t(?:adata(?:Item|Query(?:AttributeValueTuple|ResultGroup)?)|hodSignature))|iddleSpecifier|oveCommand|utable(?:A(?:rray|ttributedString)|CharacterSet|D(?:ata|ictionary)|FontCollection|IndexSet|OrderedSet|ParagraphStyle|S(?:et|tring)|URLRequest))|N(?:ameSpecifier|etService(?:Browser)?|ib(?:Con(?:nector|trolConnector)|OutletConnector)?|otification(?:Center|Queue)?|u(?:ll|mber(?:Formatter)?))|O(?:bjectController|pe(?:nPanel|ration(?:Queue)?)|r(?:deredSet|thography)|ut(?:lineView|putStream))|P(?:DFImageRep|ICTImageRep|a(?:geLayout|nel|ragraphStyle|steboard(?:Item)?|thC(?:ell|o(?:mponentCell|ntrol)))|ersistentDocument|ipe|o(?:inter(?:Array|Functions)|p(?:UpButton(?:Cell)?|over)|rt(?:Message)?|sitionalSpecifier)|r(?:edicate(?:Editor(?:RowTemplate)?)?|int(?:Info|Operation|Panel|er)|o(?:cessInfo|gressIndicator|perty(?:ListSerialization|Specifier)|tocolChecker|xy))|urgeableData)|QuitCommand|R(?:an(?:domSpecifier|geSpecifier)|e(?:cursiveLock|gularExpression|lativeSpecifier|sponder)|u(?:le(?:Editor|r(?:Marker|View))|n(?:Loop|ningApplication)))|S(?:avePanel|c(?:anner|r(?:een|ipt(?:C(?:lassDescription|o(?:ercionHandler|mmand(?:Description)?))|ExecutionContext|ObjectSpecifier|SuiteRegistry|WhoseTest)|oll(?:View|er)))|e(?:archField(?:Cell)?|cureTextField(?:Cell)?|gmentedC(?:ell|ontrol)|t(?:Command)?)|hadow|impleCString|lider(?:Cell)?|o(?:cketPort|rtDescriptor|und)|p(?:e(?:cifierTest|ech(?:Recognizer|Synthesizer)|ll(?:Checker|Server))|litView)|t(?:atus(?:Bar|Item)|epper(?:Cell)?|r(?:eam|ing)))|T(?:a(?:b(?:View(?:Item)?|le(?:C(?:ellView|olumn)|Header(?:Cell|View)|RowView|View))|sk)|ext(?:Attachment(?:Cell)?|Block|C(?:heckingResult|ontainer)|Fi(?:eld(?:Cell)?|nder)|InputContext|List|Storage|Tab(?:le(?:Block)?)?|View)?|hread|ime(?:Zone|r)|o(?:kenField(?:Cell)?|olbar(?:Item(?:Group)?)?|uch)|r(?:ackingArea|ee(?:Controller|Node))|ypesetter)|U(?:RL(?:AuthenticationChallenge|C(?:ache|onnection|redential(?:Storage)?)|Download|Handle|Prot(?:ectionSpace|ocol)|Re(?:quest|sponse)|Session(?:D(?:ataTask|ownloadTask)|UploadTask))?|biquitousKeyValueStore|n(?:doManager|iqueIDSpecifier)|serDefaults(?:Controller)?)|V(?:alue(?:Transformer)?|iew(?:Animation|Controller)?)|W(?:hoseSpecifier|indow(?:Controller)?|orkspace)|XML(?:D(?:TD(?:Node)?|ocument)|Element|Node|Parser))|UNLocationNotificationTrigger|WebResource)\\b",
      name: "support.class.cocoa.objc"
    },
    {
      match: "\\b(?:AM(?:A(?:ction|ppleScriptAction)|BundleAction|ShellScriptAction|Work(?:flow(?:Controller|View)?|space))|C(?:A(?:Animation(?:Group)?|BasicAnimation|Constraint(?:LayoutManager)?|DisplayLink|Emitter(?:Cell|Layer)|GradientLayer|KeyframeAnimation|Layer|MediaTimingFunction|PropertyAnimation|Re(?:moteLayer(?:Client|Server)|nderer|plicatorLayer)|S(?:crollLayer|hapeLayer)|T(?:extLayer|iledLayer|rans(?:action|formLayer|ition))|ValueFunction)|B(?:GroupIdentity|Identity(?:Authority|Picker)?|UserIdentity)|I(?:Co(?:lor|ntext)|Detector|F(?:aceFeature|eature|ilter(?:Generator|Shape)?)|Image(?:Accumulator)?|Kernel|PlugIn|Sampler|Vector)|X(?:A(?:ction|nswerCallAction)|Call(?:Action|Controller|Directory(?:ExtensionContext|Manager|Provider)|Observer|Update)?|EndCallAction|Handle|P(?:layDTMFCallAction|rovider(?:Configuration)?)|S(?:et(?:GroupCallAction|HeldCallAction|MutedCallAction)|tartCallAction)|Transaction)|al(?:A(?:larm|ttendee)|Calendar(?:Item|Store)?|Event|NthWeekDay|Recurrence(?:End|Rule)|Task))|DR(?:Burn|CDTextBlock|Device|Erase|F(?:SObject|ile|older)|MSF(?:Formatter)?|NotificationCenter|Track)|I(?:C(?:Camera(?:Device|F(?:ile|older)|Item)|Device(?:Browser)?|Scanner(?:BandData|Device|F(?:eature(?:Boolean|Enumeration|Range|Template)?|unctionalUnit(?:DocumentFeeder|Flatbed|NegativeTransparency|PositiveTransparency)?)))|K(?:CameraDeviceView|DeviceBrowserView|Filter(?:Browser(?:Panel|View)|UIView)|Image(?:BrowserCell|EditPanel|View)|PictureTaker|S(?:aveOptions|cannerDeviceView|lideshow))|OBluetooth(?:AccessibilityIgnored(?:ImageCell|TextFieldCell)|Device(?:Inquiry|Pair|SelectorController)?|H(?:andsFree(?:AudioGateway|Device)?|ostController)|L2CAPChannel|O(?:BEXSession|bject(?:PushUIController)?)|Pa(?:iringController|sskeyDisplay)|RFCOMMChannel|S(?:DP(?:DataElement|Service(?:Attribute|Record)|UUID)|erviceBrowserController)|UserNotification))|NS(?:At(?:omicStore(?:CacheNode)?|tributeDescription)|E(?:ntity(?:Description|M(?:apping|igrationPolicy))|xpressionDescription)|Fetch(?:Request(?:Expression)?|edPropertyDescription)|IncrementalStore(?:Node)?|M(?:a(?:nagedObject(?:Context|ID|Model)?|ppingModel)|erge(?:Conflict|Policy)|igrationManager)|Object|P(?:ersistentStore(?:Coordinator|Request)?|r(?:eferencePane|operty(?:Description|Mapping)))|RelationshipDescription|SaveChangesRequest)|O(?:BEX(?:FileTransferServices|Session)|SA(?:Language(?:Instance)?|Script(?:Controller|View)?))|PDF(?:A(?:ction(?:GoTo|Named|Re(?:moteGoTo|setForm)|URL)?|nnotation)|Border|D(?:estination|ocument)|Outline|Page|Selection|ThumbnailView|View)|Q(?:LPreview(?:Panel|View)|uartzFilter(?:Manager|View)?)|S(?:F(?:Authorization(?:PluginView|View)?|C(?:ertificate(?:Panel|TrustPanel|View)|hooseIdentity(?:Panel|TableCellView))|KeychainS(?:avePanel|ettingsPanel))|creenSaver(?:Defaults|View)))\\b",
      name: "support.class.objc"
    },
    {
      match: "\\bNS(?:BatchUpdateRequestType|StatusOnlyResultType|UpdatedObject(?:IDsResultType|sCountResultType))\\b",
      name: "support.constant.10.10.objc"
    },
    {
      match: "\\b(?:MTL(?:Argument(?:Access(?:Read(?:Only|Write)|WriteOnly)|Type(?:Buffer|Sampler|T(?:exture|hreadgroupMemory)))|Bl(?:end(?:Factor(?:Blend(?:Alpha|Color)|Destination(?:Alpha|Color)|One(?:Minus(?:Blend(?:Alpha|Color)|Destination(?:Alpha|Color)|Source(?:Alpha|Color)))?|Source(?:Alpha(?:Saturated)?|Color)|Zero)|Operation(?:Add|M(?:ax|in)|ReverseSubtract|Subtract))|itOption(?:DepthFromDepthStencil|None|StencilFromDepthStencil))|C(?:PUCacheMode(?:DefaultCache|WriteCombined)|o(?:lorWriteMask(?:Al(?:l|pha)|Blue|Green|None|Red)|m(?:mandBuffer(?:Error(?:Blacklisted|In(?:ternal|validResource)|No(?:ne|tPermitted)|OutOfMemory|PageFault|Timeout)|Status(?:Com(?:mitted|pleted)|E(?:nqueued|rror)|NotEnqueued|Scheduled))|pareFunction(?:Always|Equal|Greater(?:Equal)?|Less(?:Equal)?|N(?:ever|otEqual))))|ullMode(?:Back|Front|None))|D(?:ataType(?:Array|Bool(?:2|3|4)?|Char(?:2|3|4)?|Float(?:2(?:x(?:2|3|4))?|3(?:x(?:2|3|4))?|4(?:x(?:2|3|4))?)?|Half(?:2(?:x(?:2|3|4))?|3(?:x(?:2|3|4))?|4(?:x(?:2|3|4))?)?|Int(?:2|3|4)?|None|S(?:hort(?:2|3|4)?|truct)|U(?:Char(?:2|3|4)?|Int(?:2|3|4)?|Short(?:2|3|4)?))|epthClipModeCl(?:amp|ip))|F(?:eatureSet_(?:OSX_GPUFamily1_v1|macOS_GPUFamily1_v1)|unctionType(?:Fragment|Kernel|Vertex))|IndexTypeUInt(?:16|32)|L(?:anguageVersion1_1|ibraryError(?:Compile(?:Failure|Warning)|Internal|Unsupported)|oadAction(?:Clear|DontCare|Load))|P(?:i(?:pelineOption(?:ArgumentInfo|BufferTypeInfo|None)|xelFormat(?:A8Unorm|B(?:C(?:1_RGBA(?:_sRGB)?|2_RGBA(?:_sRGB)?|3_RGBA(?:_sRGB)?|4_R(?:Snorm|Unorm)|5_RG(?:Snorm|Unorm)|6H_RGB(?:Float|Ufloat)|7_RGBAUnorm(?:_sRGB)?)|GR(?:A8Unorm(?:_sRGB)?|G422))|Depth(?:24Unorm_Stencil8|32Float(?:_Stencil8)?)|GBGR422|Invalid|R(?:16(?:Float|S(?:int|norm)|U(?:int|norm))|32(?:Float|Sint|Uint)|8(?:S(?:int|norm)|U(?:int|norm))|G(?:1(?:1B10Float|6(?:Float|S(?:int|norm)|U(?:int|norm)))|32(?:Float|Sint|Uint)|8(?:S(?:int|norm)|U(?:int|norm))|B(?:10A2U(?:int|norm)|9E5Float|A(?:16(?:Float|S(?:int|norm)|U(?:int|norm))|32(?:Float|Sint|Uint)|8(?:S(?:int|norm)|U(?:int|norm(?:_sRGB)?))))))|Stencil8))|rimitiveT(?:opologyClass(?:Line|Point|Triangle|Unspecified)|ype(?:Line(?:Strip)?|Point|Triangle(?:Strip)?))|urgeableState(?:Empty|KeepCurrent|NonVolatile|Volatile))|Resource(?:CPUCacheMode(?:DefaultCache|WriteCombined)|OptionCPUCacheMode(?:Default|WriteCombined)|StorageMode(?:Managed|Private|Shared))|S(?:ampler(?:AddressMode(?:ClampTo(?:Edge|Zero)|Mirror(?:ClampToEdge|Repeat)|Repeat)|Mi(?:nMagFilter(?:Linear|Nearest)|pFilter(?:Linear|N(?:earest|otMipmapped))))|t(?:encilOperation(?:Decrement(?:Clamp|Wrap)|In(?:crement(?:Clamp|Wrap)|vert)|Keep|Replace|Zero)|or(?:ageMode(?:Managed|Private|Shared)|eAction(?:DontCare|MultisampleResolve|Store))))|T(?:exture(?:Type(?:1D(?:Array)?|2D(?:Array|Multisample)?|3D|Cube(?:Array)?)|Usage(?:PixelFormatView|RenderTarget|Shader(?:Read|Write)|Unknown))|riangleFillMode(?:Fill|Lines))|V(?:ertex(?:Format(?:Char(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)|Float(?:2|3|4)?|Half(?:2|3|4)|In(?:t(?:1010102Normalized|2|3|4)?|valid)|Short(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)|U(?:Char(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)|Int(?:1010102Normalized|2|3|4)?|Short(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)))|StepFunction(?:Constant|Per(?:Instance|Vertex)))|isibilityResultMode(?:Boolean|Counting|Disabled))|WindingC(?:lockwise|ounterClockwise))|NSBatchDeleteRe(?:questType|sultType(?:Count|ObjectIDs|StatusOnly)))\\b",
      name: "support.constant.10.11.objc"
    },
    {
      match: "\\b(?:MTL(?:AttributeFormat(?:Char(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)|Float(?:2|3|4)?|Half(?:2|3|4)|In(?:t(?:1010102Normalized|2|3|4)?|valid)|Short(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)|U(?:Char(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)|Int(?:1010102Normalized|2|3|4)?|Short(?:2(?:Normalized)?|3(?:Normalized)?|4(?:Normalized)?)))|BlendFactor(?:OneMinusSource1(?:Alpha|Color)|Source1(?:Alpha|Color))|FeatureSet_(?:OSX_(?:GPUFamily1_v2|ReadWriteTextureTier2)|macOS_(?:GPUFamily1_v2|ReadWriteTextureTier2))|L(?:anguageVersion1_2|ibraryErrorF(?:ileNotFound|unctionNotFound))|P(?:atchType(?:None|Quad|Triangle)|ixelFormat(?:Depth16Unorm|X(?:24_Stencil8|32_Stencil8)))|S(?:ampler(?:AddressModeClampToBorderColor|BorderColor(?:Opaque(?:Black|White)|TransparentBlack))|t(?:epFunction(?:Constant|Per(?:Instance|Patch(?:ControlPoint)?|Vertex)|ThreadPositionInGrid(?:X(?:Indexed)?|Y(?:Indexed)?))|oreAction(?:StoreAndMultisampleResolve|Unknown)))|Tessellation(?:ControlPointIndexType(?:None|UInt(?:16|32))|Factor(?:FormatHalf|StepFunction(?:Constant|Per(?:Instance|Patch(?:AndPerInstance)?)))|PartitionMode(?:Fractional(?:Even|Odd)|Integer|Pow2))|VertexStepFunctionPerPatch(?:ControlPoint)?)|NSFetchedResultsChange(?:Delete|Insert|Move|Update))\\b",
      name: "support.constant.10.12.objc"
    },
    {
      match: "\\b(?:M(?:DLDataPrecision(?:Double|Float|Undefined)|TL(?:A(?:rgumentBuffersTier(?:1|2)|ttributeFormat(?:Char(?:Normalized)?|Half|Short(?:Normalized)?|U(?:Char(?:4Normalized_BGRA|Normalized)?|Short(?:Normalized)?)))|CommandBufferErrorDeviceRemoved|DataType(?:Pointer|Sampler|Texture)|FeatureSet_macOS_GPUFamily1_v3|LanguageVersion2_0|Mutability(?:Default|Immutable|Mutable)|PixelFormatBGR10A2Unorm|Re(?:adWriteTextureTier(?:1|2|None)|nderStage(?:Fragment|Vertex)|source(?:HazardTrackingMode(?:Default|Untracked)|Usage(?:Read|Sample|Write)))|StoreAction(?:CustomSampleDepthStore|Option(?:CustomSamplePositions|None))|VertexFormat(?:Char(?:Normalized)?|Half|Short(?:Normalized)?|U(?:Char(?:4Normalized_BGRA|Normalized)?|Short(?:Normalized)?))))|NS(?:FetchIndexElementType(?:Binary|RTree)|PersistentHistory(?:ChangeType(?:Delete|Insert|Update)|ResultType(?:C(?:hangesOnly|ount)|ObjectIDs|StatusOnly|Transactions(?:AndChanges|Only)))|U(?:RIAttributeType|UIDAttributeType)))\\b",
      name: "support.constant.10.13.objc"
    },
    {
      match: "\\bMTL(?:BarrierScope(?:Buffers|RenderTargets|Textures)|D(?:ataType(?:IndirectCommandBuffer|RenderPipeline)|ispatchType(?:Concurrent|Serial))|FeatureSet_macOS_GPUFamily(?:1_v4|2_v1)|IndirectCommandTypeDraw(?:Indexed)?|LanguageVersion2_1|Multisample(?:DepthResolveFilter(?:M(?:ax|in)|Sample0)|StencilResolveFilter(?:DepthResolvedSample|Sample0))|TextureType(?:2DMultisampleArray|TextureBuffer))\\b",
      name: "support.constant.10.14.objc"
    },
    {
      match: "\\b(?:MTL(?:C(?:apture(?:Destination(?:DeveloperTools|GPUTraceDocument)|Error(?:AlreadyCapturing|InvalidDescriptor|NotSupported))|ounterSampleBufferError(?:Internal|OutOfMemory))|DeviceLocation(?:BuiltIn|External|Slot|Unspecified)|GPUFamily(?:Apple(?:1|2|3|4|5)|Common(?:1|2|3)|Mac(?:1|2|Catalyst(?:1|2)))|H(?:azardTrackingMode(?:Default|Tracked|Untracked)|eapType(?:Automatic|Placement))|LanguageVersion2_2|ResourceHazardTrackingModeTracked|TextureSwizzle(?:Alpha|Blue|Green|One|Red|Zero))|NSBatchInsertRequest(?:ResultType(?:Count|ObjectIDs|StatusOnly)|Type))\\b",
      name: "support.constant.10.15.objc"
    },
    {
      match: "\\b(?:NS(?:B(?:ackgroundActivityResult(?:Deferred|Finished)|itmapFormat(?:SixteenBit(?:BigEndian|LittleEndian)|ThirtyTwoBit(?:BigEndian|LittleEndian))|uttonType(?:Accelerator|MultiLevelAccelerator))|CompositingOperation(?:Color(?:Burn|Dodge)?|D(?:arken|ifference)|Exclusion|H(?:ardLight|ue)|L(?:ighten|uminosity)|Multiply|Overlay|S(?:aturation|creen|oftLight))|DateIntervalFormatter(?:FullStyle|LongStyle|MediumStyle|NoStyle|ShortStyle)|E(?:nergyFormatterUnit(?:Calorie|Joule|Kilo(?:calorie|joule))|vent(?:MaskPressure|Type(?:DirectTouch|Pressure)))|F(?:ileCoordinator(?:Reading(?:ForUploading|ImmediatelyAvailableMetadataOnly)|WritingContentIndependentMetadataOnly)|ormatting(?:Context(?:BeginningOfSentence|Dynamic|ListItem|MiddleOfSentence|Standalone|Unknown)|UnitStyle(?:Long|Medium|Short)))|ItemProvider(?:ItemUnavailableError|Un(?:expectedValueClassError|knownError))|LengthFormatterUnit(?:Centimeter|Foot|Inch|Kilometer|M(?:eter|il(?:e|limeter))|Yard)|MassFormatterUnit(?:Gram|Kilogram|Ounce|Pound|Stone)|Pro(?:cessInfoThermalState(?:Critical|Fair|Nominal|Serious)|pertyListWriteInvalidError)|QualityOfService(?:Background|Default|U(?:serIn(?:itiated|teractive)|tility))|SegmentS(?:tyleSeparated|witchTrackingMomentaryAccelerator)|TokenStyle(?:PlainSquared|Squared)|U(?:RL(?:Error(?:BackgroundSession(?:InUseByAnotherProcess|RequiresSharedContainer|WasDisconnected)|CancelledReason(?:BackgroundUpdatesDisabled|InsufficientSystemResources|UserForceQuitApplication))|Relationship(?:Contains|Other|Same))|ser(?:Activity(?:ConnectionUnavailableError|ErrorM(?:aximum|inimum)|Handoff(?:FailedError|UserInfoTooLargeError)|RemoteApplicationTimedOutError)|NotificationActivationTypeAdditionalActionClicked))|WindowStyleMaskFullSizeContentView)|WK(?:Error(?:JavaScriptExceptionOccurred|Unknown|Web(?:ContentProcessTerminated|ViewInvalidated))|Navigation(?:ActionPolicy(?:Allow|Cancel)|ResponsePolicy(?:Allow|Cancel)|Type(?:BackForward|Form(?:Resubmitted|Submitted)|LinkActivated|Other|Reload))|UserScriptInjectionTimeAtDocument(?:End|Start)))\\b",
      name: "support.constant.cocoa.10.10.objc"
    },
    {
      match: "\\b(?:NS(?:Appl(?:eEventSend(?:AlwaysInteract|Can(?:Interact|SwitchLayer)|D(?:efaultOptions|ont(?:Annotate|Execute|Record))|N(?:everInteract|oReply)|QueueReply|WaitForReply)|icationPresentationDisableCursorLocationAssistance)|BundleErrorM(?:aximum|inimum)|Co(?:der(?:ErrorM(?:aximum|inimum)|ReadCorruptError|ValueNotFoundError)|llection(?:ElementCategory(?:DecorationView|I(?:nterItemGap|tem)|SupplementaryView)|View(?:ItemHighlight(?:AsDropTarget|For(?:Deselection|Selection)|None)|ScrollDirection(?:Horizontal|Vertical)))|n(?:ditionalExpressionType|trolCharacterAction(?:ContainerBreak|HorizontalTab|LineBreak|ParagraphBreak|Whitespace|ZeroAdvancement)))|DecodingFailurePolicy(?:RaiseException|SetErrorAndReturn)|FileManagerUnmount(?:AllPartitionsAndEjectDisk|BusyError|UnknownError|WithoutUI)|GlyphProperty(?:ControlCharacter|Elastic|N(?:onBaseCharacter|ull))|ItemProviderUnavailableCoercionError|Layout(?:AttributeFirstBaseline|FormatAlignAllFirstBaseline)|NumberFormatter(?:Currency(?:AccountingStyle|ISOCodeStyle|PluralStyle)|OrdinalStyle)|PersonNameComponentsFormatter(?:Phonetic|Style(?:Abbreviated|Default|Long|Medium|Short))|URL(?:ErrorAppTransportSecurityRequiresSecureConnection|SessionResponseBecomeStream)|VisualEffectMaterial(?:Menu|Popover|Sidebar)|W(?:indowCollectionBehaviorFullScreen(?:AllowsTiling|DisallowsTiling)|ritingDirection(?:Embedding|Override)))|WKErrorJavaScriptResultTypeIsUnsupported)\\b",
      name: "support.constant.cocoa.10.11.objc"
    },
    {
      match: "\\b(?:NS(?:CloudSharing(?:ConflictError|ErrorM(?:aximum|inimum)|N(?:etworkFailureError|oPermissionError)|OtherError|QuotaExceededError|TooManyParticipantsError)|DateComponentsFormatterUnitsStyleBrief|EventMaskDirectTouch|I(?:SO8601DateFormatWith(?:ColonSeparatorInTime(?:Zone)?|Da(?:shSeparatorInDate|y)|Full(?:Date|Time)|InternetDateTime|Month|SpaceBetweenDateAndTime|Time(?:Zone)?|WeekOfYear|Year)|mage(?:Leading|Trailing))|MeasurementFormatterUnitOptions(?:NaturalScale|ProvidedUnit|TemperatureWithoutUnit)|URL(?:ErrorFileOutsideSafeArea|NetworkServiceTypeCallSignaling|SessionTaskMetricsResourceFetchType(?:LocalCache|NetworkLoad|ServerPush|Unknown)))|WK(?:AudiovisualMediaType(?:A(?:ll|udio)|None|Video)|UserInterfaceDirectionPolicy(?:Content|System)))\\b",
      name: "support.constant.cocoa.10.12.objc"
    },
    {
      match: "\\b(?:NS(?:CoderInvalidValueError|Font(?:AssetDownloadError|ErrorM(?:aximum|inimum))|I(?:SO8601DateFormatWithFractionalSeconds|temProvider(?:FileOptionOpenInPlace|RepresentationVisibility(?:All|Group|OwnProcess)))|JSONWritingSortedKeys|URLSessionDelayedRequest(?:C(?:ancel|ontinueLoading)|UseNewRequest))|WKErrorContentRuleListStore(?:CompileFailed|LookUpFailed|RemoveFailed|VersionMismatch))\\b",
      name: "support.constant.cocoa.10.13.objc"
    },
    {
      match: "\\b(?:NS(?:VisualEffectMaterial(?:ContentBackground|FullScreenUI|H(?:UDWindow|eaderView)|Sheet|ToolTip|Under(?:PageBackground|WindowBackground)|WindowBackground)|Workspace(?:AuthorizationInvalidError|ErrorM(?:aximum|inimum)))|UN(?:A(?:lertStyle(?:Alert|Banner|None)|uthorization(?:Option(?:Alert|Badge|C(?:arPlay|riticalAlert)|Provi(?:desAppNotificationSettings|sional)|Sound)|Status(?:Authorized|Denied|NotDetermined|Provisional)))|ErrorCode(?:Attachment(?:Corrupt|Invalid(?:FileSize|URL)|MoveIntoDataStoreFailed|NotInDataStore|UnrecognizedType)|Notification(?:InvalidNo(?:Content|Date)|sNotAllowed))|Notification(?:ActionOption(?:AuthenticationRequired|Destructive|Foreground)|CategoryOption(?:CustomDismissAction|HiddenPreviewsShow(?:Subtitle|Title))|PresentationOption(?:Alert|Badge|Sound)|Setting(?:Disabled|Enabled|NotSupported))|ShowPreviewsSetting(?:Always|Never|WhenAuthenticated)))\\b",
      name: "support.constant.cocoa.10.14.objc"
    },
    {
      match: "\\b(?:NS(?:Co(?:llectionChange(?:Insert|Remove)|mpression(?:ErrorM(?:aximum|inimum)|FailedError))|D(?:ataCompressionAlgorithm(?:LZ(?:4|FSE|MA)|Zlib)|ecompressionFailedError|irectoryEnumeration(?:IncludesDirectoriesPostOrder|ProducesRelativePathURLs))|Event(?:MaskChangeMode|TypeChangeMode)|JSONWritingWithoutEscapingSlashes|OrderedCollectionDifferenceCalculation(?:InferMoves|Omit(?:InsertedObjects|RemovedObjects))|PickerTouchBarItem(?:ControlRepresentation(?:Automatic|Collapsed|Expanded)|SelectionMode(?:Momentary|Select(?:Any|One)))|RelativeDateTimeFormatter(?:StyleN(?:amed|umeric)|UnitsStyle(?:Abbreviated|Full|S(?:hort|pellOut)))|T(?:extScaling(?:Standard|iOS)|oolbarItemGroup(?:ControlRepresentation(?:Automatic|Collapsed|Expanded)|SelectionMode(?:Momentary|Select(?:Any|One))))|URL(?:ErrorNetworkUnavailableReason(?:C(?:ellular|onstrained)|Expensive)|SessionWebSocket(?:CloseCode(?:AbnormalClosure|GoingAway|In(?:ternalServerError|valid(?:FramePayloadData)?)|M(?:andatoryExtensionMissing|essageTooBig)|No(?:StatusReceived|rmalClosure)|P(?:olicyViolation|rotocolError)|TLSHandshakeFailure|UnsupportedData)|MessageType(?:Data|String))))|WKErrorAttributedStringContent(?:FailedToLoad|LoadTimedOut))\\b",
      name: "support.constant.cocoa.10.15.objc"
    },
    {
      match: "\\bNS(?:A(?:pplicationScriptsDirectory|utosaveAsOperation)|DataWritingWithoutOverwriting|Event(?:MaskSmartMagnify|Type(?:QuickLook|SmartMagnify))|FeatureUnsupportedError|PointerFunctionsWeakMemory|RemoteNotificationType(?:Alert|Sound)|TrashDirectory|U(?:RLCredentialPersistenceSynchronizable|biquitousKeyValueStoreAccountChange)|XPCConnection(?:ErrorM(?:aximum|inimum)|In(?:terrupted|valid)|Privileged|ReplyInvalid))\\b",
      name: "support.constant.cocoa.10.8.objc"
    },
    {
      match: "\\bNS(?:A(?:ctivity(?:AutomaticTerminationDisabled|Background|Idle(?:DisplaySleepDisabled|SystemSleepDisabled)|LatencyCritical|SuddenTerminationDisabled|UserInitiated(?:AllowingIdleSystemSleep)?)|nyKeyExpressionType)|Calendar(?:Match(?:First|Last|NextTime(?:PreservingSmallerUnits)?|PreviousTimePreservingSmallerUnits|Strictly)|SearchBackwards)|DataBase64(?:DecodingIgnoreUnknownCharacters|Encoding(?:64CharacterLineLength|76CharacterLineLength|EndLineWith(?:CarriageReturn|LineFeed)))|NetServiceListenForConnections|TableViewDraggingDestinationFeedbackStyleGap|U(?:RL(?:NetworkServiceType(?:AVStreaming|ResponsiveAV)|Session(?:AuthChallenge(?:CancelAuthenticationChallenge|PerformDefaultHandling|RejectProtectionSpace|UseCredential)|Response(?:Allow|BecomeDownload|Cancel)|TaskState(?:C(?:anceling|ompleted)|Running|Suspended)))|biquitousFile(?:ErrorM(?:aximum|inimum)|NotUploadedDueToQuotaError|U(?:biquityServerNotAvailable|navailableError))|serNotificationActivationTypeReplied)|ViewLayerContentsRedrawCrossfade)\\b",
      name: "support.constant.cocoa.10.9.objc"
    },
    { name: "support.constant.cocoa.objc" },
    { name: "support.constant.objc" },
    {
      match: "\\bOBJC_ASSOCIATION_(?:ASSIGN|COPY(?:_NONATOMIC)?|RETAIN(?:_NONATOMIC)?)\\b",
      name: "support.constant.run-time.objc"
    },
    {
      match: "\\bNSBatchUpdateRequestResultType\\b",
      name: "support.type.10.10.objc"
    },
    {
      match: "\\b(?:MTL(?:Argument(?:Access|Type)|Bl(?:end(?:Factor|Operation)|itOption)|C(?:PUCacheMode|o(?:lorWriteMask|m(?:mandBuffer(?:Error|Status)|pareFunction))|ullMode)|D(?:ataType|epthClipMode)|F(?:eatureSet|unctionType)|IndexType|L(?:anguageVersion|ibraryError|oadAction)|P(?:i(?:pelineOption|xelFormat)|rimitiveT(?:opologyClass|ype)|urgeableState)|ResourceOptions|S(?:ampler(?:AddressMode|Mi(?:nMagFilter|pFilter))|t(?:encilOperation|or(?:ageMode|eAction)))|T(?:exture(?:Type|Usage)|riangleFillMode)|V(?:ertex(?:Format|StepFunction)|isibilityResultMode)|Winding)|NSBatchDeleteRequestResultType)\\b",
      name: "support.type.10.11.objc"
    },
    {
      match: "\\b(?:MT(?:KTextureLoaderArrayCallback|L(?:AttributeFormat|PatchType|S(?:amplerBorderColor|tepFunction)|Tessellation(?:ControlPointIndexType|Factor(?:Format|StepFunction)|PartitionMode)))|NSFetchedResultsChangeType)\\b",
      name: "support.type.10.12.objc"
    },
    {
      match: "\\b(?:M(?:DLDataPrecision|TL(?:ArgumentBuffersTier|DeviceNotification(?:Handler|Name)|Mutability|Re(?:adWriteTextureTier|nderStages|sourceUsage)|StoreActionOptions))|NS(?:FetchIndexElementType|PersistentHistory(?:ChangeType|ResultType))|PDFDisplayDirection)\\b",
      name: "support.type.10.13.objc"
    },
    {
      match: "\\bMTL(?:BarrierScope|DispatchType|IndirectCommand(?:BufferExecutionRange|Type)|Multisample(?:DepthResolveFilter|StencilResolveFilter)|StageInRegionIndirectArguments)\\b",
      name: "support.type.10.14.objc"
    },
    {
      match: "\\b(?:IC(?:CameraItem(?:MetadataOption|ThumbnailOption)|Delete(?:Error|Result)|SessionOptions)|MTL(?:C(?:apture(?:Destination|Error)|o(?:mmonCounter(?:Set)?|unter(?:Result(?:Sta(?:geUtilization|tistic)|Timestamp)|SampleBufferError)))|DeviceLocation|GPUFamily|H(?:azardTrackingMode|eapType)|TextureSwizzle(?:Channels)?|VertexAmplificationViewMapping)|NSBatchInsertRequestResultType)\\b",
      name: "support.type.10.15.objc"
    },
    {
      match: "\\b(?:NS(?:Accessibility(?:Orientation|RulerMarkerType|SortDirection|Units)|BackgroundActivityResult|Date(?:ComponentsFormatter(?:UnitsStyle|ZeroFormattingBehavior)|IntervalFormatterStyle)|EnergyFormatterUnit|Formatting(?:Context|UnitStyle)|GestureRecognizerState|I(?:mageResizingMode|temProviderErrorCode)|LengthFormatterUnit|MassFormatterUnit|Pr(?:essureBehavior|ocessInfoThermalState)|QualityOfService|TabViewControllerTabStyle|URLRelationship|Vi(?:ewControllerTransitionOptions|sualEffect(?:BlendingMode|Material|State))|WindowTitleVisibility)|WK(?:ErrorCode|Navigation(?:ActionPolicy|ResponsePolicy|Type)|UserScriptInjectionTime))\\b",
      name: "support.type.cocoa.10.10.objc"
    },
    {
      match: "\\bNS(?:AppleEventSendOptions|Co(?:llection(?:ElementCategory|UpdateAction|View(?:ItemHighlightState|ScrollDirection))|ntrolCharacterAction)|D(?:ataAssetName|ecodingFailurePolicy)|FileManagerUnmountOptions|GlyphProperty|HapticFeedbackP(?:attern|erformanceTime)|PersonNameComponentsFormatter(?:Options|Style)|S(?:p(?:litViewItem(?:Behavior|CollapseBehavior)|ringLoading(?:Highlight|Options))|tackViewDistribution)|T(?:able(?:RowActionEdge|ViewRowActionStyle)|extStorageEditActions)|WritingDirectionFormatType)\\b",
      name: "support.type.cocoa.10.11.objc"
    },
    {
      match: "\\b(?:NS(?:CloudKitSharingServiceOptions|DisplayGamut|Grid(?:CellPlacement|RowAlignment)|ImageLayoutDirection|MeasurementFormatterUnitOptions|PasteboardContentsOptions|S(?:crubber(?:Alignment|Mode)|liderAccessoryWidth|tatusItemBehavior)|T(?:ab(?:Position|ViewBorderType)|ouch(?:BarItemPriority|Type(?:Mask)?))|URLSessionTaskMetricsResourceFetchType|Window(?:ListOptions|TabbingMode|UserTabbingPreference))|WK(?:AudiovisualMediaTypes|UserInterfaceDirectionPolicy))\\b",
      name: "support.type.cocoa.10.12.objc"
    },
    {
      match: "\\bNS(?:Accessibility(?:AnnotationPosition|CustomRotor(?:SearchDirection|Type))|FontAssetRequestOptions|ItemProvider(?:FileOptions|RepresentationVisibility)|SegmentDistribution|URLSessionDelayedRequestDisposition)\\b",
      name: "support.type.cocoa.10.13.objc"
    },
    {
      match: "\\b(?:NS(?:ColorSystemEffect|WorkspaceAuthorizationType)|UN(?:A(?:lertStyle|uthorization(?:Options|Status))|ErrorCode|Notification(?:ActionOptions|CategoryOptions|PresentationOptions|Setting)|ShowPreviewsSetting))\\b",
      name: "support.type.cocoa.10.14.objc"
    },
    {
      match: "\\bNS(?:AttributedStringCompletionHandler|Collection(?:ChangeType|LayoutSectionOrthogonalScrollingBehavior)|D(?:ataCompressionAlgorithm|irectional(?:EdgeInsets|RectEdge))|OrderedCollectionDifferenceCalculationOptions|PickerTouchBarItem(?:ControlRepresentation|SelectionMode)|Re(?:ctAlignment|lativeDateTimeFormatter(?:Style|UnitsStyle))|T(?:extScalingType|oolbarItemGroup(?:ControlRepresentation|SelectionMode))|URL(?:ErrorNetworkUnavailableReason|SessionWebSocket(?:CloseCode|MessageType)))\\b",
      name: "support.type.cocoa.10.15.objc"
    },
    {
      match: "\\bNS(?:PageControllerTransitionStyle|SharingContentScope|XPCConnectionOptions)\\b",
      name: "support.type.cocoa.10.8.objc"
    },
    {
      match: "\\bNS(?:A(?:c(?:cessibilityPriorityLevel|tivityOptions)|pplicationOcclusionState)|DataBase64(?:DecodingOptions|EncodingOptions)|MediaLibrary|P(?:DFPanelOptions|aperOrientation)|StackView(?:Gravity|VisibilityPriority)|U(?:RLSession(?:AuthChallengeDisposition|ResponseDisposition|TaskState)|serInterfaceLayoutOrientation)|WindowOcclusionState|XMLParserExternalEntityResolvingPolicy)\\b",
      name: "support.type.cocoa.10.9.objc"
    },
    {
      match: "\\b(?:AB(?:P(?:eoplePickerSelectionBehavior|ropertyType)|SearchCo(?:mparison|njunction))|DOM(?:ObjectInternal|TimeStamp)|NS(?:A(?:boutPanelOptionKey|c(?:cessibility(?:A(?:ctionName|nnotation(?:AttributeKey|Position)|ttributeName)|CustomRotor(?:SearchDirection|Type)|FontAttributeKey|LoadingToken|Notification(?:Name|UserInfoKey)|Orientation(?:Value)?|P(?:arameterizedAttributeName|riorityLevel)|R(?:ole|uler(?:MarkerType(?:Value)?|UnitValue))|S(?:ortDirection(?:Value)?|ubrole)|Units)|tivityOptions)|ffineTransformStruct|l(?:ertStyle|ignmentOptions)|nimat(?:ablePropertyKey|ion(?:BlockingMode|Curve|Effect|Progress))|pp(?:KitVersion|earanceName|l(?:eEvent(?:ManagerSuspensionID|SendOptions)|ication(?:Activation(?:Options|Policy)|DelegateReply|OcclusionState|Pr(?:esentationOptions|intReply)|TerminateReply)))|ttributedString(?:Document(?:AttributeKey|ReadingOptionKey|Type)|EnumerationOptions|Key)|utoresizingMaskOptions)|B(?:ack(?:ground(?:Activity(?:CompletionHandler|Result)|Style)|ingStoreType)|ez(?:elStyle|ierPathElement)|i(?:n(?:arySearchingOptions|ding(?:InfoKey|Name|Option))|tmap(?:Format|Image(?:FileType|RepPropertyKey)))|o(?:rderType|xType)|rowser(?:Column(?:ResizingType|sAutosaveName)|DropOperation)|uttonType|yteCountFormatter(?:CountStyle|Units))|C(?:al(?:culationError|endar(?:Identifier|Options|Unit))|ell(?:Attribute|HitResult|ImagePosition|StyleMask|Type)|haracterCollection|loudKitSharingServiceOptions|o(?:l(?:lection(?:ChangeType|ElementCategory|Layout(?:GroupCustomItemProvider|Section(?:OrthogonalScrollingBehavior|VisibleItemsInvalidationHandler))|UpdateAction|View(?:CompositionalLayoutSectionProvider|D(?:ecorationElementKind|iffableDataSource(?:ItemProvider|SupplementaryViewProvider)|ropOperation)|ItemHighlightState|S(?:croll(?:Direction|Position)|upplementaryElementKind)|TransitionLayoutAnimatedKey))|or(?:ListName|Name|Panel(?:Mode|Options)|RenderingIntent|S(?:pace(?:Model|Name)|ystemEffect)|Type))|mp(?:ar(?:ator|ison(?:Predicate(?:Modifier|Options)|Result))|o(?:sitingOperation|undPredicateType))|ntrol(?:CharacterAction|S(?:ize|tateValue)|Tint)|rrection(?:IndicatorType|Response)))|D(?:at(?:a(?:Base64(?:DecodingOptions|EncodingOptions)|CompressionAlgorithm|ReadingOptions|SearchOptions|WritingOptions)|e(?:ComponentsFormatter(?:UnitsStyle|ZeroFormattingBehavior)|Formatter(?:Behavior|Style)|IntervalFormatterStyle|Picker(?:ElementFlags|Mode|Style)))|e(?:c(?:imal|odingFailurePolicy)|finition(?:OptionKey|PresentationType)|viceDescriptionKey)|i(?:rect(?:ional(?:EdgeInsets|RectEdge)|oryEnumerationOptions)|s(?:playGamut|tributedNotification(?:CenterType|Options)))|ocumentChangeType|ra(?:g(?:Operation|ging(?:Context|Formation|I(?:mageComponentKey|temEnumerationOptions)))|werState))|E(?:dgeInsets|n(?:ergyFormatterUnit|umerationOptions)|rror(?:Domain|UserInfoKey)|vent(?:ButtonMask|GestureAxis|M(?:ask|odifierFlags)|Phase|S(?:ubtype|wipeTrackingOptions)|Type)|x(?:ceptionName|pressionType))|F(?:astEnumerationState|i(?:le(?:Attribute(?:Key|Type)|Coordinator(?:ReadingOptions|WritingOptions)|Manager(?:ItemReplacementOptions|UnmountOptions)|Pro(?:tectionType|viderServiceName)|Version(?:AddingOptions|ReplacingOptions)|Wrapper(?:ReadingOptions|WritingOptions))|ndPanel(?:Action|SubstringMatchType))|o(?:cusRing(?:Placement|Type)|nt(?:A(?:ction|ssetRequestOptions)|Collection(?:ActionTypeKey|MatchingOptionKey|Name|Options|UserInfoKey|Visibility)|Descriptor(?:AttributeName|FeatureKey|Sy(?:mbolicTraits|stemDesign)|TraitKey|VariationKey)|FamilyClass|PanelModeMask|RenderingMode|SymbolicTraits|TraitMask|Weight)|rmatting(?:Context|UnitStyle)))|G(?:estureRecognizerState|lyph(?:Inscription|Property)?|r(?:a(?:dient(?:DrawingOptions|Type)|phicsContext(?:AttributeKey|RepresentationFormatName))|id(?:CellPlacement|RowAlignment)))|H(?:TTPCookie(?:AcceptPolicy|PropertyKey|StringPolicy)|a(?:pticFeedbackP(?:attern|erformanceTime)|sh(?:Enumerator|Table(?:CallBacks|Options)))|elp(?:AnchorName|BookName|ManagerContextHelpKey))|I(?:SO8601DateFormatOptions|mage(?:Alignment|CacheMode|FrameStyle|HintKey|Interpolation|L(?:ayoutDirection|oadStatus)|Name|Re(?:pLoadStatus|sizingMode)|Scaling)|nsertionPosition|temProvider(?:CompletionHandler|ErrorCode|FileOptions|LoadHandler|RepresentationVisibility))|JSON(?:ReadingOptions|WritingOptions)|KeyValue(?:Change(?:Key)?|O(?:bservingOptions|perator)|SetMutationKind)|L(?:ayout(?:Attribute|ConstraintOrientation|FormatOptions|Priority|Relation)|e(?:ngthFormatterUnit|velIndicator(?:PlaceholderVisibility|Style))|in(?:e(?:BreakMode|CapStyle|JoinStyle|MovementDirection|SweepDirection)|guisticTag(?:Scheme|ger(?:Options|Unit))?)|ocale(?:Key|LanguageDirection))|M(?:a(?:chPortOptions|p(?:Enumerator|Table(?:KeyCallBacks|Options|ValueCallBacks))|ssFormatterUnit|t(?:ching(?:Flags|Options)|rixMode))|e(?:asurementFormatterUnitOptions|diaLibrary|nuProperties)|odal(?:Response|Session)|ultibyteGlyphPacking)|N(?:etService(?:Options|sError)|ibName|otification(?:Coalescing|Name|SuspensionBehavior)|umberFormatter(?:Behavior|PadPosition|RoundingMode|Style))|O(?:pe(?:nGL(?:ContextParameter|GlobalOption)|rati(?:ngSystemVersion|onQueuePriority))|rderedCollectionDifferenceCalculationOptions)|P(?:DFPanelOptions|a(?:geController(?:ObjectIdentifier|TransitionStyle)|perOrientation|steboard(?:ContentsOptions|Name|ReadingOption(?:Key|s)|Type(?:FindPanelSearchOptionKey|TextFinderOptionKey)?|WritingOptions)|thStyle)|ersonNameComponentsFormatter(?:Options|Style)|ickerTouchBarItem(?:ControlRepresentation|SelectionMode)|o(?:int(?:Array|Pointer|erFunctionsOptions|ingDeviceType)?|p(?:UpArrowPosition|over(?:Appearance|Behavior|CloseReasonValue))|stingStyle)|r(?:e(?:dicateOperatorType|ssureBehavior)|int(?:Info(?:AttributeKey|SettingKey)|JobDispositionValue|Panel(?:AccessorySummaryKey|JobStyleHint|Options)|RenderingQuality|er(?:PaperName|T(?:ableStatus|ypeName))|ing(?:Orientation|Pag(?:eOrder|inationMode)))|o(?:cessInfoThermalState|gress(?:FileOperationKind|Indicator(?:Style|Thickness)|Kind|PublishingHandler|U(?:npublishingHandler|serInfoKey))|pertyList(?:Format|MutabilityOptions|ReadOptions|WriteOptions))))|QualityOfService|R(?:ange(?:Pointer)?|e(?:ct(?:A(?:lignment|rray)|Edge|Pointer)?|gularExpressionOptions|lative(?:DateTimeFormatter(?:Style|UnitsStyle)|Position)|moteNotificationType|questUserAttentionType)|oundingMode|u(?:le(?:Editor(?:NestingMode|PredicatePartKey|RowType)|r(?:Orientation|ViewUnitName))|nLoopMode))|S(?:aveOp(?:erationType|tions)|cr(?:oll(?:ArrowPosition|Elasticity|ViewFindBarPosition|er(?:Arrow|KnobStyle|Part|Style))|ubber(?:Alignment|Mode))|e(?:arch(?:FieldRecentsAutosaveName|PathD(?:irectory|omainMask))|gment(?:Distribution|S(?:tyle|witchTracking))|lection(?:Affinity|Direction|Granularity)|rviceProviderName)|haring(?:ContentScope|ServiceName)|ize(?:Array|Pointer)?|liderType|o(?:cketNativeHandle|rtOptions|und(?:Name|PlaybackDeviceIdentifier))|p(?:e(?:ech(?:Boundary|CommandDelimiterKey|DictionaryKey|ErrorKey|Mode|P(?:honemeInfoKey|ropertyKey)|S(?:tatusKey|ynthesizer(?:InfoKey|VoiceName)))|llingState)|litView(?:AutosaveName|DividerStyle|Item(?:Behavior|CollapseBehavior))|ringLoading(?:Highlight|Options))|t(?:a(?:ckView(?:Distribution|Gravity)|tusItem(?:AutosaveName|Behavior))|oryboard(?:ControllerCreator|Name|S(?:ceneIdentifier|egueIdentifier))|r(?:eam(?:Event|NetworkServiceTypeValue|PropertyKey|S(?:OCKSProxy(?:Configuration|Version)|ocketSecurityLevel|tatus))|ing(?:CompareOptions|DrawingOptions|En(?:coding(?:ConversionOptions|DetectionOptionsKey)?|umerationOptions)|Transform)))|wapped(?:Double|Float))|T(?:IFFCompression|a(?:b(?:Position|State|View(?:BorderType|ControllerTabStyle|Type)|le(?:ColumnResizingOptions|RowActionEdge|View(?:A(?:nimationOptions|utosaveName)|ColumnAutoresizingStyle|Dr(?:aggingDestinationFeedbackStyle|opOperation)|GridLineStyle|Row(?:ActionStyle|SizeStyle)|SelectionHighlightStyle)))|skTerminationReason)|e(?:stComparisonOperation|xt(?:Alignment|Block(?:Dimension|Layer|V(?:alueType|erticalAlignment))|Checking(?:Key|OptionKey|Type(?:s)?)|EffectStyle|Fi(?:eldBezelStyle|nder(?:Action|MatchingType))|Input(?:SourceIdentifier|TraitType)|L(?:ayout(?:Orientation|SectionKey)|ist(?:MarkerFormat|Options))|Movement|S(?:calingType|torageEdit(?:Actions|edOptions))|Tab(?:OptionKey|Type|leLayoutAlgorithm)))|hreadPrivate|i(?:ckMarkPosition|me(?:Interval|ZoneNameStyle)|tlePosition)|o(?:kenStyle|ol(?:TipTag|bar(?:DisplayMode|I(?:dentifier|tem(?:Group(?:ControlRepresentation|SelectionMode)|Identifier|VisibilityPriority))|SizeMode))|uch(?:Bar(?:CustomizationIdentifier|ItemIdentifier)|Phase|Type(?:Mask)?))|racking(?:AreaOptions|RectTag)|ypesetter(?:Behavior|ControlCharacterAction))|U(?:RL(?:Bookmark(?:CreationOptions|FileCreationOptions|ResolutionOptions)|C(?:acheStoragePolicy|redentialPersistence)|ErrorNetworkUnavailableReason|File(?:ProtectionType|ResourceType)|HandleStatus|Re(?:lationship|quest(?:CachePolicy|NetworkServiceType)|sourceKey)|Session(?:AuthChallengeDisposition|DelayedRequestDisposition|MultipathServiceType|ResponseDisposition|Task(?:MetricsResourceFetchType|State)|WebSocket(?:CloseCode|MessageType))|ThumbnailDictionaryItem|Ubiquitous(?:ItemDownloadingStatus|SharedItem(?:Permissions|Role)))|n(?:caughtExceptionHandler|derlineStyle)|s(?:ableScrollerParts|er(?:A(?:ctivityPersistentIdentifier|ppleScriptTaskCompletionHandler|utomatorTaskCompletionHandler)|Interface(?:ItemIdentifier|Layout(?:Direction|Orientation))|NotificationActivationType|ScriptTaskCompletionHandler|UnixTaskCompletionHandler)))|V(?:alueTransformerName|i(?:ew(?:Animation(?:EffectName|Key)|ControllerTransitionOptions|FullScreenModeOptionKey|LayerContents(?:Placement|RedrawPolicy))|sualEffect(?:BlendingMode|Material|State))|o(?:ice(?:AttributeKey|GenderName)|lumeEnumerationOptions))|W(?:hoseSubelementIdentifier|ind(?:ingRule|ow(?:AnimationBehavior|B(?:ackingLocation|utton)|CollectionBehavior|Depth|FrameAutosaveName|L(?:evel|istOptions)|NumberListOptions|O(?:cclusionState|rderingMode)|PersistableFrameDescriptor|S(?:haringType|tyleMask)|T(?:abbing(?:Identifier|Mode)|itleVisibility)|UserTabbingPreference))|orkspace(?:AuthorizationType|DesktopImageOptionKey|IconCreationOptions|LaunchOptions)|ritingDirection(?:FormatType)?)|X(?:ML(?:D(?:TDNodeKind|ocumentContentKind)|Node(?:Kind|Options)|ParserE(?:rror|xternalEntityResolvingPolicy))|PCConnectionOptions)|Zone)|UN(?:A(?:lertStyle|uthorization(?:Options|Status))|ErrorCode|Notification(?:ActionOptions|CategoryOptions|PresentationOptions|S(?:etting|oundName))|ShowPreviewsSetting)|W(?:K(?:AudiovisualMediaTypes|ContentMode|ErrorCode|Navigation(?:ActionPolicy|ResponsePolicy|Type)|User(?:InterfaceDirectionPolicy|ScriptInjectionTime))|eb(?:CacheModel|Drag(?:DestinationAction|SourceAction)|NavigationType|PreferencesPrivate|ViewInsertAction))|unichar)\\b",
      name: "support.type.cocoa.objc"
    },
    {
      match: "\\b(?:A(?:M(?:ErrorCode|LogLevel)|U(?:Audio(?:ChannelCount|FrameCount|ObjectID|Unit(?:BusType|Status))|EventSampleTime|Host(?:MusicalContextBlock|TransportState(?:Block|Flags))|I(?:mplementor(?:DisplayNameWithLengthCallback|StringFromValueCallback|Value(?:FromStringCallback|Observer|Provider))|n(?:putHandler|ternalRenderBlock))|MIDI(?:CIProfileChangedBlock|Event|OutputEventBlock)|Parameter(?:A(?:ddress|utomation(?:Event(?:Type)?|Observer))|Event|Observer(?:Token)?|RecordingObserver)|Re(?:cordedParameterEvent|nder(?:Block|Event(?:Header|Type)?|Observer|PullInputBlock))|Schedule(?:MIDIEventBlock|ParameterBlock)|Value)|uthorization(?:C(?:allbacks|ontextFlags)|EngineRef|Mechanism(?:Id|Ref)|Plugin(?:I(?:d|nterface)|Ref)|Result|SessionId|Value(?:Vector)?))|Bluetooth(?:A(?:FH(?:HostChannelClassification|Mode|Results)|MP(?:C(?:ommandRejectReason|reatePhysicalLinkResponseStatus)|Disco(?:nnectPhysicalLinkResponseStatus|verResponseControllerStatus)|Get(?:AssocResponseStatus|InfoResponseStatus)|ManagerCode)|irMode|llowRoleSwitch|uthenticationRequirements(?:Values)?)|C(?:l(?:assOfDevice|ockOffset)|o(?:mpanyIdentifers|nnectionHandle))|Device(?:Address|ClassM(?:ajor|inor)|Name)|E(?:n(?:cryptionEnable|hancedSynchronousConnectionInfo)|ventFilterCondition)|FeatureBits|HCI(?:A(?:CLDataByteCount|FHChannelAssessmentMode(?:s)?|cceptSynchronousConnectionRequestParams|ut(?:henti(?:cationEnable|onEnableModes)|omaticFlushTimeout(?:Info)?))|BufferSize|C(?:o(?:mmandOpCode(?:Command|Group)?|n(?:nection(?:AcceptTimeout|Mode(?:s)?)|tentFormat)|untryCode)|urrentInquiryAccessCodes(?:ForWrite)?)|D(?:ataID|eleteStoredLinkKeyFlag(?:s)?)|E(?:n(?:cryption(?:KeySize(?:Info)?|Mode(?:s)?)|hanced(?:AcceptSynchronousConnectionRequestParams|SetupSynchronousConnectionParams))|rroneousDataReporting|vent(?:AuthenticationCompleteResults|C(?:hangeConnectionLinkKeyCompleteResults|o(?:de|nnection(?:CompleteResults|PacketTypeResults|RequestResults)))|D(?:ataBufferOverflowResults|isconnectionCompleteResults)|Encryption(?:ChangeResults|KeyRefreshCompleteResults)|Fl(?:owSpecificationData|ushOccurredResults)|HardwareErrorResults|ID|L(?:E(?:Connection(?:CompleteResults|UpdateCompleteResults)|EnhancedConnectionCompleteResults|LongTermKeyRequestResults|MetaResults|ReadRemoteUsedFeaturesCompleteResults)|inkKeyNotificationResults)|M(?:a(?:s(?:k|terLinkKeyCompleteResults)|xSlotsChangeResults)|odeChangeResults)|PageScan(?:ModeChangeResults|RepetitionModeChangeResults)|QoS(?:SetupCompleteResults|ViolationResults)|R(?:e(?:ad(?:ClockOffsetResults|ExtendedFeaturesResults|Remote(?:ExtendedFeaturesResults|SupportedFeaturesResults|VersionInfoResults)|SupportedFeaturesResults)|moteNameRequestResults|turnLinkKeysResults)|oleChangeResults)|S(?:implePairingCompleteResults|niffSubratingResults|tatus|ynchronousConnectionC(?:hangedResults|ompleteResults))|VendorSpecificResults)|xtended(?:FeaturesInfo|InquiryRes(?:ponse(?:DataType(?:s)?)?|ult)))|F(?:ECRequired(?:Values)?|ailedContact(?:Count|Info)|lowControlState)|GeneralFlowControlStates|HoldModeActivity(?:States)?|In(?:put(?:Bandwidth|Cod(?:edDataSize|ingFormat)|DataPath|PCM(?:DataFormat|SamplePayloadMSBPosition)|TransportUnitSize)|quiry(?:AccessCode(?:Count)?|Length|Mode(?:s)?|Result(?:s)?|ScanType(?:s)?|WithRSSIResult(?:s)?))|L(?:E(?:BufferSize|SupportedFeatures|UsedFeatures)|ink(?:PolicySettings(?:Info|Values)?|Quality(?:Info)?|SupervisionTimeout)|oopbackMode)|M(?:axLatency|odeInterval)|Num(?:BroadcastRetransmissions|LinkKeys(?:Deleted|ToWrite))|O(?:perationID|utput(?:Bandwidth|Cod(?:edDataSize|ingFormat)|DataPath|PCM(?:DataFormat|SamplePayloadMSBPosition)|TransportUnitSize))|P(?:a(?:ge(?:Number|Scan(?:EnableState(?:s)?|Mode(?:s)?|PeriodMode(?:s)?|Type(?:s)?)|Timeout)|r(?:amByteCount|kModeBeaconInterval))|owerState)|Q(?:oSFlags|ualityOfServiceSetupParams)|R(?:SSI(?:Info|Value)|e(?:ad(?:ExtendedInquiryResponseResults|L(?:MPHandleResults|ocalOOBDataResults)|StoredLinkKeysFlag(?:s)?)|ceive(?:Bandwidth|Cod(?:ecFrameSize|ingFormat))|quest(?:CallbackInfo|ID)|sponseCount|transmissionEffort(?:Types)?)|ole(?:Info|s)?)|S(?:CO(?:DataByteCount|FlowControlStates)|canActivity|etupSynchronousConnectionParams|i(?:gnalID|mplePairing(?:Mode(?:s)?|OOBData))|niff(?:AttemptCount|Timeout)|t(?:atus|oredLinkKeysInfo)|upported(?:Commands|Features|IAC))|T(?:imeoutValues|rans(?:mit(?:Bandwidth|Cod(?:ecFrameSize|ingFormat)|PowerLevel(?:Info|Type)?|ReadPowerLevelTypes)|port(?:CommandID|ID)))|V(?:e(?:ndorCommandSelector|rsion(?:Info|s))|oiceSetting))|I(?:OCapabilit(?:ies|y(?:Response)?)|RK)|Key(?:Flag|Type|boardReturnType|pressNotification(?:Type(?:s)?)?)?|L(?:2CAP(?:ByteCount|C(?:hannelID|o(?:mmand(?:ByteCount|Code|ID|RejectReason)|n(?:figuration(?:Option|Re(?:sult|transmissionAndFlowControlFlags))|nection(?:Result|Status))))|FlushTimeout|GroupID|Information(?:ExtendedFeaturesMask|Result|Type)|LinkTimeout|MTU|PSM|Q(?:oSType|ualityOfServiceOptions)|RetransmissionAndFlowControlOptions|S(?:egmentationAndReassembly|upervisoryFuctionType))|AP|E(?:Ad(?:dressType|vertisingType)|ConnectionInterval|FeatureBits|S(?:can(?:DuplicateFilter|Filter|Type)?|ecurityManager(?:CommandCode|IOCapability|Key(?:DistributionFormat|pressNotificationType)|OOBData|PairingFailedReasonCode|User(?:InputCapability|OutputCapability))))|MP(?:Handle|Subversion|Version(?:s)?)|inkType(?:s)?)|Ma(?:nufacturerName|xSlots)|NumericValue|OOBDataPresence(?:Values)?|P(?:IN(?:Code|Type)|a(?:cketType|geScan(?:Mode|PeriodMode|RepetitionMode)|sskey))|R(?:FCOMM(?:ChannelID|LineStatus|MTU|ParityType)|e(?:a(?:dClockInfo|sonCode)|moteHostSupportedFeaturesNotification)|ole)|S(?:DP(?:DataElement(?:SizeDescriptor|TypeDescriptor)|ErrorCode|PDUID|Service(?:AttributeID|RecordHandle)|TransactionID|UUID(?:16|32))|e(?:rviceClassMajor|tEventMask)|implePairingDebugMode(?:s)?|ynchronousConnectionInfo)|Transport(?:Info(?:Ptr)?|Types)|User(?:ConfirmationRequest|PasskeyNotification))|C(?:A(?:A(?:nimation(?:CalculationMode|RotationMode)|utoresizingMask)|Co(?:nstraintAttribute|rnerMask)|E(?:dgeAntialiasingMask|mitterLayer(?:Emitter(?:Mode|Shape)|RenderMode))|GradientLayerType|LayerCo(?:ntents(?:F(?:ilter|ormat)|Gravity)|rnerCurve)|MediaTimingF(?:illMode|unction(?:Name|Private))|OpenGLLayerPrivate|RendererPriv|S(?:crollLayerScrollMode|hapeLayer(?:FillRule|Line(?:Cap|Join)))|T(?:extLayer(?:AlignmentMode|Private|TruncationMode)|ransition(?:Subtype|Type))|ValueFunctionName)|I(?:ContextOption|DataMatrixCodeECCVersion|F(?:ilterGeneratorStruct|ormat)|Image(?:AutoAdjustmentOption|Option|RepresentationOption)|KernelROICallback|QRCodeErrorCorrectionLevel|R(?:AWFilterOption|enderDestinationAlphaMode))|X(?:Call(?:Directory(?:EnabledStatus|PhoneNumber)|EndedReason)|ErrorCode(?:CallDirectoryManagerError|IncomingCallError|RequestTransactionError)?|HandleType|PlayDTMFCallActionType)|al(?:Priority|RecurrenceType))|DRFile(?:Fork|systemInclusionMask)|FTSFileType|I(?:C(?:D(?:evice(?:Capability|Location(?:Options|Type(?:Mask)?)|Status|T(?:ransport|ype(?:Mask)?))|ownloadOption)|EXIFOrientationType|LegacyReturnCode|Return(?:Co(?:de(?:Offset)?|nnectionErrorCode)|DownloadErrorCode|MetadataErrorCode|ObjectErrorCode|PTPDeviceErrorCode|ThumbnailErrorCode)|Scanner(?:BitDepth|ColorDataFormatType|DocumentType|F(?:eatureType|unctionalUnit(?:State|Type))|MeasurementUnit|PixelDataType|TransferMode)|UploadOption)|K(?:CameraDeviceView(?:DisplayMode|TransferMode)|DeviceBrowserViewDisplayMode|ImageBrowser(?:CellState|DropOperation)|ScannerDeviceView(?:DisplayMode|TransferMode))|MKLocationToOffsetMappingMode|O(?:Bluetooth(?:Device(?:Ref|Se(?:arch(?:Attributes|DeviceAttributes|Options(?:Bits)?|Types(?:Bits)?)|lectorControllerRef))|HandsFree(?:AudioGatewayFeatures|C(?:allHoldModes|odecID)|DeviceFeatures|PDUMessageStatus|SMSSupport)|L2CAPChannel(?:DataBlock|Event(?:Type)?|Incoming(?:DataListener|EventListener)|Ref)|O(?:BEXSessionOpenConnectionCallback|bject(?:ID|Ref))|PairingControllerRef|RFCOMMChannelRef|S(?:DP(?:DataElementRef|ServiceRecordRef|UUIDRef)|MSMode|erviceBrowserController(?:Options|Ref))|UserNotification(?:C(?:allback|hannelDirection)|Ref))|DataQueue(?:Appendix|Entry|Memory)|SurfacePropertyKey))|M(?:DL(?:A(?:nimatedValueInterpolation|xisAlignedBoundingBox)|CameraProjection|DataPrecision|GeometryType|IndexBitDepth|LightType|M(?:aterial(?:Face|MipMapFilterMode|PropertyType|Semantic|Texture(?:FilterMode|WrapMode))|eshBufferType)|ProbePlacement|T(?:extureChannelEncoding|ransformOpRotationOrder)|V(?:ertexFormat|oxelIndex(?:Extent)?))|IDIChannelNumber|T(?:K(?:ModelError|TextureLoader(?:C(?:allback|ubeLayout)|Error|O(?:ption|rigin)))|L(?:A(?:rgument(?:Access|BuffersTier|Type)|ttributeFormat|utoreleased(?:Argument|ComputePipelineReflection|RenderPipelineReflection))|B(?:arrierScope|l(?:end(?:Factor|Operation)|itOption))|C(?:PUCacheMode|apture(?:Destination|Error)|learColor|o(?:lorWriteMask|m(?:mandBuffer(?:Error|Handler|Status)|pareFunction)|ordinate2D|unterSampleBufferError)|ullMode)|D(?:ataType|e(?:pthClipMode|viceLocation)|ispatchT(?:hreadgroupsIndirectArguments|ype)|raw(?:IndexedPrimitivesIndirectArguments|P(?:atchIndirectArguments|rimitivesIndirectArguments)|ablePresentedHandler))|F(?:eatureSet|unctionType)|GPUFamily|H(?:azardTrackingMode|eapType)|Ind(?:exType|irectCommandType)|L(?:anguageVersion|ibraryError|oadAction)|Mu(?:ltisample(?:DepthResolveFilter|StencilResolveFilter)|tability)|New(?:ComputePipelineState(?:CompletionHandler|WithReflectionCompletionHandler)|LibraryCompletionHandler|RenderPipelineState(?:CompletionHandler|WithReflectionCompletionHandler))|Origin|P(?:atchType|i(?:pelineOption|xelFormat)|rimitiveT(?:opologyClass|ype)|urgeableState)|QuadTessellationFactorsHalf|Re(?:adWriteTextureTier|gion|nderStages|source(?:Options|Usage))|S(?:ample(?:Position|r(?:AddressMode|BorderColor|Mi(?:nMagFilter|pFilter)))|cissorRect|hared(?:Event(?:HandlePrivate|NotificationBlock)|TextureHandlePrivate)|ize(?:AndAlign)?|t(?:e(?:ncilOperation|pFunction)|or(?:ageMode|eAction(?:Options)?)))|T(?:e(?:ssellation(?:ControlPointIndexType|Factor(?:Format|StepFunction)|PartitionMode)|xture(?:Swizzle|Type|Usage))|riangle(?:FillMode|TessellationFactorsHalf))|V(?:ertex(?:Format|StepFunction)|i(?:ewport|sibilityResultMode))|Winding)))|NS(?:AttributeType|Batch(?:DeleteRequestResultType|InsertRequestResultType|UpdateRequestResultType)|DeleteRule|EntityMappingType|Fetch(?:IndexElementType|RequestResultType|edResultsChangeType)|M(?:anagedObjectContextConcurrencyType|ergePolicyType)|P(?:ersistent(?:CloudKitContainerSchemaInitializationOptions|History(?:ChangeType|ResultType)|Store(?:AsynchronousFetchResultCompletionBlock|RequestType|UbiquitousTransitionType))|referencePaneUnselectReply)|SnapshotEventType)|O(?:BEX(?:AbortCommand(?:Data|ResponseData)|Con(?:nect(?:Command(?:Data|ResponseData)|FlagValues)|stants)|DisconnectCommand(?:Data|ResponseData)|Error(?:Codes|Data)?|Flags|GetCommand(?:Data|ResponseData)|HeaderIdentifier(?:s)?|MaxPacketLength|NonceFlagValues|OpCode(?:CommandValues|ResponseValues|SessionValues)?|Put(?:Command(?:Data|ResponseData)|FlagValues)|RealmValues|Se(?:ssion(?:Event(?:Callback|Type(?:s)?)?|ParameterTags|Ref)|tPathCommand(?:Data|ResponseData))|TransportEvent(?:Type(?:s)?)?|Version(?:s)?)|SA(?:LanguageFeatures|S(?:criptState|torageOptions))|paque(?:IOBluetoothObjectRef|OBEXSessionRef|PrivOBEXSessionData))|P(?:DF(?:A(?:ctionNamedName|nnotation(?:HighlightingMode|Key|LineEndingStyle|Subtype|TextIconType|WidgetSubtype)|ppearanceCharacteristicsKey|reaOfInterest)|Border(?:Key|Style)|D(?:isplay(?:Box|Direction|Mode)|ocument(?:Attribute|Permissions|WriteOption))|InterpolationQuality|LineStyle|MarkupType|PrintScalingMode|TextAnnotationIconType|WidgetC(?:ellState|ontrolType))|r(?:ivOBEXSessionDataRef|otocolParameters))|QLPreviewViewStyle|S(?:DP(?:Attribute(?:DeviceIdentificationRecord|IdentifierCodes)|ServiceClasses)|F(?:AuthorizationViewState|ButtonType|ViewType))|TransmissionPower)\\b",
      name: "support.type.objc"
    },
    {
      match: "\\b(?:BOOL|C(?:ategory|lass)|I(?:MP|var)|Method|NS(?:Integer|UInteger)|SEL|id|mach_header|objc_(?:AssociationPolicy|c(?:ategory|lass)|func_loadImage|hook_(?:get(?:Class|ImageName)|setAssociatedObject)|ivar|method(?:_(?:description|list))?|object(?:ptr_t)?|property(?:_(?:attribute_t|t))?|selector))\\b",
      name: "support.type.run-time.objc"
    },
    {
      match: "\\b(?:CIDetector(?:AspectRatio|FocalLength|Type(?:QRCode|Rectangle))|kCII(?:mageAutoAdjust(?:Crop|Level)|nput(?:ColorNoiseReductionAmountKey|EnableVendorLensCorrectionKey|LuminanceNoiseReductionAmountKey|NoiseReduction(?:ContrastAmountKey|DetailAmountKey|SharpnessAmountKey))))\\b",
      name: "support.variable.10.10.objc"
    },
    {
      match: "\\b(?:CIDetector(?:NumberOfAngles|ReturnSubFeatures|TypeText)|MT(?:K(?:ModelError(?:Domain|Key)|TextureLoader(?:Error(?:Domain|Key)|Option(?:AllocateMipmaps|SRGB|Texture(?:CPUCacheMode|Usage))))|L(?:CommandBufferErrorDomain|LibraryErrorDomain))|k(?:CI(?:Attribute(?:FilterAvailable_(?:Mac|iOS)|Type(?:Color|Image|Transform))|ContextHighQualityDownsample|Format(?:A(?:16|8|BGR8|f|h)|R(?:16|8|G(?:16|8|f|h)|f|h))|Input(?:VersionKey|WeightsKey))|UTType(?:3dObject|Alembic|Polygon|Stereolithography)))\\b",
      name: "support.variable.10.11.objc"
    },
    {
      match: "\\b(?:CIDetectorMaxFeatureCount|IOSurfacePropertyKey(?:BytesPer(?:Element|Row)|CacheMode|Element(?:Height|Width)|Height|Offset|P(?:ixel(?:Format|SizeCastingAllowed)|lane(?:B(?:ase|ytesPer(?:Element|Row))|Element(?:Height|Width)|Height|Info|Offset|Size|Width))|Width)|MTKTextureLoader(?:CubeLayoutVertical|O(?:ption(?:CubeLayout|GenerateMipmaps|Origin|TextureStorageMode)|rigin(?:BottomLeft|FlippedVertically|TopLeft)))|NS(?:ManagedObjectContextQueryGenerationKey|PersistentStoreConnectionPoolMaxSizeKey)|k(?:C(?:AContentsFormat(?:Gray8Uint|RGBA(?:16Float|8Uint))|I(?:Context(?:AllowLowPower|CacheIntermediates|PriorityRequestLow)|FormatL(?:16|8|A(?:16|8|f|h)|f|h)|Input(?:BaselineExposureKey|DisableGamutMapKey)))|UTTypeUniversalSceneDescription))\\b",
      name: "support.variable.10.12.objc"
    },
    {
      match: "\\b(?:MTLDevice(?:RemovalRequestedNotification|Was(?:AddedNotification|RemovedNotification))|NS(?:BinaryStore(?:InsecureDecodingCompatibilityOption|SecureDecodingClasses)|CoreDataCoreSpotlightExporter|PersistentHistoryTrackingKey)|PDF(?:A(?:nnotation(?:HighlightingMode(?:Invert|None|Outline|Push)|Key(?:A(?:ction|dditionalActions|ppearance(?:Dictionary|State))|Border(?:Style)?|Co(?:lor|ntents)|D(?:ate|e(?:faultAppearance|stination))|Flags|HighlightingMode|I(?:conName|n(?:klist|teriorColor))|Line(?:EndingStyles|Points)|Name|Open|P(?:a(?:ge|rent)|opup)|Quad(?:Points|ding)|Rect|Subtype|TextLabel|Widget(?:AppearanceDictionary|B(?:ackgroundColor|orderColor)|Caption|D(?:efaultValue|ownCaption)|Field(?:Flags|Type)|MaxLen|Options|Ro(?:lloverCaption|tation)|TextLabelUI|Value))|LineEndingStyle(?:C(?:ircle|losedArrow)|Diamond|None|OpenArrow|Square)|Subtype(?:Circle|FreeText|Highlight|Ink|Lin(?:e|k)|Popup|S(?:quare|t(?:amp|rikeOut))|Text|Underline|Widget)|TextIconType(?:Comment|Help|Insert|Key|N(?:ewParagraph|ote)|Paragraph)|WidgetSubtype(?:Button|Choice|Signature|Text))|ppearanceCharacteristicsKey(?:B(?:ackgroundColor|orderColor)|Caption|DownCaption|Ro(?:lloverCaption|tation)))|BorderKey(?:DashPattern|LineWidth|Style))|kCII(?:mage(?:A(?:pplyOrientationProperty|uxiliaryD(?:epth|isparity))|NearestSampling|Representation(?:AVDepthData|D(?:epthImage|isparityImage)))|nput(?:D(?:epthImageKey|isparityImageKey)|MoireAmountKey)))\\b",
      name: "support.variable.10.13.objc"
    },
    {
      match: "\\b(?:IOSurfacePropertyKeyAllocSize|NSPersistent(?:HistoryTokenKey|Store(?:RemoteChangeNotification|URLKey))|kC(?:A(?:GradientLayerConic|RendererMetalCommandQueue)|II(?:mage(?:AuxiliaryPortraitEffectsMatte|Representation(?:AVPortraitEffectsMatte|PortraitEffectsMatteImage))|nput(?:AmountKey|EnableEDRModeKey|MatteImageKey))))\\b",
      name: "support.variable.10.14.objc"
    },
    {
      match: "\\b(?:IC(?:Delete(?:Canceled|Error(?:Canceled|DeviceMissing|FileMissing|ReadOnly)|Failed|Successful)|E(?:numerationChronologicalOrder|rrorDomain)|ImageSource(?:ShouldCache|ThumbnailMaxPixelSize))|MTLC(?:aptureErrorDomain|o(?:mmonCounter(?:C(?:lipper(?:Invocations|PrimitivesOut)|omputeKernelInvocations)|Fragment(?:Cycles|Invocations|sPassed)|PostTessellationVertex(?:Cycles|Invocations)|RenderTargetWriteCycles|Set(?:Sta(?:geUtilization|tistic)|Timestamp)|T(?:essellation(?:Cycles|InputPatches)|imestamp|otalCycles)|Vertex(?:Cycles|Invocations))|unterErrorDomain))|NSPersistentStoreRemoteChangeNotificationPostOptionKey|kC(?:ACornerCurveC(?:ircular|ontinuous)|IImage(?:AuxiliarySemanticSegmentation(?:HairMatte|SkinMatte|TeethMatte)|Representation(?:AVSemanticSegmentationMattes|SemanticSegmentation(?:HairMatteImage|SkinMatteImage|TeethMatteImage)))))\\b",
      name: "support.variable.10.15.objc"
    },
    {
      match: "\\b(?:CIDetector(?:ImageOrientation|MinFeatureSize|Tracking)|NSPersistentStoreForceDestroyOption|kCIImage(?:AutoAdjust(?:Enhance|Features|RedEye)|Properties))\\b",
      name: "support.variable.10.8.objc"
    },
    {
      match: "\\b(?:CIDetector(?:EyeBlink|Smile)|NSPersistentStoreCoordinatorStoresWillChangeNotification)\\b",
      name: "support.variable.10.9.objc"
    },
    {
      match: "\\b(?:NS(?:A(?:ccessibility(?:AlternateUIVisibleAttribute|SharedFocusElementsAttribute)|ppearanceNameVibrant(?:Dark|Light))|CalendarIdentifierIslamic(?:Tabular|UmmAlQura)|E(?:dgeInsetsZero|xtension(?:Item(?:Att(?:achmentsKey|ributed(?:ContentTextKey|TitleKey))|sAndErrorsKey)|JavaScriptPreprocessingResultsKey))|ItemProvider(?:ErrorDomain|PreferredImageSizeKey)|Metadata(?:QueryAccessibleUbiquitousExternalDocumentsScope|UbiquitousItem(?:ContainerDisplayNameKey|DownloadRequestedKey|IsExternalDocumentKey|URLInLocalContainerKey))|ProcessInfoThermalStateDidChangeNotification|StringEncodingDetection(?:AllowLossyKey|DisallowedEncodingsKey|FromWindowsKey|L(?:ikelyLanguageKey|ossySubstitutionKey)|SuggestedEncodingsKey|UseOnlySuggestedEncodingsKey)|T(?:extEffect(?:AttributeName|LetterpressStyle)|ypeIdentifier(?:AddressText|DateText|PhoneNumberText|TransitInformationText))|U(?:RL(?:AddedToDirectoryDateKey|DocumentIdentifierKey|ErrorBackgroundTaskCancelledReasonKey|GenerationIdentifierKey|QuarantinePropertiesKey|SessionTaskPriority(?:Default|High|Low)|UbiquitousItem(?:ContainerDisplayNameKey|DownloadRequestedKey))|serActivityDocumentURLKey)|WorkspaceAccessibilityDisplayOptionsDidChangeNotification)|WKErrorDomain)\\b",
      name: "support.variable.cocoa.10.10.objc"
    },
    {
      match: "\\b(?:NS(?:AccessibilityListItem(?:IndexTextAttribute|LevelTextAttribute|PrefixTextAttribute)|CollectionElementKind(?:InterItemGapIndicator|Section(?:Footer|Header))|DefaultAttributesDocumentAttribute|F(?:ileManagerUnmountDissentingProcessIdentifierErrorKey|ontWeight(?:B(?:lack|old)|Heavy|Light|Medium|Regular|Semibold|Thin|UltraLight))|PersonNameComponent(?:Delimiter|FamilyName|GivenName|Key|MiddleName|Nickname|Prefix|Suffix)|S(?:plitView(?:ControllerAutomaticDimension|ItemUnspecifiedDimension)|tringTransform(?:FullwidthToHalfwidth|HiraganaToKatakana|LatinTo(?:Arabic|Cyrillic|Greek|H(?:angul|ebrew|iragana)|Katakana|Thai)|MandarinToLatin|Strip(?:CombiningMarks|Diacritics)|To(?:Latin|UnicodeName|XMLHex)))|ToolbarToggleSidebarItemIdentifier|URL(?:ApplicationIsScriptableKey|IsApplicationKey)|ViewNoIntrinsicMetric)|WKWebsiteDataType(?:Cookies|DiskCache|IndexedDBDatabases|LocalStorage|MemoryCache|OfflineWebApplicationCache|SessionStorage|WebSQLDatabases))\\b",
      name: "support.variable.cocoa.10.11.objc"
    },
    {
      match: "\\bNS(?:Accessibility(?:MenuBarItemRole|RequiredAttribute|TextAlignmentAttribute)|GridViewSizeForContent|Image(?:HintUserInterfaceLayoutDirection|Name(?:Go(?:BackTemplate|ForwardTemplate)|TouchBar(?:A(?:dd(?:DetailTemplate|Template)|larmTemplate|udio(?:Input(?:MuteTemplate|Template)|Output(?:MuteTemplate|Volume(?:HighTemplate|LowTemplate|MediumTemplate|OffTemplate))))|BookmarksTemplate|Co(?:lorPicker(?:F(?:ill|ont)|Stroke)|m(?:munication(?:AudioTemplate|VideoTemplate)|poseTemplate))|D(?:eleteTemplate|ownloadTemplate)|E(?:nterFullScreenTemplate|xitFullScreenTemplate)|F(?:astForwardTemplate|older(?:CopyToTemplate|MoveToTemplate|Template))|G(?:etInfoTemplate|o(?:BackTemplate|DownTemplate|ForwardTemplate|UpTemplate))|HistoryTemplate|IconViewTemplate|ListViewTemplate|MailTemplate|New(?:FolderTemplate|MessageTemplate)|OpenInBrowserTemplate|P(?:auseTemplate|lay(?:PauseTemplate|Template|headTemplate))|QuickLookTemplate|R(?:e(?:cordSt(?:artTemplate|opTemplate)|freshTemplate|windTemplate)|otate(?:LeftTemplate|RightTemplate))|S(?:earchTemplate|hareTemplate|idebarTemplate|kip(?:Ahead(?:15SecondsTemplate|30SecondsTemplate|Template)|Back(?:15SecondsTemplate|30SecondsTemplate|Template)|To(?:EndTemplate|StartTemplate))|lideshowTemplate)|T(?:agIconTemplate|ext(?:Bo(?:ldTemplate|xTemplate)|CenterAlignTemplate|ItalicTemplate|JustifiedAlignTemplate|L(?:eftAlignTemplate|istTemplate)|RightAlignTemplate|StrikethroughTemplate|UnderlineTemplate))|User(?:AddTemplate|GroupTemplate|Template)|Volume(?:DownTemplate|UpTemplate))))|MetadataUbiquitous(?:ItemIsSharedKey|SharedItem(?:CurrentUser(?:PermissionsKey|RoleKey)|MostRecentEditorNameComponentsKey|OwnerNameComponentsKey|PermissionsRead(?:Only|Write)|Role(?:Owner|Participant)))|S(?:haringServiceNameCloudSharing|liderAccessoryWidth(?:Default|Wide)|pellCheckerDidChangeAutomatic(?:CapitalizationNotification|PeriodSubstitutionNotification|TextCompletionNotification)|treamNetworkServiceTypeCallSignaling)|T(?:extCheckingSelectedRangeKey|o(?:olbarCloudSharingItemIdentifier|uchBarItem(?:Identifier(?:C(?:andidateList|haracterPicker)|F(?:ixedSpace(?:Large|Small)|lexibleSpace)|OtherItemsProxy|Text(?:Alignment|ColorPicker|Format|List|Style))|Priority(?:High|Low|Normal))))|URL(?:CanonicalPathKey|Ubiquitous(?:ItemIsSharedKey|SharedItem(?:CurrentUser(?:PermissionsKey|RoleKey)|MostRecentEditorNameComponentsKey|OwnerNameComponentsKey|PermissionsRead(?:Only|Write)|Role(?:Owner|Participant)))|Volume(?:Is(?:EncryptedKey|RootFileSystemKey)|Supports(?:CompressionKey|ExclusiveRenamingKey|FileCloningKey|SwapRenamingKey))))\\b",
      name: "support.variable.cocoa.10.12.objc"
    },
    {
      match: "\\b(?:NS(?:A(?:boutPanelOption(?:Application(?:Icon|Name|Version)|Credits|Version)|ccessibility(?:Annotation(?:Element|L(?:abel|ocation)|TextAttribute)|C(?:ollectionListSubrole|ustomTextAttribute)|LanguageTextAttribute|PageRole|SectionListSubrole|TabButtonSubrole))|ImageNameTouchBarRemoveTemplate|LocalizedFailureErrorKey|Pasteboard(?:Name(?:Drag|F(?:ind|ont)|General|Ruler)|Type(?:FileURL|URL))|RulerViewUnit(?:Centimeters|Inches|P(?:icas|oints))|Text(?:ListMarker(?:Box|C(?:heck|ircle)|D(?:ecimal|i(?:amond|sc))|Hyphen|Lowercase(?:Alpha|Hexadecimal|Latin|Roman)|Octal|Square|Uppercase(?:Alpha|Hexadecimal|Latin|Roman))|MovementUserInfoKey)|URLVolume(?:AvailableCapacityFor(?:ImportantUsageKey|OpportunisticUsageKey)|Supports(?:AccessPermissionsKey|ImmutableFilesKey)))|WKWebsiteDataType(?:FetchCache|ServiceWorkerRegistrations))\\b",
      name: "support.variable.cocoa.10.13.objc"
    },
    {
      match: "\\b(?:NS(?:Appearance(?:DocumentAttribute|Name(?:AccessibilityHighContrast(?:Aqua|DarkAqua|Vibrant(?:Dark|Light))|DarkAqua))|MenuItemImportFromDeviceIdentifier|SecureUnarchiveFromDataTransformerName)|UN(?:AuthorizationOptionNone|ErrorDomain|Notification(?:A(?:ctionOptionNone|ttachmentOptionsT(?:humbnail(?:ClippingRectKey|HiddenKey|TimeKey)|ypeHintKey))|CategoryOptionNone|D(?:efaultActionIdentifier|ismissActionIdentifier)|PresentationOptionNone)))\\b",
      name: "support.variable.cocoa.10.14.objc"
    },
    {
      match: "\\bNS(?:DirectionalEdgeInsetsZero|FontDescriptorSystemDesign(?:Default|Monospaced|Rounded|Serif)|HTTPCookieSameSite(?:Lax|Policy|Strict)|ReadAccessURLDocumentOption|SourceTextScalingDocument(?:Attribute|Option)|T(?:argetTextScalingDocumentOption|extScalingDocumentAttribute)|URLErrorNetworkUnavailableReasonKey)\\b",
      name: "support.variable.cocoa.10.15.objc"
    },
    {
      match: "\\b(?:NS(?:A(?:ccessibilityExtrasMenuBarAttribute|pplicationLaunchUserNotificationKey)|HashTableWeakMemory|ImageNameShareTemplate|MapTableWeakMemory|S(?:crollView(?:DidEndLiveMagnifyNotification|WillStartLiveMagnifyNotification)|haringServiceName(?:AddTo(?:Aperture|IPhoto|SafariReadingList)|Compose(?:Email|Message)|SendViaAirDrop|UseAsDesktopPicture))|TextAlternatives(?:AttributeName|SelectedAlternativeStringNotification)|U(?:RL(?:IsExcludedFromBackupKey|PathKey)|biquityIdentityDidChangeNotification))|kABSocialProfileServiceSinaWeibo)\\b",
      name: "support.variable.cocoa.10.8.objc"
    },
    {
      match: "\\b(?:NS(?:A(?:ccessibility(?:ContainsProtectedContentAttribute|DescriptionListSubrole|LayoutChangedNotification|PriorityKey|S(?:how(?:AlternateUIAction|DefaultUIAction)|witchSubrole)|ToggleSubrole|UIElementsKey)|pp(?:earanceNameAqua|licationDidChangeOcclusionStateNotification))|CalendarDayChangedNotification|KeyedArchiveRootObjectKey|M(?:etadata(?:Item(?:A(?:cquisitionM(?:akeKey|odelKey)|l(?:bumKey|titudeKey)|p(?:ertureKey|pl(?:eLoop(?:DescriptorsKey|s(?:KeyFilterTypeKey|LoopModeKey|RootKeyKey))|icationCategoriesKey))|ttributeChangeDateKey|u(?:di(?:encesKey|o(?:BitRateKey|ChannelCountKey|EncodingApplicationKey|SampleRateKey|TrackNumberKey))|thor(?:AddressesKey|EmailAddressesKey|sKey)))|BitsPerSampleKey|C(?:FBundleIdentifierKey|ameraOwnerKey|ityKey|o(?:decsKey|lorSpaceKey|m(?:mentKey|poserKey)|nt(?:actKeywordsKey|ent(?:CreationDateKey|ModificationDateKey|Type(?:Key|TreeKey))|ributorsKey)|pyrightKey|untryKey|verageKey)|reatorKey)|D(?:ateAddedKey|e(?:liveryTypeKey|scriptionKey)|irectorKey|ownloadedDateKey|u(?:eDateKey|rationSecondsKey))|E(?:XIF(?:GPSVersionKey|VersionKey)|ditorsKey|mailAddressesKey|ncodingApplicationsKey|x(?:ecutable(?:ArchitecturesKey|PlatformKey)|posure(?:ModeKey|ProgramKey|TimeS(?:econdsKey|tringKey))))|F(?:NumberKey|inderCommentKey|lashOnOffKey|o(?:calLength(?:35mmKey|Key)|ntsKey))|G(?:PS(?:AreaInformationKey|D(?:OPKey|ateStampKey|est(?:BearingKey|DistanceKey|L(?:atitudeKey|ongitudeKey))|ifferentalKey)|M(?:apDatumKey|easureModeKey)|ProcessingMethodKey|StatusKey|TrackKey)|enreKey)|H(?:asAlphaChannelKey|eadlineKey)|I(?:SOSpeedKey|dentifierKey|mageDirectionKey|n(?:formationKey|st(?:antMessageAddressesKey|ructionsKey))|s(?:ApplicationManagedKey|GeneralMIDISequenceKey|LikelyJunkKey))|K(?:ey(?:SignatureKey|wordsKey)|indKey)|L(?:a(?:nguagesKey|stUsedDateKey|titudeKey|yerNamesKey)|ensModelKey|ongitudeKey|yricistKey)|M(?:axApertureKey|e(?:diaTypesKey|teringModeKey)|usical(?:GenreKey|Instrument(?:CategoryKey|NameKey)))|N(?:amedLocationKey|umberOfPagesKey)|Or(?:ganizationsKey|i(?:entationKey|ginal(?:FormatKey|SourceKey)))|P(?:a(?:ge(?:HeightKey|WidthKey)|rticipantsKey)|erformersKey|honeNumbersKey|ixel(?:CountKey|HeightKey|WidthKey)|ro(?:ducerKey|fileNameKey|jectsKey)|ublishersKey)|R(?:e(?:c(?:ipient(?:AddressesKey|EmailAddressesKey|sKey)|ording(?:DateKey|YearKey))|dEyeOnOffKey|solution(?:HeightDPIKey|WidthDPIKey))|ightsKey)|S(?:ecurityMethodKey|peedKey|t(?:a(?:rRatingKey|teOrProvinceKey)|reamableKey)|ubjectKey)|T(?:e(?:mpoKey|xtContentKey)|hemeKey|i(?:me(?:SignatureKey|stampKey)|tleKey)|otalBitRateKey)|V(?:ersionKey|ideoBitRateKey)|Wh(?:ereFromsKey|iteBalanceKey))|Query(?:Indexed(?:LocalComputerScope|NetworkScope)|Update(?:AddedItemsKey|ChangedItemsKey|RemovedItemsKey))|UbiquitousItem(?:Downloading(?:ErrorKey|Status(?:Current|Downloaded|Key|NotDownloaded))|UploadingErrorKey))|odalResponse(?:Abort|Continue|Stop))|OutlineView(?:DisclosureButtonKey|ShowHideButtonKey)|Progress(?:EstimatedTimeRemainingKey|File(?:AnimationImage(?:Key|OriginalRectKey)|CompletedCountKey|IconKey|OperationKind(?:Copying|D(?:ecompressingAfterDownloading|ownloading)|Key|Receiving)|TotalCountKey|URLKey)|KindFile|ThroughputKey)|S(?:crollView(?:Did(?:EndLiveScrollNotification|LiveScrollNotification)|WillStartLiveScrollNotification)|pellCheckerDidChangeAutomatic(?:DashSubstitutionNotification|QuoteSubstitutionNotification)|tackView(?:SpacingUseDefault|VisibilityPriority(?:DetachOnlyIfNecessary|MustHold|NotVisible)))|URL(?:CredentialStorageRemoveSynchronizableCredentials|Session(?:DownloadTaskResumeData|TransferSizeUnknown)|TagNamesKey|UbiquitousItem(?:Downloading(?:ErrorKey|Status(?:Current|Downloaded|Key|NotDownloaded))|UploadingErrorKey))|WindowDidChangeOcclusionStateNotification)|kABSocialProfileService(?:TencentWeibo|Yelp))\\b",
      name: "support.variable.cocoa.10.9.objc"
    },
    {
      match: "\\b(?:AB(?:AddressBookErrorDomain|MultiValueIdentifiersErrorKey|PeoplePicker(?:DisplayedPropertyDidChangeNotification|GroupSelectionDidChangeNotification|NameSelectionDidChangeNotification|ValueSelectionDidChangeNotification))|NS(?:A(?:bort(?:ModalException|PrintingException)|ccessibility(?:A(?:ctivationPointAttribute|llowedValuesAttribute|nnouncement(?:Key|RequestedNotification)|pplication(?:ActivatedNotification|DeactivatedNotification|HiddenNotification|Role|ShownNotification)|scendingSortDirectionValue|tt(?:achmentTextAttribute|ributedStringForRangeParameterizedAttribute)|utocorrectedTextAttribute)|B(?:ackgroundColorTextAttribute|oundsForRangeParameterizedAttribute|rowserRole|u(?:syIndicatorRole|ttonRole))|C(?:ancel(?:Action|ButtonAttribute)|e(?:ll(?:ForColumnAndRowParameterizedAttribute|Role)|nt(?:erTabStopMarkerTypeValue|imetersUnitValue))|h(?:eckBoxRole|ildrenAttribute)|l(?:earButtonAttribute|oseButton(?:Attribute|Subrole))|o(?:l(?:orWellRole|umn(?:CountAttribute|HeaderUIElementsAttribute|IndexRangeAttribute|Role|TitlesAttribute|sAttribute))|mboBoxRole|n(?:firmAction|tent(?:ListSubrole|sAttribute)))|r(?:eatedNotification|iticalValueAttribute))|D(?:e(?:c(?:imalTabStopMarkerTypeValue|rement(?:A(?:ction|rrowSubrole)|ButtonAttribute|PageSubrole))|f(?:aultButtonAttribute|initionListSubrole)|leteAction|sc(?:endingSortDirectionValue|riptionAttribute))|i(?:alogSubrole|sclos(?:ed(?:ByRowAttribute|RowsAttribute)|ingAttribute|ure(?:LevelAttribute|TriangleRole)))|ocumentAttribute|rawer(?:CreatedNotification|Role))|E(?:ditedAttribute|nabledAttribute|rrorCodeExceptionInfo|xpandedAttribute)|F(?:i(?:lenameAttribute|rstLineIndentMarkerTypeValue)|loatingWindowSubrole|o(?:cused(?:Attribute|UIElement(?:Attribute|ChangedNotification)|Window(?:Attribute|ChangedNotification))|nt(?:FamilyKey|NameKey|SizeKey|TextAttribute)|regroundColorTextAttribute)|rontmostAttribute|ullScreenButton(?:Attribute|Subrole))|Gr(?:idRole|o(?:upRole|wArea(?:Attribute|Role)))|H(?:andle(?:Role|sAttribute)|e(?:ad(?:IndentMarkerTypeValue|erAttribute)|lp(?:Attribute|Tag(?:CreatedNotification|Role)))|iddenAttribute|orizontal(?:OrientationValue|ScrollBarAttribute|Unit(?:DescriptionAttribute|sAttribute)))|I(?:dentifierAttribute|mageRole|n(?:c(?:hesUnitValue|rement(?:A(?:ction|rrowSubrole)|ButtonAttribute|PageSubrole|orRole))|dexAttribute|sertionPointLineNumberAttribute))|L(?:a(?:bel(?:UIElementsAttribute|ValueAttribute)|yout(?:AreaRole|ItemRole|PointForScreenPointParameterizedAttribute|SizeForScreenSizeParameterizedAttribute))|e(?:ftTabStopMarkerTypeValue|velIndicatorRole)|i(?:n(?:eForIndexParameterizedAttribute|k(?:Role|TextAttribute|edUIElementsAttribute))|stRole))|M(?:a(?:in(?:Attribute|Window(?:Attribute|ChangedNotification))|rke(?:dMisspelledTextAttribute|r(?:GroupUIElementAttribute|Type(?:Attribute|DescriptionAttribute)|UIElementsAttribute|ValuesAttribute))|tteRole|xValueAttribute)|enu(?:B(?:ar(?:Attribute|Role)|uttonRole)|ItemRole|Role)|i(?:n(?:ValueAttribute|imize(?:Button(?:Attribute|Subrole)|dAttribute))|sspelledTextAttribute)|o(?:dalAttribute|vedNotification))|N(?:extContentsAttribute|umberOfCharactersAttribute)|O(?:r(?:deredByRowAttribute|ientationAttribute)|utlineRo(?:le|wSubrole)|verflowButtonAttribute)|P(?:arentAttribute|ic(?:asUnitValue|kAction)|laceholderValueAttribute|o(?:intsUnitValue|p(?:UpButtonRole|overRole)|sitionAttribute)|r(?:e(?:ssAction|viousContentsAttribute)|o(?:gressIndicatorRole|xyAttribute)))|R(?:TFForRangeParameterizedAttribute|a(?:dio(?:ButtonRole|GroupRole)|iseAction|ngeFor(?:IndexParameterizedAttribute|LineParameterizedAttribute|PositionParameterizedAttribute)|tingIndicatorSubrole)|e(?:levanceIndicatorRole|sizedNotification)|ightTabStopMarkerTypeValue|o(?:le(?:Attribute|DescriptionAttribute)|w(?:Co(?:llapsedNotification|unt(?:Attribute|ChangedNotification))|ExpandedNotification|HeaderUIElementsAttribute|IndexRangeAttribute|Role|sAttribute))|uler(?:MarkerRole|Role))|S(?:cr(?:een(?:PointForLayoutPointParameterizedAttribute|SizeForLayoutSizeParameterizedAttribute)|oll(?:AreaRole|BarRole))|e(?:arch(?:ButtonAttribute|FieldSubrole|MenuAttribute)|cureTextFieldSubrole|lected(?:Attribute|C(?:ells(?:Attribute|ChangedNotification)|hildren(?:Attribute|ChangedNotification|MovedNotification)|olumns(?:Attribute|ChangedNotification))|Rows(?:Attribute|ChangedNotification)|Text(?:Attribute|ChangedNotification|Range(?:Attribute|sAttribute)))|rvesAsTitleForUIElementsAttribute)|h(?:a(?:dowTextAttribute|red(?:CharacterRangeAttribute|TextUIElementsAttribute))|eet(?:CreatedNotification|Role)|ow(?:MenuAction|nMenuAttribute))|izeAttribute|liderRole|ort(?:ButtonSubrole|DirectionAttribute)|plit(?:GroupRole|ter(?:Role|sAttribute))|t(?:a(?:ndardWindowSubrole|ticTextRole)|ri(?:kethrough(?:ColorTextAttribute|TextAttribute)|ngForRangeParameterizedAttribute)|yleRangeForIndexParameterizedAttribute)|u(?:broleAttribute|perscriptTextAttribute)|ystem(?:DialogSubrole|FloatingWindowSubrole|WideRole))|T(?:a(?:b(?:GroupRole|leRo(?:le|wSubrole)|sAttribute)|ilIndentMarkerTypeValue)|ext(?:A(?:reaRole|ttachmentSubrole)|FieldRole|LinkSubrole)|i(?:melineSubrole|tle(?:Attribute|ChangedNotification|UIElementAttribute))|o(?:olbar(?:Button(?:Attribute|Subrole)|Role)|pLevelUIElementAttribute))|U(?:IElementDestroyedNotification|RLAttribute|n(?:derline(?:ColorTextAttribute|TextAttribute)|it(?:DescriptionAttribute|s(?:Attribute|ChangedNotification))|known(?:MarkerTypeValue|OrientationValue|Role|S(?:ortDirectionValue|ubrole)|UnitValue)))|V(?:alue(?:Attribute|ChangedNotification|DescriptionAttribute|IndicatorRole)|ertical(?:OrientationValue|ScrollBarAttribute|Unit(?:DescriptionAttribute|sAttribute))|isible(?:C(?:ellsAttribute|h(?:aracterRangeAttribute|ildrenAttribute)|olumnsAttribute)|NameKey|RowsAttribute))|W(?:arningValueAttribute|indow(?:Attribute|CreatedNotification|DeminiaturizedNotification|M(?:iniaturizedNotification|ovedNotification)|R(?:esizedNotification|ole)|sAttribute))|ZoomButton(?:Attribute|Subrole))|l(?:ert(?:FirstButtonReturn|SecondButtonReturn|ThirdButtonReturn)|ignmentBinding|l(?:RomanInputSourcesLocaleIdentifier|ows(?:EditingMultipleValuesSelectionBindingOption|NullArgumentBindingOption))|ternate(?:ImageBinding|TitleBinding)|waysPresentsApplicationModalAlertsBindingOption)|n(?:imat(?:eBinding|ion(?:DelayBinding|ProgressMark(?:Notification)?|TriggerOrder(?:In|Out)))|tialiasThresholdChangedNotification)|pp(?:Kit(?:IgnoredException|V(?:ersionNumber(?:10_(?:0|1(?:0(?:_(?:2|3|4|5|Max))?|1(?:_(?:1|2|3))?|2(?:_(?:1|2))?|3(?:_(?:1|2|4))?|4(?:_(?:1|2|3|4|5))?)?|2(?:_3)?|3(?:_(?:2|3|5|7|9))?|4(?:_(?:1|3|4|7))?|5(?:_(?:2|3))?|6|7(?:_(?:2|3|4))?|8|9)|With(?:C(?:o(?:lumnResizingBrowser|ntinuousScrollingBrowser)|u(?:rsorSizeSupport|stomSheetPosition))|D(?:eferredWindowDisplaySupport|irectionalTabs|ockTilePlugInSupport)|PatternColorLeakFix))?|irtualMemoryException))|l(?:e(?:Event(?:ManagerWillProcessFirstEventNotification|TimeOut(?:Default|None))|ScriptError(?:AppName|BriefMessage|Message|Number|Range))|ication(?:Did(?:BecomeActiveNotification|ChangeScreenParametersNotification|Finish(?:LaunchingNotification|RestoringWindowsNotification)|HideNotification|ResignActiveNotification|U(?:nhideNotification|pdateNotification))|LaunchIsDefaultLaunchKey|Will(?:BecomeActiveNotification|FinishLaunchingNotification|HideNotification|ResignActiveNotification|TerminateNotification|U(?:nhideNotification|pdateNotification)))))?|rgument(?:Binding|Domain)|ssertionHandlerKey|tt(?:achmentAttributeName|ributedStringBinding)|uthorDocumentAttribute|verageKeyValueOperator)|B(?:a(?:ck(?:groundColor(?:AttributeName|DocumentAttribute)|ingPropertyOld(?:ColorSpaceKey|ScaleFactorKey))|d(?:BitmapParametersException|ComparisonException|RTF(?:ColorTableException|DirectiveException|FontTableException|StyleSheetException))|se(?:URLDocumentOption|lineOffsetAttributeName))|lack|ottomMarginDocumentAttribute|rowser(?:ColumnConfigurationDidChangeNotification|IllegalDelegateException)|undle(?:DidLoadNotification|ResourceRequestLo(?:adingPriorityUrgent|wDiskSpaceNotification)))|C(?:a(?:l(?:endarIdentifier(?:Buddhist|C(?:hinese|optic)|EthiopicAmete(?:Alem|Mihret)|Gregorian|Hebrew|I(?:SO8601|ndian|slamic(?:Civil)?)|Japanese|Persian|RepublicOfChina)|ibrated(?:RGBColorSpace|WhiteColorSpace))|tegoryDocumentAttribute)|haracter(?:ConversionException|EncodingDocument(?:Attribute|Option))|lassDescriptionNeededForClassNotification|o(?:coa(?:ErrorDomain|VersionDocumentAttribute)|lor(?:List(?:DidChangeNotification|IOException|NotEditableException)|PanelColorDidChangeNotification)|m(?:boBox(?:Selection(?:DidChangeNotification|IsChangingNotification)|Will(?:DismissNotification|PopUpNotification))|mentDocumentAttribute|panyDocumentAttribute)|n(?:ditionallySets(?:E(?:ditableBindingOption|nabledBindingOption)|HiddenBindingOption)|t(?:e(?:nt(?:Array(?:Binding|ForMultipleSelectionBinding)|Binding|DictionaryBinding|HeightBinding|Object(?:Binding|sBinding)|PlacementTagBindingOption|SetBinding|ValuesBinding|WidthBinding)|xtHelpModeDid(?:ActivateNotification|DeactivateNotification))|inuouslyUpdatesValueBindingOption|rol(?:StateValue(?:Mixed|O(?:ff|n))|TextDid(?:BeginEditingNotification|ChangeNotification|EndEditingNotification)))|vertedDocumentAttribute)|pyrightDocumentAttribute|untKeyValueOperator)|r(?:eat(?:esSortDescriptorBindingOption|ionTimeDocumentAttribute)|iticalValueBinding)|u(?:r(?:rentLocaleDidChangeNotification|sorAttributeName)|stomColorSpace))|D(?:a(?:rkGray|taBinding)|e(?:bugDescriptionErrorKey|cimalNumber(?:DivideByZeroException|ExactnessException|OverflowException|UnderflowException)|f(?:ault(?:AttributesDocumentOption|RunLoopMode|TabIntervalDocumentAttribute)|initionPresentationType(?:DictionaryApplication|Key|Overlay))|letesObjectsOnRemoveBindingsOption|stinationInvalidException|vice(?:BitsPerSample|C(?:MYKColorSpace|olorSpaceName)|Is(?:Printer|Screen)|R(?:GBColorSpace|esolution)|Size|WhiteColorSpace))|i(?:dBecomeSingleThreadedNotification|s(?:play(?:NameBindingOption|Pattern(?:BindingOption|TitleBinding|ValueBinding))|tinctUnionOf(?:ArraysKeyValueOperator|ObjectsKeyValueOperator|SetsKeyValueOperator)))|o(?:c(?:FormatTextDocumentType|ument(?:EditedBinding|TypeDocument(?:Attribute|Option)))|ubleClick(?:ArgumentBinding|TargetBinding))|ragging(?:Exception|ImageComponent(?:IconKey|LabelKey)))|E(?:dit(?:ableBinding|orDocumentAttribute)|nabledBinding|vent(?:DurationForever|TrackingRunLoopMode)|x(?:cluded(?:ElementsDocumentAttribute|KeysBinding)|pansionAttributeName|tension(?:Host(?:Did(?:BecomeActiveNotification|EnterBackgroundNotification)|Will(?:EnterForegroundNotification|ResignActiveNotification))|JavaScriptFinalizeArgumentKey)))|F(?:i(?:l(?:e(?:AppendOnly|Busy|C(?:ontentsPboardType|reationDate)|DeviceIdentifier|ExtensionHidden|GroupOwnerAccount(?:ID|Name)|H(?:FS(?:CreatorCode|TypeCode)|andle(?:ConnectionAcceptedNotification|DataAvailableNotification|Notification(?:DataItem|FileHandleItem)|OperationException|Read(?:CompletionNotification|ToEndOfFileCompletionNotification)))|Immutable|ModificationDate|OwnerAccount(?:ID|Name)|P(?:athErrorKey|osixPermissions|rotection(?:Complete(?:Un(?:lessOpen|tilFirstUserAuthentication))?|Key|None))|ReferenceCount|S(?:ize|ystem(?:F(?:ileNumber|ree(?:Nodes|Size))|N(?:odes|umber)|Size))|Type(?:BlockSpecial|CharacterSpecial|D(?:irectory|ocument(?:Attribute|Option))|Regular|S(?:ocket|ymbolicLink)|Unknown)?)|terPredicateBinding)|ndPanel(?:CaseInsensitiveSearch|S(?:earchOptionsPboardType|ubstringMatch)))|loatingWindowLevel|o(?:nt(?:AttributeName|B(?:inding|oldBinding)|C(?:ascadeListAttribute|haracterSetAttribute|ollection(?:A(?:ctionKey|llFonts)|Di(?:dChangeNotification|sallowAutoActivationOption)|Favorites|IncludeDisabledFontsOption|NameKey|OldNameKey|Re(?:centlyUsed|moveDuplicatesOption)|User|VisibilityKey|Was(?:Hidden|Renamed|Shown)))|F(?:a(?:ceAttribute|mily(?:Attribute|NameBinding))|eature(?:Se(?:lectorIdentifierKey|ttingsAttribute)|TypeIdentifierKey)|ixedAdvanceAttribute)|I(?:dentityMatrix|talicBinding)|MatrixAttribute|Name(?:Attribute|Binding)|S(?:etChangedNotification|ize(?:Attribute|Binding)|lantTrait|ymbolicTrait)|TraitsAttribute|UnavailableException|V(?:ariationA(?:ttribute|xis(?:DefaultValueKey|IdentifierKey|M(?:aximumValueKey|inimumValueKey)|NameKey))|isibleNameAttribute)|W(?:eightTrait|idthTrait))|regroundColorAttributeName|undationVersionNumber)|ullScreenMode(?:A(?:llScreens|pplicationPresentationOptions)|Setting|WindowLevel))|G(?:enericException|l(?:obalDomain|yphInfoAttributeName)|ra(?:mmar(?:Corrections|Range|UserDescription)|phicsContext(?:DestinationAttributeName|P(?:DFFormat|SFormat)|RepresentationFormatAttributeName)))|H(?:T(?:MLTextDocumentType|TPCookie(?:Comment(?:URL)?|D(?:iscard|omain)|Expires|Ma(?:nager(?:AcceptPolicyChangedNotification|CookiesChangedNotification)|ximumAge)|Name|OriginURL|P(?:ath|ort)|Secure|V(?:alue|ersion)))|a(?:ndlesContentAsCompoundValueBindingOption|shTable(?:CopyIn|ObjectPointerPersonality|StrongMemory))|e(?:aderTitleBinding|lpAnchorErrorKey)|iddenBinding|yphenationFactorDocumentAttribute)|I(?:llegalSelectorException|mage(?:Binding|C(?:acheException|o(?:lorSyncProfileData|mpression(?:Factor|Method))|urrentFrame(?:Duration)?)|DitherTransparency|EXIFData|F(?:allbackBackgroundColor|rameCount)|Gamma|Hint(?:CTM|Interpolation)|Interlaced|LoopCount|Name(?:A(?:ctionTemplate|d(?:dTemplate|vanced)|pplicationIcon)|B(?:luetoothTemplate|o(?:njour|okmarksTemplate))|C(?:aution|o(?:l(?:orPanel|umnViewTemplate)|mputer))|E(?:nterFullScreenTemplate|veryone|xitFullScreenTemplate)|F(?:lowViewTemplate|o(?:l(?:der(?:Burnable|Smart)?|lowLinkFreestandingTemplate)|ntPanel))|Go(?:LeftTemplate|RightTemplate)|HomeTemplate|I(?:ChatTheaterTemplate|conViewTemplate|n(?:fo|validDataFreestandingTemplate))|L(?:eftFacingTriangleTemplate|istViewTemplate|ock(?:LockedTemplate|UnlockedTemplate))|M(?:enu(?:MixedStateTemplate|OnStateTemplate)|obileMe|ultipleDocuments)|Network|P(?:athTemplate|referencesGeneral)|QuickLookTemplate|R(?:e(?:fresh(?:FreestandingTemplate|Template)|moveTemplate|vealFreestandingTemplate)|ightFacingTriangleTemplate)|S(?:lideshowTemplate|martBadgeTemplate|t(?:atus(?:Available|None|PartiallyAvailable|Unavailable)|opProgress(?:FreestandingTemplate|Template)))|Trash(?:Empty|Full)|User(?:Accounts|G(?:roup|uest))?)|Progressive|R(?:GBColorTable|epRegistryDidChangeNotification))|n(?:c(?:ludedKeysBinding|onsistentArchiveException)|itial(?:KeyBinding|ValueBinding)|sertsNullPlaceholderBindingOption|te(?:ger(?:HashCallBacks|Map(?:KeyCallBacks|ValueCallBacks))|rnalInconsistencyException)|v(?:alid(?:Ar(?:chiveOperationException|gumentException)|ReceivePortException|SendPortException|UnarchiveOperationException)|o(?:cationOperation(?:CancelledException|VoidResultException)|kesSeparatelyWithArrayObjectsBindingOption)))|s(?:IndeterminateBinding|N(?:ilTransformerName|otNilTransformerName)))|Ke(?:rnAttributeName|y(?:ValueChange(?:IndexesKey|KindKey|N(?:ewKey|otificationIsPriorKey)|OldKey)|wordsDocumentAttribute))|L(?:a(?:belBinding|youtPriority(?:D(?:efault(?:High|Low)|ragThatCan(?:ResizeWindow|notResizeWindow))|FittingSizeCompression|Required|WindowSizeStayPut))|eftMarginDocumentAttribute|i(?:g(?:atureAttributeName|htGray)|n(?:guisticTag(?:Ad(?:jective|verb)|C(?:l(?:assifier|ose(?:Parenthesis|Quote))|onjunction)|D(?:ash|eterminer)|I(?:diom|nterjection)|N(?:oun|umber)|O(?:pen(?:Parenthesis|Quote)|rganizationName|ther(?:Punctuation|W(?:hitespace|ord))?)|P(?:ar(?:agraphBreak|ticle)|ersonalName|laceName|r(?:eposition|onoun)|unctuation)|S(?:cheme(?:L(?:anguage|e(?:mma|xicalClass))|NameType(?:OrLexicalClass)?|Script|TokenType)|entenceTerminator)|Verb|W(?:hitespace|ord(?:Joiner)?))|kAttributeName))|o(?:adedClasses|cal(?:NotificationCenterType|e(?:AlternateQuotation(?:BeginDelimiterKey|EndDelimiterKey)|C(?:alendar|o(?:llat(?:ionIdentifier|orIdentifier)|untryCode)|urrency(?:Code|Symbol))|DecimalSeparator|ExemplarCharacterSet|GroupingSeparator|Identifier|LanguageCode|MeasurementSystem|Quotation(?:BeginDelimiterKey|EndDelimiterKey)|ScriptCode|UsesMetricSystem|VariantCode)|ized(?:DescriptionKey|FailureReasonErrorKey|KeyDictionaryBinding|Recovery(?:OptionsErrorKey|SuggestionErrorKey)))))|M(?:a(?:c(?:SimpleTextDocumentType|hErrorDomain)|inMenuWindowLevel|llocException|nage(?:dObjectContextBinding|rDocumentAttribute)|pTable(?:CopyIn|ObjectPointerPersonality|StrongMemory)|rkedClauseSegmentAttributeName|x(?:ValueBinding|WidthBinding|imum(?:KeyValueOperator|RecentsBinding)))|e(?:nu(?:Did(?:AddItemNotification|BeginTrackingNotification|ChangeItemNotification|EndTrackingNotification|RemoveItemNotification|SendActionNotification)|WillSendActionNotification)|tadata(?:Item(?:DisplayNameKey|FS(?:C(?:ontentChangeDateKey|reationDateKey)|NameKey|SizeKey)|IsUbiquitousKey|PathKey|URLKey)|Query(?:Did(?:FinishGatheringNotification|StartGatheringNotification|UpdateNotification)|GatheringProgressNotification|LocalComputerScope|NetworkScope|ResultContentRelevanceAttribute|U(?:biquitousD(?:ataScope|ocumentsScope)|serHomeScope))|UbiquitousItem(?:HasUnresolvedConflictsKey|Is(?:DownloadingKey|Upload(?:edKey|ingKey))|Percent(?:DownloadedKey|UploadedKey))))|i(?:n(?:ValueBinding|WidthBinding|imumKeyValueOperator)|xedStateImageBinding)|od(?:al(?:Panel(?:RunLoopMode|WindowLevel)|Response(?:Cancel|OK))|ificationTimeDocumentAttribute)|ultipleValuesPlaceholderBindingOption)|N(?:amedColorSpace|e(?:gateBooleanTransformerName|tServicesError(?:Code|Domain))|ibLoadingException|o(?:SelectionPlaceholderBindingOption|n(?:OwnedPointer(?:HashCallBacks|Map(?:KeyCallBacks|ValueCallBacks)|OrNullMapKeyCallBacks)|RetainedObject(?:HashCallBacks|Map(?:KeyCallBacks|ValueCallBacks)))|rmalWindowLevel|t(?:ApplicablePlaceholderBindingOption|Found|ification(?:DeliverImmediately|PostToAllSessions)))|ullPlaceholderBindingOption)|O(?:SStatusErrorDomain|b(?:ject(?:HashCallBacks|InaccessibleException|Map(?:KeyCallBacks|ValueCallBacks)|NotAvailableException)|liquenessAttributeName|served(?:KeyPathKey|ObjectKey))|ff(?:StateImageBinding|iceOpenXMLTextDocumentType)|ldStyleException|nStateImageBinding|p(?:e(?:nDocumentTextDocumentType|ration(?:NotSupportedForKeyException|QueueDefaultMaxConcurrentOperationCount))|tionsKey)|utlineView(?:ColumnDid(?:MoveNotification|ResizeNotification)|Item(?:Did(?:CollapseNotification|ExpandNotification)|Will(?:CollapseNotification|ExpandNotification))|Selection(?:DidChangeNotification|IsChangingNotification))|wned(?:ObjectIdentityHashCallBacks|Pointer(?:HashCallBacks|Map(?:KeyCallBacks|ValueCallBacks))))|P(?:OSIXErrorDomain|PD(?:Include(?:NotFoundException|Stack(?:OverflowException|UnderflowException))|ParseException)|a(?:perSizeDocumentAttribute|r(?:agraphStyleAttributeName|seErrorException)|steboard(?:CommunicationException|Type(?:Color|Font|HTML|MultipleTextSelection|P(?:DF|NG)|R(?:TF(?:D)?|uler)|S(?:ound|tring)|T(?:IFF|abularText|extFinderOptions))|URLReading(?:ContentsConformToTypesKey|FileURLsOnlyKey))|tternColorSpace)|lainTextDocumentType|o(?:interToStructHashCallBacks|p(?:Up(?:Button(?:CellWillPopUpNotification|WillPopUpNotification)|MenuWindowLevel)|over(?:CloseReason(?:DetachToWindow|Key|Standard)|Did(?:CloseNotification|ShowNotification)|Will(?:CloseNotification|ShowNotification)))|rt(?:DidBecomeInvalidNotification|ReceiveException|SendException|TimeoutException)|sitioningRectBinding)|r(?:e(?:dicate(?:Binding|FormatBindingOption)|f(?:erredScrollerStyleDidChangeNotification|ixSpacesDocumentAttribute))|int(?:AllP(?:ages|resetsJobStyleHint)|BottomMargin|C(?:ancelJob|opies)|DetailedErrorReporting|F(?:axNumber|irstPage)|H(?:eaderAndFooter|orizontal(?:Pagination|lyCentered))|Job(?:Disposition|Saving(?:FileNameExtensionHidden|URL))|L(?:astPage|eftMargin)|MustCollate|NoPresetsJobStyleHint|O(?:perationExistsException|rientation)|P(?:a(?:ckageException|ges(?:Across|Down)|nelAccessorySummaryItem(?:DescriptionKey|NameKey)|per(?:Name|Size))|hotoJobStyleHint|r(?:eviewJob|inter(?:Name)?))|R(?:eversePageOrder|ightMargin)|S(?:aveJob|calingFactor|electionOnly|poolJob)|T(?:ime|opMargin)|Vertical(?:Pagination|lyCentered)|ingCommunicationException)|ocessInfoPowerStateDidChangeNotification))|R(?:TF(?:DTextDocumentType|PropertyStackOverflowException|TextDocumentType)|a(?:isesForNotApplicableKeysBindingOption|ngeException)|e(?:adOnlyDocumentAttribute|c(?:entSearchesBinding|overyAttempterErrorKey)|gistrationDomain|presentedFilenameBinding)|ightMarginDocumentAttribute|owHeightBinding|u(?:leEditor(?:Predicate(?:C(?:omp(?:arisonModifier|oundType)|ustomSelector)|LeftExpression|Op(?:eratorType|tions)|RightExpression)|RowsDidChangeNotification)|nLoopCommonModes))|S(?:creen(?:ColorSpaceDidChangeNotification|SaverWindowLevel)|e(?:archField(?:ClearRecentsMenuItemTag|NoRecentsMenuItemTag|Recents(?:MenuItemTag|TitleMenuItemTag))|lect(?:ed(?:I(?:dentifierBinding|ndexBinding)|LabelBinding|Object(?:Binding|sBinding)|TagBinding|Value(?:Binding|sBinding))|ionIndex(?:PathsBinding|esBinding)|orNameBindingOption|sAllWhenSettingContentBindingOption))|hadowAttributeName|o(?:rtDescriptorsBinding|undPboardType)|p(?:e(?:ech(?:C(?:haracterModeProperty|ommand(?:DelimiterProperty|Prefix|Suffix)|urrentVoiceProperty)|Dictionary(?:Abbreviations|Entry(?:Phonemes|Spelling)|LocaleIdentifier|ModificationDate|Pronunciations)|Error(?:Count|NewestC(?:haracterOffset|ode)|OldestC(?:haracterOffset|ode)|sProperty)|InputModeProperty|Mode(?:Literal|Normal|Phoneme|Text)|NumberModeProperty|OutputToFileURLProperty|P(?:honeme(?:Info(?:Example|Hilite(?:End|Start)|Opcode|Symbol)|SymbolsProperty)|itch(?:BaseProperty|ModProperty))|R(?:ateProperty|e(?:centSyncProperty|setProperty))|S(?:tatus(?:NumberOfCharactersLeft|Output(?:Busy|Paused)|P(?:honemeCode|roperty))|ynthesizerInfo(?:Identifier|Property|Version))|VolumeProperty)|ll(?:CheckerDidChangeAutomatic(?:SpellingCorrectionNotification|TextReplacementNotification)|ingStateAttributeName))|litView(?:DidResizeSubviewsNotification|WillResizeSubviewsNotification))|quareStatusItemLength|t(?:a(?:ckTraceKey|tusWindowLevel)|r(?:eam(?:DataWrittenToMemoryStreamKey|FileCurrentOffsetKey|NetworkServiceType(?:Background|V(?:ideo|o(?:IP|ice)))?|S(?:OCKS(?:ErrorDomain|Proxy(?:ConfigurationKey|HostKey|P(?:asswordKey|ortKey)|UserKey|Version(?:4|5|Key)))|ocketS(?:SLErrorDomain|ecurityLevel(?:Key|N(?:egotiatedSSL|one)|SSLv(?:2|3)|TLSv1))))|i(?:kethrough(?:ColorAttributeName|StyleAttributeName)|ngEncodingErrorKey)|oke(?:ColorAttributeName|WidthAttributeName)))|u(?:b(?:jectDocumentAttribute|menuWindowLevel)|mKeyValueOperator|perscriptAttributeName)|ystem(?:C(?:lockDidChangeNotification|olorsDidChangeNotification)|TimeZoneDidChangeNotification))|T(?:IFFException|a(?:b(?:ColumnTerminatorsAttributeName|leView(?:ColumnDid(?:MoveNotification|ResizeNotification)|RowViewKey|Selection(?:DidChangeNotification|IsChangingNotification)))|rgetBinding|skDidTerminateNotification)|ext(?:C(?:hecking(?:AirlineKey|C(?:ityKey|ountryKey)|Document(?:AuthorKey|TitleKey|URLKey)|FlightKey|JobTitleKey|NameKey|Or(?:ganizationKey|thographyKey)|PhoneKey|QuotesKey|Re(?:ference(?:DateKey|TimeZoneKey)|gularExpressionsKey|placementsKey)|St(?:ateKey|reetKey)|ZIPKey)|olorBinding)|Did(?:BeginEditingNotification|ChangeNotification|EndEditingNotification)|EncodingNameDocument(?:Attribute|Option)|Finder(?:CaseInsensitiveKey|MatchingTypeKey)|InputContextKeyboardSelectionDidChangeNotification|L(?:ayoutSection(?:Orientation|Range|sAttribute)|ineTooLongException)|NoSelectionException|ReadException|S(?:izeMultiplierDocumentOption|torage(?:DidProcessEditingNotification|WillProcessEditingNotification))|View(?:DidChange(?:SelectionNotification|TypingAttributesNotification)|WillChangeNotifyingTextViewNotification)|WriteException)|hreadWillExitNotification|i(?:meoutDocumentOption|tle(?:Binding|DocumentAttribute))|o(?:ol(?:Tip(?:AttributeName|Binding)|bar(?:DidRemoveItemNotification|FlexibleSpaceItemIdentifier|ItemVisibilityPriority(?:High|Low|Standard|User)|PrintItemIdentifier|S(?:how(?:ColorsItemIdentifier|FontsItemIdentifier)|paceItemIdentifier)|WillAddItemNotification))|pMarginDocumentAttribute|rnOffMenuWindowLevel)|ransparentBinding|ypedStreamVersionException)|U(?:RL(?:A(?:ttributeModificationDateKey|uthenticationMethod(?:ClientCertificate|Default|HT(?:MLForm|TP(?:Basic|Digest))|N(?:TLM|egotiate)|ServerTrust))|C(?:ontent(?:AccessDateKey|ModificationDateKey)|re(?:ationDateKey|dentialStorageChangedNotification)|ustomIconKey)|E(?:ffectiveIconKey|rror(?:Domain|FailingURL(?:ErrorKey|PeerTrustErrorKey|StringErrorKey)|Key))|File(?:AllocatedSizeKey|Protection(?:Complete(?:Un(?:lessOpen|tilFirstUserAuthentication))?|Key|None)|Resource(?:IdentifierKey|Type(?:BlockSpecial|CharacterSpecial|Directory|Key|NamedPipe|Regular|S(?:ocket|ymbolicLink)|Unknown))|S(?:cheme|ecurityKey|izeKey))|HasHiddenExtensionKey|Is(?:AliasFileKey|DirectoryKey|ExecutableKey|HiddenKey|MountTriggerKey|PackageKey|Re(?:adableKey|gularFileKey)|Sy(?:mbolicLinkKey|stemImmutableKey)|U(?:biquitousItemKey|serImmutableKey)|VolumeKey|WritableKey)|KeysOfUnsetValuesKey|L(?:abel(?:ColorKey|NumberKey)|inkCountKey|ocalized(?:LabelKey|NameKey|TypeDescriptionKey))|NameKey|P(?:arentDirectoryURLKey|r(?:eferredIOBlockSizeKey|otectionSpace(?:FTP(?:Proxy)?|HTTP(?:Proxy|S(?:Proxy)?)?|SOCKSProxy)))|T(?:otalFile(?:AllocatedSizeKey|SizeKey)|ypeIdentifierKey)|UbiquitousItem(?:HasUnresolvedConflictsKey|Is(?:DownloadingKey|Upload(?:edKey|ingKey)))|Volume(?:AvailableCapacityKey|CreationDateKey|I(?:dentifierKey|s(?:AutomountedKey|BrowsableKey|EjectableKey|InternalKey|JournalingKey|LocalKey|Re(?:adOnlyKey|movableKey)))|Localized(?:FormatDescriptionKey|NameKey)|MaximumFileSizeKey|NameKey|ResourceCountKey|Supports(?:AdvisoryFileLockingKey|Case(?:PreservedNamesKey|SensitiveNamesKey)|ExtendedSecurityKey|HardLinksKey|JournalingKey|PersistentIDsKey|R(?:enamingKey|ootDirectoryDatesKey)|S(?:parseFilesKey|ymbolicLinksKey)|VolumeSizesKey|ZeroRunsKey)|TotalCapacityKey|U(?:RL(?:ForRemountingKey|Key)|UIDStringKey)))|biquitous(?:KeyValueStore(?:Change(?:ReasonKey|dKeysKey)|DidChangeExternallyNotification)|UserDefaults(?:CompletedInitialSyncNotification|DidChangeAccountsNotification|NoCloudAccountNotification))|n(?:caught(?:RuntimeErrorException|SystemExceptionException)|d(?:e(?:finedKeyException|rl(?:ine(?:ByWord|ColorAttributeName|Pattern(?:D(?:ash(?:Dot(?:Dot)?)?|ot)|Solid)|StyleAttributeName)|yingErrorKey))|o(?:CloseGroupingRunLoopOrdering|Manager(?:CheckpointNotification|Did(?:CloseUndoGroupNotification|OpenUndoGroupNotification|RedoChangeNotification|UndoChangeNotification)|GroupIsDiscardableKey|Will(?:CloseUndoGroupNotification|RedoChangeNotification|UndoChangeNotification))))|ionOf(?:ArraysKeyValueOperator|ObjectsKeyValueOperator|SetsKeyValueOperator))|ser(?:ActivityTypeBrowsingWeb|Defaults(?:DidChangeNotification|SizeLimitExceededNotification)))|V(?:a(?:l(?:idatesImmediatelyBindingOption|ue(?:Binding|PathBinding|Transformer(?:BindingOption|NameBindingOption)|URLBinding))|riableStatusItemLength)|erticalGlyphFormAttributeName|i(?:ew(?:Animation(?:E(?:ffectKey|ndFrameKey)|Fade(?:InEffect|OutEffect)|StartFrameKey|TargetKey)|BoundsDidChangeNotification|DidUpdateTrackingAreasNotification|FrameDidChangeNotification|ModeDocumentAttribute|SizeDocumentAttribute|ZoomDocumentAttribute)|sibleBinding)|oice(?:Age|DemoText|Gender(?:Female|Male|Neuter)?|I(?:dentifier|ndividuallySpokenCharacters)|LocaleIdentifier|Name|SupportedCharacters))|W(?:arningValueBinding|eb(?:ArchiveTextDocumentType|PreferencesDocumentOption|ResourceLoadDelegateDocumentOption)|hite|i(?:dthBinding|llBecomeMultiThreadedNotification|ndow(?:Did(?:Become(?:KeyNotification|MainNotification)|Change(?:BackingPropertiesNotification|Screen(?:Notification|ProfileNotification))|DeminiaturizeNotification|E(?:n(?:d(?:LiveResizeNotification|SheetNotification)|ter(?:FullScreenNotification|VersionBrowserNotification))|x(?:it(?:FullScreenNotification|VersionBrowserNotification)|poseNotification))|M(?:iniaturizeNotification|oveNotification)|Resi(?:gn(?:KeyNotification|MainNotification)|zeNotification)|UpdateNotification)|ServerCommunicationException|Will(?:BeginSheetNotification|CloseNotification|E(?:nter(?:FullScreenNotification|VersionBrowserNotification)|xit(?:FullScreenNotification|VersionBrowserNotification))|M(?:iniaturizeNotification|oveNotification)|StartLiveResizeNotification)))|or(?:d(?:MLTextDocumentType|Tables(?:ReadException|WriteException))|kspace(?:A(?:ctiveSpaceDidChangeNotification|pplicationKey)|D(?:esktopImage(?:AllowClippingKey|FillColorKey|ScalingKey)|id(?:ActivateApplicationNotification|ChangeFileLabelsNotification|DeactivateApplicationNotification|HideApplicationNotification|LaunchApplicationNotification|MountNotification|RenameVolumeNotification|TerminateApplicationNotification|Un(?:hideApplicationNotification|mountNotification)|WakeNotification))|S(?:creensDid(?:SleepNotification|WakeNotification)|essionDid(?:BecomeActiveNotification|ResignActiveNotification))|Volume(?:LocalizedNameKey|Old(?:LocalizedNameKey|URLKey)|URLKey)|Will(?:LaunchApplicationNotification|PowerOffNotification|SleepNotification|UnmountNotification)))|ritingDirectionAttributeName)|XMLParserErrorDomain|Zero(?:Point|Rect|Size))|WebViewDid(?:BeginEditingNotification|Change(?:Notification|SelectionNotification|TypingStyleNotification)|EndEditingNotification)|kAB(?:A(?:ddress(?:C(?:ityKey|ountry(?:CodeKey|Key))|HomeLabel|Property|St(?:ateKey|reetKey)|WorkLabel|ZIPKey)|lternateBirthdayComponentsProperty|nniversaryLabel|ssistantLabel)|B(?:irthday(?:ComponentsProperty|Property)|rotherLabel)|C(?:alendarURIsProperty|hildLabel|reationDateProperty)|D(?:atabaseChanged(?:ExternallyNotification|Notification)|e(?:letedRecords|partmentProperty))|Email(?:HomeLabel|MobileMeLabel|Property|WorkLabel)|F(?:atherLabel|irstNameP(?:honeticProperty|roperty)|riendLabel)|GroupNameProperty|Home(?:Label|Page(?:Label|Property))|Ins(?:ertedRecords|tantMessage(?:Property|Service(?:AIM|Facebook|G(?:aduGadu|oogleTalk)|ICQ|Jabber|Key|MSN|QQ|Skype|Yahoo)|UsernameKey))|JobTitleProperty|LastNameP(?:honeticProperty|roperty)|M(?:a(?:idenNameProperty|nagerLabel)|iddleNameP(?:honeticProperty|roperty)|o(?:bileMeLabel|dificationDateProperty|therLabel))|N(?:icknameProperty|oteProperty)|O(?:rganizationP(?:honeticProperty|roperty)|ther(?:Date(?:ComponentsProperty|sProperty)|Label))|P(?:ar(?:entLabel|tnerLabel)|ersonFlags|hone(?:Home(?:FAXLabel|Label)|M(?:ainLabel|obileLabel)|P(?:agerLabel|roperty)|Work(?:FAXLabel|Label)|iPhoneLabel))|RelatedNamesProperty|S(?:isterLabel|ocialProfile(?:Property|Service(?:F(?:acebook|lickr)|Key|LinkedIn|MySpace|Twitter)|U(?:RLKey|ser(?:IdentifierKey|nameKey)))|pouseLabel|uffixProperty)|TitleProperty|U(?:IDProperty|RLsProperty|pdatedRecords)|WorkLabel))\\b",
      name: "support.variable.cocoa.objc"
    },
    {
      match: "\\b(?:C(?:I(?:Detector(?:Accuracy(?:High|Low)?|TypeFace)|FeatureType(?:Face|QRCode|Rectangle|Text))|X(?:CallDirectoryPhoneNumberMax|ErrorDomain(?:CallDirectoryManager|IncomingCall|RequestTransaction)?)|al(?:AttendeeStatus(?:Accepted|Declined|NeedsAction|Tentative)|DeletedRecordsKey|InsertedRecordsKey|UpdatedRecordsKey))|DR(?:A(?:bstractFile|ccessDate|llFilesystems|pplicationIdentifier|ttributeModificationDate|udio(?:FourChannelKey|PreEmphasisKey))|B(?:ackupDate|ibliographicFile|lock(?:Size(?:Key)?|TypeKey)|urn(?:AppendableKey|CompletionAction(?:Eject|Key|Mount)|DoubleLayerL0DataZoneBlocksKey|FailureAction(?:Eject|Key|None)|OverwriteDiscKey|RequestedSpeedKey|St(?:atusChangedNotification|rategy(?:BDDAO|CD(?:SAO|TAO)|DVDDAO|IsRequiredKey|Key))|TestingKey|UnderrunProtectionKey|VerifyDiscKey))|C(?:DText(?:ArrangerKey|C(?:haracterCodeKey|losedKey|o(?:mposerKey|pyrightAssertedFor(?:NamesKey|SpecialMessagesKey|TitlesKey)))|DiscIdentKey|Genre(?:CodeKey|Key)|Key|LanguageKey|MCNISRCKey|NSStringEncodingKey|PerformerKey|S(?:izeKey|ongwriterKey|pecialMessageKey)|T(?:OC(?:2Key|Key)|itleKey))|o(?:ntentModificationDate|pyrightFile)|reationDate)|D(?:VD(?:CopyrightInfoKey|TimestampKey)|ata(?:FormKey|Preparer)|e(?:faultDate|vice(?:AppearedNotification|BurnSpeed(?:BD1x|CD1x|DVD1x|HDDVD1x|Max|sKey)|C(?:an(?:TestWrite(?:CDKey|DVDKey)|UnderrunProtect(?:CDKey|DVDKey)|Write(?:BD(?:Key|R(?:EKey|Key))|CD(?:Key|R(?:Key|WKey|awKey)|SAOKey|T(?:AOKey|extKey))|DVD(?:DAOKey|Key|PlusR(?:DoubleLayerKey|Key|W(?:DoubleLayerKey|Key))|R(?:AMKey|DualLayerKey|Key|W(?:DualLayerKey|Key)))|HDDVD(?:Key|R(?:AMKey|DualLayerKey|Key|W(?:DualLayerKey|Key)))|I(?:SRCKey|ndexPointsKey)|Key))|urrentWriteSpeedKey)|DisappearedNotification|FirmwareRevisionKey|I(?:ORegistryEntryPathKey|s(?:BusyKey|TrayOpenKey))|LoadingMechanismCan(?:EjectKey|InjectKey|OpenKey)|M(?:aximumWriteSpeedKey|edia(?:B(?:SDNameKey|locks(?:FreeKey|OverwritableKey|UsedKey))|Class(?:BD|CD|DVD|HDDVD|Key|Unknown)|DoubleLayerL0DataZoneBlocksKey|FreeSpaceKey|I(?:nfoKey|s(?:AppendableKey|BlankKey|ErasableKey|OverwritableKey|ReservedKey))|OverwritableSpaceKey|S(?:essionCountKey|tate(?:InTransition|Key|MediaPresent|None))|T(?:rackCountKey|ype(?:BDR(?:E|OM)?|CDR(?:OM|W)?|DVD(?:PlusR(?:DoubleLayer|W(?:DoubleLayer)?)?|R(?:AM|DualLayer|OM|W(?:DualLayer)?)?)|HDDVDR(?:AM|DualLayer|OM|W(?:DualLayer)?)?|Key|Unknown))|UsedSpaceKey))|P(?:hysicalInterconnect(?:ATAPI|Fi(?:breChannel|reWire)|Key|Location(?:External|Internal|Key|Unknown)|SCSI|USB)|roductNameKey)|S(?:tatusChangedNotification|upportLevel(?:AppleS(?:hipping|upported)|Key|None|Unsupported|VendorSupported))|Track(?:InfoKey|RefsKey)|VendorNameKey|Write(?:BufferSizeKey|CapabilitiesKey))))|E(?:ffectiveDate|r(?:ase(?:StatusChangedNotification|Type(?:Complete|Key|Quick))|rorStatus(?:AdditionalSenseStringKey|Error(?:InfoStringKey|Key|StringKey)|Key|Sense(?:CodeStringKey|Key)))|xpirationDate)|FreeBlocksKey|HFSPlus(?:CatalogNodeID|TextEncodingHint)?|I(?:SO(?:9660(?:Level(?:One|Two)|VersionNumber)?|Level|MacExtensions|RockRidgeExtensions)|n(?:dexPointsKey|visible))|Joliet|LinkType(?:FinderAlias|HardLink|SymbolicLink)|M(?:a(?:c(?:ExtendedFinderFlags|Fi(?:le(?:Creator|Type)|nder(?:Flags|HideExtension))|IconLocation|ScrollPosition|Window(?:Bounds|View))|xBurnSpeedKey)|ediaCatalogNumberKey)|NextWritableAddressKey|P(?:osix(?:FileMode|GID|UID)|reGap(?:IsRequiredKey|LengthKey)|ublisher)|RecordingDate|S(?:CMSCopyright(?:Free|Protected(?:Copy|Original))|e(?:rialCopyManagementStateKey|ssion(?:FormatKey|NumberKey))|tatus(?:Current(?:S(?:essionKey|peedKey)|TrackKey)|EraseTypeKey|P(?:ercentCompleteKey|rogress(?:Current(?:KPS|XFactor)|InfoKey))|State(?:Done|Erasing|F(?:ailed|inishing)|Key|None|Preparing|Session(?:Close|Open)|Track(?:Close|Open|Write)|Verifying)|Total(?:SessionsKey|TracksKey))|u(?:bchannelDataForm(?:Key|None|Pack|Raw)|ppressMacSpecificFiles)|y(?:nchronousBehaviorKey|stemIdentifier))|Track(?:I(?:SRCKey|sEmptyKey)|LengthKey|ModeKey|NumberKey|Packet(?:SizeKey|Type(?:Fixed|Key|Variable))|StartAddressKey|Type(?:Closed|In(?:complete|visible)|Key|Reserved))|UDF(?:ApplicationIdentifierSuffix|ExtendedFilePermissions|InterchangeLevel|Max(?:InterchangeLevel|VolumeSequenceNumber)|PrimaryVolumeDescriptorNumber|RealTimeFile|V(?:ersion1(?:02|50)|olumeSe(?:quenceNumber|t(?:I(?:dentifier|mplementationUse)|Timestamp)))|WriteVersion)?|V(?:erificationType(?:Checksum|Key|None|ProduceAgain|ReceiveData)|olume(?:C(?:heckedDate|reationDate)|E(?:ffectiveDate|xpirationDate)|ModificationDate|Set)))|I(?:C(?:ButtonType(?:Copy|Mail|Print|Scan|Transfer|Web)|CameraDeviceCan(?:AcceptPTPCommands|Delete(?:AllFiles|OneFile)|ReceiveFile|SyncClock|TakePicture(?:UsingShutterReleaseOnCamera)?)|D(?:e(?:leteAfterSuccessfulDownload|vice(?:CanEjectOrDisconnect|LocationDescription(?:Bluetooth|FireWire|MassStorage|USB)))|ownload(?:SidecarFiles|sDirectoryURL))|LocalizedStatusNotificationKey|Overwrite|S(?:ave(?:AsFilename|d(?:AncillaryFiles|Filename))|cannerStatus(?:RequestsOverviewScan|Warm(?:UpDone|ingUp))|tatus(?:CodeKey|NotificationKey))|TransportType(?:Bluetooth|ExFAT|FireWire|MassStorage|TCPIP|USB))|K(?:FilterBrowser(?:DefaultInputImage|Exclude(?:Categories|Filters)|Filter(?:DoubleClickNotification|SelectedNotification)|Show(?:Categories|Preview)|WillPreviewFilterNotification)|ImageBrowser(?:BackgroundColorKey|C(?:GImage(?:RepresentationType|SourceRepresentationType)|ell(?:BackgroundLayer|ForegroundLayer|PlaceHolderLayer|SelectionLayer|s(?:HighlightedTitleAttributesKey|OutlineColorKey|SubtitleAttributesKey|TitleAttributesKey)))|Group(?:BackgroundColorKey|FooterLayer|HeaderLayer|RangeKey|StyleKey|TitleKey)|IconRef(?:PathRepresentationType|RepresentationType)|NS(?:BitmapImageRepresentationType|DataRepresentationType|ImageRepresentationType|URLRepresentationType)|P(?:DFPageRepresentationType|athRepresentationType)|Q(?:CComposition(?:PathRepresentationType|RepresentationType)|TMovie(?:PathRepresentationType|RepresentationType)|uickLookPathRepresentationType)|SelectionColorKey)|OverlayType(?:Background|Image)|PictureTaker(?:Allows(?:EditingKey|FileChoosingKey|VideoCaptureKey)|CropAreaSizeKey|I(?:mageTransformsKey|nformationalTextKey)|OutputImageMaxSizeKey|RemainOpenAfterValidateKey|Show(?:AddressBookPicture(?:Key)?|E(?:ffectsKey|mptyPicture(?:Key)?)|RecentPictureKey)|UpdateRecentPictureKey)|Slideshow(?:AudioFile|Mode(?:Images|Other|PDF)|PDFDisplay(?:Box|Mode|sAsBook)|S(?:creen|tart(?:Index|Paused))|WrapAround)|ToolMode(?:Annotate|Crop|Move|None|Rotate|Select(?:Ellipse|Lasso|Rect)?)|UI(?:FlavorAllowFallback|Size(?:Flavor|Mini|Regular|Small)|maxSize)|_(?:ApertureBundleIdentifier|MailBundleIdentifier|PhotosBundleIdentifier|iPhotoBundleIdentifier))|MKTextOrientationName|OBluetooth(?:H(?:andsFree(?:Call(?:Direction|Index|M(?:ode|ultiparty)|N(?:ame|umber)|Status|Type)|Indicator(?:BattChg|Call(?:Held|Setup)?|Roam|S(?:ervice|ignal)))|ostControllerPoweredO(?:ffNotification|nNotification))|L2CAPChannel(?:PublishedNotification|TerminatedNotification)|PDU(?:Encoding|OriginatingAddress(?:Type)?|ProtocolID|Servic(?:CenterAddress|eCenterAddressType)|T(?:imestamp|ype)|UserData)))|MDLVertexAttribute(?:Anisotropy|Bi(?:normal|tangent)|Color|EdgeCrease|Joint(?:Indices|Weights)|Normal|OcclusionValue|Position|S(?:hadingBasis(?:U|V)|ubdivisionStencil)|T(?:angent|extureCoordinate))|NS(?:A(?:ddedPersistentStoresKey|ffected(?:ObjectsErrorKey|StoresErrorKey))|BinaryStoreType|CoreDataVersionNumber|De(?:letedObjectsKey|tailedErrorsKey)|ErrorMergePolicy|FetchRequestExpressionType|I(?:gnorePersistentStoreVersioningOption|n(?:MemoryStoreType|ferMappingModelAutomaticallyOption|sertedObjectsKey|validated(?:AllObjectsKey|ObjectsKey)))|M(?:anagedObjectContext(?:DidSaveNotification|ObjectsDidChangeNotification|WillSaveNotification)|ergeByProperty(?:ObjectTrumpMergePolicy|StoreTrumpMergePolicy)|igrat(?:ePersistentStoresAutomaticallyOption|ion(?:DestinationObjectKey|Entity(?:MappingKey|PolicyKey)|ManagerKey|PropertyMappingKey|SourceObjectKey)))|OverwriteMergePolicy|P(?:ersistentStore(?:Coordinator(?:StoresDidChangeNotification|WillRemoveStoreNotification)|FileProtectionKey|OSCompatibility|SaveConflictsErrorKey|TimeoutOption)|ref(?:PaneHelpMenu(?:AnchorKey|InfoPListKey|TitleKey)|erenceP(?:ane(?:CancelUnselectNotification|DoUnselectNotification|SwitchToPaneNotification|UpdateHelpMenuNotification)|refPaneIsAvailableNotification)))|R(?:e(?:adOnlyPersistentStoreOption|freshedObjectsKey|movedPersistentStoresKey)|ollbackMergePolicy)|S(?:QLite(?:AnalyzeOption|ErrorDomain|ManualVacuumOption|PragmasOption|StoreType)|tore(?:ModelVersion(?:HashesKey|IdentifiersKey)|TypeKey|UUIDKey))|U(?:UIDChangedPersistentStoresKey|pdatedObjectsKey)|Validat(?:eXMLStoreOption|ion(?:KeyErrorKey|ObjectErrorKey|PredicateErrorKey|ValueErrorKey))|XMLStoreType)|OSAS(?:criptError(?:App(?:AddressKey|Name(?:Key)?)|BriefMessage(?:Key)?|ExpectedTypeKey|Message(?:Key)?|Number(?:Key)?|OffendingObjectKey|PartialResultKey|Range(?:Key)?)|torage(?:Application(?:BundleType|Type)|Script(?:BundleType|Type)|TextType))|PDF(?:Document(?:AuthorAttribute|Creat(?:ionDateAttribute|orAttribute)|Did(?:Begin(?:FindNotification|Page(?:FindNotification|WriteNotification)|WriteNotification)|End(?:FindNotification|Page(?:FindNotification|WriteNotification)|WriteNotification)|FindMatchNotification|UnlockNotification)|KeywordsAttribute|ModificationDateAttribute|OwnerPasswordOption|ProducerAttribute|SubjectAttribute|TitleAttribute|UserPasswordOption)|ThumbnailViewDocumentEditedNotification|View(?:Annotation(?:HitNotification|WillHitNotification)|C(?:hangedHistoryNotification|opyPermissionNotification)|D(?:isplay(?:BoxChangedNotification|ModeChangedNotification)|ocumentChangedNotification)|P(?:ageChangedNotification|rintPermissionNotification)|S(?:caleChangedNotification|electionChangedNotification)|VisiblePagesChangedNotification))|QCCompositionInputPaceKey|SF(?:AuthorizationPluginViewUser(?:NameKey|ShortNameKey)|CertificateViewDisclosureStateDidChange|DisplayViewException)|globalUpdateOK|k(?:C(?:A(?:A(?:lignment(?:Center|Justified|Left|Natural|Right)|nimation(?:Cubic(?:Paced)?|Discrete|Linear|Paced|RotateAuto(?:Reverse)?))|EmitterLayer(?:Additive|BackToFront|C(?:ircle|uboid)|Line|O(?:ldest(?:First|Last)|utline)|Point(?:s)?|Rectangle|S(?:phere|urface)|Unordered|Volume)|Fil(?:l(?:Mode(?:B(?:ackwards|oth)|Forwards|Removed)|Rule(?:EvenOdd|NonZero))|ter(?:Linear|Nearest|Trilinear))|Gra(?:dientLayer(?:Axial|Radial)|vity(?:Bottom(?:Left|Right)?|Center|Left|R(?:esize(?:Aspect(?:Fill)?)?|ight)|Top(?:Left|Right)?))|Line(?:Cap(?:Butt|Round|Square)|Join(?:Bevel|Miter|Round))|MediaTimingFunction(?:Default|Ease(?:In(?:EaseOut)?|Out)|Linear)|OnOrder(?:In|Out)|RendererColorSpace|Scroll(?:Both|Horizontally|None|Vertically)|Tr(?:ans(?:action(?:Animation(?:Duration|TimingFunction)|CompletionBlock|DisableActions)|ition(?:F(?:ade|rom(?:Bottom|Left|Right|Top))|MoveIn|Push|Reveal)?)|uncation(?:End|Middle|None|Start))|ValueFunction(?:Rotate(?:X|Y|Z)|Scale(?:X|Y|Z)?|Translate(?:X|Y|Z)?))|I(?:A(?:ctiveKeys|pplyOption(?:ColorSpace|Definition|Extent|UserInfo)|ttribute(?:Class|D(?:e(?:fault|scription)|isplayName)|Filter(?:Categories|DisplayName|Name)|Identity|M(?:ax|in)|Name|ReferenceDocumentation|SliderM(?:ax|in)|Type(?:Angle|Boolean|Count|Distance|Gradient|Integer|O(?:ffset|paqueColor)|Position(?:3)?|Rectangle|Scalar|Time)?))|C(?:ategory(?:B(?:lur|uiltIn)|Co(?:lor(?:Adjustment|Effect)|mpositeOperation)|DistortionEffect|FilterGenerator|G(?:e(?:nerator|ometryAdjustment)|radient)|H(?:alftoneEffect|ighDynamicRange)|Interlaced|NonSquarePixels|Reduction|S(?:harpen|t(?:illImage|ylize))|T(?:ileEffect|ransition)|Video)|ontext(?:Output(?:ColorSpace|Premultiplied)|UseSoftwareRenderer|Working(?:ColorSpace|Format)))|F(?:ilterGeneratorExportedKey(?:Name|TargetObject)?|ormat(?:ARGB8|BGRA8|RGBA(?:16|8|f|h)))|I(?:mage(?:ColorSpace|Provider(?:TileSize|UserInfo))|nput(?:A(?:llowDraftModeKey|ngleKey|spectRatioKey)|B(?:ackgroundImageKey|iasKey|oost(?:Key|ShadowAmountKey)|rightnessKey)|C(?:enterKey|o(?:lorKey|ntrastKey))|DecoderVersionKey|E(?:VKey|nable(?:ChromaticNoiseTrackingKey|SharpeningKey)|xtentKey)|GradientImageKey|I(?:gnoreImageOrientationKey|mage(?:Key|OrientationKey)|ntensityKey)|LinearSpaceFilter|MaskImageKey|N(?:eutral(?:Chromaticity(?:XKey|YKey)|LocationKey|T(?:emperatureKey|intKey))|oiseReductionAmountKey)|R(?:adiusKey|efractionKey)|S(?:aturationKey|cale(?:FactorKey|Key)|ha(?:dingImageKey|rpnessKey))|T(?:argetImageKey|imeKey|ransformKey)|WidthKey))|Output(?:ImageKey|NativeSizeKey)|S(?:ampler(?:AffineMatrix|ColorSpace|Filter(?:Linear|Mode|Nearest)|Wrap(?:Black|Clamp|Mode))|upportedDecoderVersionsKey)|UI(?:ParameterSet|Set(?:Advanced|Basic|Development|Intermediate))))|FTS(?:Listing(?:NameKey|SizeKey|TypeKey)|Progress(?:BytesT(?:otalKey|ransferredKey)|EstimatedTimeKey|P(?:ercentageKey|recentageKey)|T(?:imeElapsedKey|ransferRateKey)))|OBEXHeaderIDKey(?:A(?:ppParameters|uthorization(?:Challenge|Response))|B(?:ody|yteSequence)|Co(?:nnectionID|unt)|Description|EndOfBody|HTTP|Length|Name|ObjectClass|T(?:arget|ime(?:4Byte|ISO)|ype)|U(?:nknown(?:1ByteQuantity|4ByteQuantity|ByteSequence|UnicodeText)|serDefined)|Who)|PDFDestinationUnspecifiedValue|QuartzFilter(?:ApplicationDomain|ManagerDid(?:AddFilterNotification|ModifyFilterNotification|RemoveFilterNotification|SelectFilterNotification)|P(?:DFWorkflowDomain|rintingDomain))))\\b",
      name: "support.variable.objc"
    }
  ],
  repository: {
    functions: {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.0.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNS(?:HighlightRect|Run(?:AlertPanelRelativeToWindow|CriticalAlertPanelRelativeToWindow|InformationalAlertPanelRelativeToWindow))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.10.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNS(?:Begin(?:AlertSheet|CriticalAlertSheet|InformationalAlertSheet)|CopyBits|Get(?:AlertPanel|CriticalAlertPanel|InformationalAlertPanel)|R(?:eleaseAlertPanel|un(?:AlertPanel|CriticalAlertPanel|InformationalAlertPanel)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.11.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNS(?:AccessibilityRaiseBadArgumentException|DisableScreenUpdates|EnableScreenUpdates)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.13.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNSConvertGlyphsToPackedGlyphs\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.14.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNS(?:GetWindowServerMemory|OpenGL(?:Get(?:Option|Version)|SetOption)|ReadPixel)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.5.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNXReadNSObjectFromCoder\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.5.support.function.run-time.objc" }
          },
          match: "(\\s*)(\\b(?:class_(?:createInstanceFromZone|lookupMethod|respondsToMethod|setSuperclass)|object_copyFromZone)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.6.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNS(?:CountWindows(?:ForContext)?|WindowList(?:ForContext)?)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.6.support.function.objc" }
          },
          match: "(\\s*)(\\bIOBluetooth(?:GetObjectIDFromArguments|OBEXSessionCreateWithIncomingIOBluetoothRFCOMMChannel)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "invalid.deprecated.10.8.support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\bNS(?:CopyObject|InterfaceStyleForKey|RealMemoryAvailable)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.11.objc" }
          },
          match: "(\\s*)(\\b(?:CGDirectDisplayCopyCurrentMetalDevice|MT(?:KM(?:etalVertex(?:DescriptorFromModelIO|FormatFromModelIO)|odelIOVertex(?:DescriptorFromMetal|FormatFromMetal))|LC(?:opyAllDevices|reateSystemDefaultDevice)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.12.objc" }
          },
          match: "(\\s*)(\\bMTKM(?:etalVertexDescriptorFromModelIOWithError|odelIOVertexDescriptorFromMetalWithError)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.13.objc" }
          },
          match: "(\\s*)(\\bMTL(?:CopyAllDevicesWithObserver|RemoveDeviceObserver|SamplePositionMake)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.14.objc" }
          },
          match: "(\\s*)(\\bMTLIndirectCommandBufferExecutionRangeMake\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.10.15.objc" }
          },
          match: "(\\s*)(\\bMTLTextureSwizzleChannelsMake\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cocoa.10.10.objc" }
          },
          match: "(\\s*)(\\bNS(?:Accessibility(?:FrameInView|PointInView)|EdgeInsetsEqual)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cocoa.10.15.objc" }
          },
          match: "(\\s*)(\\bNSDirectionalEdgeInsetsMake\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.cocoa.objc" }
          },
          match: "(\\s*)(\\b(?:ABLocalizedPropertyOrLabel|CFBridgingRe(?:lease|tain)|NS(?:A(?:ccessibility(?:ActionDescription|PostNotification(?:WithUserInfo)?|RoleDescription(?:ForUIElement)?|SetMayContainProtectedContent|Unignored(?:Ancestor|Children(?:ForOnlyChild)?|Descendant))|ll(?:HashTableObjects|MapTable(?:Keys|Values)|ocate(?:Collectable|MemoryPages|Object))|pplication(?:Load|Main)|vailableWindowDepths)|B(?:e(?:ep|stDepth)|itsPer(?:PixelFromDepth|SampleFromDepth))|C(?:lassFromString|o(?:lorSpaceFromDepth|mpare(?:HashTables|MapTables)|n(?:tainsRect|vert(?:Host(?:DoubleToSwapped|FloatToSwapped)|Swapped(?:DoubleToHost|FloatToHost)))|py(?:HashTableWithZone|M(?:apTableWithZone|emoryPages))|unt(?:HashTable|MapTable))|reate(?:File(?:ContentsPboardType|namePboardType)|HashTable(?:WithZone)?|MapTable(?:WithZone)?|Zone))|D(?:e(?:allocate(?:MemoryPages|Object)|c(?:imal(?:Add|Co(?:mpa(?:ct|re)|py)|Divide|IsNotANumber|Multiply(?:ByPowerOf10)?|Normalize|Power|Round|S(?:tring|ubtract))|rementExtraRefCountWasZero)|faultMallocZone)|ivideRect|ottedFrameRect|raw(?:B(?:itmap|utton)|ColorTiledRects|DarkBezel|Gr(?:ayBezel|oove)|LightBezel|NinePartImage|T(?:hreePartImage|iledRects)|W(?:hiteBezel|indowBackground)))|E(?:dgeInsetsMake|n(?:d(?:HashTableEnumeration|MapTableEnumeration)|umerate(?:HashTable|MapTable))|qual(?:Points|R(?:anges|ects)|Sizes)|raseRect|ventMaskFromType|x(?:ceptionHandlerResume|traRefCount))|F(?:ileTypeForHFSTypeCode|r(?:ameRect(?:WithWidth(?:UsingOperation)?)?|ee(?:HashTable|MapTable))|ullUserName)|Get(?:FileType(?:s)?|SizeAndAlignment|UncaughtExceptionHandler)|H(?:FSType(?:CodeFromFileType|OfFile)|ash(?:Get|Insert(?:IfAbsent|KnownAbsent)?|Remove)|eight|o(?:meDirectory(?:ForUser)?|stByteOrder))|I(?:n(?:crementExtraRefCount|setRect|te(?:gralRect(?:WithOptions)?|rsect(?:ionR(?:ange|ect)|sRect)))|s(?:ControllerMarker|EmptyRect))|Lo(?:cationInRange|g(?:PageSize|v)?)|M(?:a(?:ke(?:Collectable|Point|R(?:ange|ect)|Size)|p(?:Get|Insert(?:IfAbsent|KnownAbsent)?|Member|Remove)|x(?:Range|X|Y))|i(?:d(?:X|Y)|n(?:X|Y))|ouseInRect)|N(?:ext(?:HashEnumeratorItem|MapEnumeratorPair)|umberOfColorComponents)|O(?:ffsetRect|penStepRootDirectory)|P(?:ageSize|erformService|lanarFromDepth|oint(?:From(?:CGPoint|String)|InRect|ToCGPoint)|rotocolFromString)|R(?:angeFromString|e(?:allocateCollectable|c(?:t(?:Clip(?:List)?|F(?:ill(?:List(?:UsingOperation|With(?:Colors(?:UsingOperation)?|Grays))?|UsingOperation)?|rom(?:CGRect|String))|ToCGRect)|ycleZone)|gisterServicesProvider|set(?:HashTable|MapTable))|ound(?:DownToMultipleOfPageSize|UpToMultipleOfPageSize))|S(?:e(?:archPathForDirectoriesInDomains|lectorFromString|t(?:FocusRingStyle|ShowsServicesMenuItem|UncaughtExceptionHandler|ZoneName))|ho(?:uldRetainWithZone|w(?:AnimationEffect|sServicesMenuItem))|ize(?:From(?:CGSize|String)|ToCGSize)|tringFrom(?:Class|HashTable|MapTable|P(?:oint|rotocol)|R(?:ange|ect)|S(?:elector|ize))|wap(?:Big(?:DoubleToHost|FloatToHost|IntToHost|Long(?:LongToHost|ToHost)|ShortToHost)|Double|Float|Host(?:DoubleTo(?:Big|Little)|FloatTo(?:Big|Little)|IntTo(?:Big|Little)|Long(?:LongTo(?:Big|Little)|To(?:Big|Little))|ShortTo(?:Big|Little))|Int|L(?:ittle(?:DoubleToHost|FloatToHost|IntToHost|Long(?:LongToHost|ToHost)|ShortToHost)|ong(?:Long)?)|Short))|T(?:emporaryDirectory|ouchTypeMaskFromType)|U(?:n(?:ionR(?:ange|ect)|registerServicesProvider)|pdateDynamicServices|serName)|Width|Zone(?:Calloc|Fr(?:ee|omPointer)|Malloc|Name|Realloc)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.objc" }
          },
          match: "(\\s*)(\\b(?:AuthorizationPluginCreate|IOBluetooth(?:DeviceRegisterForDisconnectNotification|FindNumberOfRegistryEntriesOfClassName|Get(?:DeviceSelectorController|PairingController|UniqueFileNameAndPath)|I(?:gnoreHIDDevice|sFileAppleDesignatedPIMData)|L2CAPChannelRegisterForChannelCloseNotification|N(?:SString(?:FromDeviceAddress(?:Colon)?|ToDeviceAddress)|umberOf(?:AvailableHIDDevices|KeyboardHIDDevices|PointingHIDDevices|TabletHIDDevices))|PackData(?:List)?|R(?:FCOMMChannelRegisterForChannelCloseNotification|e(?:gisterFor(?:DeviceConnectNotifications|Filtered(?:L2CAPChannelOpenNotifications|RFCOMMChannelOpenNotifications)|L2CAPChannelOpenNotifications|RFCOMMChannelOpenNotifications)|moveIgnoredHIDDevice))|U(?:npackData(?:List)?|serNotificationUnregister)|ValidateHardwareWithDescription)|MTL(?:C(?:learColorMake|oordinate2DMake)|OriginMake|RegionMake(?:1D|2D|3D)|SizeMake)|OBEX(?:Add(?:A(?:pplicationParameterHeader|uthorization(?:ChallengeHeader|ResponseHeader))|B(?:odyHeader|yteSequenceHeader)|Co(?:nnectionIDHeader|untHeader)|DescriptionHeader|HTTPHeader|LengthHeader|NameHeader|ObjectClassHeader|T(?:argetHeader|ime(?:4ByteHeader|ISOHeader)|ypeHeader)|UserDefinedHeader|WhoHeader)|GetHeaders|HeadersToBytes)|SS(?:CenteredRectInRect|Random(?:FloatBetween|IntBetween|PointForSizeWithinRect)))\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.run-time.10.10.objc" }
          },
          match: "(\\s*)(\\bobject_isClass\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.run-time.10.12.objc" }
          },
          match: "(\\s*)(\\b(?:object_setI(?:nstanceVariableWithStrongDefault|varWithStrongDefault)|protocol_copyPropertyList2)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.run-time.10.14.objc" }
          },
          match: "(\\s*)(\\bobjc_setHook_get(?:Class|ImageName)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.run-time.10.15.objc" }
          },
          match: "(\\s*)(\\bobjc_(?:addLoadImageFunc|setHook_setAssociatedObject)\\b)"
        },
        {
          captures: {
            1: { name: "punctuation.whitespace.support.function.leading" },
            2: { name: "support.function.run-time.objc" }
          },
          match: "(\\s*)(\\b(?:class_(?:add(?:Ivar|Method(?:s)?|Pro(?:perty|tocol))|c(?:o(?:nformsToProtocol|py(?:IvarList|MethodList|Pro(?:pertyList|tocolList)))|reateInstance)|get(?:Class(?:Method|Variable)|I(?:mageName|nstance(?:Method|Size|Variable)|varLayout)|MethodImplementation(?:_stret)?|Name|Property|Superclass|Version|WeakIvarLayout)|isMetaClass|nextMethodList|poseAs|re(?:moveMethods|place(?:Method|Property)|spondsToSelector)|set(?:IvarLayout|Version|WeakIvarLayout))|i(?:mp_(?:getBlock|implementationWithBlock|removeBlock)|var_get(?:Name|Offset|TypeEncoding))|method_(?:copy(?:ArgumentType|ReturnType)|exchangeImplementations|get(?:Argument(?:Info|Type)|Description|Implementation|N(?:ame|umberOfArguments)|ReturnType|SizeOfArguments|TypeEncoding)|setImplementation)|obj(?:c_(?:a(?:ddClass|llocate(?:ClassPair|Protocol))|co(?:nstructInstance|py(?:Class(?:List|NamesForImage)|ImageNames|ProtocolList))|d(?:estructInstance|isposeClassPair|uplicateClass)|enumerationMutation|get(?:AssociatedObject|Class(?:List|es)?|FutureClass|MetaClass|OrigClass|Protocol|RequiredClass)|lo(?:adWeak|okUpClass)|re(?:gister(?:ClassPair|Protocol)|moveAssociatedObjects|tainedObject)|s(?:et(?:AssociatedObject|ClassHandler|EnumerationMutationHandler|ForwardHandler|Multithreaded)|toreWeak)|unretained(?:Object|Pointer))|ect_(?:copy|dispose|get(?:Class(?:Name)?|I(?:n(?:dexedIvars|stanceVariable)|var))|realloc(?:FromZone)?|set(?:Class|I(?:nstanceVariable|var))))|pro(?:perty_(?:copyAttribute(?:List|Value)|get(?:Attributes|Name))|tocol_(?:add(?:MethodDescription|Pro(?:perty|tocol))|co(?:nformsToProtocol|py(?:MethodDescriptionList|Pro(?:pertyList|tocolList)))|get(?:MethodDescription|Name|Property)|isEqual))|sel_(?:get(?:Name|Uid)|is(?:Equal|Mapped)|registerName))\\b)"
        }
      ]
    },
    protocols: {
      patterns: [
        {
          match: "\\bNSConnectionDelegate\\b",
          name: "invalid.deprecated.10.13.support.other.protocol.cocoa.objc"
        },
        {
          match: "\\b(?:DOM(?:Event(?:Listener|Target)|NodeFilter|XPathNSResolver)|Web(?:Do(?:cument(?:Representation|Searching|Text|View)|wnloadDelegate)|EditingDelegate|FrameLoadDelegate|OpenPanelResultListener|P(?:lugInViewFactory|olicyDe(?:cisionListener|legate))|ResourceLoadDelegate|UIDelegate))\\b",
          name: "invalid.deprecated.10.14.support.other.protocol.cocoa.objc"
        },
        {
          match: "\\bQC(?:CompositionRenderer|PlugIn(?:Context|InputImageSource|OutputImageProvider))\\b",
          name: "invalid.deprecated.10.15.support.other.protocol.objc"
        },
        {
          match: "\\bNSURLHandleClient\\b",
          name: "invalid.deprecated.10.4.support.other.protocol.cocoa.objc"
        },
        {
          match: "\\bM(?:DL(?:Component|MeshBuffer(?:Allocator|Zone)?|Named|ObjectContainerComponent|TransformComponent)|T(?:KViewDelegate|L(?:B(?:litCommandEncoder|uffer)|Com(?:mand(?:Buffer|Encoder|Queue)|pute(?:CommandEncoder|PipelineState))|D(?:e(?:pthStencilState|vice)|rawable)|Function|Library|ParallelRenderCommandEncoder|Re(?:nder(?:CommandEncoder|PipelineState)|source)|SamplerState|Texture)))\\b",
          name: "support.other.protocol.10.11.objc"
        },
        {
          match: "\\bCIImageProcessor(?:Input|Output)\\b",
          name: "support.other.protocol.10.12.objc"
        },
        {
          match: "\\bM(?:DL(?:AssetResolver|JointAnimation|TransformOp)|TL(?:ArgumentEncoder|CaptureScope|Fence|Heap))\\b",
          name: "support.other.protocol.10.13.objc"
        },
        {
          match: "\\bMTL(?:Event|Indirect(?:CommandBuffer|RenderCommand)|SharedEvent)\\b",
          name: "support.other.protocol.10.14.objc"
        },
        {
          match: "\\bMTL(?:Counter(?:S(?:ampleBuffer|et))?|RasterizationRateMap)\\b",
          name: "support.other.protocol.10.15.objc"
        },
        {
          match: "\\bNSUserActivityDelegate\\b",
          name: "support.other.protocol.cocoa.10.10.objc"
        },
        {
          match: "\\b(?:NS(?:Accessibility(?:CustomRotorItemSearchDelegate|ElementLoading)|ItemProvider(?:Reading|Writing))|WK(?:HTTPCookieStoreObserver|URLScheme(?:Handler|Task)))\\b",
          name: "support.other.protocol.cocoa.10.13.objc"
        },
        {
          match: "\\bUNUserNotificationCenterDelegate\\b",
          name: "support.other.protocol.cocoa.10.14.objc"
        },
        {
          match: "\\bNS(?:CollectionLayout(?:Container|Environment|VisibleItem)|URLSessionWebSocketDelegate)\\b",
          name: "support.other.protocol.cocoa.10.15.objc"
        },
        {
          match: "\\b(?:ABImageClient|NS(?:A(?:ccessibility(?:Button|C(?:heckBox|ontainsTransientUI)|Element|Group|Image|L(?:ayout(?:Area|Item)|ist)|NavigableStaticText|Outline|ProgressIndicator|R(?:adioButton|ow)|S(?:lider|t(?:aticText|epper)|witch)|Table)?|l(?:ertDelegate|ignmentFeedbackToken)|nimat(?:ablePropertyContainer|ionDelegate)|pp(?:earanceCustomization|licationDelegate))|BrowserDelegate|C(?:a(?:cheDelegate|ndidateListTouchBarItemDelegate)|hangeSpelling|loudSharing(?:ServiceDelegate|Validation)|o(?:ding|l(?:lectionView(?:D(?:ataSource|elegate(?:FlowLayout)?)|Element|Prefetching|SectionHeaderView)|or(?:Changing|Picking(?:Custom|Default)))|mboBox(?:CellDataSource|D(?:ataSource|elegate))|ntrolTextEditingDelegate|pying))|D(?:atePickerCellDelegate|ecimalNumberBehaviors|iscardableContent|ockTilePlugIn|ra(?:gging(?:Destination|Info|Source)|werDelegate))|E(?:ditor(?:Registration)?|xtensionRequestHandling)|F(?:astEnumeration|ile(?:ManagerDelegate|Pr(?:esenter|omiseProviderDelegate))|ontChanging)|G(?:estureRecognizerDelegate|lyphStorage)|HapticFeedbackPerformer|I(?:gnoreMisspelledWords|mageDelegate|nputServ(?:erMouseTracker|iceProvider))|Keyed(?:ArchiverDelegate|UnarchiverDelegate)|L(?:ayoutManagerDelegate|ocking)|M(?:a(?:chPortDelegate|trixDelegate)|e(?:nu(?:Delegate|ItemValidation)|tadataQueryDelegate)|utableCopying)|NetService(?:BrowserDelegate|Delegate)|O(?:penSavePanelDelegate|utlineViewD(?:ataSource|elegate))|P(?:a(?:geControllerDelegate|steboard(?:ItemDataProvider|Reading|TypeOwner|Writing)|thC(?:ellDelegate|ontrolDelegate))|o(?:poverDelegate|rtDelegate)|r(?:intPanelAccessorizing|ogressReporting))|RuleEditorDelegate|S(?:crubber(?:D(?:ataSource|elegate)|FlowLayoutDelegate)|e(?:archFieldDelegate|cureCoding|guePerforming|rvicesMenuRequestor)|haringService(?:Delegate|Picker(?:Delegate|To(?:olbarItemDelegate|uchBarItemDelegate)))|oundDelegate|p(?:e(?:ech(?:RecognizerDelegate|SynthesizerDelegate)|llServerDelegate)|litViewDelegate|ringLoadingDestination)|t(?:a(?:ckViewDelegate|ndardKeyBindingResponding)|reamDelegate))|T(?:ab(?:ViewDelegate|leViewD(?:ataSource|elegate))|ext(?:AttachmentC(?:ell|ontainer)|CheckingClient|Delegate|Fi(?:eldDelegate|nder(?:BarContainer|Client))|Input(?:Client|Traits)?|LayoutOrientationProvider|StorageDelegate|ViewDelegate)|o(?:kenField(?:CellDelegate|Delegate)|olbar(?:Delegate|ItemValidation)|uchBar(?:Delegate|Provider)))|U(?:RL(?:AuthenticationChallengeSender|ConnectionD(?:ataDelegate|elegate|ownloadDelegate)|DownloadDelegate|ProtocolClient|Session(?:D(?:ataDelegate|elegate|ownloadDelegate)|StreamDelegate|TaskDelegate))|ser(?:ActivityRestoring|Interface(?:Compression|Item(?:Identification|Searching)|Validations)|NotificationCenterDelegate))|V(?:alidatedUserInterfaceItem|iew(?:ControllerPresentationAnimator|LayerContentScaleDelegate|ToolTipOwner))|Window(?:Delegate|Restoration)|X(?:MLParserDelegate|PC(?:ListenerDelegate|ProxyCreating)))|WK(?:NavigationDelegate|ScriptMessageHandler|UIDelegate))\\b",
          name: "support.other.protocol.cocoa.objc"
        },
        {
          match: "\\b(?:A(?:MWorkflowControllerDelegate|UAudioUnitFactory)|C(?:A(?:A(?:ction|nimationDelegate)|Lay(?:erDelegate|outManager)|Me(?:diaTiming|talDrawable))|I(?:Filter(?:Constructor)?|PlugInRegistration)|X(?:Call(?:DirectoryExtensionContextDelegate|ObserverDelegate)|ProviderDelegate))|DR(?:FileDataProduction|TrackDataProduction)|I(?:C(?:CameraDeviceD(?:elegate|ownloadDelegate)|Device(?:BrowserDelegate|Delegate)|ScannerDeviceDelegate)|K(?:CameraDeviceViewDelegate|DeviceBrowserViewDelegate|FilterCustomUIProvider|ImageEditPanelDataSource|S(?:cannerDeviceViewDelegate|lideshowDataSource))|MK(?:TextInput|UnicodeTextInput)|OBluetooth(?:Device(?:AsyncCallbacks|InquiryDelegate|PairDelegate)|HandsFree(?:AudioGatewayDelegate|De(?:legate|viceDelegate))|L2CAPChannelDelegate|RFCOMMChannelDelegate))|MDLLightProbeIrradianceDataSource|NS(?:Fetch(?:RequestResult|edResults(?:ControllerDelegate|SectionInfo))|Object)|PDF(?:DocumentDelegate|ViewDelegate)|QLPreview(?:Item|PanelD(?:ataSource|elegate)|ingController))\\b",
          name: "support.other.protocol.objc"
        }
      ]
    }
  },
  scopeName: "source.objc.platform"
};
var source_objc_platform_default = grammar19;

// node_modules/@wooorm/starry-night/lang/source.perl.js
var grammar20 = {
  extensions: [".pl", ".cgi", ".perl", ".ph", ".plx", ".pm", ".psgi", ".t"],
  names: ["perl", "cperl"],
  patterns: [
    { include: "#line_comment" },
    {
      begin: "^(?==[a-zA-Z]+)",
      end: "^(=cut\\b.*$)",
      endCaptures: { 1: { patterns: [{ include: "#pod" }] } },
      name: "comment.block.documentation.perl",
      patterns: [{ include: "#pod" }]
    },
    { include: "#variable" },
    {
      applyEndPatternLast: true,
      begin: "\\b(?=qr\\s*[^\\s\\w])",
      end: "((([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\#\\{\\}\\)]|\\s*$))",
      endCaptures: {
        1: { name: "string.regexp.compile.perl" },
        2: { name: "punctuation.definition.string.perl" },
        3: { name: "keyword.control.regexp-option.perl" }
      },
      patterns: [
        {
          begin: "(qr)\\s*\\{",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\}",
          name: "string.regexp.compile.nested_braces.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_braces_interpolated" }
          ]
        },
        {
          begin: "(qr)\\s*\\[",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\]",
          name: "string.regexp.compile.nested_brackets.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_brackets_interpolated" }
          ]
        },
        {
          begin: "(qr)\\s*<",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: ">",
          name: "string.regexp.compile.nested_ltgt.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_ltgt_interpolated" }
          ]
        },
        {
          begin: "(qr)\\s*\\(",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\)",
          name: "string.regexp.compile.nested_parens.perl",
          patterns: [
            { match: "\\$(?=[^\\s\\w\\\\'\\{\\[\\(\\<])" },
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_parens_interpolated" }
          ]
        },
        {
          begin: "(qr)\\s*'",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "'",
          name: "string.regexp.compile.single-quote.perl",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "(qr)\\s*([^\\s\\w'\\{\\[\\(\\<])",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\2",
          name: "string.regexp.compile.simple-delimiter.perl",
          patterns: [
            {
              match: "\\$(?=[^\\s\\w'\\{\\[\\(\\<])",
              name: "keyword.control.anchor.perl"
            },
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_parens_interpolated" }
          ]
        }
      ]
    },
    {
      applyEndPatternLast: true,
      begin: "(?<!\\{|\\+|\\-)\\b(?=m\\s*[^\\sa-zA-Z0-9])",
      end: "((([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\#\\{\\}\\)]|\\s*$))",
      endCaptures: {
        1: { name: "string.regexp.find-m.perl" },
        2: { name: "punctuation.definition.string.perl" },
        3: { name: "keyword.control.regexp-option.perl" }
      },
      patterns: [
        {
          begin: "(m)\\s*\\{",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\}",
          name: "string.regexp.find-m.nested_braces.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_braces_interpolated" }
          ]
        },
        {
          begin: "(m)\\s*\\[",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\]",
          name: "string.regexp.find-m.nested_brackets.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_brackets_interpolated" }
          ]
        },
        {
          begin: "(m)\\s*<",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: ">",
          name: "string.regexp.find-m.nested_ltgt.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_ltgt_interpolated" }
          ]
        },
        {
          begin: "(m)\\s*\\(",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\)",
          name: "string.regexp.find-m.nested_parens.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_parens_interpolated" }
          ]
        },
        {
          begin: "(m)\\s*'",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "'",
          name: "string.regexp.find-m.single-quote.perl",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "\\G(?<!\\{|\\+|\\-)(m)(?!_)\\s*([^\\sa-zA-Z0-9'\\{\\[\\(\\<])",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\2",
          name: "string.regexp.find-m.simple-delimiter.perl",
          patterns: [
            {
              match: "\\$(?=[^\\sa-zA-Z0-9'\\{\\[\\(\\<])",
              name: "keyword.control.anchor.perl"
            },
            { include: "#escaped_char" },
            { include: "#variable" },
            {
              begin: "\\[",
              beginCaptures: {
                1: { name: "punctuation.definition.character-class.begin.perl" }
              },
              end: "\\]",
              endCaptures: {
                1: { name: "punctuation.definition.character-class.end.perl" }
              },
              name: "constant.other.character-class.set.perl",
              patterns: [
                {
                  match: "\\$(?=[^\\s\\w'\\{\\[\\(\\<])",
                  name: "keyword.control.anchor.perl"
                },
                { include: "#escaped_char" }
              ]
            },
            { include: "#nested_parens_interpolated" }
          ]
        }
      ]
    },
    {
      applyEndPatternLast: true,
      begin: "\\b(?=(?<!\\&)(s)(\\s+\\S|\\s*[;\\,\\{\\}\\(\\)\\[<]|$))",
      end: "((([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\{\\}\\)\\]>]|\\s*$))",
      endCaptures: {
        1: { name: "string.regexp.replace.perl" },
        2: { name: "punctuation.definition.string.perl" },
        3: { name: "keyword.control.regexp-option.perl" }
      },
      patterns: [
        {
          begin: "(s)\\s*\\{",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\}",
          name: "string.regexp.nested_braces.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#nested_braces" }]
        },
        {
          begin: "(s)\\s*\\[",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\]",
          name: "string.regexp.nested_brackets.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#nested_brackets" }]
        },
        {
          begin: "(s)\\s*<",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: ">",
          name: "string.regexp.nested_ltgt.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#nested_ltgt" }]
        },
        {
          begin: "(s)\\s*\\(",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "\\)",
          name: "string.regexp.nested_parens.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#nested_parens" }]
        },
        {
          begin: "\\{",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "\\}",
          name: "string.regexp.format.nested_braces.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_braces_interpolated" }
          ]
        },
        {
          begin: "\\[",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "\\]",
          name: "string.regexp.format.nested_brackets.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_brackets_interpolated" }
          ]
        },
        {
          begin: "<",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: ">",
          name: "string.regexp.format.nested_ltgt.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_ltgt_interpolated" }
          ]
        },
        {
          begin: "\\(",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "\\)",
          name: "string.regexp.format.nested_parens.perl",
          patterns: [
            { include: "#escaped_char" },
            { include: "#variable" },
            { include: "#nested_parens_interpolated" }
          ]
        },
        {
          begin: "'",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "'",
          name: "string.regexp.format.single_quote.perl",
          patterns: [
            { match: "\\\\['\\\\]", name: "constant.character.escape.perl" }
          ]
        },
        {
          begin: "([^\\s\\w\\[({<;])",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "\\1",
          name: "string.regexp.format.simple_delimiter.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
        },
        { match: "\\s+" }
      ]
    },
    {
      begin: "\\b(?=s([^\\sa-zA-Z0-9\\[({<]).*\\1([egimosxradlupcn]*)([\\}\\)\\;\\,]|\\s+))",
      end: "((([egimosxradlupcn]*)))(?=([\\}\\)\\;\\,]|\\s+|\\s*$))",
      endCaptures: {
        1: { name: "string.regexp.replace.perl" },
        2: { name: "punctuation.definition.string.perl" },
        3: { name: "keyword.control.regexp-option.perl" }
      },
      patterns: [
        {
          begin: "(s\\s*)([^\\sa-zA-Z0-9\\[({<])",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "(?=\\2)",
          name: "string.regexp.replaceXXX.simple_delimiter.perl",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "'",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "'",
          name: "string.regexp.replaceXXX.format.single_quote.perl",
          patterns: [
            { match: "\\\\['\\\\]", name: "constant.character.escape.perl.perl" }
          ]
        },
        {
          begin: "([^\\sa-zA-Z0-9\\[({<])",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "\\1",
          name: "string.regexp.replaceXXX.format.simple_delimiter.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
        }
      ]
    },
    {
      begin: "\\b(?=(?<!\\\\)s\\s*([^\\s\\w\\[({<>]))",
      end: "((([egimosradlupc]*x[egimosradlupc]*)))\\b",
      endCaptures: {
        1: { name: "string.regexp.replace.perl" },
        2: { name: "punctuation.definition.string.perl" },
        3: { name: "keyword.control.regexp-option.perl" }
      },
      patterns: [
        {
          begin: "(s)\\s*(.)",
          captures: {
            0: { name: "punctuation.definition.string.perl" },
            1: { name: "support.function.perl" }
          },
          end: "(?=\\2)",
          name: "string.regexp.replace.extended.simple_delimiter.perl",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "'",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "'(?=[egimosradlupc]*x[egimosradlupc]*)\\b",
          name: "string.regexp.replace.extended.simple_delimiter.perl",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "(.)",
          captures: { 0: { name: "punctuation.definition.string.perl" } },
          end: "\\1(?=[egimosradlupc]*x[egimosradlupc]*)\\b",
          name: "string.regexp.replace.extended.simple_delimiter.perl",
          patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
        }
      ]
    },
    {
      begin: "(?<=\\(|\\{|~|&|\\||if|unless|^)\\s*((\\/))",
      beginCaptures: {
        1: { name: "string.regexp.find.perl" },
        2: { name: "punctuation.definition.string.perl" }
      },
      contentName: "string.regexp.find.perl",
      end: "((\\1([egimosxradlupcn]*)))(?=(\\s+\\S|\\s*[;\\,\\#\\{\\}\\)]|\\s*$))",
      endCaptures: {
        1: { name: "string.regexp.find.perl" },
        2: { name: "punctuation.definition.string.perl" },
        3: { name: "keyword.control.regexp-option.perl" }
      },
      patterns: [
        { match: "\\$(?=\\/)", name: "keyword.control.anchor.perl" },
        { include: "#escaped_char" },
        { include: "#variable" }
      ]
    },
    {
      captures: { 1: { name: "constant.other.key.perl" } },
      match: "\\b(\\w+)\\s*(?==>)"
    },
    { match: "(?<={)\\s*\\w+\\s*(?=})", name: "constant.other.bareword.perl" },
    {
      captures: {
        1: { name: "keyword.control.perl" },
        2: { name: "entity.name.type.class.perl" }
      },
      match: "^\\s*(package)\\s+([^\\s;]+)",
      name: "meta.class.perl"
    },
    {
      captures: {
        1: { name: "storage.type.sub.perl" },
        2: { name: "entity.name.function.perl" },
        3: { name: "storage.type.method.perl" }
      },
      match: "\\b(sub)(?:\\s+([-a-zA-Z0-9_]+))?\\s*(?:\\([\\$\\@\\*;]*\\))?[^\\w\\{]",
      name: "meta.function.perl"
    },
    {
      captures: {
        1: { name: "entity.name.function.perl" },
        2: { name: "punctuation.definition.parameters.perl" },
        3: { name: "variable.parameter.function.perl" }
      },
      match: "^\\s*(BEGIN|UNITCHECK|CHECK|INIT|END|DESTROY)\\b",
      name: "meta.function.perl"
    },
    {
      begin: "^(?=(\\t| {4}))",
      end: "(?=[^\\t\\s])",
      name: "meta.leading-tabs",
      patterns: [
        {
          captures: { 1: { name: "meta.odd-tab" }, 2: { name: "meta.even-tab" } },
          match: "(\\t| {4})(\\t| {4})?"
        }
      ]
    },
    {
      captures: {
        1: { name: "support.function.perl" },
        2: { name: "punctuation.definition.string.perl" },
        5: { name: "punctuation.definition.string.perl" },
        8: { name: "punctuation.definition.string.perl" }
      },
      match: "\\b(tr|y)\\s*([^A-Za-z0-9\\s])(.*?)(?<!\\\\)(\\\\{2})*(\\2)(.*?)(?<!\\\\)(\\\\{2})*(\\2)",
      name: "string.regexp.replace.perl"
    },
    {
      match: "\\b(__FILE__|__LINE__|__PACKAGE__|__SUB__)\\b",
      name: "constant.language.perl"
    },
    {
      begin: "\\b(__DATA__|__END__)\\n?",
      beginCaptures: { 1: { name: "constant.language.perl" } },
      contentName: "comment.block.documentation.perl",
      end: "\\z",
      patterns: [{ include: "#pod" }]
    },
    {
      match: "(?<!->)\\b(continue|default|die|do|else|elsif|exit|for|foreach|given|goto|if|last|next|redo|return|select|unless|until|wait|when|while|switch|case|require|use|eval)\\b",
      name: "keyword.control.perl"
    },
    { match: "\\b(my|our|local)\\b", name: "storage.modifier.perl" },
    {
      match: "(?<!\\w)\\-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b",
      name: "keyword.operator.filetest.perl"
    },
    { match: "\\b(and|or|xor|as|not)\\b", name: "keyword.operator.logical.perl" },
    { match: "(<=>|=>|->)", name: "keyword.operator.comparison.perl" },
    { include: "#heredoc" },
    {
      begin: "\\bqq\\s*([^\\(\\{\\[\\<\\w\\s])",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.qq.perl",
      patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
    },
    {
      begin: "\\bqx\\s*([^'\\(\\{\\[\\<\\w\\s])",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.qx.perl",
      patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
    },
    {
      begin: "\\bqx\\s*'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.qx.single-quote.perl",
      patterns: [{ include: "#escaped_char" }]
    },
    {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.double.perl",
      patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
    },
    {
      begin: "(?<!->)\\bqw?\\s*([^\\(\\{\\[\\<\\w\\s])",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.q.perl"
    },
    {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.single.perl",
      patterns: [{ match: "\\\\['\\\\]", name: "constant.character.escape.perl" }]
    },
    {
      begin: "`",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "`",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.perl",
      patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
    },
    {
      begin: "(?<!->)\\bqq\\s*\\(",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.qq-paren.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_parens_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "\\bqq\\s*\\{",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.qq-brace.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_braces_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "\\bqq\\s*\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.qq-bracket.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_brackets_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "\\bqq\\s*\\<",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\>",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.qq-ltgt.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_ltgt_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "(?<!->)\\bqx\\s*\\(",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.qx-paren.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_parens_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "\\bqx\\s*\\{",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.qx-brace.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_braces_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "\\bqx\\s*\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.qx-bracket.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_brackets_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "\\bqx\\s*\\<",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\>",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.interpolated.qx-ltgt.perl",
      patterns: [
        { include: "#escaped_char" },
        { include: "#nested_ltgt_interpolated" },
        { include: "#variable" }
      ]
    },
    {
      begin: "(?<!->)\\bqw?\\s*\\(",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.q-paren.perl",
      patterns: [{ include: "#nested_parens" }]
    },
    {
      begin: "\\bqw?\\s*\\{",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.q-brace.perl",
      patterns: [{ include: "#nested_braces" }]
    },
    {
      begin: "\\bqw?\\s*\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.q-bracket.perl",
      patterns: [{ include: "#nested_brackets" }]
    },
    {
      begin: "\\bqw?\\s*\\<",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "\\>",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.quoted.other.q-ltgt.perl",
      patterns: [{ include: "#nested_ltgt" }]
    },
    {
      begin: "^__\\w+__",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.perl" } },
      end: "$",
      endCaptures: { 0: { name: "punctuation.definition.string.end.perl" } },
      name: "string.unquoted.program-block.perl"
    },
    {
      begin: "\\b(format)\\s+(\\w+)\\s*=",
      beginCaptures: {
        1: { name: "support.function.perl" },
        2: { name: "entity.name.function.format.perl" }
      },
      end: "^\\.\\s*$",
      name: "meta.format.perl",
      patterns: [{ include: "#line_comment" }, { include: "#variable" }]
    },
    {
      captures: {
        1: { name: "support.function.perl" },
        2: { name: "entity.name.function.perl" }
      },
      match: "\\b(x)\\s*(\\d+)\\b"
    },
    {
      match: "\\b(ARGV|DATA|ENV|SIG|STDERR|STDIN|STDOUT|atan2|bind|binmode|bless|caller|chdir|chmod|chomp|chop|chown|chr|chroot|close|closedir|cmp|connect|cos|crypt|dbmclose|dbmopen|defined|delete|dump|each|endgrent|endhostent|endnetent|endprotoent|endpwent|endservent|eof|eq|eval|exec|exists|exp|fcntl|fileno|flock|fork|formline|ge|getc|getgrent|getgrgid|getgrnam|gethostbyaddr|gethostbyname|gethostent|getlogin|getnetbyaddr|getnetbyname|getnetent|getpeername|getpgrp|getppid|getpriority|getprotobyname|getprotobynumber|getprotoent|getpwent|getpwnam|getpwuid|getservbyname|getservbyport|getservent|getsockname|getsockopt|glob|gmtime|grep|gt|hex|import|index|int|ioctl|join|keys|kill|lc|lcfirst|le|length|link|listen|local|localtime|log|lstat|lt|m|map|mkdir|msgctl|msgget|msgrcv|msgsnd|ne|no|oct|open|opendir|ord|pack|pipe|pop|pos|print|printf|push|quotemeta|rand|read|readdir|readlink|recv|ref|rename|reset|reverse|rewinddir|rindex|rmdir|s|say|scalar|seek|seekdir|semctl|semget|semop|send|setgrent|sethostent|setnetent|setpgrp|setpriority|setprotoent|setpwent|setservent|setsockopt|shift|shmctl|shmget|shmread|shmwrite|shutdown|sin|sleep|socket|socketpair|sort|splice|split|sprintf|sqrt|srand|stat|study|substr|symlink|syscall|sysopen|sysread|system|syswrite|tell|telldir|tie|tied|time|times|tr|truncate|uc|ucfirst|umask|undef|unlink|unpack|unshift|untie|utime|values|vec|waitpid|wantarray|warn|write|y)\\b",
      name: "support.function.perl"
    },
    {
      captures: {
        1: { name: "punctuation.section.scope.begin.perl" },
        2: { name: "punctuation.section.scope.end.perl" }
      },
      match: "(\\{)(\\})"
    },
    {
      captures: {
        1: { name: "punctuation.section.scope.begin.perl" },
        2: { name: "punctuation.section.scope.end.perl" }
      },
      match: "(\\()(\\))"
    }
  ],
  repository: {
    escaped_char: {
      patterns: [
        { match: "\\\\\\d+", name: "constant.character.escape.perl" },
        { match: "\\\\c[^\\s\\\\]", name: "constant.character.escape.perl" },
        {
          match: "\\\\g(?:\\{(?:\\w*|-\\d+)\\}|\\d+)",
          name: "constant.character.escape.perl"
        },
        {
          match: "\\\\k(?:\\{\\w*\\}|<\\w*>|'\\w*')",
          name: "constant.character.escape.perl"
        },
        { match: "\\\\N\\{[^\\}]*\\}", name: "constant.character.escape.perl" },
        { match: "\\\\o\\{\\d*\\}", name: "constant.character.escape.perl" },
        {
          match: "\\\\(?:p|P)(?:\\{\\w*\\}|P)",
          name: "constant.character.escape.perl"
        },
        {
          match: "\\\\x(?:[0-9a-zA-Z]{2}|\\{\\w*\\})?",
          name: "constant.character.escape.perl"
        },
        { match: "\\\\.", name: "constant.character.escape.perl" }
      ]
    },
    heredoc: {
      patterns: [
        {
          begin: "((((<<(~)?) *')(HTML)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.html",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "text.html.basic",
              patterns: [{ include: "text.html.basic" }]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *')(XML)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.xml",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "text.xml",
              patterns: [{ include: "text.xml" }]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *')(CSS)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.css",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.css",
              patterns: [{ include: "source.css" }]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *')(JAVASCRIPT)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.js",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.js",
              patterns: [{ include: "source.js" }]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *')(SQL)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.sql",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.sql",
              patterns: [{ include: "source.sql" }]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *')(POSTSCRIPT)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.postscript",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.postscript",
              patterns: [{ include: "source.postscript" }]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *')([^']*)(')))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          }
        },
        {
          begin: "((((<<(~)?) *\\\\)((?![=\\d\\$\\( ])[^;,'\"`\\s\\)]*)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.raw.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.raw.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.raw.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          }
        },
        {
          begin: '((((<<(~)?) *")(HTML)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.html",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "text.html.basic",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "text.html.basic" }
              ]
            }
          ]
        },
        {
          begin: '((((<<(~)?) *")(XML)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.xml",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "text.xml",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "text.xml" }
              ]
            }
          ]
        },
        {
          begin: '((((<<(~)?) *")(CSS)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.css",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.css",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.css" }
              ]
            }
          ]
        },
        {
          begin: '((((<<(~)?) *")(JAVASCRIPT)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.js",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.js",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.js" }
              ]
            }
          ]
        },
        {
          begin: '((((<<(~)?) *")(SQL)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.sql",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.sql",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.sql" }
              ]
            }
          ]
        },
        {
          begin: '((((<<(~)?) *")(POSTSCRIPT)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.postscript",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.postscript",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.postscript" }
              ]
            }
          ]
        },
        {
          begin: '((((<<(~)?) *")([^"]*)(")))(.*)\\n?',
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
        },
        {
          begin: "((((<<(~)?) *)(HTML)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.html",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "text.html.basic",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "text.html.basic" }
              ]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *)(XML)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.xml",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "text.xml",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "text.xml" }
              ]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *)(CSS)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.css",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.css",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.css" }
              ]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *)(JAVASCRIPT)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.js",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.js",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.js" }
              ]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *)(SQL)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.sql",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.sql",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.sql" }
              ]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *)(POSTSCRIPT)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          name: "meta.embedded.block.postscript",
          patterns: [
            {
              begin: "^",
              end: "\\n",
              name: "source.postscript",
              patterns: [
                { include: "#escaped_char" },
                { include: "#variable" },
                { include: "source.postscript" }
              ]
            }
          ]
        },
        {
          begin: "((((<<(~)?) *)((?![=\\d\\$\\( ])[^;,'\"`\\s\\)]*)()))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.interpolated.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
        },
        {
          begin: "((((<<(~)?) *`)([^`]*)(`)))(.*)\\n?",
          beginCaptures: {
            1: { name: "string.unquoted.heredoc.interpolated.perl" },
            2: { name: "punctuation.definition.string.begin.perl" },
            3: { name: "punctuation.definition.delimiter.begin.perl" },
            7: { name: "punctuation.definition.delimiter.end.perl" },
            8: { patterns: [{ include: "$self" }] }
          },
          contentName: "string.unquoted.heredoc.shell.perl",
          end: "^((?!\\5)\\s+)?((\\6))$",
          endCaptures: {
            2: { name: "string.unquoted.heredoc.interpolated.perl" },
            3: { name: "punctuation.definition.string.end.perl" }
          },
          patterns: [{ include: "#escaped_char" }, { include: "#variable" }]
        }
      ]
    },
    line_comment: {
      patterns: [
        {
          begin: "(^[ \\t]+)?(?=#)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.perl" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "#",
              beginCaptures: { 0: { name: "punctuation.definition.comment.perl" } },
              end: "\\n",
              name: "comment.line.number-sign.perl"
            }
          ]
        }
      ]
    },
    nested_braces: {
      begin: "\\{",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: "\\}",
      patterns: [{ include: "#escaped_char" }, { include: "#nested_braces" }]
    },
    nested_braces_interpolated: {
      begin: "\\{",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: "\\}",
      patterns: [
        { include: "#escaped_char" },
        { include: "#variable" },
        { include: "#nested_braces_interpolated" }
      ]
    },
    nested_brackets: {
      begin: "\\[",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: "\\]",
      patterns: [{ include: "#escaped_char" }, { include: "#nested_brackets" }]
    },
    nested_brackets_interpolated: {
      begin: "\\[",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: "\\]",
      patterns: [
        { include: "#escaped_char" },
        { include: "#variable" },
        { include: "#nested_brackets_interpolated" }
      ]
    },
    nested_ltgt: {
      begin: "<",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: ">",
      patterns: [{ include: "#nested_ltgt" }]
    },
    nested_ltgt_interpolated: {
      begin: "<",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: ">",
      patterns: [{ include: "#variable" }, { include: "#nested_ltgt_interpolated" }]
    },
    nested_parens: {
      begin: "\\(",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: "\\)",
      patterns: [{ include: "#escaped_char" }, { include: "#nested_parens" }]
    },
    nested_parens_interpolated: {
      begin: "\\(",
      captures: { 1: { name: "punctuation.section.scope.perl" } },
      end: "\\)",
      patterns: [
        {
          match: "\\$(?=[^\\s\\w'\\{\\[\\(\\<])",
          name: "keyword.control.anchor.perl"
        },
        { include: "#escaped_char" },
        { include: "#variable" },
        { include: "#nested_parens_interpolated" }
      ]
    },
    pod: {
      patterns: [
        { match: "^=(pod|back|cut)\\b", name: "storage.type.class.pod.perl" },
        {
          begin: "^(=begin)\\s+(html)\\s*$",
          beginCaptures: {
            1: { name: "storage.type.class.pod.perl" },
            2: { name: "variable.other.pod.perl" }
          },
          contentName: "text.embedded.html.basic",
          end: "^(=end)\\s+(html)|^(?==cut)",
          endCaptures: {
            1: { name: "storage.type.class.pod.perl" },
            2: { name: "variable.other.pod.perl" }
          },
          name: "meta.embedded.pod.perl",
          patterns: [{ include: "text.html.basic" }]
        },
        {
          captures: {
            1: { name: "storage.type.class.pod.perl" },
            2: {
              name: "variable.other.pod.perl",
              patterns: [{ include: "#pod-formatting" }]
            }
          },
          match: "^(=(?:head[1-4]|item|over|encoding|begin|end|for))\\b\\s*(.*)"
        },
        { include: "#pod-formatting" }
      ]
    },
    "pod-formatting": {
      patterns: [
        {
          captures: {
            1: { name: "markup.italic.pod.perl" },
            2: { name: "markup.italic.pod.perl" }
          },
          match: "I(?:<([^<>]+)>|<+(\\s+(?:(?<!\\s)>|[^>])+\\s+)>+)",
          name: "entity.name.type.instance.pod.perl"
        },
        {
          captures: {
            1: { name: "markup.bold.pod.perl" },
            2: { name: "markup.bold.pod.perl" }
          },
          match: "B(?:<([^<>]+)>|<+(\\s+(?:(?<!\\s)>|[^>])+\\s+)>+)",
          name: "entity.name.type.instance.pod.perl"
        },
        {
          captures: {
            1: { name: "markup.raw.pod.perl" },
            2: { name: "markup.raw.pod.perl" }
          },
          match: "C(?:<([^<>]+)>|<+(\\\\s+(?:(?<!\\\\s)>|[^>])+\\\\s+)>+)",
          name: "entity.name.type.instance.pod.perl"
        },
        {
          captures: { 1: { name: "markup.underline.link.hyperlink.pod.perl" } },
          match: "L<([^>]+)>",
          name: "entity.name.type.instance.pod.perl"
        },
        { match: "[EFSXZ]<[^>]*>", name: "entity.name.type.instance.pod.perl" }
      ]
    },
    variable: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)&(?![A-Za-z0-9_])",
          name: "variable.other.regexp.match.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)`(?![A-Za-z0-9_])",
          name: "variable.other.regexp.pre-match.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)'(?![A-Za-z0-9_])",
          name: "variable.other.regexp.post-match.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)\\+(?![A-Za-z0-9_])",
          name: "variable.other.regexp.last-paren-match.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: '(\\$)"(?![A-Za-z0-9_])',
          name: "variable.other.readwrite.list-separator.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)0(?![A-Za-z0-9_])",
          name: "variable.other.predefined.program-name.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)[_ab\\*\\.\\/\\|,\\\\;#%=\\-~^:?!\\$<>\\(\\)\\[\\]@](?![A-Za-z0-9_])",
          name: "variable.other.predefined.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "(\\$)[0-9]+(?![A-Za-z0-9_])",
          name: "variable.other.subpattern.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "([\\$\\@\\%](#)?)([a-zA-Zx7f-xff\\$]|::)([a-zA-Z0-9_x7f-xff\\$]|::)*\\b",
          name: "variable.other.readwrite.global.perl"
        },
        {
          captures: {
            1: { name: "punctuation.definition.variable.perl" },
            2: { name: "punctuation.definition.variable.perl" }
          },
          match: "(\\$\\{)(?:[a-zA-Zx7f-xff\\$]|::)(?:[a-zA-Z0-9_x7f-xff\\$]|::)*(\\})",
          name: "variable.other.readwrite.global.perl"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.perl" } },
          match: "([\\$\\@\\%](#)?)[0-9_]\\b",
          name: "variable.other.readwrite.global.special.perl"
        }
      ]
    }
  },
  scopeName: "source.perl"
};
var source_perl_default = grammar20;

// node_modules/@wooorm/starry-night/lang/source.python.js
var grammar21 = {
  extensions: [
    ".bzl",
    ".eb",
    ".gyp",
    ".gypi",
    ".lmi",
    ".py",
    ".py3",
    ".pyde",
    ".pyi",
    ".pyp",
    ".pyt",
    ".pyw",
    ".rpy",
    ".sage",
    ".sagews",
    ".smk",
    ".snakefile",
    ".spec",
    ".tac",
    ".wsgi",
    ".xpy",
    ".xsh"
  ],
  names: [
    "bazel",
    "bzl",
    "easybuild",
    "python",
    "python3",
    "rusthon",
    "sage",
    "snakefile",
    "snakemake",
    "starlark",
    "xonsh"
  ],
  patterns: [{ include: "#statement" }, { include: "#expression" }],
  repository: {
    "annotated-parameter": {
      begin: "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n",
      beginCaptures: {
        1: { name: "variable.parameter.function.language.python" },
        2: { name: "punctuation.separator.annotation.python" }
      },
      end: "(,)|(?=\\))",
      endCaptures: { 1: { name: "punctuation.separator.parameters.python" } },
      patterns: [
        { include: "#expression" },
        { match: "=(?!=)", name: "keyword.operator.assignment.python" }
      ]
    },
    "assignment-operator": {
      match: "(?x)\n     <<= | >>= | //= | \\*\\*=\n    | \\+= | -= | /= | @=\n    | \\*= | %= | ~= | \\^= | &= | \\|=\n    | =(?!=)\n",
      name: "keyword.operator.assignment.python"
    },
    backticks: {
      begin: "\\`",
      end: "(?:\\`|(?<!\\\\)(\\n))",
      name: "invalid.deprecated.backtick.python",
      patterns: [{ include: "#expression" }]
    },
    "builtin-callables": {
      patterns: [
        { include: "#illegal-names" },
        { include: "#illegal-object-name" },
        { include: "#builtin-exceptions" },
        { include: "#builtin-functions" },
        { include: "#builtin-types" }
      ]
    },
    "builtin-exceptions": {
      match: "(?x) (?<!\\.) \\b(\n  (\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\n    | BrokenPipe | ChildProcess\n    | (Connection (Aborted | Refused | Reset)?)\n    | EOF | Environment | FileExists | FileNotFound\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\n    | Timeout\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\n    | Reference | Runtime | Recursion | Syntax | System\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\n    | Value | Windows | ZeroDivision | ModuleNotFound\n  ) Error\n|\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\n    | Unicode | Bytes | Resource\n  )? Warning\n|\n  SystemExit | Stop(Async)?Iteration\n  | KeyboardInterrupt\n  | GeneratorExit | (Base)?Exception\n)\\b\n",
      name: "support.type.exception.python"
    },
    "builtin-functions": {
      patterns: [
        {
          match: "(?x)\n  (?<!\\.) \\b(\n    __import__ | abs | aiter | all | any | anext | ascii | bin\n    | breakpoint | callable | chr | compile | copyright | credits\n    | delattr | dir | divmod | enumerate | eval | exec | exit\n    | filter | format | getattr | globals | hasattr | hash | help\n    | hex | id | input | isinstance | issubclass | iter | len\n    | license | locals | map | max | memoryview | min | next\n    | oct | open | ord | pow | print | quit | range | reload | repr\n    | reversed | round | setattr | sorted | sum | vars | zip\n  )\\b\n",
          name: "support.function.builtin.python"
        },
        {
          match: "(?x)\n  (?<!\\.) \\b(\n    file | reduce | intern | raw_input | unicode | cmp | basestring\n    | execfile | long | xrange\n  )\\b\n",
          name: "variable.legacy.builtin.python"
        }
      ]
    },
    "builtin-possible-callables": {
      patterns: [{ include: "#builtin-callables" }, { include: "#magic-names" }]
    },
    "builtin-types": {
      match: "(?x)\n  (?<!\\.) \\b(\n    bool | bytearray | bytes | classmethod | complex | dict\n    | float | frozenset | int | list | object | property\n    | set | slice | staticmethod | str | tuple | type\n\n    (?# Although 'super' is not a type, it's related to types,\n        and is special enough to be highlighted differently from\n        other built-ins)\n    | super\n  )\\b\n",
      name: "support.type.python"
    },
    "call-wrapper-inheritance": {
      begin: "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } },
      name: "meta.function-call.python",
      patterns: [
        { include: "#inheritance-name" },
        { include: "#function-arguments" }
      ]
    },
    "class-declaration": {
      patterns: [
        {
          begin: "(?x)\n  \\s*(class)\\s+\n    (?=\n      [[:alpha:]_]\\w* \\s* (:|\\()\n    )\n",
          beginCaptures: { 1: { name: "storage.type.class.python" } },
          end: "(:)",
          endCaptures: { 1: { name: "punctuation.section.class.begin.python" } },
          name: "meta.class.python",
          patterns: [{ include: "#class-name" }, { include: "#class-inheritance" }]
        }
      ]
    },
    "class-inheritance": {
      begin: "(\\()",
      beginCaptures: {
        1: { name: "punctuation.definition.inheritance.begin.python" }
      },
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.definition.inheritance.end.python" } },
      name: "meta.class.inheritance.python",
      patterns: [
        {
          match: "(\\*\\*|\\*)",
          name: "keyword.operator.unpacking.arguments.python"
        },
        { match: ",", name: "punctuation.separator.inheritance.python" },
        { match: "=(?!=)", name: "keyword.operator.assignment.python" },
        { match: "\\bmetaclass\\b", name: "support.type.metaclass.python" },
        { include: "#illegal-names" },
        { include: "#class-kwarg" },
        { include: "#call-wrapper-inheritance" },
        { include: "#expression-base" },
        { include: "#member-access-class" },
        { include: "#inheritance-identifier" }
      ]
    },
    "class-kwarg": {
      captures: {
        1: {
          name: "entity.other.inherited-class.python variable.parameter.class.python"
        },
        2: { name: "keyword.operator.assignment.python" }
      },
      match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\s*(=)(?!=)\n"
    },
    "class-name": {
      patterns: [
        { include: "#illegal-object-name" },
        { include: "#builtin-possible-callables" },
        {
          match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n",
          name: "entity.name.type.class.python"
        }
      ]
    },
    codetags: {
      captures: { 1: { name: "keyword.codetag.notation.python" } },
      match: "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)"
    },
    comments: {
      patterns: [
        {
          begin: "(?x)\n  (?:\n    \\# \\s* (type:)\n    \\s*+ (?# we want `\\s*+` which is possessive quantifier since\n             we do not actually want to backtrack when matching\n             whitespace here)\n    (?! $ | \\#)\n  )\n",
          beginCaptures: {
            0: { name: "meta.typehint.comment.python" },
            1: { name: "comment.typehint.directive.notation.python" }
          },
          contentName: "meta.typehint.comment.python",
          end: "(?:$|(?=\\#))",
          name: "comment.line.number-sign.python",
          patterns: [
            {
              match: "(?x)\n  \\G ignore\n  (?= \\s* (?: $ | \\#))\n",
              name: "comment.typehint.ignore.notation.python"
            },
            {
              match: "(?x)\n  (?<!\\.)\\b(\n    bool | bytes | float | int | object | str\n    | List | Dict | Iterable | Sequence | Set\n    | FrozenSet | Callable | Union | Tuple\n    | Any | None\n  )\\b\n",
              name: "comment.typehint.type.notation.python"
            },
            {
              match: "([\\[\\]\\(\\),\\.\\=\\*]|(->))",
              name: "comment.typehint.punctuation.notation.python"
            },
            {
              match: "([[:alpha:]_]\\w*)",
              name: "comment.typehint.variable.notation.python"
            }
          ]
        },
        { include: "#comments-base" }
      ]
    },
    "comments-base": {
      begin: "(\\#)",
      beginCaptures: { 1: { name: "punctuation.definition.comment.python" } },
      end: "($)",
      name: "comment.line.number-sign.python",
      patterns: [{ include: "#codetags" }]
    },
    "comments-string-double-three": {
      begin: "(\\#)",
      beginCaptures: { 1: { name: "punctuation.definition.comment.python" } },
      end: '($|(?="""))',
      name: "comment.line.number-sign.python",
      patterns: [{ include: "#codetags" }]
    },
    "comments-string-single-three": {
      begin: "(\\#)",
      beginCaptures: { 1: { name: "punctuation.definition.comment.python" } },
      end: "($|(?='''))",
      name: "comment.line.number-sign.python",
      patterns: [{ include: "#codetags" }]
    },
    "curly-braces": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.definition.dict.begin.python" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.dict.end.python" } },
      patterns: [
        { match: ":", name: "punctuation.separator.dict.python" },
        { include: "#expression" }
      ]
    },
    decorator: {
      begin: "(?x)\n  ^\\s*\n  ((@)) \\s* (?=[[:alpha:]_]\\w*)\n",
      beginCaptures: {
        1: { name: "entity.name.function.decorator.python" },
        2: { name: "punctuation.definition.decorator.python" }
      },
      end: "(?x)\n  ( \\) )\n    # trailing whitespace and comments are legal\n    (?: (.*?) (?=\\s*(?:\\#|$)) )\n  | (?=\\n|\\#)\n",
      endCaptures: {
        1: { name: "punctuation.definition.arguments.end.python" },
        2: { name: "invalid.illegal.decorator.python" }
      },
      name: "meta.function.decorator.python",
      patterns: [{ include: "#decorator-name" }, { include: "#function-arguments" }]
    },
    "decorator-name": {
      patterns: [
        { include: "#builtin-callables" },
        { include: "#illegal-object-name" },
        {
          captures: { 2: { name: "punctuation.separator.period.python" } },
          match: "(?x)\n  ([[:alpha:]_]\\w*) | (\\.)\n",
          name: "entity.name.function.decorator.python"
        },
        { include: "#line-continuation" },
        {
          captures: { 1: { name: "invalid.illegal.decorator.python" } },
          match: "(?x)\n  \\s* ([^([:alpha:]\\s_\\.#\\\\] .*?) (?=\\#|$)\n",
          name: "invalid.illegal.decorator.python"
        }
      ]
    },
    docstring: {
      patterns: [
        {
          begin: `(\\'\\'\\'|\\"\\"\\")`,
          beginCaptures: {
            1: { name: "punctuation.definition.string.begin.python" }
          },
          end: "(\\1)",
          endCaptures: { 1: { name: "punctuation.definition.string.end.python" } },
          name: "string.quoted.docstring.multi.python",
          patterns: [
            { include: "#docstring-prompt" },
            { include: "#codetags" },
            { include: "#docstring-guts-unicode" }
          ]
        },
        {
          begin: `([rR])(\\'\\'\\'|\\"\\"\\")`,
          beginCaptures: {
            1: { name: "storage.type.string.python" },
            2: { name: "punctuation.definition.string.begin.python" }
          },
          end: "(\\2)",
          endCaptures: { 1: { name: "punctuation.definition.string.end.python" } },
          name: "string.quoted.docstring.raw.multi.python",
          patterns: [
            { include: "#string-consume-escape" },
            { include: "#docstring-prompt" },
            { include: "#codetags" }
          ]
        },
        {
          begin: `(\\'|\\")`,
          beginCaptures: {
            1: { name: "punctuation.definition.string.begin.python" }
          },
          end: "(\\1)|(\\n)",
          endCaptures: {
            1: { name: "punctuation.definition.string.end.python" },
            2: { name: "invalid.illegal.newline.python" }
          },
          name: "string.quoted.docstring.single.python",
          patterns: [
            { include: "#codetags" },
            { include: "#docstring-guts-unicode" }
          ]
        },
        {
          begin: `([rR])(\\'|\\")`,
          beginCaptures: {
            1: { name: "storage.type.string.python" },
            2: { name: "punctuation.definition.string.begin.python" }
          },
          end: "(\\2)|(\\n)",
          endCaptures: {
            1: { name: "punctuation.definition.string.end.python" },
            2: { name: "invalid.illegal.newline.python" }
          },
          name: "string.quoted.docstring.raw.single.python",
          patterns: [
            { include: "#string-consume-escape" },
            { include: "#codetags" }
          ]
        }
      ]
    },
    "docstring-guts-unicode": {
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#escape-sequence" },
        { include: "#string-line-continuation" }
      ]
    },
    "docstring-prompt": {
      captures: { 1: { name: "keyword.control.flow.python" } },
      match: "(?x)\n  (?:\n    (?:^|\\G) \\s* (?# '\\G' is necessary for ST)\n    ((?:>>>|\\.\\.\\.) \\s) (?=\\s*\\S)\n  )\n"
    },
    "docstring-statement": {
      begin: `^(?=\\s*[rR]?(\\'\\'\\'|\\"\\"\\"|\\'|\\"))`,
      end: `((?<=\\1)|^)(?!\\s*[rR]?(\\'\\'\\'|\\"\\"\\"|\\'|\\"))`,
      patterns: [{ include: "#docstring" }]
    },
    "double-one-regexp-character-set": {
      patterns: [
        { match: "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n" },
        {
          begin: "(\\[)(\\^)?(\\])?",
          beginCaptures: {
            1: {
              name: "punctuation.character.set.begin.regexp constant.other.set.regexp"
            },
            2: { name: "keyword.operator.negation.regexp" },
            3: { name: "constant.character.set.regexp" }
          },
          end: '(\\]|(?="))|((?=(?<!\\\\)\\n))',
          endCaptures: {
            1: {
              name: "punctuation.character.set.end.regexp constant.other.set.regexp"
            },
            2: { name: "invalid.illegal.newline.python" }
          },
          name: "meta.character.set.regexp",
          patterns: [
            { include: "#regexp-charecter-set-escapes" },
            { match: "[^\\n]", name: "constant.character.set.regexp" }
          ]
        }
      ]
    },
    "double-one-regexp-comments": {
      begin: "\\(\\?#",
      beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: { name: "punctuation.comment.end.regexp" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "comment.regexp",
      patterns: [{ include: "#codetags" }]
    },
    "double-one-regexp-conditional": {
      begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
      beginCaptures: {
        0: { name: "keyword.operator.conditional.regexp" },
        1: { name: "punctuation.parenthesis.conditional.begin.regexp" }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-expression": {
      patterns: [
        { include: "#regexp-base-expression" },
        { include: "#double-one-regexp-character-set" },
        { include: "#double-one-regexp-comments" },
        { include: "#regexp-flags" },
        { include: "#double-one-regexp-named-group" },
        { include: "#regexp-backreference" },
        { include: "#double-one-regexp-lookahead" },
        { include: "#double-one-regexp-lookahead-negative" },
        { include: "#double-one-regexp-lookbehind" },
        { include: "#double-one-regexp-lookbehind-negative" },
        { include: "#double-one-regexp-conditional" },
        { include: "#double-one-regexp-parentheses-non-capturing" },
        { include: "#double-one-regexp-parentheses" }
      ]
    },
    "double-one-regexp-lookahead": {
      begin: "(\\()\\?=",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-lookahead-negative": {
      begin: "(\\()\\?!",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-lookbehind": {
      begin: "(\\()\\?<=",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-lookbehind-negative": {
      begin: "(\\()\\?<!",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-named-group": {
      begin: "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
      beginCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"
        },
        2: { name: "entity.name.tag.named.group.regexp" }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.named.regexp",
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-parentheses": {
      begin: "\\(",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"
        }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-one-regexp-parentheses-non-capturing": {
      begin: "\\(\\?:",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"
        }
      },
      end: '(\\)|(?="))|((?=(?<!\\\\)\\n))',
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "double-three-regexp-character-set": {
      patterns: [
        { match: "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n" },
        {
          begin: "(\\[)(\\^)?(\\])?",
          beginCaptures: {
            1: {
              name: "punctuation.character.set.begin.regexp constant.other.set.regexp"
            },
            2: { name: "keyword.operator.negation.regexp" },
            3: { name: "constant.character.set.regexp" }
          },
          end: '(\\]|(?="""))',
          endCaptures: {
            1: {
              name: "punctuation.character.set.end.regexp constant.other.set.regexp"
            },
            2: { name: "invalid.illegal.newline.python" }
          },
          name: "meta.character.set.regexp",
          patterns: [
            { include: "#regexp-charecter-set-escapes" },
            { match: "[^\\n]", name: "constant.character.set.regexp" }
          ]
        }
      ]
    },
    "double-three-regexp-comments": {
      begin: "\\(\\?#",
      beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: { name: "punctuation.comment.end.regexp" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "comment.regexp",
      patterns: [{ include: "#codetags" }]
    },
    "double-three-regexp-conditional": {
      begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
      beginCaptures: {
        0: { name: "keyword.operator.conditional.regexp" },
        1: { name: "punctuation.parenthesis.conditional.begin.regexp" }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-expression": {
      patterns: [
        { include: "#regexp-base-expression" },
        { include: "#double-three-regexp-character-set" },
        { include: "#double-three-regexp-comments" },
        { include: "#regexp-flags" },
        { include: "#double-three-regexp-named-group" },
        { include: "#regexp-backreference" },
        { include: "#double-three-regexp-lookahead" },
        { include: "#double-three-regexp-lookahead-negative" },
        { include: "#double-three-regexp-lookbehind" },
        { include: "#double-three-regexp-lookbehind-negative" },
        { include: "#double-three-regexp-conditional" },
        { include: "#double-three-regexp-parentheses-non-capturing" },
        { include: "#double-three-regexp-parentheses" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-lookahead": {
      begin: "(\\()\\?=",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-lookahead-negative": {
      begin: "(\\()\\?!",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-lookbehind": {
      begin: "(\\()\\?<=",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-lookbehind-negative": {
      begin: "(\\()\\?<!",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-named-group": {
      begin: "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
      beginCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"
        },
        2: { name: "entity.name.tag.named.group.regexp" }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.named.regexp",
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-parentheses": {
      begin: "\\(",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"
        }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    "double-three-regexp-parentheses-non-capturing": {
      begin: "\\(\\?:",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"
        }
      },
      end: '(\\)|(?="""))',
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#double-three-regexp-expression" },
        { include: "#comments-string-double-three" }
      ]
    },
    ellipsis: { match: "\\.\\.\\.", name: "constant.other.ellipsis.python" },
    "escape-sequence": {
      match: `(?x)
  \\\\ (
        x[0-9A-Fa-f]{2}
        | [0-7]{1,3}
        | [\\\\"'abfnrtv]
     )
`,
      name: "constant.character.escape.python"
    },
    "escape-sequence-unicode": {
      patterns: [
        {
          match: "(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n        | N\\{[\\w\\s]+?\\}\n     )\n",
          name: "constant.character.escape.python"
        }
      ]
    },
    expression: {
      patterns: [
        { include: "#expression-base" },
        { include: "#member-access" },
        { match: "(?x) \\b ([[:alpha:]_]\\w*) \\b" }
      ]
    },
    "expression-bare": {
      patterns: [
        { include: "#backticks" },
        { include: "#illegal-anno" },
        { include: "#literal" },
        { include: "#regexp" },
        { include: "#string" },
        { include: "#lambda" },
        { include: "#generator" },
        { include: "#illegal-operator" },
        { include: "#operator" },
        { include: "#curly-braces" },
        { include: "#item-access" },
        { include: "#list" },
        { include: "#odd-function-call" },
        { include: "#round-braces" },
        { include: "#function-call" },
        { include: "#builtin-functions" },
        { include: "#builtin-types" },
        { include: "#builtin-exceptions" },
        { include: "#magic-names" },
        { include: "#special-names" },
        { include: "#illegal-names" },
        { include: "#special-variables" },
        { include: "#ellipsis" },
        { include: "#punctuation" },
        { include: "#line-continuation" }
      ]
    },
    "expression-base": {
      patterns: [
        { include: "#comments" },
        { include: "#expression-bare" },
        { include: "#line-continuation" }
      ]
    },
    "f-expression": {
      patterns: [
        { include: "#expression-bare" },
        { include: "#member-access" },
        { match: "(?x) \\b ([[:alpha:]_]\\w*) \\b" }
      ]
    },
    "fregexp-base-expression": {
      patterns: [
        { include: "#fregexp-quantifier" },
        { include: "#fstring-formatting-braces" },
        { match: "\\{.*?\\}" },
        { include: "#regexp-base-common" }
      ]
    },
    "fregexp-quantifier": {
      match: "(?x)\n  \\{\\{(\n    \\d+ | \\d+,(\\d+)? | ,\\d+\n  )\\}\\}\n",
      name: "keyword.operator.quantifier.regexp"
    },
    "fstring-fnorm-quoted-multi-line": {
      begin: `(\\b[fF])([bBuU])?('''|""")`,
      beginCaptures: {
        1: {
          name: "string.interpolated.python string.quoted.multi.python storage.type.string.python"
        },
        2: { name: "invalid.illegal.prefix.python" },
        3: {
          name: "punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python"
        }
      },
      end: "(\\3)",
      endCaptures: {
        1: {
          name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.fstring.python",
      patterns: [
        { include: "#fstring-guts" },
        { include: "#fstring-illegal-multi-brace" },
        { include: "#fstring-multi-brace" },
        { include: "#fstring-multi-core" }
      ]
    },
    "fstring-fnorm-quoted-single-line": {
      begin: `(\\b[fF])([bBuU])?((['"]))`,
      beginCaptures: {
        1: {
          name: "string.interpolated.python string.quoted.single.python storage.type.string.python"
        },
        2: { name: "invalid.illegal.prefix.python" },
        3: {
          name: "punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python"
        }
      },
      end: "(\\3)|((?<!\\\\)\\n)",
      endCaptures: {
        1: {
          name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.fstring.python",
      patterns: [
        { include: "#fstring-guts" },
        { include: "#fstring-illegal-single-brace" },
        { include: "#fstring-single-brace" },
        { include: "#fstring-single-core" }
      ]
    },
    "fstring-formatting": {
      patterns: [
        { include: "#fstring-formatting-braces" },
        { include: "#fstring-formatting-singe-brace" }
      ]
    },
    "fstring-formatting-braces": {
      patterns: [
        {
          captures: {
            1: { name: "constant.character.format.placeholder.other.python" },
            2: { name: "invalid.illegal.brace.python" },
            3: { name: "constant.character.format.placeholder.other.python" }
          },
          match: "({)(\\s*?)(})"
        },
        { match: "({{|}})", name: "constant.character.escape.python" }
      ]
    },
    "fstring-formatting-singe-brace": {
      match: "(}(?!}))",
      name: "invalid.illegal.brace.python"
    },
    "fstring-guts": {
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#escape-sequence" },
        { include: "#string-line-continuation" },
        { include: "#fstring-formatting" }
      ]
    },
    "fstring-illegal-multi-brace": { patterns: [{ include: "#impossible" }] },
    "fstring-illegal-single-brace": {
      begin: "(\\{)(?=[^\\n}]*$\\n?)",
      beginCaptures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      end: "(\\})|(?=\\n)",
      endCaptures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      patterns: [
        { include: "#fstring-terminator-single" },
        { include: "#f-expression" }
      ]
    },
    "fstring-multi-brace": {
      begin: "(\\{)",
      beginCaptures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      end: "(?x)\n  (\\})\n",
      endCaptures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      patterns: [
        { include: "#fstring-terminator-multi" },
        { include: "#f-expression" }
      ]
    },
    "fstring-multi-core": {
      match: `(?x)
  (.+?)
    (
      (?# .* and .*? in multi-line match need special handling of
        newlines otherwise SublimeText and Atom will match slightly
        differently.

        The guard for newlines has to be separate from the
        lookahead because of special $ matching rule.)
      ($\\n?)
      |
      (?=[\\\\\\}\\{]|'''|""")
    )
  (?# due to how multiline regexps are matched we need a special case
    for matching a newline character)
  | \\n
`,
      name: "string.interpolated.python string.quoted.multi.python"
    },
    "fstring-normf-quoted-multi-line": {
      begin: `(\\b[bBuU])([fF])('''|""")`,
      beginCaptures: {
        1: { name: "invalid.illegal.prefix.python" },
        2: {
          name: "string.interpolated.python string.quoted.multi.python storage.type.string.python"
        },
        3: {
          name: "punctuation.definition.string.begin.python string.quoted.multi.python"
        }
      },
      end: "(\\3)",
      endCaptures: {
        1: {
          name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.fstring.python",
      patterns: [
        { include: "#fstring-guts" },
        { include: "#fstring-illegal-multi-brace" },
        { include: "#fstring-multi-brace" },
        { include: "#fstring-multi-core" }
      ]
    },
    "fstring-normf-quoted-single-line": {
      begin: `(\\b[bBuU])([fF])((['"]))`,
      beginCaptures: {
        1: { name: "invalid.illegal.prefix.python" },
        2: {
          name: "string.interpolated.python string.quoted.single.python storage.type.string.python"
        },
        3: {
          name: "punctuation.definition.string.begin.python string.quoted.single.python"
        }
      },
      end: "(\\3)|((?<!\\\\)\\n)",
      endCaptures: {
        1: {
          name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.fstring.python",
      patterns: [
        { include: "#fstring-guts" },
        { include: "#fstring-illegal-single-brace" },
        { include: "#fstring-single-brace" },
        { include: "#fstring-single-core" }
      ]
    },
    "fstring-raw-guts": {
      patterns: [
        { include: "#string-consume-escape" },
        { include: "#fstring-formatting" }
      ]
    },
    "fstring-raw-multi-core": {
      match: `(?x)
  (.+?)
    (
      (?# .* and .*? in multi-line match need special handling of
        newlines otherwise SublimeText and Atom will match slightly
        differently.

        The guard for newlines has to be separate from the
        lookahead because of special $ matching rule.)
      ($\\n?)
      |
      (?=[\\\\\\}\\{]|'''|""")
    )
  (?# due to how multiline regexps are matched we need a special case
    for matching a newline character)
  | \\n
`,
      name: "string.interpolated.python string.quoted.raw.multi.python"
    },
    "fstring-raw-quoted-multi-line": {
      begin: `(\\b(?:[rR][fF]|[fF][rR]))('''|""")`,
      beginCaptures: {
        1: {
          name: "string.interpolated.python string.quoted.raw.multi.python storage.type.string.python"
        },
        2: {
          name: "punctuation.definition.string.begin.python string.quoted.raw.multi.python"
        }
      },
      end: "(\\2)",
      endCaptures: {
        1: {
          name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.fstring.python",
      patterns: [
        { include: "#fstring-raw-guts" },
        { include: "#fstring-illegal-multi-brace" },
        { include: "#fstring-multi-brace" },
        { include: "#fstring-raw-multi-core" }
      ]
    },
    "fstring-raw-quoted-single-line": {
      begin: `(\\b(?:[rR][fF]|[fF][rR]))((['"]))`,
      beginCaptures: {
        1: {
          name: "string.interpolated.python string.quoted.raw.single.python storage.type.string.python"
        },
        2: {
          name: "punctuation.definition.string.begin.python string.quoted.raw.single.python"
        }
      },
      end: "(\\2)|((?<!\\\\)\\n)",
      endCaptures: {
        1: {
          name: "punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.fstring.python",
      patterns: [
        { include: "#fstring-raw-guts" },
        { include: "#fstring-illegal-single-brace" },
        { include: "#fstring-single-brace" },
        { include: "#fstring-raw-single-core" }
      ]
    },
    "fstring-raw-single-core": {
      match: `(?x)
  (.+?)
    (
      (?# .* and .*? in multi-line match need special handling of
        newlines otherwise SublimeText and Atom will match slightly
        differently.

        The guard for newlines has to be separate from the
        lookahead because of special $ matching rule.)
      ($\\n?)
      |
      (?=[\\\\\\}\\{]|(['"])|((?<!\\\\)\\n))
    )
  (?# due to how multiline regexps are matched we need a special case
    for matching a newline character)
  | \\n
`,
      name: "string.interpolated.python string.quoted.raw.single.python"
    },
    "fstring-single-brace": {
      begin: "(\\{)",
      beginCaptures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      end: "(?x)\n  (\\})|(?=\\n)\n",
      endCaptures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      patterns: [
        { include: "#fstring-terminator-single" },
        { include: "#f-expression" }
      ]
    },
    "fstring-single-core": {
      match: `(?x)
  (.+?)
    (
      (?# .* and .*? in multi-line match need special handling of
        newlines otherwise SublimeText and Atom will match slightly
        differently.

        The guard for newlines has to be separate from the
        lookahead because of special $ matching rule.)
      ($\\n?)
      |
      (?=[\\\\\\}\\{]|(['"])|((?<!\\\\)\\n))
    )
  (?# due to how multiline regexps are matched we need a special case
    for matching a newline character)
  | \\n
`,
      name: "string.interpolated.python string.quoted.single.python"
    },
    "fstring-terminator-multi": {
      patterns: [
        { match: "(=(![rsa])?)(?=})", name: "storage.type.format.python" },
        { match: "(=?![rsa])(?=})", name: "storage.type.format.python" },
        {
          captures: {
            1: { name: "storage.type.format.python" },
            2: { name: "storage.type.format.python" }
          },
          match: "(?x)\n  ( (?: =?) (?: ![rsa])? )\n    ( : \\w? [<>=^]? [-+ ]? \\#?\n      \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})\n"
        },
        { include: "#fstring-terminator-multi-tail" }
      ]
    },
    "fstring-terminator-multi-tail": {
      begin: "((?:=?)(?:![rsa])?)(:)(?=.*?{)",
      beginCaptures: {
        1: { name: "storage.type.format.python" },
        2: { name: "storage.type.format.python" }
      },
      end: "(?=})",
      patterns: [
        { include: "#fstring-illegal-multi-brace" },
        { include: "#fstring-multi-brace" },
        { match: "([bcdeEfFgGnosxX%])(?=})", name: "storage.type.format.python" },
        { match: "(\\.\\d+)", name: "storage.type.format.python" },
        { match: "(,)", name: "storage.type.format.python" },
        { match: "(\\d+)", name: "storage.type.format.python" },
        { match: "(\\#)", name: "storage.type.format.python" },
        { match: "([-+ ])", name: "storage.type.format.python" },
        { match: "([<>=^])", name: "storage.type.format.python" },
        { match: "(\\w)", name: "storage.type.format.python" }
      ]
    },
    "fstring-terminator-single": {
      patterns: [
        { match: "(=(![rsa])?)(?=})", name: "storage.type.format.python" },
        { match: "(=?![rsa])(?=})", name: "storage.type.format.python" },
        {
          captures: {
            1: { name: "storage.type.format.python" },
            2: { name: "storage.type.format.python" }
          },
          match: "(?x)\n  ( (?: =?) (?: ![rsa])? )\n    ( : \\w? [<>=^]? [-+ ]? \\#?\n      \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})\n"
        },
        { include: "#fstring-terminator-single-tail" }
      ]
    },
    "fstring-terminator-single-tail": {
      begin: "((?:=?)(?:![rsa])?)(:)(?=.*?{)",
      beginCaptures: {
        1: { name: "storage.type.format.python" },
        2: { name: "storage.type.format.python" }
      },
      end: "(?=})|(?=\\n)",
      patterns: [
        { include: "#fstring-illegal-single-brace" },
        { include: "#fstring-single-brace" },
        { match: "([bcdeEfFgGnosxX%])(?=})", name: "storage.type.format.python" },
        { match: "(\\.\\d+)", name: "storage.type.format.python" },
        { match: "(,)", name: "storage.type.format.python" },
        { match: "(\\d+)", name: "storage.type.format.python" },
        { match: "(\\#)", name: "storage.type.format.python" },
        { match: "([-+ ])", name: "storage.type.format.python" },
        { match: "([<>=^])", name: "storage.type.format.python" },
        { match: "(\\w)", name: "storage.type.format.python" }
      ]
    },
    "function-arguments": {
      begin: "(\\()",
      beginCaptures: {
        1: { name: "punctuation.definition.arguments.begin.python" }
      },
      contentName: "meta.function-call.arguments.python",
      end: "(?=\\))(?!\\)\\s*\\()",
      patterns: [
        { match: "(,)", name: "punctuation.separator.arguments.python" },
        {
          captures: { 1: { name: "keyword.operator.unpacking.arguments.python" } },
          match: "(?x)\n  (?:(?<=[,(])|^) \\s* (\\*{1,2})\n"
        },
        { include: "#lambda-incomplete" },
        { include: "#illegal-names" },
        {
          captures: {
            1: { name: "variable.parameter.function-call.python" },
            2: { name: "keyword.operator.assignment.python" }
          },
          match: "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)"
        },
        { match: "=(?!=)", name: "keyword.operator.assignment.python" },
        { include: "#expression" },
        {
          captures: {
            1: { name: "punctuation.definition.arguments.end.python" },
            2: { name: "punctuation.definition.arguments.begin.python" }
          },
          match: "\\s*(\\))\\s*(\\()"
        }
      ]
    },
    "function-call": {
      begin: "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } },
      name: "meta.function-call.python",
      patterns: [
        { include: "#special-variables" },
        { include: "#function-name" },
        { include: "#function-arguments" }
      ]
    },
    "function-declaration": {
      begin: "(?x)\n  \\s*\n  (?:\\b(async) \\s+)? \\b(def)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n",
      beginCaptures: {
        1: { name: "storage.type.function.async.python" },
        2: { name: "storage.type.function.python" }
      },
      end: `(:|(?=[#'"\\n]))`,
      endCaptures: { 1: { name: "punctuation.section.function.begin.python" } },
      name: "meta.function.python",
      patterns: [
        { include: "#function-def-name" },
        { include: "#parameters" },
        { include: "#line-continuation" },
        { include: "#return-annotation" }
      ]
    },
    "function-def-name": {
      patterns: [
        { include: "#illegal-object-name" },
        { include: "#builtin-possible-callables" },
        {
          match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n",
          name: "entity.name.function.python"
        }
      ]
    },
    "function-name": {
      patterns: [
        { include: "#builtin-possible-callables" },
        {
          match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n",
          name: "meta.function-call.generic.python"
        }
      ]
    },
    generator: {
      begin: "\\bfor\\b",
      beginCaptures: { 0: { name: "keyword.control.flow.python" } },
      end: "\\bin\\b",
      endCaptures: { 0: { name: "keyword.control.flow.python" } },
      patterns: [{ include: "#expression" }]
    },
    "illegal-anno": { match: "->", name: "invalid.illegal.annotation.python" },
    "illegal-names": {
      captures: {
        1: { name: "keyword.control.flow.python" },
        2: { name: "keyword.control.import.python" }
      },
      match: "(?x)\n  \\b(?:\n    (\n      and | assert | async | await | break | class | continue | def\n      | del | elif | else | except | finally | for | from | global\n      | if | in | is | (?<=\\.)lambda | lambda(?=\\s*[\\.=])\n      | nonlocal | not | or | pass | raise | return | try | while | with\n      | yield\n    ) | (\n      as | import\n    )\n  )\\b\n"
    },
    "illegal-object-name": {
      match: "\\b(True|False|None)\\b",
      name: "keyword.illegal.name.python"
    },
    "illegal-operator": {
      patterns: [
        { match: "&&|\\|\\||--|\\+\\+", name: "invalid.illegal.operator.python" },
        { match: "[?$]", name: "invalid.illegal.operator.python" },
        { match: "!\\b", name: "invalid.illegal.operator.python" }
      ]
    },
    import: {
      patterns: [
        {
          begin: "\\b(?<!\\.)(from)\\b(?=.+import)",
          beginCaptures: { 1: { name: "keyword.control.import.python" } },
          end: "$|(?=import)",
          patterns: [
            { match: "\\.+", name: "punctuation.separator.period.python" },
            { include: "#expression" }
          ]
        },
        {
          begin: "\\b(?<!\\.)(import)\\b",
          beginCaptures: { 1: { name: "keyword.control.import.python" } },
          end: "$",
          patterns: [
            { match: "\\b(?<!\\.)as\\b", name: "keyword.control.import.python" },
            { include: "#expression" }
          ]
        }
      ]
    },
    impossible: { match: "$.^" },
    "inheritance-identifier": {
      captures: { 1: { name: "entity.other.inherited-class.python" } },
      match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
    },
    "inheritance-name": {
      patterns: [
        { include: "#lambda-incomplete" },
        { include: "#builtin-possible-callables" },
        { include: "#inheritance-identifier" }
      ]
    },
    "item-access": {
      patterns: [
        {
          begin: "(?x)\n  \\b(?=\n    [[:alpha:]_]\\w* \\s* \\[\n  )\n",
          end: "(\\])",
          endCaptures: {
            1: { name: "punctuation.definition.arguments.end.python" }
          },
          name: "meta.item-access.python",
          patterns: [
            { include: "#item-name" },
            { include: "#item-index" },
            { include: "#expression" }
          ]
        }
      ]
    },
    "item-index": {
      begin: "(\\[)",
      beginCaptures: {
        1: { name: "punctuation.definition.arguments.begin.python" }
      },
      contentName: "meta.item-access.arguments.python",
      end: "(?=\\])",
      patterns: [
        { match: ":", name: "punctuation.separator.slice.python" },
        { include: "#expression" }
      ]
    },
    "item-name": {
      patterns: [
        { include: "#special-variables" },
        { include: "#builtin-functions" },
        { include: "#special-names" },
        {
          match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n",
          name: "meta.indexed-name.python"
        }
      ]
    },
    lambda: {
      patterns: [
        {
          captures: { 1: { name: "keyword.control.flow.python" } },
          match: "((?<=\\.)lambda|lambda(?=\\s*[\\.=]))"
        },
        {
          captures: { 1: { name: "storage.type.function.lambda.python" } },
          match: "\\b(lambda)\\s*?(?=[,\\n]|$)"
        },
        {
          begin: "(?x)\n  \\b (lambda) \\b\n",
          beginCaptures: { 1: { name: "storage.type.function.lambda.python" } },
          contentName: "meta.function.lambda.parameters.python",
          end: "(:)|(\\n)",
          endCaptures: {
            1: { name: "punctuation.section.function.lambda.begin.python" }
          },
          name: "meta.lambda-function.python",
          patterns: [
            { match: "/", name: "keyword.operator.positional.parameter.python" },
            {
              match: "(\\*\\*|\\*)",
              name: "keyword.operator.unpacking.parameter.python"
            },
            { include: "#lambda-nested-incomplete" },
            { include: "#illegal-names" },
            {
              captures: {
                1: { name: "variable.parameter.function.language.python" },
                2: { name: "punctuation.separator.parameters.python" }
              },
              match: "([[:alpha:]_]\\w*)\\s*(?:(,)|(?=:|$))"
            },
            { include: "#comments" },
            { include: "#backticks" },
            { include: "#illegal-anno" },
            { include: "#lambda-parameter-with-default" },
            { include: "#line-continuation" },
            { include: "#illegal-operator" }
          ]
        }
      ]
    },
    "lambda-incomplete": {
      match: "\\blambda(?=\\s*[,)])",
      name: "storage.type.function.lambda.python"
    },
    "lambda-nested-incomplete": {
      match: "\\blambda(?=\\s*[:,)])",
      name: "storage.type.function.lambda.python"
    },
    "lambda-parameter-with-default": {
      begin: "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (=)\n",
      beginCaptures: {
        1: { name: "variable.parameter.function.language.python" },
        2: { name: "keyword.operator.python" }
      },
      end: "(,)|(?=:|$)",
      endCaptures: { 1: { name: "punctuation.separator.parameters.python" } },
      patterns: [{ include: "#expression" }]
    },
    "line-continuation": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.separator.continuation.line.python" },
            2: { name: "invalid.illegal.line.continuation.python" }
          },
          match: "(\\\\)\\s*(\\S.*$\\n?)"
        },
        {
          begin: "(\\\\)\\s*$\\n?",
          beginCaptures: {
            1: { name: "punctuation.separator.continuation.line.python" }
          },
          end: `(?x)
  (?=^\\s*$)
  |
  (?! (\\s* [rR]? (\\'\\'\\'|\\"\\"\\"|\\'|\\"))
      |
      (\\G $)  (?# '\\G' is necessary for ST)
  )
`,
          patterns: [{ include: "#regexp" }, { include: "#string" }]
        }
      ]
    },
    list: {
      begin: "\\[",
      beginCaptures: { 0: { name: "punctuation.definition.list.begin.python" } },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.definition.list.end.python" } },
      patterns: [{ include: "#expression" }]
    },
    literal: {
      patterns: [
        {
          match: "\\b(True|False|None|NotImplemented|Ellipsis)\\b",
          name: "constant.language.python"
        },
        { include: "#number" }
      ]
    },
    "loose-default": {
      begin: "(=)",
      beginCaptures: { 1: { name: "keyword.operator.python" } },
      end: "(,)|(?=\\))",
      endCaptures: { 1: { name: "punctuation.separator.parameters.python" } },
      patterns: [{ include: "#expression" }]
    },
    "magic-function-names": {
      captures: { 1: { name: "support.function.magic.python" } },
      match: "(?x)\n  \\b(\n    __(?:\n      abs | add | aenter | aexit | aiter | and | anext\n      | await | bool | call | ceil | class_getitem\n      | cmp | coerce | complex | contains | copy\n      | deepcopy | del | delattr | delete | delitem\n      | delslice | dir | div | divmod | enter | eq\n      | exit | float | floor | floordiv | format | ge\n      | get | getattr | getattribute | getinitargs\n      | getitem | getnewargs | getslice | getstate | gt\n      | hash | hex | iadd | iand | idiv | ifloordiv |\n      | ilshift | imod | imul | index | init\n      | instancecheck | int | invert | ior | ipow\n      | irshift | isub | iter | itruediv | ixor | le\n      | len | long | lshift | lt | missing | mod | mul\n      | ne | neg | new | next | nonzero | oct | or | pos\n      | pow | radd | rand | rdiv | rdivmod | reduce\n      | reduce_ex | repr | reversed | rfloordiv |\n      | rlshift | rmod | rmul | ror | round | rpow\n      | rrshift | rshift | rsub | rtruediv | rxor | set\n      | setattr | setitem | set_name | setslice\n      | setstate | sizeof | str | sub | subclasscheck\n      | truediv | trunc | unicode | xor | matmul\n      | rmatmul | imatmul | init_subclass | set_name\n      | fspath | bytes | prepare | length_hint\n    )__\n  )\\b\n"
    },
    "magic-names": {
      patterns: [
        { include: "#magic-function-names" },
        { include: "#magic-variable-names" }
      ]
    },
    "magic-variable-names": {
      captures: { 1: { name: "support.variable.magic.python" } },
      match: "(?x)\n  \\b(\n    __(?:\n      all | annotations | bases | builtins | class\n      | closure | code | debug | defaults | dict | doc | file | func\n      | globals | kwdefaults | match_args | members | metaclass | methods\n      | module | mro | mro_entries | name | qualname | post_init | self\n      | signature | slots | subclasses | version | weakref | wrapped\n      | classcell | spec | path | package | future | traceback\n    )__\n  )\\b\n"
    },
    "member-access": {
      begin: "(\\.)\\s*(?!\\.)",
      beginCaptures: { 1: { name: "punctuation.separator.period.python" } },
      end: "(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?<=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?<=\\s))(?=[^\\\\\\w\\s]) |\n  $\n",
      name: "meta.member.access.python",
      patterns: [
        { include: "#function-call" },
        { include: "#member-access-base" },
        { include: "#member-access-attribute" }
      ]
    },
    "member-access-attribute": {
      match: "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n",
      name: "meta.attribute.python"
    },
    "member-access-base": {
      patterns: [
        { include: "#magic-names" },
        { include: "#illegal-names" },
        { include: "#illegal-object-name" },
        { include: "#special-names" },
        { include: "#line-continuation" },
        { include: "#item-access" }
      ]
    },
    "member-access-class": {
      begin: "(\\.)\\s*(?!\\.)",
      beginCaptures: { 1: { name: "punctuation.separator.period.python" } },
      end: "(?<=\\S)(?=\\W)|$",
      name: "meta.member.access.python",
      patterns: [
        { include: "#call-wrapper-inheritance" },
        { include: "#member-access-base" },
        { include: "#inheritance-identifier" }
      ]
    },
    number: {
      name: "constant.numeric.python",
      patterns: [
        { include: "#number-float" },
        { include: "#number-dec" },
        { include: "#number-hex" },
        { include: "#number-oct" },
        { include: "#number-bin" },
        { include: "#number-long" },
        { match: "\\b[0-9]+\\w+", name: "invalid.illegal.name.python" }
      ]
    },
    "number-bin": {
      captures: { 1: { name: "storage.type.number.python" } },
      match: "(?x)\n  (?<![\\w\\.])\n    (0[bB]) (_?[01])+\n  \\b\n",
      name: "constant.numeric.bin.python"
    },
    "number-dec": {
      captures: {
        1: { name: "storage.type.imaginary.number.python" },
        2: { name: "invalid.illegal.dec.python" }
      },
      match: "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
      name: "constant.numeric.dec.python"
    },
    "number-float": {
      captures: { 1: { name: "storage.type.imaginary.number.python" } },
      match: "(?x)\n  (?<! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n",
      name: "constant.numeric.float.python"
    },
    "number-hex": {
      captures: { 1: { name: "storage.type.number.python" } },
      match: "(?x)\n  (?<![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n",
      name: "constant.numeric.hex.python"
    },
    "number-long": {
      captures: { 2: { name: "storage.type.number.python" } },
      match: "(?x)\n  (?<![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n",
      name: "constant.numeric.bin.python"
    },
    "number-oct": {
      captures: { 1: { name: "storage.type.number.python" } },
      match: "(?x)\n  (?<![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n",
      name: "constant.numeric.oct.python"
    },
    "odd-function-call": {
      begin: "(?x)\n  (?<= \\] | \\) ) \\s*\n  (?=\\()\n",
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.definition.arguments.end.python" } },
      patterns: [{ include: "#function-arguments" }]
    },
    operator: {
      captures: {
        1: { name: "keyword.operator.logical.python" },
        2: { name: "keyword.control.flow.python" },
        3: { name: "keyword.operator.bitwise.python" },
        4: { name: "keyword.operator.arithmetic.python" },
        5: { name: "keyword.operator.comparison.python" },
        6: { name: "keyword.operator.assignment.python" }
      },
      match: "(?x)\n    \\b(?<!\\.)\n      (?:\n        (and | or | not | in | is)                         (?# 1)\n        |\n        (for | if | else | await | (?:yield(?:\\s+from)?))  (?# 2)\n      )\n    (?!\\s*:)\\b\n\n    | (<< | >> | & | \\| | \\^ | ~)                          (?# 3)\n\n    | (\\*\\* | \\* | \\+ | - | % | // | / | @)                (?# 4)\n\n    | (!= | == | >= | <= | < | >)                          (?# 5)\n\n    | (:=)                                                 (?# 6)\n"
    },
    "parameter-special": {
      captures: {
        1: { name: "variable.parameter.function.language.python" },
        2: { name: "variable.parameter.function.language.special.self.python" },
        3: { name: "variable.parameter.function.language.special.cls.python" },
        4: { name: "punctuation.separator.parameters.python" }
      },
      match: "(?x)\n  \\b ((self)|(cls)) \\b \\s*(?:(,)|(?=\\)))\n"
    },
    parameters: {
      begin: "(\\()",
      beginCaptures: {
        1: { name: "punctuation.definition.parameters.begin.python" }
      },
      end: "(\\))",
      endCaptures: { 1: { name: "punctuation.definition.parameters.end.python" } },
      name: "meta.function.parameters.python",
      patterns: [
        { match: "/", name: "keyword.operator.positional.parameter.python" },
        {
          match: "(\\*\\*|\\*)",
          name: "keyword.operator.unpacking.parameter.python"
        },
        { include: "#lambda-incomplete" },
        { include: "#illegal-names" },
        { include: "#illegal-object-name" },
        { include: "#parameter-special" },
        {
          captures: {
            1: { name: "variable.parameter.function.language.python" },
            2: { name: "punctuation.separator.parameters.python" }
          },
          match: "(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n"
        },
        { include: "#comments" },
        { include: "#loose-default" },
        { include: "#annotated-parameter" }
      ]
    },
    punctuation: {
      patterns: [
        { match: ":", name: "punctuation.separator.colon.python" },
        { match: ",", name: "punctuation.separator.element.python" }
      ]
    },
    regexp: {
      patterns: [
        { include: "#regexp-single-three-line" },
        { include: "#regexp-double-three-line" },
        { include: "#regexp-single-one-line" },
        { include: "#regexp-double-one-line" }
      ]
    },
    "regexp-backreference": {
      captures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp"
        },
        2: { name: "entity.name.tag.named.backreference.regexp" },
        3: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp"
        }
      },
      match: "(?x)\n  (\\()  (\\?P= \\w+(?:\\s+[[:alnum:]]+)?)  (\\))\n",
      name: "meta.backreference.named.regexp"
    },
    "regexp-backreference-number": {
      captures: { 1: { name: "entity.name.tag.backreference.regexp" } },
      match: "(\\\\[1-9]\\d?)",
      name: "meta.backreference.regexp"
    },
    "regexp-base-common": {
      patterns: [
        { match: "\\.", name: "support.other.match.any.regexp" },
        { match: "\\^", name: "support.other.match.begin.regexp" },
        { match: "\\$", name: "support.other.match.end.regexp" },
        { match: "[+*?]\\??", name: "keyword.operator.quantifier.regexp" },
        { match: "\\|", name: "keyword.operator.disjunction.regexp" },
        { include: "#regexp-escape-sequence" }
      ]
    },
    "regexp-base-expression": {
      patterns: [
        { include: "#regexp-quantifier" },
        { include: "#regexp-base-common" }
      ]
    },
    "regexp-charecter-set-escapes": {
      patterns: [
        { match: "\\\\[abfnrtv\\\\]", name: "constant.character.escape.regexp" },
        { include: "#regexp-escape-special" },
        { match: "\\\\([0-7]{1,3})", name: "constant.character.escape.regexp" },
        { include: "#regexp-escape-character" },
        { include: "#regexp-escape-unicode" },
        { include: "#regexp-escape-catchall" }
      ]
    },
    "regexp-double-one-line": {
      begin: '\\b(([uU]r)|([bB]r)|(r[bB]?))(")',
      beginCaptures: {
        2: { name: "invalid.deprecated.prefix.python" },
        3: { name: "storage.type.string.python" },
        4: { name: "storage.type.string.python" },
        5: { name: "punctuation.definition.string.begin.python" }
      },
      end: '(")|(?<!\\\\)(\\n)',
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.regexp.quoted.single.python",
      patterns: [{ include: "#double-one-regexp-expression" }]
    },
    "regexp-double-three-line": {
      begin: '\\b(([uU]r)|([bB]r)|(r[bB]?))(""")',
      beginCaptures: {
        2: { name: "invalid.deprecated.prefix.python" },
        3: { name: "storage.type.string.python" },
        4: { name: "storage.type.string.python" },
        5: { name: "punctuation.definition.string.begin.python" }
      },
      end: '(""")',
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.regexp.quoted.multi.python",
      patterns: [{ include: "#double-three-regexp-expression" }]
    },
    "regexp-escape-catchall": {
      match: "\\\\(.|\\n)",
      name: "constant.character.escape.regexp"
    },
    "regexp-escape-character": {
      match: "(?x)\n  \\\\ (\n        x[0-9A-Fa-f]{2}\n        | 0[0-7]{1,2}\n        | [0-7]{3}\n     )\n",
      name: "constant.character.escape.regexp"
    },
    "regexp-escape-sequence": {
      patterns: [
        { include: "#regexp-escape-special" },
        { include: "#regexp-escape-character" },
        { include: "#regexp-escape-unicode" },
        { include: "#regexp-backreference-number" },
        { include: "#regexp-escape-catchall" }
      ]
    },
    "regexp-escape-special": {
      match: "\\\\([AbBdDsSwWZ])",
      name: "support.other.escape.special.regexp"
    },
    "regexp-escape-unicode": {
      match: "(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n     )\n",
      name: "constant.character.unicode.regexp"
    },
    "regexp-flags": {
      match: "\\(\\?[aiLmsux]+\\)",
      name: "storage.modifier.flag.regexp"
    },
    "regexp-quantifier": {
      match: "(?x)\n  \\{(\n    \\d+ | \\d+,(\\d+)? | ,\\d+\n  )\\}\n",
      name: "keyword.operator.quantifier.regexp"
    },
    "regexp-single-one-line": {
      begin: "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\')",
      beginCaptures: {
        2: { name: "invalid.deprecated.prefix.python" },
        3: { name: "storage.type.string.python" },
        4: { name: "storage.type.string.python" },
        5: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\')|(?<!\\\\)(\\n)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.regexp.quoted.single.python",
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "regexp-single-three-line": {
      begin: "\\b(([uU]r)|([bB]r)|(r[bB]?))(\\'\\'\\')",
      beginCaptures: {
        2: { name: "invalid.deprecated.prefix.python" },
        3: { name: "storage.type.string.python" },
        4: { name: "storage.type.string.python" },
        5: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\'\\'\\')",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.regexp.quoted.multi.python",
      patterns: [{ include: "#single-three-regexp-expression" }]
    },
    "return-annotation": {
      begin: "(->)",
      beginCaptures: {
        1: { name: "punctuation.separator.annotation.result.python" }
      },
      end: "(?=:)",
      patterns: [{ include: "#expression" }]
    },
    "round-braces": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.parenthesis.begin.python" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.parenthesis.end.python" } },
      patterns: [{ include: "#expression" }]
    },
    semicolon: {
      patterns: [{ match: "\\;$", name: "invalid.deprecated.semicolon.python" }]
    },
    "single-one-regexp-character-set": {
      patterns: [
        { match: "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n" },
        {
          begin: "(\\[)(\\^)?(\\])?",
          beginCaptures: {
            1: {
              name: "punctuation.character.set.begin.regexp constant.other.set.regexp"
            },
            2: { name: "keyword.operator.negation.regexp" },
            3: { name: "constant.character.set.regexp" }
          },
          end: "(\\]|(?=\\'))|((?=(?<!\\\\)\\n))",
          endCaptures: {
            1: {
              name: "punctuation.character.set.end.regexp constant.other.set.regexp"
            },
            2: { name: "invalid.illegal.newline.python" }
          },
          name: "meta.character.set.regexp",
          patterns: [
            { include: "#regexp-charecter-set-escapes" },
            { match: "[^\\n]", name: "constant.character.set.regexp" }
          ]
        }
      ]
    },
    "single-one-regexp-comments": {
      begin: "\\(\\?#",
      beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: { name: "punctuation.comment.end.regexp" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "comment.regexp",
      patterns: [{ include: "#codetags" }]
    },
    "single-one-regexp-conditional": {
      begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
      beginCaptures: {
        0: { name: "keyword.operator.conditional.regexp" },
        1: { name: "punctuation.parenthesis.conditional.begin.regexp" }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-expression": {
      patterns: [
        { include: "#regexp-base-expression" },
        { include: "#single-one-regexp-character-set" },
        { include: "#single-one-regexp-comments" },
        { include: "#regexp-flags" },
        { include: "#single-one-regexp-named-group" },
        { include: "#regexp-backreference" },
        { include: "#single-one-regexp-lookahead" },
        { include: "#single-one-regexp-lookahead-negative" },
        { include: "#single-one-regexp-lookbehind" },
        { include: "#single-one-regexp-lookbehind-negative" },
        { include: "#single-one-regexp-conditional" },
        { include: "#single-one-regexp-parentheses-non-capturing" },
        { include: "#single-one-regexp-parentheses" }
      ]
    },
    "single-one-regexp-lookahead": {
      begin: "(\\()\\?=",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-lookahead-negative": {
      begin: "(\\()\\?!",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-lookbehind": {
      begin: "(\\()\\?<=",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-lookbehind-negative": {
      begin: "(\\()\\?<!",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-named-group": {
      begin: "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
      beginCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"
        },
        2: { name: "entity.name.tag.named.group.regexp" }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.named.regexp",
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-parentheses": {
      begin: "\\(",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"
        }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-one-regexp-parentheses-non-capturing": {
      begin: "\\(\\?:",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"
        }
      },
      end: "(\\)|(?=\\'))|((?=(?<!\\\\)\\n))",
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [{ include: "#single-one-regexp-expression" }]
    },
    "single-three-regexp-character-set": {
      patterns: [
        { match: "(?x)\n  \\[ \\^? \\] (?! .*?\\])\n" },
        {
          begin: "(\\[)(\\^)?(\\])?",
          beginCaptures: {
            1: {
              name: "punctuation.character.set.begin.regexp constant.other.set.regexp"
            },
            2: { name: "keyword.operator.negation.regexp" },
            3: { name: "constant.character.set.regexp" }
          },
          end: "(\\]|(?=\\'\\'\\'))",
          endCaptures: {
            1: {
              name: "punctuation.character.set.end.regexp constant.other.set.regexp"
            },
            2: { name: "invalid.illegal.newline.python" }
          },
          name: "meta.character.set.regexp",
          patterns: [
            { include: "#regexp-charecter-set-escapes" },
            { match: "[^\\n]", name: "constant.character.set.regexp" }
          ]
        }
      ]
    },
    "single-three-regexp-comments": {
      begin: "\\(\\?#",
      beginCaptures: { 0: { name: "punctuation.comment.begin.regexp" } },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: { name: "punctuation.comment.end.regexp" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "comment.regexp",
      patterns: [{ include: "#codetags" }]
    },
    "single-three-regexp-conditional": {
      begin: "(\\()\\?\\((\\w+(?:\\s+[[:alnum:]]+)?|\\d+)\\)",
      beginCaptures: {
        0: { name: "keyword.operator.conditional.regexp" },
        1: { name: "punctuation.parenthesis.conditional.begin.regexp" }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-expression": {
      patterns: [
        { include: "#regexp-base-expression" },
        { include: "#single-three-regexp-character-set" },
        { include: "#single-three-regexp-comments" },
        { include: "#regexp-flags" },
        { include: "#single-three-regexp-named-group" },
        { include: "#regexp-backreference" },
        { include: "#single-three-regexp-lookahead" },
        { include: "#single-three-regexp-lookahead-negative" },
        { include: "#single-three-regexp-lookbehind" },
        { include: "#single-three-regexp-lookbehind-negative" },
        { include: "#single-three-regexp-conditional" },
        { include: "#single-three-regexp-parentheses-non-capturing" },
        { include: "#single-three-regexp-parentheses" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-lookahead": {
      begin: "(\\()\\?=",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-lookahead-negative": {
      begin: "(\\()\\?!",
      beginCaptures: {
        0: { name: "keyword.operator.lookahead.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookahead.begin.regexp" }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-lookbehind": {
      begin: "(\\()\\?<=",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-lookbehind-negative": {
      begin: "(\\()\\?<!",
      beginCaptures: {
        0: { name: "keyword.operator.lookbehind.negative.regexp" },
        1: { name: "punctuation.parenthesis.lookbehind.begin.regexp" }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-named-group": {
      begin: "(?x)\n  (\\()  (\\?P <\\w+(?:\\s+[[:alnum:]]+)?>)\n",
      beginCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp"
        },
        2: { name: "entity.name.tag.named.group.regexp" }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "meta.named.regexp",
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-parentheses": {
      begin: "\\(",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp"
        }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "single-three-regexp-parentheses-non-capturing": {
      begin: "\\(\\?:",
      beginCaptures: {
        0: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp"
        }
      },
      end: "(\\)|(?=\\'\\'\\'))",
      endCaptures: {
        1: {
          name: "support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp"
        },
        2: { name: "invalid.illegal.newline.python" }
      },
      patterns: [
        { include: "#single-three-regexp-expression" },
        { include: "#comments-string-single-three" }
      ]
    },
    "special-names": {
      match: '(?x)\n  \\b\n    # we want to see "enough", meaning 2 or more upper-case\n    # letters in the beginning of the constant\n    #\n    # for more details refer to:\n    #   https://github.com/MagicStack/MagicPython/issues/42\n    (\n      _* [[:upper:]] [_\\d]* [[:upper:]]\n    )\n    [[:upper:]\\d]* (_\\w*)?\n  \\b\n',
      name: "constant.other.caps.python"
    },
    "special-variables": {
      captures: {
        1: { name: "variable.language.special.self.python" },
        2: { name: "variable.language.special.cls.python" }
      },
      match: "(?x)\n  \\b (?<!\\.) (?:\n    (self) | (cls)\n  )\\b\n"
    },
    statement: {
      patterns: [
        { include: "#import" },
        { include: "#class-declaration" },
        { include: "#function-declaration" },
        { include: "#generator" },
        { include: "#statement-keyword" },
        { include: "#assignment-operator" },
        { include: "#decorator" },
        { include: "#docstring-statement" },
        { include: "#semicolon" }
      ]
    },
    "statement-keyword": {
      patterns: [
        {
          match: "\\b((async\\s+)?\\s*def)\\b",
          name: "storage.type.function.python"
        },
        {
          match: "\\b(?<!\\.)as\\b(?=.*[:\\\\])",
          name: "keyword.control.flow.python"
        },
        { match: "\\b(?<!\\.)as\\b", name: "keyword.control.import.python" },
        {
          match: "(?x)\n  \\b(?<!\\.)(\n    async | continue | del | assert | break | finally | for\n    | from | elif | else | if | except | pass | raise\n    | return | try | while | with\n  )\\b\n",
          name: "keyword.control.flow.python"
        },
        {
          match: "(?x)\n  \\b(?<!\\.)(\n    global | nonlocal\n  )\\b\n",
          name: "storage.modifier.declaration.python"
        },
        { match: "\\b(?<!\\.)(class)\\b", name: "storage.type.class.python" },
        {
          captures: { 1: { name: "keyword.control.flow.python" } },
          match: `(?x)
  ^\\s*(
    case | match
  )(?=\\s*([-+\\w\\d(\\[{'":#]|$))\\b
`
        }
      ]
    },
    string: {
      patterns: [
        { include: "#string-quoted-multi-line" },
        { include: "#string-quoted-single-line" },
        { include: "#string-bin-quoted-multi-line" },
        { include: "#string-bin-quoted-single-line" },
        { include: "#string-raw-quoted-multi-line" },
        { include: "#string-raw-quoted-single-line" },
        { include: "#string-raw-bin-quoted-multi-line" },
        { include: "#string-raw-bin-quoted-single-line" },
        { include: "#fstring-fnorm-quoted-multi-line" },
        { include: "#fstring-fnorm-quoted-single-line" },
        { include: "#fstring-normf-quoted-multi-line" },
        { include: "#fstring-normf-quoted-single-line" },
        { include: "#fstring-raw-quoted-multi-line" },
        { include: "#fstring-raw-quoted-single-line" }
      ]
    },
    "string-bin-quoted-multi-line": {
      begin: `(\\b[bB])('''|""")`,
      beginCaptures: {
        1: { name: "storage.type.string.python" },
        2: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\2)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.binary.multi.python",
      patterns: [{ include: "#string-entity" }]
    },
    "string-bin-quoted-single-line": {
      begin: `(\\b[bB])((['"]))`,
      beginCaptures: {
        1: { name: "storage.type.string.python" },
        2: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\2)|((?<!\\\\)\\n)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.binary.single.python",
      patterns: [{ include: "#string-entity" }]
    },
    "string-brace-formatting": {
      patterns: [
        {
          captures: {
            1: { name: "constant.character.format.placeholder.other.python" },
            3: { name: "storage.type.format.python" },
            4: { name: "storage.type.format.python" }
          },
          match: `(?x)
  (
    {{ | }}
    | (?:
      {
        \\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'"]+\\])*
        (![rsa])?
        ( : \\w? [<>=^]? [-+ ]? \\#?
          \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )?
      })
  )
`,
          name: "meta.format.brace.python"
        },
        {
          captures: {
            1: { name: "constant.character.format.placeholder.other.python" },
            3: { name: "storage.type.format.python" },
            4: { name: "storage.type.format.python" }
          },
          match: `(?x)
  (
    {
      \\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'"]+\\])*
      (![rsa])?
      (:)
        [^'"{}\\n]* (?:
          \\{ [^'"}\\n]*? \\} [^'"{}\\n]*
        )*
    }
  )
`,
          name: "meta.format.brace.python"
        }
      ]
    },
    "string-consume-escape": { match: `\\\\['"\\n\\\\]` },
    "string-entity": {
      patterns: [
        { include: "#escape-sequence" },
        { include: "#string-line-continuation" },
        { include: "#string-formatting" }
      ]
    },
    "string-formatting": {
      captures: {
        1: { name: "constant.character.format.placeholder.other.python" }
      },
      match: "(?x)\n  (\n    % (\\([\\w\\s]*\\))?\n      [-+#0 ]*\n      (\\d+|\\*)? (\\.(\\d+|\\*))?\n      ([hlL])?\n      [diouxXeEfFgGcrsab%]\n  )\n",
      name: "meta.format.percent.python"
    },
    "string-line-continuation": {
      match: "\\\\$",
      name: "constant.language.python"
    },
    "string-multi-bad-brace1-formatting-raw": {
      begin: `(?x)
    (?= \\{%
          ( .*? (?!'''|""") )
        %\\}
    )
`,
      end: `(?='''|""")`,
      patterns: [{ include: "#string-consume-escape" }]
    },
    "string-multi-bad-brace1-formatting-unicode": {
      begin: `(?x)
    (?= \\{%
          ( .*? (?!'''|""") )
        %\\}
    )
`,
      end: `(?='''|""")`,
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#escape-sequence" },
        { include: "#string-line-continuation" }
      ]
    },
    "string-multi-bad-brace2-formatting-raw": {
      begin: `(?x)
    (?!\\{\\{)
    (?= \\{ (
              \\w*? (?!'''|""") [^!:\\.\\[}\\w]
           )
        .*?(?!'''|""")
        \\}
    )
`,
      end: `(?='''|""")`,
      patterns: [
        { include: "#string-consume-escape" },
        { include: "#string-formatting" }
      ]
    },
    "string-multi-bad-brace2-formatting-unicode": {
      begin: `(?x)
    (?!\\{\\{)
    (?= \\{ (
              \\w*? (?!'''|""") [^!:\\.\\[}\\w]
           )
        .*?(?!'''|""")
        \\}
    )
`,
      end: `(?='''|""")`,
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#string-entity" }
      ]
    },
    "string-quoted-multi-line": {
      begin: `(?:\\b([rR])(?=[uU]))?([uU])?('''|""")`,
      beginCaptures: {
        1: { name: "invalid.illegal.prefix.python" },
        2: { name: "storage.type.string.python" },
        3: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\3)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.multi.python",
      patterns: [
        { include: "#string-multi-bad-brace1-formatting-unicode" },
        { include: "#string-multi-bad-brace2-formatting-unicode" },
        { include: "#string-unicode-guts" }
      ]
    },
    "string-quoted-single-line": {
      begin: `(?:\\b([rR])(?=[uU]))?([uU])?((['"]))`,
      beginCaptures: {
        1: { name: "invalid.illegal.prefix.python" },
        2: { name: "storage.type.string.python" },
        3: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\3)|((?<!\\\\)\\n)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.single.python",
      patterns: [
        { include: "#string-single-bad-brace1-formatting-unicode" },
        { include: "#string-single-bad-brace2-formatting-unicode" },
        { include: "#string-unicode-guts" }
      ]
    },
    "string-raw-bin-guts": {
      patterns: [
        { include: "#string-consume-escape" },
        { include: "#string-formatting" }
      ]
    },
    "string-raw-bin-quoted-multi-line": {
      begin: `(\\b(?:R[bB]|[bB]R))('''|""")`,
      beginCaptures: {
        1: { name: "storage.type.string.python" },
        2: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\2)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.raw.binary.multi.python",
      patterns: [{ include: "#string-raw-bin-guts" }]
    },
    "string-raw-bin-quoted-single-line": {
      begin: `(\\b(?:R[bB]|[bB]R))((['"]))`,
      beginCaptures: {
        1: { name: "storage.type.string.python" },
        2: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\2)|((?<!\\\\)\\n)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.raw.binary.single.python",
      patterns: [{ include: "#string-raw-bin-guts" }]
    },
    "string-raw-guts": {
      patterns: [
        { include: "#string-consume-escape" },
        { include: "#string-formatting" },
        { include: "#string-brace-formatting" }
      ]
    },
    "string-raw-quoted-multi-line": {
      begin: `\\b(([uU]R)|(R))('''|""")`,
      beginCaptures: {
        2: { name: "invalid.deprecated.prefix.python" },
        3: { name: "storage.type.string.python" },
        4: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\4)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.raw.multi.python",
      patterns: [
        { include: "#string-multi-bad-brace1-formatting-raw" },
        { include: "#string-multi-bad-brace2-formatting-raw" },
        { include: "#string-raw-guts" }
      ]
    },
    "string-raw-quoted-single-line": {
      begin: `\\b(([uU]R)|(R))((['"]))`,
      beginCaptures: {
        2: { name: "invalid.deprecated.prefix.python" },
        3: { name: "storage.type.string.python" },
        4: { name: "punctuation.definition.string.begin.python" }
      },
      end: "(\\4)|((?<!\\\\)\\n)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.python" },
        2: { name: "invalid.illegal.newline.python" }
      },
      name: "string.quoted.raw.single.python",
      patterns: [
        { include: "#string-single-bad-brace1-formatting-raw" },
        { include: "#string-single-bad-brace2-formatting-raw" },
        { include: "#string-raw-guts" }
      ]
    },
    "string-single-bad-brace1-formatting-raw": {
      begin: `(?x)
    (?= \\{%
          ( .*? (?!(['"])|((?<!\\\\)\\n)) )
        %\\}
    )
`,
      end: `(?=(['"])|((?<!\\\\)\\n))`,
      patterns: [{ include: "#string-consume-escape" }]
    },
    "string-single-bad-brace1-formatting-unicode": {
      begin: `(?x)
    (?= \\{%
          ( .*? (?!(['"])|((?<!\\\\)\\n)) )
        %\\}
    )
`,
      end: `(?=(['"])|((?<!\\\\)\\n))`,
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#escape-sequence" },
        { include: "#string-line-continuation" }
      ]
    },
    "string-single-bad-brace2-formatting-raw": {
      begin: `(?x)
    (?!\\{\\{)
    (?= \\{ (
              \\w*? (?!(['"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]
           )
        .*?(?!(['"])|((?<!\\\\)\\n))
        \\}
    )
`,
      end: `(?=(['"])|((?<!\\\\)\\n))`,
      patterns: [
        { include: "#string-consume-escape" },
        { include: "#string-formatting" }
      ]
    },
    "string-single-bad-brace2-formatting-unicode": {
      begin: `(?x)
    (?!\\{\\{)
    (?= \\{ (
              \\w*? (?!(['"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]
           )
        .*?(?!(['"])|((?<!\\\\)\\n))
        \\}
    )
`,
      end: `(?=(['"])|((?<!\\\\)\\n))`,
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#string-entity" }
      ]
    },
    "string-unicode-guts": {
      patterns: [
        { include: "#escape-sequence-unicode" },
        { include: "#string-entity" },
        { include: "#string-brace-formatting" }
      ]
    }
  },
  scopeName: "source.python"
};
var source_python_default = grammar21;

// node_modules/@wooorm/starry-night/lang/source.r.js
var grammar22 = {
  extensions: [".r", ".rd", ".rsx"],
  names: ["r", "rscript", "splus"],
  patterns: [
    {
      captures: {
        1: { name: "comment.line.pragma.r" },
        2: { name: "entity.name.pragma.name.r" }
      },
      match: "^(#pragma[ \\t]+mark)[ \\t](.*)",
      name: "comment.line.pragma-mark.r"
    },
    {
      begin: "(^[ \\t]+)?(?=#)",
      beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.r" } },
      end: "(?!\\G)",
      patterns: [
        {
          begin: "#",
          beginCaptures: { 0: { name: "punctuation.definition.comment.r" } },
          end: "\\n",
          name: "comment.line.number-sign.r"
        }
      ]
    },
    {
      match: "\\b(logical|numeric|character|complex|matrix|array|data\\.frame|list|factor)(?=\\s*\\()",
      name: "storage.type.r"
    },
    {
      match: "\\b(function|if|break|next|repeat|else|for|return|switch|while|in|invisible)\\b",
      name: "keyword.control.r"
    },
    {
      match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(i|L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
      name: "constant.numeric.r"
    },
    {
      match: "\\b(T|F|TRUE|FALSE|NULL|NA|Inf|NaN)\\b",
      name: "constant.language.r"
    },
    {
      match: "\\b(pi|letters|LETTERS|month\\.abb|month\\.name)\\b",
      name: "support.constant.misc.r"
    },
    {
      match: "(\\-|\\+|\\*|\\/|%\\/%|%%|%\\*%|%in%|%o%|%x%|\\^)",
      name: "keyword.operator.arithmetic.r"
    },
    { match: "(=|<-|<<-|->|->>)", name: "keyword.operator.assignment.r" },
    { match: "(==|!=|<>|<|>|<=|>=)", name: "keyword.operator.comparison.r" },
    { match: "(!|&{1,2}|[|]{1,2})", name: "keyword.operator.logical.r" },
    { match: "(\\.\\.\\.|\\$|@|:|\\~)", name: "keyword.other.r" },
    {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.r" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.r" } },
      name: "string.quoted.double.r",
      patterns: [{ match: "\\\\.", name: "constant.character.escape.r" }]
    },
    {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.r" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.r" } },
      name: "string.quoted.single.r",
      patterns: [{ match: "\\\\.", name: "constant.character.escape.r" }]
    },
    {
      captures: {
        1: { name: "entity.name.function.r" },
        2: { name: "keyword.operator.assignment.r" },
        3: { name: "keyword.control.r" }
      },
      match: "((?:`[^`\\\\]*(?:\\\\.[^`\\\\]*)*`)|(?:[[:alpha:].][[:alnum:]._]*))\\s*(<?<-|=(?!=))\\s*(function)",
      name: "meta.function.r"
    },
    {
      captures: {
        1: { name: "entity.name.tag.r" },
        4: { name: "entity.name.type.r" }
      },
      match: '(setMethod|setReplaceMethod|setGeneric|setGroupGeneric|setClass)\\s*\\(\\s*([[:alpha:]\\d]+\\s*=\\s*)?("|\\x{27})([a-zA-Z._\\[\\$@][a-zA-Z0-9._\\[]*?)\\3.*',
      name: "meta.method.declaration.r"
    },
    {
      match: "((?:`[^`\\\\]*(?:\\\\.[^`\\\\]*)*`)|(?:[[:alpha:].][[:alnum:]._]*))\\s*\\("
    },
    {
      captures: {
        1: { name: "variable.parameter.r" },
        2: { name: "keyword.operator.assignment.r" }
      },
      match: "([[:alpha:].][[:alnum:]._]*)\\s*(=(?!=))"
    },
    {
      match: "\\b([\\d_][[:alnum:]._]+)\\b",
      name: "invalid.illegal.variable.other.r"
    },
    { match: "\\b([[:alnum:]_]+)(?=::)", name: "entity.namespace.r" },
    {
      match: "((?:`[^`\\\\]*(?:\\\\.[^`\\\\]*)*`)|(?:[[:alpha:].][[:alnum:]._]*))",
      name: "variable.other.r"
    },
    {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.section.block.begin.r" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.section.block.end.r" } },
      name: "meta.block.r",
      patterns: [{ include: "source.r" }]
    }
  ],
  scopeName: "source.r"
};
var source_r_default = grammar22;

// node_modules/@wooorm/starry-night/lang/source.ruby.js
var grammar23 = {
  extensions: [
    ".builder",
    ".druby",
    ".duby",
    ".eye",
    ".gemspec",
    ".god",
    ".jbuilder",
    ".mirah",
    ".mspec",
    ".pluginspec",
    ".podspec",
    ".prawn",
    ".rabl",
    ".rake",
    ".rb",
    ".rbi",
    ".rbuild",
    ".rbw",
    ".rbx",
    ".ru",
    ".ruby",
    ".thor",
    ".watchr"
  ],
  names: ["jruby", "macruby", "mirah", "rake", "rb", "rbx", "ruby"],
  patterns: [
    {
      begin: "\\bclass\\b",
      beginCaptures: { 0: { name: "keyword.control.class.ruby" } },
      end: "\\s*$|(?![\\s\\w.:<])",
      name: "meta.class.ruby",
      patterns: [
        { match: "[A-Z]\\w*", name: "entity.name.type.class.ruby" },
        { include: "#separators" },
        {
          begin: "(<<)\\s*",
          beginCaptures: { 1: { name: "punctuation.definition.variable.ruby" } },
          contentName: "variable.other.object.ruby",
          end: "(?=$)|(?![\\s\\w.:])",
          patterns: [
            { match: "[A-Z]\\w*", name: "entity.name.type.class.ruby" },
            { include: "#separators" }
          ]
        },
        {
          begin: "(<)\\s*",
          beginCaptures: { 1: { name: "punctuation.separator.inheritance.ruby" } },
          contentName: "entity.other.inherited-class.ruby",
          end: "(?=$)|(?![\\s\\w.:])",
          patterns: [
            { match: "[A-Z]\\w*", name: "entity.name.type.class.ruby" },
            { include: "#separators" }
          ]
        }
      ]
    },
    {
      begin: "\\bmodule\\b",
      beginCaptures: { 0: { name: "keyword.control.module.ruby" } },
      end: "\\s*$|(?![\\s\\w.:])",
      name: "meta.module.ruby",
      patterns: [
        {
          match: "[A-Z]\\w*(?=::)",
          name: "entity.other.inherited-class.module.ruby"
        },
        { match: "[A-Z]\\w*", name: "entity.name.type.module.ruby" },
        { include: "#separators" }
      ]
    },
    { match: "(?<!\\.)\\belse(\\s)+if\\b", name: "invalid.deprecated.ruby" },
    {
      captures: { 1: { name: "punctuation.definition.constant.hashkey.ruby" } },
      match: "(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)",
      name: "constant.other.symbol.hashkey.ruby"
    },
    {
      captures: { 1: { name: "punctuation.definition.constant.ruby" } },
      match: "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!])?)(?=\\s*=>)",
      name: "constant.other.symbol.hashkey.ruby"
    },
    {
      match: "(?<!\\.)\\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\\b(?![?!])",
      name: "keyword.control.ruby"
    },
    { match: "(?<!\\.)\\bdo\\b", name: "keyword.control.start-block.ruby" },
    { match: "(?<={)(\\s+)", name: "meta.syntax.ruby.start-block" },
    {
      match: "(?<!\\.)\\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\\b(?![?!])|\\bdefined\\?|\\b(block_given|iterator)\\?",
      name: "keyword.control.pseudo-method.ruby"
    },
    { match: "\\bnil\\b(?![?!])", name: "constant.language.nil.ruby" },
    {
      match: "\\b(true|false)\\b(?![?!])",
      name: "constant.language.boolean.ruby"
    },
    { match: "\\b(__(FILE|LINE)__)\\b(?![?!])", name: "variable.language.ruby" },
    { match: "\\bself\\b(?![?!])", name: "variable.language.self.ruby" },
    {
      match: "\\b(initialize|new|loop|include|extend|prepend|raise|fail|attr_reader|attr_writer|attr_accessor|attr|catch|throw|private|private_class_method|module_function|public|public_class_method|protected|refine|using)\\b(?![?!])",
      name: "keyword.other.special-method.ruby"
    },
    {
      begin: "\\b(?<!\\.|::)(require|require_relative)\\b(?![?!])",
      captures: { 1: { name: "keyword.other.special-method.ruby" } },
      end: "$|(?=#|})",
      name: "meta.require.ruby",
      patterns: [{ include: "$self" }]
    },
    {
      captures: { 1: { name: "punctuation.definition.variable.ruby" } },
      match: "(@)[a-zA-Z_]\\w*",
      name: "variable.other.readwrite.instance.ruby"
    },
    {
      captures: { 1: { name: "punctuation.definition.variable.ruby" } },
      match: "(@@)[a-zA-Z_]\\w*",
      name: "variable.other.readwrite.class.ruby"
    },
    {
      captures: { 1: { name: "punctuation.definition.variable.ruby" } },
      match: "(\\$)[a-zA-Z_]\\w*",
      name: "variable.other.readwrite.global.ruby"
    },
    {
      captures: { 1: { name: "punctuation.definition.variable.ruby" } },
      match: "(\\$)(!|@|&|`|'|\\+|\\d+|~|=|/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|\"|-[0adFiIlpv])",
      name: "variable.other.readwrite.global.pre-defined.ruby"
    },
    {
      begin: "\\b(ENV)\\[",
      beginCaptures: { 1: { name: "variable.other.constant.ruby" } },
      end: "]",
      name: "meta.environment-variable.ruby",
      patterns: [{ include: "$self" }]
    },
    {
      match: "\\b[A-Z]\\w*(?=((\\.|::)[A-Za-z]|\\[))",
      name: "support.class.ruby"
    },
    {
      match: "\\b((abort|at_exit|autoload|binding|callcc|caller|caller_locations|chomp|chop|eval|exec|exit|fork|format|gets|global_variables|gsub|lambda|load|local_variables|open|p|print|printf|proc|putc|puts|rand|readline|readlines|select|set_trace_func|sleep|spawn|sprintf|srand|sub|syscall|system|test|trace_var|trap|untrace_var|warn)\\b(?![?!])|autoload\\?|exit!)",
      name: "support.function.kernel.ruby"
    },
    { match: "\\b[_A-Z]\\w*\\b", name: "variable.other.constant.ruby" },
    {
      begin: "(?x)\n(?=def\\b)                          # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\s+\n(\n  (?:(self)(\\.|::))?\n  (?>[a-zA-Z_]\\w*(?>(\\.|::)))*    # method prefix\n  (?>                               # method name\n    [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n    |\n    ===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n  )\n)\n\\s*(\\()",
      beginCaptures: {
        1: { name: "keyword.control.def.ruby" },
        2: { name: "entity.name.function.ruby" },
        3: { name: "variable.language.self.ruby" },
        4: { name: "punctuation.separator.method.ruby" },
        5: { name: "punctuation.separator.method.ruby" },
        6: { name: "punctuation.definition.parameters.ruby" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.parameters.ruby" } },
      name: "meta.function.method.with-arguments.ruby",
      patterns: [
        {
          begin: "(?![\\s,)])",
          end: "(?=,|\\)\\s*$)",
          patterns: [
            {
              captures: {
                1: { name: "storage.type.variable.ruby" },
                2: {
                  name: "constant.other.symbol.hashkey.parameter.function.ruby"
                },
                3: { name: "punctuation.definition.constant.hashkey.ruby" },
                4: { name: "variable.parameter.function.ruby" }
              },
              match: "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))"
            },
            { include: "$self" }
          ]
        },
        { match: ",", name: "punctuation.separator.delimiter.ruby" }
      ]
    },
    {
      begin: "(?x)\n(?=def\\b)                          # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\s+\n(\n  (?:(self)(\\.|::))?\n  (?>[a-zA-Z_]\\w*(?>(\\.|::)))*    # method prefix\n  (?>                               # method name\n    [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n    |\n    ===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n  )\n)\n[ \\t]\n(?=[ \\t]*[^\\s#;])                 # make sure the following is not comment",
      beginCaptures: {
        1: { name: "keyword.control.def.ruby" },
        2: { name: "entity.name.function.ruby" },
        3: { name: "variable.language.self.ruby" },
        4: { name: "punctuation.separator.method.ruby" },
        5: { name: "punctuation.separator.method.ruby" }
      },
      end: "$",
      name: "meta.function.method.with-arguments.ruby",
      patterns: [
        {
          begin: "(?![\\s,])",
          end: "(?=,|$)",
          patterns: [
            {
              captures: {
                1: { name: "storage.type.variable.ruby" },
                2: {
                  name: "constant.other.symbol.hashkey.parameter.function.ruby"
                },
                3: { name: "punctuation.definition.constant.hashkey.ruby" },
                4: { name: "variable.parameter.function.ruby" }
              },
              match: "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))"
            },
            { include: "$self" }
          ]
        },
        { match: ",", name: "punctuation.separator.delimiter.ruby" }
      ]
    },
    {
      captures: {
        1: { name: "keyword.control.def.ruby" },
        3: { name: "entity.name.function.ruby" },
        4: { name: "variable.language.self.ruby" },
        5: { name: "punctuation.separator.method.ruby" },
        6: { name: "punctuation.separator.method.ruby" }
      },
      match: "(?x)\n(?=def\\b)                            # optimization to help Oniguruma fail fast\n(?<=^|\\s)(def)\\b\n(\n  \\s+\n  (\n    (?:(self)(\\.|::))?\n    (?>[a-zA-Z_]\\w*(?>(\\.|::)))*    # method prefix\n    (?>                               # method name\n      [a-zA-Z_]\\w*(?>[?!]|=(?!>))?\n      |\n      ===?|!=|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n    )\n  )\n)?",
      name: "meta.function.method.without-arguments.ruby"
    },
    {
      match: "(?x)\n\\b\n(\n  [\\d](?>_?\\d)*                             # 100_000\n  (\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?   # fractional part\n  ([eE][-+]?\\d(?>_?\\d)*)?                   # 1.23e-4\n  |\n  0\n  (?:\n    [xX][[:xdigit:]](?>_?[[:xdigit:]])*|\n    [oO]?[0-7](?>_?[0-7])*|\n    [bB][01](?>_?[01])*|\n    [dD]\\d(?>_?\\d)*\n  )                                           # A base indicator can only be used with an integer\n)\\b",
      name: "constant.numeric.ruby"
    },
    {
      begin: ":'",
      beginCaptures: { 0: { name: "punctuation.definition.symbol.begin.ruby" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.symbol.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [{ match: "\\\\['\\\\]", name: "constant.character.escape.ruby" }]
    },
    {
      begin: ':"',
      beginCaptures: { 0: { name: "punctuation.section.symbol.begin.ruby" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.section.symbol.end.ruby" } },
      name: "constant.other.symbol.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    { match: "(?<!\\()/=", name: "keyword.operator.assignment.augmented.ruby" },
    {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.single.ruby",
      patterns: [
        { match: "\\\\'|\\\\\\\\", name: "constant.character.escape.ruby" }
      ]
    },
    {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.double.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    {
      begin: "`",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "`",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    {
      begin: "(?x)\n(?<![\\w)])((/))(?![?*+])\n(?=\n  (?:\\\\/|[^/])*+          # Do NOT change the order\n  /[eimnosux]*\\s*\n  (?:\n    [)\\]}#.,?:]|\\|\\||&&|<=>|=>|==|=~|!~|!=|;|$|\n    if|else|elsif|then|do|end|unless|while|until|or|and\n  )\n  |\n  $\n)",
      captures: {
        1: { name: "string.regexp.interpolated.ruby" },
        2: { name: "punctuation.section.regexp.ruby" }
      },
      contentName: "string.regexp.interpolated.ruby",
      end: "((/[eimnosux]*))",
      patterns: [{ include: "#regex_sub" }]
    },
    {
      begin: "%r{",
      beginCaptures: { 0: { name: "punctuation.section.regexp.begin.ruby" } },
      end: "}[eimnosux]*",
      endCaptures: { 0: { name: "punctuation.section.regexp.end.ruby" } },
      name: "string.regexp.interpolated.ruby",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_curly_r" }]
    },
    {
      begin: "%r\\[",
      beginCaptures: { 0: { name: "punctuation.section.regexp.begin.ruby" } },
      end: "][eimnosux]*",
      endCaptures: { 0: { name: "punctuation.section.regexp.end.ruby" } },
      name: "string.regexp.interpolated.ruby",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_brackets_r" }]
    },
    {
      begin: "%r\\(",
      beginCaptures: { 0: { name: "punctuation.section.regexp.begin.ruby" } },
      end: "\\)[eimnosux]*",
      endCaptures: { 0: { name: "punctuation.section.regexp.end.ruby" } },
      name: "string.regexp.interpolated.ruby",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_parens_r" }]
    },
    {
      begin: "%r<",
      beginCaptures: { 0: { name: "punctuation.section.regexp.begin.ruby" } },
      end: ">[eimnosux]*",
      endCaptures: { 0: { name: "punctuation.section.regexp.end.ruby" } },
      name: "string.regexp.interpolated.ruby",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_ltgt_r" }]
    },
    {
      begin: "%r([^\\w])",
      beginCaptures: { 0: { name: "punctuation.section.regexp.begin.ruby" } },
      end: "\\1[eimnosux]*",
      endCaptures: { 0: { name: "punctuation.section.regexp.end.ruby" } },
      name: "string.regexp.interpolated.ruby",
      patterns: [{ include: "#regex_sub" }]
    },
    {
      begin: "%I\\[",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_brackets_i" }
      ]
    },
    {
      begin: "%I\\(",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_parens_i" }
      ]
    },
    {
      begin: "%I<",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_ltgt_i" }
      ]
    },
    {
      begin: "%I{",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_curly_i" }
      ]
    },
    {
      begin: "%I([^\\w])",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    {
      begin: "%i\\[",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\]|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_brackets" }
      ]
    },
    {
      begin: "%i\\(",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\\\)|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_parens" }
      ]
    },
    {
      begin: "%i<",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\>|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_ltgt" }
      ]
    },
    {
      begin: "%i{",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\}|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_curly" }
      ]
    },
    {
      begin: "%i([^\\w])",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [{ match: "\\\\." }]
    },
    {
      begin: "%W\\[",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_brackets_i" }
      ]
    },
    {
      begin: "%W\\(",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_parens_i" }
      ]
    },
    {
      begin: "%W<",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_ltgt_i" }
      ]
    },
    {
      begin: "%W{",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_curly_i" }
      ]
    },
    {
      begin: "%W([^\\w])",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    {
      begin: "%w\\[",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\]|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_brackets" }
      ]
    },
    {
      begin: "%w\\(",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\\\)|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_parens" }
      ]
    },
    {
      begin: "%w<",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\>|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_ltgt" }
      ]
    },
    {
      begin: "%w{",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\}|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_curly" }
      ]
    },
    {
      begin: "%w([^\\w])",
      beginCaptures: { 0: { name: "punctuation.section.array.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.section.array.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [{ match: "\\\\." }]
    },
    {
      begin: "%[Qx]?\\(",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_parens_i" }
      ]
    },
    {
      begin: "%[Qx]?\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_brackets_i" }
      ]
    },
    {
      begin: "%[Qx]?{",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_curly_i" }
      ]
    },
    {
      begin: "%[Qx]?<",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_ltgt_i" }
      ]
    },
    {
      begin: "%[Qx]([^\\w])",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    {
      begin: "%([^\\w\\s=])",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.interpolated.ruby",
      patterns: [{ include: "#interpolated_ruby" }, { include: "#escaped_char" }]
    },
    {
      begin: "%q\\(",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\\\)|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_parens" }
      ]
    },
    {
      begin: "%q<",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\>|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_ltgt" }
      ]
    },
    {
      begin: "%q\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\]|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_brackets" }
      ]
    },
    {
      begin: "%q{",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [
        { match: "\\\\}|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_curly" }
      ]
    },
    {
      begin: "%q([^\\w])",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.quoted.other.ruby",
      patterns: [{ match: "\\\\." }]
    },
    {
      begin: "%s\\(",
      beginCaptures: { 0: { name: "punctuation.definition.symbol.begin.ruby" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.symbol.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\\\)|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_parens" }
      ]
    },
    {
      begin: "%s<",
      beginCaptures: { 0: { name: "punctuation.definition.symbol.begin.ruby" } },
      end: ">",
      endCaptures: { 0: { name: "punctuation.definition.symbol.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\>|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_ltgt" }
      ]
    },
    {
      begin: "%s\\[",
      beginCaptures: { 0: { name: "punctuation.definition.symbol.begin.ruby" } },
      end: "]",
      endCaptures: { 0: { name: "punctuation.definition.symbol.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\]|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_brackets" }
      ]
    },
    {
      begin: "%s{",
      beginCaptures: { 0: { name: "punctuation.definition.symbol.begin.ruby" } },
      end: "}",
      endCaptures: { 0: { name: "punctuation.definition.symbol.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [
        { match: "\\\\}|\\\\\\\\", name: "constant.character.escape.ruby" },
        { include: "#nest_curly" }
      ]
    },
    {
      begin: "%s([^\\w])",
      beginCaptures: { 0: { name: "punctuation.definition.symbol.begin.ruby" } },
      end: "\\1",
      endCaptures: { 0: { name: "punctuation.definition.symbol.end.ruby" } },
      name: "constant.other.symbol.ruby",
      patterns: [{ match: "\\\\." }]
    },
    {
      captures: { 1: { name: "punctuation.definition.constant.ruby" } },
      match: "(?x)\n(?<!:)(:)\n(?>\n  [$a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?\n  |\n  ===?|<=>|>[>=]?|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[]=?\n  |\n  @@?[a-zA-Z_]\\w*\n)",
      name: "constant.other.symbol.ruby"
    },
    {
      begin: "^=begin",
      captures: { 0: { name: "punctuation.definition.comment.ruby" } },
      end: "^=end",
      name: "comment.block.documentation.ruby"
    },
    { include: "#yard" },
    {
      begin: "(^[ \\t]+)?(?=#)",
      beginCaptures: { 1: { name: "punctuation.whitespace.comment.leading.ruby" } },
      end: "(?!\\G)",
      patterns: [
        {
          begin: "#",
          beginCaptures: { 0: { name: "punctuation.definition.comment.ruby" } },
          end: "\\n",
          name: "comment.line.number-sign.ruby"
        }
      ]
    },
    {
      match: "(?<!\\w)\\?(\\\\(x[[:xdigit:]]{1,2}(?![[:xdigit:]])\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])",
      name: "constant.numeric.ruby"
    },
    {
      begin: "^__END__\\n",
      captures: { 0: { name: "string.unquoted.program-block.ruby" } },
      contentName: "text.plain",
      end: "(?=not)impossible",
      patterns: [
        {
          begin: "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))",
          end: "(?=not)impossible",
          name: "text.html.embedded.ruby",
          patterns: [{ include: "text.html.basic" }]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)HTML)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.html",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)HTML)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "text.html",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "text.html.basic" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)XML)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.xml",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)XML)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "text.xml",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "text.xml" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)SQL)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.sql",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)SQL)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.sql",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.sql" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)GRAPHQL)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.graphql",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)GRAPHQL)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.graphql",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.graphql" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)CSS)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.css",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)CSS)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.css",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.css" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)CPP)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.cpp",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)CPP)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.cpp",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.c++" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)C)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.c",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)C)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.c",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.c" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.js",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.js",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.js" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)JQUERY)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.js.jquery",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)JQUERY)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.js.jquery",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.shell",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.shell",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.shell" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)LUA)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.lua",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)LUA)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.lua",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.lua" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?=(?><<[-~]([\"'`]?)((?:[_\\w]+_|)RUBY)\\b\\1))",
      end: "(?!\\G)",
      name: "meta.embedded.block.ruby",
      patterns: [
        {
          begin: "(?><<[-~]([\"'`]?)((?:[_\\w]+_|)RUBY)\\b\\1)",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.ruby" }
          },
          contentName: "source.ruby",
          end: "^\\s*\\2$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
          name: "string.unquoted.heredoc.ruby",
          patterns: [
            { include: "#heredoc" },
            { include: "#interpolated_ruby" },
            { include: "source.ruby" },
            { include: "#escaped_char" }
          ]
        }
      ]
    },
    {
      begin: "(?>=\\s*<<([\"'`]?)(\\w+)\\1)",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "^\\2$",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.unquoted.heredoc.ruby",
      patterns: [
        { include: "#heredoc" },
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" }
      ]
    },
    {
      begin: "(?>((<<[-~]([\"'`]?)(\\w+)\\3,\\s?)*<<[-~]([\"'`]?)(\\w+)\\5))",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ruby" } },
      end: "^\\s*\\6$",
      endCaptures: { 0: { name: "punctuation.definition.string.end.ruby" } },
      name: "string.unquoted.heredoc.ruby",
      patterns: [
        { include: "#heredoc" },
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" }
      ]
    },
    {
      begin: "(?<={|{\\s|[^A-Za-z0-9_]do|^do|[^A-Za-z0-9_]do\\s|^do\\s)(\\|)",
      captures: { 1: { name: "punctuation.separator.variable.ruby" } },
      end: "(?<!\\|)(\\|)(?!\\|)",
      patterns: [
        { include: "source.ruby" },
        { match: "[_a-zA-Z][_a-zA-Z0-9]*", name: "variable.other.block.ruby" },
        { match: ",", name: "punctuation.separator.variable.ruby" }
      ]
    },
    { include: "#separators" },
    { match: "->", name: "support.function.kernel.arrow.ruby" },
    {
      match: "<<=|%=|&{1,2}=|\\*=|\\*\\*=|\\+=|-=|\\^=|\\|{1,2}=|<<",
      name: "keyword.operator.assignment.augmented.ruby"
    },
    {
      match: "<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \\t])\\?",
      name: "keyword.operator.comparison.ruby"
    },
    {
      match: "(?<!\\.)\\b(and|not|or)\\b(?![?!])",
      name: "keyword.operator.logical.ruby"
    },
    {
      match: "(?<=^|[ \\t])!|&&|\\|\\||\\^",
      name: "keyword.operator.logical.ruby"
    },
    {
      match: "(%|&|\\*\\*|\\*|\\+|-|/)",
      name: "keyword.operator.arithmetic.ruby"
    },
    { match: "=", name: "keyword.operator.assignment.ruby" },
    { match: "\\||~|>>", name: "keyword.operator.other.ruby" },
    { match: "{", name: "punctuation.section.scope.begin.ruby" },
    { match: "}", name: "punctuation.section.scope.end.ruby" },
    { match: "\\[", name: "punctuation.section.array.begin.ruby" },
    { match: "]", name: "punctuation.section.array.end.ruby" },
    { match: "\\(|\\)", name: "punctuation.section.function.ruby" }
  ],
  repository: {
    escaped_char: {
      match: "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
      name: "constant.character.escape.ruby"
    },
    heredoc: { begin: "^<<[-~]?\\w+", end: "$", patterns: [{ include: "$self" }] },
    interpolated_ruby: {
      patterns: [
        {
          begin: "#{",
          beginCaptures: { 0: { name: "punctuation.section.embedded.begin.ruby" } },
          contentName: "source.ruby",
          end: "}",
          endCaptures: { 0: { name: "punctuation.section.embedded.end.ruby" } },
          name: "meta.embedded.line.ruby",
          patterns: [{ include: "#nest_curly_and_self" }, { include: "$self" }]
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.ruby" } },
          match: "(#@)[a-zA-Z_]\\w*",
          name: "variable.other.readwrite.instance.ruby"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.ruby" } },
          match: "(#@@)[a-zA-Z_]\\w*",
          name: "variable.other.readwrite.class.ruby"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.ruby" } },
          match: "(#\\$)[a-zA-Z_]\\w*",
          name: "variable.other.readwrite.global.ruby"
        }
      ]
    },
    nest_brackets: {
      begin: "\\[",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "]",
      patterns: [{ include: "#nest_brackets" }]
    },
    nest_brackets_i: {
      begin: "\\[",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "]",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_brackets_i" }
      ]
    },
    nest_brackets_r: {
      begin: "\\[",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "]",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_brackets_r" }]
    },
    nest_curly: {
      begin: "{",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "}",
      patterns: [{ include: "#nest_curly" }]
    },
    nest_curly_and_self: {
      patterns: [
        {
          begin: "{",
          captures: { 0: { name: "punctuation.section.scope.ruby" } },
          end: "}",
          patterns: [{ include: "#nest_curly_and_self" }]
        },
        { include: "$self" }
      ]
    },
    nest_curly_i: {
      begin: "{",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "}",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_curly_i" }
      ]
    },
    nest_curly_r: {
      begin: "{",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "}",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_curly_r" }]
    },
    nest_ltgt: {
      begin: "<",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: ">",
      patterns: [{ include: "#nest_ltgt" }]
    },
    nest_ltgt_i: {
      begin: "<",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: ">",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_ltgt_i" }
      ]
    },
    nest_ltgt_r: {
      begin: "<",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: ">",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_ltgt_r" }]
    },
    nest_parens: {
      begin: "\\(",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "\\)",
      patterns: [{ include: "#nest_parens" }]
    },
    nest_parens_i: {
      begin: "\\(",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "\\)",
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        { include: "#nest_parens_i" }
      ]
    },
    nest_parens_r: {
      begin: "\\(",
      captures: { 0: { name: "punctuation.section.scope.ruby" } },
      end: "\\)",
      patterns: [{ include: "#regex_sub" }, { include: "#nest_parens_r" }]
    },
    regex_sub: {
      patterns: [
        { include: "#interpolated_ruby" },
        { include: "#escaped_char" },
        {
          captures: {
            1: { name: "punctuation.definition.arbitrary-repetition.ruby" },
            3: { name: "punctuation.definition.arbitrary-repetition.ruby" }
          },
          match: "({)\\d+(,\\d+)?(})",
          name: "string.regexp.arbitrary-repetition.ruby"
        },
        {
          begin: "\\[(?:\\^?])?",
          captures: { 0: { name: "punctuation.definition.character-class.ruby" } },
          end: "]",
          name: "string.regexp.character-class.ruby",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "\\(\\?#",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.ruby" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.ruby" } },
          name: "comment.line.number-sign.ruby",
          patterns: [{ include: "#escaped_char" }]
        },
        {
          begin: "\\(",
          captures: { 0: { name: "punctuation.definition.group.ruby" } },
          end: "\\)",
          name: "string.regexp.group.ruby",
          patterns: [{ include: "#regex_sub" }]
        },
        {
          begin: "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
          beginCaptures: { 1: { name: "punctuation.definition.comment.ruby" } },
          end: "$\\n?",
          endCaptures: { 0: { name: "punctuation.definition.comment.ruby" } },
          name: "comment.line.number-sign.ruby"
        }
      ]
    },
    separators: {
      patterns: [
        { match: "=>", name: "punctuation.separator.key-value.ruby" },
        { match: ";", name: "punctuation.terminator.statement.ruby" },
        { match: ",", name: "punctuation.separator.delimiter.ruby" },
        {
          captures: { 1: { name: "punctuation.separator.namespace.ruby" } },
          match: "(::)(?=\\s*[A-Z])"
        },
        { match: "&?\\.|::", name: "punctuation.separator.method.ruby" },
        { match: ":", name: "punctuation.separator.other.ruby" }
      ]
    },
    yard: {
      patterns: [
        { include: "#yard_comment" },
        { include: "#yard_name_types" },
        { include: "#yard_tag" },
        { include: "#yard_types" },
        { include: "#yard_directive" }
      ]
    },
    yard_comment: {
      begin: "^(\\s*)(#)(\\s*)(@)(abstract|api|author|deprecated|example|macro|note|overload|since|todo|version)(?=\\s|$)",
      beginCaptures: {
        2: { name: "punctuation.definition.comment.ruby" },
        4: { name: "comment.line.keyword.punctuation.yard.ruby" },
        5: { name: "comment.line.keyword.yard.ruby" }
      },
      contentName: "comment.line.string.yard.ruby",
      end: "^(?!\\s*#\\3\\s{2,})",
      name: "comment.line.number-sign.ruby",
      patterns: [{ include: "#yard" }, { include: "#yard_continuation" }]
    },
    yard_continuation: {
      match: "^\\s*#",
      name: "punctuation.definition.comment.ruby"
    },
    yard_directive: {
      begin: "^(\\s*)(#)(\\s*)(@!)(attribute|endgroup|group|macro|method|parse|scope|visibility)(\\s+((\\[).+(])))?(?=\\s)",
      beginCaptures: {
        2: { name: "punctuation.definition.comment.ruby" },
        4: { name: "comment.line.keyword.punctuation.yard.ruby" },
        5: { name: "comment.line.keyword.yard.ruby" },
        6: { name: "comment.line.yard.ruby" },
        7: { name: "comment.line.type.yard.ruby" },
        8: { name: "comment.line.punctuation.yard.ruby" },
        9: { name: "comment.line.punctuation.yard.ruby" }
      },
      contentName: "comment.line.string.yard.ruby",
      end: "^(?!\\s*#\\3\\s{2,})",
      name: "comment.line.number-sign.ruby",
      patterns: [{ include: "#yard" }, { include: "#yard_continuation" }]
    },
    yard_name_types: {
      begin: "^(\\s*)(#)(\\s*)(@)(attr|attr_reader|attr_writer|option|param|see|yieldparam)(?=\\s)(\\s+([a-z_][a-zA-Z_]*))?(\\s+((\\[).+(])))?",
      beginCaptures: {
        10: { name: "comment.line.punctuation.yard.ruby" },
        11: { name: "comment.line.punctuation.yard.ruby" },
        2: { name: "punctuation.definition.comment.ruby" },
        4: { name: "comment.line.keyword.punctuation.yard.ruby" },
        5: { name: "comment.line.keyword.yard.ruby" },
        6: { name: "comment.line.yard.ruby" },
        7: { name: "comment.line.parameter.yard.ruby" },
        8: { name: "comment.line.yard.ruby" },
        9: { name: "comment.line.type.yard.ruby" }
      },
      contentName: "comment.line.string.yard.ruby",
      end: "^(?!\\s*#\\3\\s{2,})",
      name: "comment.line.number-sign.ruby",
      patterns: [{ include: "#yard" }, { include: "#yard_continuation" }]
    },
    yard_tag: {
      captures: {
        2: { name: "punctuation.definition.comment.ruby" },
        4: { name: "comment.line.keyword.punctuation.yard.ruby" },
        5: { name: "comment.line.keyword.yard.ruby" }
      },
      match: "^(\\s*)(#)(\\s*)(@)(private)$",
      name: "comment.line.number-sign.ruby"
    },
    yard_types: {
      begin: "^(\\s*)(#)(\\s*)(@)(raise|return|yield(?:return)?)(?=\\s)(\\s+((\\[).+(])))?",
      beginCaptures: {
        2: { name: "punctuation.definition.comment.ruby" },
        4: { name: "comment.line.keyword.punctuation.yard.ruby" },
        5: { name: "comment.line.keyword.yard.ruby" },
        6: { name: "comment.line.yard.ruby" },
        7: { name: "comment.line.type.yard.ruby" },
        8: { name: "comment.line.punctuation.yard.ruby" },
        9: { name: "comment.line.punctuation.yard.ruby" }
      },
      contentName: "comment.line.string.yard.ruby",
      end: "^(?!\\s*#\\3\\s{2,})",
      name: "comment.line.number-sign.ruby",
      patterns: [{ include: "#yard" }, { include: "#yard_continuation" }]
    }
  },
  scopeName: "source.ruby"
};
var source_ruby_default = grammar23;

// node_modules/@wooorm/starry-night/lang/source.rust.js
var grammar24 = {
  extensions: [".rs", ".rs.in"],
  names: ["rust", "rs"],
  patterns: [
    {
      begin: "(<)(\\[)",
      beginCaptures: {
        1: { name: "punctuation.brackets.angle.rust" },
        2: { name: "punctuation.brackets.square.rust" }
      },
      end: ">",
      endCaptures: { 0: { name: "punctuation.brackets.angle.rust" } },
      patterns: [
        { include: "#block-comments" },
        { include: "#comments" },
        { include: "#gtypes" },
        { include: "#lvariables" },
        { include: "#lifetimes" },
        { include: "#punctuation" },
        { include: "#types" }
      ]
    },
    {
      captures: {
        1: { name: "keyword.operator.macro.dollar.rust" },
        3: { name: "keyword.other.crate.rust" },
        4: { name: "entity.name.type.metavariable.rust" },
        6: { name: "keyword.operator.key-value.rust" },
        7: { name: "variable.other.metavariable.specifier.rust" }
      },
      match: "(\\$)((crate)|([A-Z][A-Za-z0-9_]*))((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?",
      name: "meta.macro.metavariable.type.rust",
      patterns: [{ include: "#keywords" }]
    },
    {
      captures: {
        1: { name: "keyword.operator.macro.dollar.rust" },
        2: { name: "variable.other.metavariable.name.rust" },
        4: { name: "keyword.operator.key-value.rust" },
        5: { name: "variable.other.metavariable.specifier.rust" }
      },
      match: "(\\$)([a-z][A-Za-z0-9_]*)((:)(block|expr|ident|item|lifetime|literal|meta|path?|stmt|tt|ty|vis))?",
      name: "meta.macro.metavariable.rust",
      patterns: [{ include: "#keywords" }]
    },
    {
      captures: {
        1: { name: "entity.name.function.macro.rules.rust" },
        3: { name: "entity.name.function.macro.rust" },
        4: { name: "entity.name.type.macro.rust" },
        5: { name: "punctuation.brackets.curly.rust" }
      },
      match: "\\b(macro_rules!)\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\s+(\\{)",
      name: "meta.macro.rules.rust"
    },
    {
      captures: {
        1: { name: "storage.type.rust" },
        2: { name: "entity.name.module.rust" }
      },
      match: "(mod)\\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)"
    },
    {
      begin: "\\b(extern)\\s+(crate)",
      beginCaptures: {
        1: { name: "storage.type.rust" },
        2: { name: "keyword.other.crate.rust" }
      },
      end: ";",
      endCaptures: { 0: { name: "punctuation.semi.rust" } },
      name: "meta.import.rust",
      patterns: [
        { include: "#block-comments" },
        { include: "#comments" },
        { include: "#keywords" },
        { include: "#punctuation" }
      ]
    },
    {
      begin: "\\b(use)\\s",
      beginCaptures: { 1: { name: "keyword.other.rust" } },
      end: ";",
      endCaptures: { 0: { name: "punctuation.semi.rust" } },
      name: "meta.use.rust",
      patterns: [
        { include: "#block-comments" },
        { include: "#comments" },
        { include: "#keywords" },
        { include: "#namespaces" },
        { include: "#punctuation" },
        { include: "#types" },
        { include: "#lvariables" }
      ]
    },
    { include: "#block-comments" },
    { include: "#comments" },
    { include: "#attributes" },
    { include: "#lvariables" },
    { include: "#constants" },
    { include: "#gtypes" },
    { include: "#functions" },
    { include: "#types" },
    { include: "#keywords" },
    { include: "#lifetimes" },
    { include: "#macros" },
    { include: "#namespaces" },
    { include: "#punctuation" },
    { include: "#strings" },
    { include: "#variables" }
  ],
  repository: {
    attributes: {
      begin: "(#)(\\!?)(\\[)",
      beginCaptures: {
        1: { name: "punctuation.definition.attribute.rust" },
        3: { name: "punctuation.brackets.attribute.rust" }
      },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.brackets.attribute.rust" } },
      name: "meta.attribute.rust",
      patterns: [
        { include: "#block-comments" },
        { include: "#comments" },
        { include: "#keywords" },
        { include: "#lifetimes" },
        { include: "#punctuation" },
        { include: "#strings" },
        { include: "#gtypes" },
        { include: "#types" }
      ]
    },
    "block-comments": {
      patterns: [
        { match: "/\\*\\*/", name: "comment.block.rust" },
        {
          begin: "/\\*\\*",
          end: "\\*/",
          name: "comment.block.documentation.rust",
          patterns: [{ include: "#block-comments" }]
        },
        {
          begin: "/\\*(?!\\*)",
          end: "\\*/",
          name: "comment.block.rust",
          patterns: [{ include: "#block-comments" }]
        }
      ]
    },
    comments: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.comment.rust" } },
          match: "(///).*$",
          name: "comment.line.documentation.rust"
        },
        {
          captures: { 1: { name: "punctuation.definition.comment.rust" } },
          match: "(//).*$",
          name: "comment.line.double-slash.rust"
        }
      ]
    },
    constants: {
      patterns: [
        { match: "\\b[A-Z]{2}[A-Z0-9_]*\\b", name: "constant.other.caps.rust" },
        {
          captures: {
            1: { name: "storage.type.rust" },
            2: { name: "constant.other.caps.rust" }
          },
          match: "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b"
        },
        {
          captures: {
            1: { name: "punctuation.separator.dot.decimal.rust" },
            2: { name: "keyword.operator.exponent.rust" },
            3: { name: "keyword.operator.exponent.sign.rust" },
            4: { name: "constant.numeric.decimal.exponent.mantissa.rust" },
            5: { name: "entity.name.type.numeric.rust" }
          },
          match: "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          name: "constant.numeric.decimal.rust"
        },
        {
          captures: { 1: { name: "entity.name.type.numeric.rust" } },
          match: "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          name: "constant.numeric.hex.rust"
        },
        {
          captures: { 1: { name: "entity.name.type.numeric.rust" } },
          match: "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          name: "constant.numeric.oct.rust"
        },
        {
          captures: { 1: { name: "entity.name.type.numeric.rust" } },
          match: "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          name: "constant.numeric.bin.rust"
        },
        { match: "\\b(true|false)\\b", name: "constant.language.bool.rust" }
      ]
    },
    escapes: {
      captures: {
        1: { name: "constant.character.escape.backslash.rust" },
        2: { name: "constant.character.escape.bit.rust" },
        3: { name: "constant.character.escape.unicode.rust" },
        4: { name: "constant.character.escape.unicode.punctuation.rust" },
        5: { name: "constant.character.escape.unicode.punctuation.rust" }
      },
      match: "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
      name: "constant.character.escape.rust"
    },
    functions: {
      patterns: [
        {
          captures: {
            1: { name: "keyword.other.rust" },
            2: { name: "punctuation.brackets.round.rust" }
          },
          match: "\\b(pub)(\\()"
        },
        {
          begin: "\\b(fn)\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\()|(<))",
          beginCaptures: {
            1: { name: "keyword.other.fn.rust" },
            2: { name: "entity.name.function.rust" },
            4: { name: "punctuation.brackets.round.rust" },
            5: { name: "punctuation.brackets.angle.rust" }
          },
          end: "\\{|;",
          endCaptures: { 0: { name: "punctuation.brackets.curly.rust" } },
          name: "meta.function.definition.rust",
          patterns: [
            { include: "#block-comments" },
            { include: "#comments" },
            { include: "#keywords" },
            { include: "#lvariables" },
            { include: "#constants" },
            { include: "#gtypes" },
            { include: "#functions" },
            { include: "#lifetimes" },
            { include: "#macros" },
            { include: "#namespaces" },
            { include: "#punctuation" },
            { include: "#strings" },
            { include: "#types" },
            { include: "#variables" }
          ]
        },
        {
          begin: "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\()",
          beginCaptures: {
            1: { name: "entity.name.function.rust" },
            2: { name: "punctuation.brackets.round.rust" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.brackets.round.rust" } },
          name: "meta.function.call.rust",
          patterns: [
            { include: "#block-comments" },
            { include: "#comments" },
            { include: "#attributes" },
            { include: "#keywords" },
            { include: "#lvariables" },
            { include: "#constants" },
            { include: "#gtypes" },
            { include: "#functions" },
            { include: "#lifetimes" },
            { include: "#macros" },
            { include: "#namespaces" },
            { include: "#punctuation" },
            { include: "#strings" },
            { include: "#types" },
            { include: "#variables" }
          ]
        },
        {
          begin: "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\\()",
          beginCaptures: { 1: { name: "entity.name.function.rust" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.brackets.round.rust" } },
          name: "meta.function.call.rust",
          patterns: [
            { include: "#block-comments" },
            { include: "#comments" },
            { include: "#attributes" },
            { include: "#keywords" },
            { include: "#lvariables" },
            { include: "#constants" },
            { include: "#gtypes" },
            { include: "#functions" },
            { include: "#lifetimes" },
            { include: "#macros" },
            { include: "#namespaces" },
            { include: "#punctuation" },
            { include: "#strings" },
            { include: "#types" },
            { include: "#variables" }
          ]
        }
      ]
    },
    gtypes: {
      patterns: [
        { match: "\\b(Some|None)\\b", name: "entity.name.type.option.rust" },
        { match: "\\b(Ok|Err)\\b", name: "entity.name.type.result.rust" }
      ]
    },
    interpolations: {
      captures: {
        1: { name: "punctuation.definition.interpolation.rust" },
        2: { name: "punctuation.definition.interpolation.rust" }
      },
      match: '({)[^"{}]*(})',
      name: "meta.interpolation.rust"
    },
    keywords: {
      patterns: [
        {
          match: "\\b(await|break|continue|do|else|for|if|loop|match|return|try|while|yield)\\b",
          name: "keyword.control.rust"
        },
        {
          match: "\\b(extern|let|macro|mod)\\b",
          name: "keyword.other.rust storage.type.rust"
        },
        { match: "\\b(const)\\b", name: "storage.modifier.rust" },
        {
          match: "\\b(type)\\b",
          name: "keyword.declaration.type.rust storage.type.rust"
        },
        {
          match: "\\b(enum)\\b",
          name: "keyword.declaration.enum.rust storage.type.rust"
        },
        {
          match: "\\b(trait)\\b",
          name: "keyword.declaration.trait.rust storage.type.rust"
        },
        {
          match: "\\b(struct)\\b",
          name: "keyword.declaration.struct.rust storage.type.rust"
        },
        { match: "\\b(abstract|static)\\b", name: "storage.modifier.rust" },
        {
          match: "\\b(as|async|become|box|dyn|move|final|gen|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|virtual|where)\\b",
          name: "keyword.other.rust"
        },
        { match: "\\bfn\\b", name: "keyword.other.fn.rust" },
        { match: "\\bcrate\\b", name: "keyword.other.crate.rust" },
        { match: "\\bmut\\b", name: "storage.modifier.mut.rust" },
        {
          match: "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)",
          name: "keyword.operator.logical.rust"
        },
        { match: "&(?![&=])", name: "keyword.operator.borrow.and.rust" },
        {
          match: "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)",
          name: "keyword.operator.assignment.rust"
        },
        {
          match: "(?<![<>])=(?!=|>)",
          name: "keyword.operator.assignment.equal.rust"
        },
        {
          match: "(=(=)?(?!>)|!=|<=|(?<!=)>=)",
          name: "keyword.operator.comparison.rust"
        },
        {
          match: "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))",
          name: "keyword.operator.math.rust"
        },
        {
          captures: {
            1: { name: "punctuation.brackets.round.rust" },
            2: { name: "punctuation.brackets.square.rust" },
            3: { name: "punctuation.brackets.curly.rust" },
            4: { name: "keyword.operator.comparison.rust" },
            5: { name: "punctuation.brackets.round.rust" },
            6: { name: "punctuation.brackets.square.rust" },
            7: { name: "punctuation.brackets.curly.rust" }
          },
          match: "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))"
        },
        { match: "::", name: "keyword.operator.namespace.rust" },
        {
          captures: { 1: { name: "keyword.operator.dereference.rust" } },
          match: "(\\*)(?=\\w+)"
        },
        { match: "@", name: "keyword.operator.subpattern.rust" },
        { match: "\\.(?!\\.)", name: "keyword.operator.access.dot.rust" },
        { match: "\\.{2}(=|\\.)?", name: "keyword.operator.range.rust" },
        { match: ":(?!:)", name: "keyword.operator.key-value.rust" },
        { match: "->", name: "keyword.operator.arrow.skinny.rust" },
        { match: "=>", name: "keyword.operator.arrow.fat.rust" },
        { match: "\\$", name: "keyword.operator.macro.dollar.rust" },
        { match: "\\?", name: "keyword.operator.question.rust" }
      ]
    },
    lifetimes: {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.lifetime.rust" },
            2: { name: "entity.name.type.lifetime.rust" }
          },
          match: "(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b"
        },
        {
          captures: {
            1: { name: "keyword.operator.borrow.rust" },
            2: { name: "punctuation.definition.lifetime.rust" },
            3: { name: "entity.name.type.lifetime.rust" }
          },
          match: "(\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b"
        }
      ]
    },
    lvariables: {
      patterns: [
        { match: "\\b[Ss]elf\\b", name: "variable.language.self.rust" },
        { match: "\\bsuper\\b", name: "variable.language.super.rust" }
      ]
    },
    macros: {
      patterns: [
        {
          captures: {
            2: { name: "entity.name.function.macro.rust" },
            3: { name: "entity.name.type.macro.rust" }
          },
          match: "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))",
          name: "meta.macro.rust"
        }
      ]
    },
    namespaces: {
      patterns: [
        {
          captures: {
            1: { name: "entity.name.namespace.rust" },
            2: { name: "keyword.operator.namespace.rust" }
          },
          match: "(?<![A-Za-z0-9_])([A-Za-z0-9_]+)((?<!super|self)::)"
        }
      ]
    },
    punctuation: {
      patterns: [
        { match: ",", name: "punctuation.comma.rust" },
        { match: "[{}]", name: "punctuation.brackets.curly.rust" },
        { match: "[()]", name: "punctuation.brackets.round.rust" },
        { match: ";", name: "punctuation.semi.rust" },
        { match: "[\\[\\]]", name: "punctuation.brackets.square.rust" },
        { match: "(?<!=)[<>]", name: "punctuation.brackets.angle.rust" }
      ]
    },
    strings: {
      patterns: [
        {
          begin: '(b?)(")',
          beginCaptures: {
            1: { name: "string.quoted.byte.raw.rust" },
            2: { name: "punctuation.definition.string.rust" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.rust" } },
          name: "string.quoted.double.rust",
          patterns: [{ include: "#escapes" }, { include: "#interpolations" }]
        },
        {
          begin: '(b?r)(#*)(")',
          beginCaptures: {
            1: { name: "string.quoted.byte.raw.rust" },
            2: { name: "punctuation.definition.string.raw.rust" },
            3: { name: "punctuation.definition.string.rust" }
          },
          end: '(")(\\2)',
          endCaptures: {
            1: { name: "punctuation.definition.string.rust" },
            2: { name: "punctuation.definition.string.raw.rust" }
          },
          name: "string.quoted.double.rust"
        },
        {
          begin: "(b)?(')",
          beginCaptures: {
            1: { name: "string.quoted.byte.raw.rust" },
            2: { name: "punctuation.definition.char.rust" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.char.rust" } },
          name: "string.quoted.single.char.rust",
          patterns: [{ include: "#escapes" }]
        }
      ]
    },
    types: {
      patterns: [
        {
          captures: { 1: { name: "entity.name.type.numeric.rust" } },
          match: "(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\b"
        },
        {
          begin: "\\b(_?[A-Z][A-Za-z0-9_]*)(<)",
          beginCaptures: {
            1: { name: "entity.name.type.rust" },
            2: { name: "punctuation.brackets.angle.rust" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.brackets.angle.rust" } },
          patterns: [
            { include: "#block-comments" },
            { include: "#comments" },
            { include: "#keywords" },
            { include: "#lvariables" },
            { include: "#lifetimes" },
            { include: "#punctuation" },
            { include: "#types" },
            { include: "#variables" }
          ]
        },
        {
          match: "\\b(bool|char|str)\\b",
          name: "entity.name.type.primitive.rust"
        },
        {
          captures: {
            1: { name: "keyword.declaration.trait.rust storage.type.rust" },
            2: { name: "entity.name.type.trait.rust" }
          },
          match: "\\b(trait)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b"
        },
        {
          captures: {
            1: { name: "keyword.declaration.struct.rust storage.type.rust" },
            2: { name: "entity.name.type.struct.rust" }
          },
          match: "\\b(struct)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b"
        },
        {
          captures: {
            1: { name: "keyword.declaration.enum.rust storage.type.rust" },
            2: { name: "entity.name.type.enum.rust" }
          },
          match: "\\b(enum)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b"
        },
        {
          captures: {
            1: { name: "keyword.declaration.type.rust storage.type.rust" },
            2: { name: "entity.name.type.declaration.rust" }
          },
          match: "\\b(type)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b"
        },
        {
          match: "\\b_?[A-Z][A-Za-z0-9_]*\\b(?!!)",
          name: "entity.name.type.rust"
        }
      ]
    },
    variables: {
      patterns: [
        {
          match: "\\b(?<!(?<!\\.)\\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\b",
          name: "variable.other.rust"
        }
      ]
    }
  },
  scopeName: "source.rust"
};
var source_rust_default = grammar24;

// node_modules/@wooorm/starry-night/lang/source.shell.js
var grammar25 = {
  extensions: [
    ".bash",
    ".bats",
    ".command",
    ".csh",
    ".ebuild",
    ".eclass",
    ".ksh",
    ".sh",
    ".sh.in",
    ".tcsh",
    ".tmux",
    ".tool",
    ".zsh",
    ".zsh-theme"
  ],
  names: [
    "abuild",
    "alpine-abuild",
    "apkbuild",
    "bash",
    "envrc",
    "gentoo-ebuild",
    "gentoo-eclass",
    "openrc",
    "openrc-runscript",
    "sh",
    "shell",
    "shell-script",
    "tcsh",
    "zsh"
  ],
  patterns: [
    { include: "#comment" },
    { include: "#pipeline" },
    { include: "#list" },
    { include: "#compound-command" },
    { include: "#loop" },
    { include: "#string" },
    { include: "#function-definition" },
    { include: "#variable" },
    { include: "#interpolation" },
    { include: "#heredoc" },
    { include: "#herestring" },
    { include: "#redirection" },
    { include: "#pathname" },
    { include: "#keyword" },
    { include: "#support" }
  ],
  repository: {
    "case-clause": {
      patterns: [
        {
          begin: "(?=\\S)",
          end: ";;",
          endCaptures: { 0: { name: "punctuation.terminator.case-clause.shell" } },
          name: "meta.scope.case-clause.shell",
          patterns: [
            {
              begin: "\\(|(?=\\S)",
              beginCaptures: {
                0: { name: "punctuation.definition.case-pattern.shell" }
              },
              end: "\\)",
              endCaptures: {
                0: { name: "punctuation.definition.case-pattern.shell" }
              },
              name: "meta.scope.case-pattern.shell",
              patterns: [
                { match: "\\|", name: "punctuation.separator.pipe-sign.shell" },
                { include: "#string" },
                { include: "#variable" },
                { include: "#interpolation" },
                { include: "#pathname" }
              ]
            },
            {
              begin: "(?<=\\))",
              end: "(?=;;)",
              name: "meta.scope.case-clause-body.shell",
              patterns: [{ include: "$self" }]
            }
          ]
        }
      ]
    },
    comment: {
      begin: "(^\\s+)?(?<=^|\\W)(?<!-)(?=#)(?!#{)",
      beginCaptures: {
        1: { name: "punctuation.whitespace.comment.leading.shell" }
      },
      end: "(?!\\G)",
      patterns: [
        {
          begin: "#!",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.shebang.shell" }
          },
          end: "$",
          name: "comment.line.number-sign.shebang.shell"
        },
        {
          begin: "#",
          beginCaptures: { 0: { name: "punctuation.definition.comment.shell" } },
          end: "$",
          name: "comment.line.number-sign.shell"
        }
      ]
    },
    "compound-command": {
      patterns: [
        {
          begin: "\\[{1,2}",
          beginCaptures: {
            0: { name: "punctuation.definition.logical-expression.shell" }
          },
          end: "\\]{1,2}",
          endCaptures: {
            0: { name: "punctuation.definition.logical-expression.shell" }
          },
          name: "meta.scope.logical-expression.shell",
          patterns: [{ include: "#logical-expression" }, { include: "$self" }]
        },
        {
          begin: "\\({2}",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "\\){2}",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.other.math.shell",
          patterns: [{ include: "#math" }]
        },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "punctuation.definition.subshell.shell" } },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.subshell.shell" } },
          name: "meta.scope.subshell.shell",
          patterns: [{ include: "$self" }]
        },
        {
          begin: "(?<=\\s|^){(?=\\s|$)",
          beginCaptures: { 0: { name: "punctuation.definition.group.shell" } },
          end: "(?<=^|;)\\s*(})",
          endCaptures: { 1: { name: "punctuation.definition.group.shell" } },
          name: "meta.scope.group.shell",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "function-definition": {
      patterns: [
        {
          begin: "(?<=^|;|&|\\s)(function)\\s+([^\\s\\\\]+)(?:\\s*(\\(\\)))?",
          beginCaptures: {
            1: { name: "storage.type.function.shell" },
            2: { name: "entity.name.function.shell" },
            3: { name: "punctuation.definition.arguments.shell" }
          },
          end: ";|&|$",
          endCaptures: { 0: { name: "punctuation.definition.function.shell" } },
          name: "meta.function.shell",
          patterns: [{ include: "$self" }]
        },
        {
          begin: "(?<=^|;|&|\\s)([^\\s\\\\=]+)\\s*(\\(\\))",
          beginCaptures: {
            1: { name: "entity.name.function.shell" },
            2: { name: "punctuation.definition.arguments.shell" }
          },
          end: ";|&|$",
          endCaptures: { 0: { name: "punctuation.definition.function.shell" } },
          name: "meta.function.shell",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    heredoc: {
      patterns: [
        {
          begin: `(<<)-\\s*("|'|)\\s*(RUBY)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.ruby.embedded.shell",
          end: "^\\t*(RUBY)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.ruby.shell",
          patterns: [{ include: "source.ruby" }]
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(RUBY)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.ruby.embedded.shell",
          end: "^(RUBY)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.ruby.shell",
          patterns: [{ include: "source.ruby" }]
        },
        {
          begin: `(<<)-\\s*("|'|)\\s*(PYTHON)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.python.embedded.shell",
          end: "^\\t*(PYTHON)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.python.shell",
          patterns: [{ include: "source.python" }]
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(PYTHON)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.python.embedded.shell",
          end: "^(PYTHON)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.python.shell",
          patterns: [{ include: "source.python" }]
        },
        {
          begin: `(<<)-\\s*("|'|)\\s*(APPLESCRIPT)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.applescript.embedded.shell",
          end: "^\\t*(APPLESCRIPT)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.applescript.shell",
          patterns: [{ include: "source.applescript" }]
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(APPLESCRIPT)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.applescript.embedded.shell",
          end: "^(APPLESCRIPT)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.applescript.shell",
          patterns: [{ include: "source.applescript" }]
        },
        {
          begin: `(<<)-\\s*("|'|)\\s*(HTML)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "text.html.embedded.shell",
          end: "^\\t*(HTML)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.html.shell",
          patterns: [{ include: "text.html.basic" }]
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(HTML)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "text.html.embedded.shell",
          end: "^(HTML)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.html.shell",
          patterns: [{ include: "text.html.basic" }]
        },
        {
          begin: `(<<)-\\s*("|'|)\\s*(MARKDOWN)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "text.html.markdown.embedded.shell",
          end: "^\\t*(MARKDOWN)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.markdown.shell",
          patterns: [{ include: "source.gfm" }]
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(MARKDOWN)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "text.html.markdown.embedded.shell",
          end: "^(MARKDOWN)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.markdown.shell",
          patterns: [{ include: "source.gfm" }]
        },
        {
          begin: `(<<)-\\s*("|'|)\\s*(TEXTILE)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "text.html.textile.embedded.shell",
          end: "^\\t*(TEXTILE)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.textile.shell",
          patterns: []
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(TEXTILE)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "text.html.textile.embedded.shell",
          end: "^(TEXTILE)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.textile.shell",
          patterns: []
        },
        {
          begin: `(<<)-\\s*("|'|)\\s*(SHELL)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.shell.embedded.shell",
          end: "^\\t*(\\3)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.shell.shell",
          patterns: [{ include: "source.shell" }]
        },
        {
          begin: `(<<)\\s*("|'|)\\s*(SHELL)(?=\\s|;|&|<|"|')\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          contentName: "source.shell.embedded.shell",
          end: "^(\\3)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.shell.shell",
          patterns: [{ include: "source.shell" }]
        },
        {
          begin: `(<<)-\\s*("|')\\s*\\\\?([^;&<\\s]+)\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          end: "^\\t*(\\3)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.no-indent.shell"
        },
        {
          begin: `(<<)\\s*("|')\\s*\\\\?([^;&<\\s]+)\\2`,
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            3: { name: "keyword.control.heredoc-token.shell" }
          },
          end: "^(\\3)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.shell"
        },
        {
          begin: "(<<)-\\s*\\\\?([^;&<\\s]+)",
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            2: { name: "keyword.control.heredoc-token.shell" }
          },
          end: "^\\t*(\\2)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.expanded.no-indent.shell",
          patterns: [
            {
              match: "\\\\[\\$`\\\\\\n]",
              name: "constant.character.escape.shell"
            },
            { include: "#variable" },
            { include: "#interpolation" }
          ]
        },
        {
          begin: "(<<)\\s*\\\\?([^;&<\\s]+)",
          beginCaptures: {
            1: { name: "keyword.operator.heredoc.shell" },
            2: { name: "keyword.control.heredoc-token.shell" }
          },
          end: "^(\\2)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.heredoc-token.shell" } },
          name: "string.unquoted.heredoc.expanded.shell",
          patterns: [
            {
              match: "\\\\[\\$`\\\\\\n]",
              name: "constant.character.escape.shell"
            },
            { include: "#variable" },
            { include: "#interpolation" }
          ]
        }
      ]
    },
    herestring: {
      patterns: [
        {
          begin: "(<<<)\\s*(('))",
          beginCaptures: {
            1: { name: "keyword.operator.herestring.shell" },
            2: { name: "string.quoted.single.shell" },
            3: { name: "punctuation.definition.string.begin.shell" }
          },
          contentName: "string.quoted.single.shell",
          end: "(')",
          endCaptures: {
            0: { name: "string.quoted.single.shell" },
            1: { name: "punctuation.definition.string.end.shell" }
          },
          name: "meta.herestring.shell"
        },
        {
          begin: '(<<<)\\s*(("))',
          beginCaptures: {
            1: { name: "keyword.operator.herestring.shell" },
            2: { name: "string.quoted.double.shell" },
            3: { name: "punctuation.definition.string.begin.shell" }
          },
          contentName: "string.quoted.double.shell",
          end: '(")',
          endCaptures: {
            0: { name: "string.quoted.double.shell" },
            1: { name: "punctuation.definition.string.end.shell" }
          },
          name: "meta.herestring.shell"
        },
        {
          captures: {
            1: { name: "keyword.operator.herestring.shell" },
            2: {
              name: "string.unquoted.herestring.shell",
              patterns: [{ include: "$self" }]
            }
          },
          match: "(<<<)\\s*(([^\\s)\\\\]|\\\\.)+)",
          name: "meta.herestring.shell"
        }
      ]
    },
    interpolation: {
      patterns: [
        {
          begin: "\\$\\({2}",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "\\){2}",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.other.math.shell",
          patterns: [{ include: "#math" }]
        },
        {
          begin: "`",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.interpolated.backtick.shell",
          patterns: [
            { match: "\\\\[`\\\\$]", name: "constant.character.escape.shell" },
            {
              begin: "(?<=\\W)(?=#)(?!#{)",
              beginCaptures: {
                1: { name: "punctuation.whitespace.comment.leading.shell" }
              },
              end: "(?!\\G)",
              patterns: [
                {
                  begin: "#",
                  beginCaptures: {
                    0: { name: "punctuation.definition.comment.shell" }
                  },
                  end: "(?=`)",
                  name: "comment.line.number-sign.shell"
                }
              ]
            },
            { include: "$self" }
          ]
        },
        {
          begin: "\\$\\(",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.interpolated.dollar.shell",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    keyword: {
      patterns: [
        {
          match: "(?<=^|;|&|\\s)(then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return)(?=\\s|;|&|$)",
          name: "keyword.control.shell"
        },
        {
          match: "(?<=^|;|&|\\s)(?:export|declare|typeset|local|readonly)(?=\\s|;|&|$)",
          name: "storage.modifier.shell"
        }
      ]
    },
    list: {
      patterns: [{ match: ";|&&|&|\\|\\|", name: "keyword.operator.list.shell" }]
    },
    "logical-expression": {
      patterns: [
        {
          match: "=[=~]?|!=?|<|>|&&|\\|\\|",
          name: "keyword.operator.logical.shell"
        },
        {
          match: "(?<!\\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])",
          name: "keyword.operator.logical.shell"
        }
      ]
    },
    loop: {
      patterns: [
        {
          begin: "(?<=^|;|&|\\s)(for)\\s+(?=\\({2})",
          beginCaptures: { 1: { name: "keyword.control.shell" } },
          end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
          endCaptures: { 0: { name: "keyword.control.shell" } },
          name: "meta.scope.for-loop.shell",
          patterns: [{ include: "$self" }]
        },
        {
          begin: "(?<=^|;|&|\\s)(for)\\s+(.+?)\\s+(in)(?=\\s|;|&|$)",
          beginCaptures: {
            1: { name: "keyword.control.shell" },
            2: {
              name: "variable.other.loop.shell",
              patterns: [{ include: "#string" }]
            },
            3: { name: "keyword.control.shell" }
          },
          end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
          endCaptures: { 0: { name: "keyword.control.shell" } },
          name: "meta.scope.for-in-loop.shell",
          patterns: [{ include: "$self" }]
        },
        {
          begin: "(?<=^|;|&|\\s)(while|until)(?=\\s|;|&|$)",
          beginCaptures: { 1: { name: "keyword.control.shell" } },
          end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
          endCaptures: { 0: { name: "keyword.control.shell" } },
          name: "meta.scope.while-loop.shell",
          patterns: [{ include: "$self" }]
        },
        {
          begin: "(?<=^|;|&|\\s)(select)\\s+((?:[^\\s\\\\]|\\\\.)+)(?=\\s|;|&|$)",
          beginCaptures: {
            1: { name: "keyword.control.shell" },
            2: { name: "variable.other.loop.shell" }
          },
          end: "(?<=^|;|&|\\s)(done)(?=\\s|;|&|$)",
          endCaptures: { 1: { name: "keyword.control.shell" } },
          name: "meta.scope.select-block.shell",
          patterns: [{ include: "$self" }]
        },
        {
          begin: "(?<=^|;|&|\\s)case(?=\\s|;|&|$)",
          beginCaptures: { 0: { name: "keyword.control.shell" } },
          end: "(?<=^|;|&|\\s)esac(?=\\s|;|&|$)",
          endCaptures: { 0: { name: "keyword.control.shell" } },
          name: "meta.scope.case-block.shell",
          patterns: [
            {
              begin: "(?<=^|;|&|\\s)in(?=\\s|;|&|$)",
              beginCaptures: { 0: { name: "keyword.control.shell" } },
              end: "(?<=^|;|&|\\s)(?=esac(\\s|;|&|$))",
              name: "meta.scope.case-body.shell",
              patterns: [
                { include: "#comment" },
                { include: "#case-clause" },
                { include: "$self" }
              ]
            },
            { include: "$self" }
          ]
        },
        {
          begin: "(?<=^|;|&|\\s)if(?=\\s|;|&|$)",
          beginCaptures: { 0: { name: "keyword.control.shell" } },
          end: "(?<=^|;|&|\\s)fi(?=\\s|;|&|$)",
          endCaptures: { 0: { name: "keyword.control.shell" } },
          name: "meta.scope.if-block.shell",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    math: {
      patterns: [
        { include: "#variable" },
        {
          match: "\\+{1,2}|-{1,2}|!|~|\\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\\|{1,2}|&{1,2}|\\?|\\:|,|=|[*/%+\\-&^|]=|<<=|>>=",
          name: "keyword.operator.arithmetic.shell"
        },
        { match: "0[xX][0-9A-Fa-f]+", name: "constant.numeric.hex.shell" },
        { match: "0\\d+", name: "constant.numeric.octal.shell" },
        {
          match: "\\d{1,2}#[0-9a-zA-Z@_]+",
          name: "constant.numeric.other.shell"
        },
        { match: "\\d+", name: "constant.numeric.integer.shell" }
      ]
    },
    pathname: {
      patterns: [
        { match: "(?<=\\s|:|=|^)~", name: "keyword.operator.tilde.shell" },
        { match: "\\*|\\?", name: "keyword.operator.glob.shell" },
        {
          begin: "([?*+@!])(\\()",
          beginCaptures: {
            1: { name: "keyword.operator.extglob.shell" },
            2: { name: "punctuation.definition.extglob.shell" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.extglob.shell" } },
          name: "meta.structure.extglob.shell",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    pipeline: {
      patterns: [
        {
          match: "(?<=^|;|&|\\s)(time)(?=\\s|;|&|$)",
          name: "keyword.other.shell"
        },
        { match: "[|!]", name: "keyword.operator.pipe.shell" }
      ]
    },
    redirection: {
      patterns: [
        {
          begin: "[><]\\(",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.interpolated.process-substitution.shell",
          patterns: [{ include: "$self" }]
        },
        {
          match: "(?<![<>])(&>|\\d*>&\\d*|\\d*(>>|>|<)|\\d*<&|\\d*<>)(?![<>])",
          name: "keyword.operator.redirect.shell"
        }
      ]
    },
    string: {
      patterns: [
        { match: "\\\\.", name: "constant.character.escape.shell" },
        {
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.quoted.single.shell"
        },
        {
          begin: '\\$?"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.quoted.double.shell",
          patterns: [
            {
              match: '\\\\[\\$`"\\\\\\n]',
              name: "constant.character.escape.shell"
            },
            { include: "#variable" },
            { include: "#interpolation" }
          ]
        },
        {
          begin: "\\$'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.shell" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.shell" } },
          name: "string.quoted.single.dollar.shell",
          patterns: [
            {
              match: "\\\\(a|b|e|f|n|r|t|v|\\\\|')",
              name: "constant.character.escape.ansi-c.shell"
            },
            {
              match: "\\\\[0-9]{3}",
              name: "constant.character.escape.octal.shell"
            },
            {
              match: "\\\\x[0-9a-fA-F]{2}",
              name: "constant.character.escape.hex.shell"
            },
            {
              match: "\\\\c.",
              name: "constant.character.escape.control-char.shell"
            }
          ]
        }
      ]
    },
    support: {
      patterns: [
        {
          match: "(?<=^|;|&|\\s)(?::|\\.)(?=\\s|;|&|$)",
          name: "support.function.builtin.shell"
        },
        {
          match: "(?<=^|;|&|\\s)(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)(?=\\s|;|&|$)",
          name: "support.function.builtin.shell"
        }
      ]
    },
    variable: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.variable.shell" } },
          match: "(\\$)[a-zA-Z_][a-zA-Z0-9_]*",
          name: "variable.other.normal.shell"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.shell" } },
          match: "(\\$)[-*@#?$!0_]",
          name: "variable.other.special.shell"
        },
        {
          captures: { 1: { name: "punctuation.definition.variable.shell" } },
          match: "(\\$)[1-9]",
          name: "variable.other.positional.shell"
        },
        {
          begin: "\\${",
          beginCaptures: { 0: { name: "punctuation.definition.variable.shell" } },
          end: "}",
          endCaptures: { 0: { name: "punctuation.definition.variable.shell" } },
          name: "variable.other.bracket.shell",
          patterns: [
            {
              match: "!|:[-=?]?|\\*|@|#{1,2}|%{1,2}|/",
              name: "keyword.operator.expansion.shell"
            },
            {
              captures: {
                1: { name: "punctuation.section.array.shell" },
                3: { name: "punctuation.section.array.shell" }
              },
              match: "(\\[)([^\\]]+)(\\])"
            },
            { include: "#variable" },
            { include: "#string" }
          ]
        }
      ]
    }
  },
  scopeName: "source.shell"
};
var source_shell_default = grammar25;

// node_modules/@wooorm/starry-night/lang/source.sql.js
var grammar26 = {
  extensions: [
    ".cql",
    ".db2",
    ".ddl",
    ".mysql",
    ".pgsql",
    ".prc",
    ".sql",
    ".sql",
    ".sql",
    ".tab",
    ".udf",
    ".viw"
  ],
  names: ["plpgsql", "sql", "sqlpl"],
  patterns: [
    { include: "#comments" },
    {
      captures: {
        1: { name: "keyword.other.create.sql" },
        2: { name: "keyword.other.sql" },
        5: { name: "entity.name.function.sql" }
      },
      match: "(?i:^\\s*(create(?:\\s+or\\s+replace)?)\\s+(aggregate|conversion|database|domain|function|group|(unique\\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)(['\"`]?)(\\w+)\\4",
      name: "meta.create.sql"
    },
    {
      captures: {
        1: { name: "keyword.other.create.sql" },
        2: { name: "keyword.other.sql" }
      },
      match: "(?i:^\\s*(drop)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))",
      name: "meta.drop.sql"
    },
    {
      captures: {
        1: { name: "keyword.other.create.sql" },
        2: { name: "keyword.other.table.sql" },
        3: { name: "entity.name.function.sql" },
        4: { name: "keyword.other.cascade.sql" }
      },
      match: "(?i:\\s*(drop)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)",
      name: "meta.drop.sql"
    },
    {
      captures: {
        1: { name: "keyword.other.create.sql" },
        2: { name: "keyword.other.table.sql" }
      },
      match: "(?i:^\\s*(alter)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)",
      name: "meta.alter.sql"
    },
    {
      captures: {
        1: { name: "storage.type.sql" },
        10: { name: "constant.numeric.sql" },
        11: { name: "storage.type.sql" },
        12: { name: "storage.type.sql" },
        13: { name: "storage.type.sql" },
        14: { name: "constant.numeric.sql" },
        15: { name: "storage.type.sql" },
        2: { name: "storage.type.sql" },
        3: { name: "constant.numeric.sql" },
        4: { name: "storage.type.sql" },
        5: { name: "constant.numeric.sql" },
        6: { name: "storage.type.sql" },
        7: { name: "constant.numeric.sql" },
        8: { name: "constant.numeric.sql" },
        9: { name: "storage.type.sql" }
      },
      match: "(?xi)\n\n				# normal stuff, capture 1\n				 \\b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|date|double\\sprecision|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\\b\n\n				# numeric suffix, capture 2 + 3i\n				|\\b(bit\\svarying|character\\s(?:varying)?|tinyint|var\\schar|float|interval)\\((\\d+)\\)\n\n				# optional numeric suffix, capture 4 + 5i\n				|\\b(char|number|varchar\\d?)\\b(?:\\((\\d+)\\))?\n\n				# special case, capture 6 + 7i + 8i\n				|\\b(numeric|decimal)\\b(?:\\((\\d+),(\\d+)\\))?\n\n				# special case, captures 9, 10i, 11\n				|\\b(times?)\\b(?:\\((\\d+)\\))?(\\swith(?:out)?\\stime\\szone\\b)?\n\n				# special case, captures 12, 13, 14i, 15\n				|\\b(timestamp)(?:(s|tz))?\\b(?:\\((\\d+)\\))?(\\s(with|without)\\stime\\szone\\b)?\n\n			"
    },
    {
      match: "(?i:\\b((?:primary|foreign)\\s+key|references|on\\sdelete(\\s+cascade)?|check|constraint)\\b)",
      name: "storage.modifier.sql"
    },
    { match: "\\b\\d+\\b", name: "constant.numeric.sql" },
    {
      match: "(?i:\\b(select(\\s+distinct)?|insert\\s+(ignore\\s+)?into|update|delete|from|set|where|group\\sby|or|like|and|union(\\s+all)?|having|order\\sby|limit|(inner|cross)\\s+join|join|straight_join|(left|right)(\\s+outer)?\\s+join|natural(\\s+(left|right)(\\s+outer)?)?\\s+join)\\b)",
      name: "keyword.other.DML.sql"
    },
    {
      match: "(?i:\\b(on|((is\\s+)?not\\s+)?null)\\b)",
      name: "keyword.other.DDL.create.II.sql"
    },
    { match: "(?i:\\bvalues\\b)", name: "keyword.other.DML.II.sql" },
    {
      match: "(?i:\\b(begin(\\s+work)?|start\\s+transaction|commit(\\s+work)?|rollback(\\s+work)?)\\b)",
      name: "keyword.other.LUW.sql"
    },
    {
      match: "(?i:\\b(grant(\\swith\\sgrant\\soption)?|revoke)\\b)",
      name: "keyword.other.authorization.sql"
    },
    { match: "(?i:\\bin\\b)", name: "keyword.other.data-integrity.sql" },
    {
      match: "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)",
      name: "keyword.other.object-comments.sql"
    },
    { match: "(?i)\\bAS\\b", name: "keyword.other.alias.sql" },
    { match: "(?i)\\b(DESC|ASC)\\b", name: "keyword.other.order.sql" },
    { match: "\\*", name: "keyword.operator.star.sql" },
    { match: "[!<>]?=|<>|<|>", name: "keyword.operator.comparison.sql" },
    { match: "-|\\+|/", name: "keyword.operator.math.sql" },
    { match: "\\|\\|", name: "keyword.operator.concatenator.sql" },
    {
      match: "(?i)\\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\\b",
      name: "support.function.scalar.sql"
    },
    {
      match: "(?i)\\b(AVG|COUNT|MIN|MAX|SUM)(?=\\s*\\()",
      name: "support.function.aggregate.sql"
    },
    {
      match: "(?i)\\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\\b",
      name: "support.function.string.sql"
    },
    {
      captures: {
        1: { name: "constant.other.database-name.sql" },
        2: { name: "constant.other.table-name.sql" }
      },
      match: "(\\w+?)\\.(\\w+)"
    },
    { include: "#strings" },
    { include: "#regexps" },
    {
      captures: {
        1: { name: "punctuation.section.scope.begin.sql" },
        2: { name: "punctuation.section.scope.end.sql" }
      },
      match: "(\\()(\\))",
      name: "meta.block.sql"
    }
  ],
  repository: {
    comments: {
      patterns: [
        {
          begin: "(^[ \\t]+)?(?=--)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.sql" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "--",
              beginCaptures: { 0: { name: "punctuation.definition.comment.sql" } },
              end: "\\n",
              name: "comment.line.double-dash.sql"
            }
          ]
        },
        {
          begin: "(^[ \\t]+)?(?=#)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.sql" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "#",
              beginCaptures: { 0: { name: "punctuation.definition.comment.sql" } },
              end: "\\n",
              name: "comment.line.number-sign.sql"
            }
          ]
        },
        {
          begin: "/\\*",
          captures: { 0: { name: "punctuation.definition.comment.sql" } },
          end: "\\*/",
          name: "comment.block.c"
        }
      ]
    },
    regexps: {
      patterns: [
        {
          begin: "/(?=\\S.*/)",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } },
          end: "/",
          endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } },
          name: "string.regexp.sql",
          patterns: [
            { include: "#string_interpolation" },
            { match: "\\\\/", name: "constant.character.escape.slash.sql" }
          ]
        },
        {
          begin: "%r\\{",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } },
          name: "string.regexp.modr.sql",
          patterns: [{ include: "#string_interpolation" }]
        }
      ]
    },
    string_escape: { match: "\\\\.", name: "constant.character.escape.sql" },
    string_interpolation: {
      captures: {
        1: { name: "punctuation.definition.string.begin.sql" },
        3: { name: "punctuation.definition.string.end.sql" }
      },
      match: "(#\\{)([^\\}]*)(\\})",
      name: "string.interpolated.sql"
    },
    strings: {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.string.begin.sql" },
            2: { name: "punctuation.definition.string.end.sql" }
          },
          match: "(')[^'\\\\]*(')",
          name: "string.quoted.single.sql"
        },
        {
          begin: "'",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } },
          name: "string.quoted.single.sql",
          patterns: [{ include: "#string_escape" }]
        },
        {
          captures: {
            1: { name: "punctuation.definition.string.begin.sql" },
            2: { name: "punctuation.definition.string.end.sql" }
          },
          match: "(`)[^`\\\\]*(`)",
          name: "string.quoted.other.backtick.sql"
        },
        {
          begin: "`",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } },
          name: "string.quoted.other.backtick.sql",
          patterns: [{ include: "#string_escape" }]
        },
        {
          captures: {
            1: { name: "punctuation.definition.string.begin.sql" },
            2: { name: "punctuation.definition.string.end.sql" }
          },
          match: '(")[^"#]*(")',
          name: "string.quoted.double.sql"
        },
        {
          begin: '"',
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } },
          name: "string.quoted.double.sql",
          patterns: [{ include: "#string_interpolation" }]
        },
        {
          begin: "%\\{",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.sql" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.definition.string.end.sql" } },
          name: "string.other.quoted.brackets.sql",
          patterns: [{ include: "#string_interpolation" }]
        }
      ]
    }
  },
  scopeName: "source.sql"
};
var source_sql_default = grammar26;

// node_modules/@wooorm/starry-night/lang/source.swift.js
var grammar27 = {
  extensions: [".swift"],
  names: ["swift"],
  patterns: [{ include: "#root" }],
  repository: {
    "async-throws": {
      captures: {
        1: { name: "invalid.illegal.await-must-precede-throws.swift" },
        2: { name: "storage.modifier.exception.swift" },
        3: { name: "storage.modifier.async.swift" }
      },
      match: "\\b(?:(throws\\s+async|rethrows\\s+async)|(throws|rethrows)|(async))\\b"
    },
    attributes: {
      patterns: [
        {
          begin: "((@)available)(\\()",
          beginCaptures: {
            1: { name: "storage.modifier.attribute.swift" },
            2: { name: "punctuation.definition.attribute.swift" },
            3: { name: "punctuation.definition.arguments.begin.swift" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.swift" }
          },
          name: "meta.attribute.available.swift",
          patterns: [
            {
              captures: {
                1: { name: "keyword.other.platform.os.swift" },
                2: { name: "constant.numeric.swift" }
              },
              match: "\\b(swift|(?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\\b(?:\\s+([0-9]+(?:\\.[0-9]+)*\\b))?"
            },
            {
              begin: "\\b(introduced|deprecated|obsoleted)\\s*(:)\\s*",
              beginCaptures: {
                1: { name: "keyword.other.swift" },
                2: { name: "punctuation.separator.key-value.swift" }
              },
              end: "(?!\\G)",
              patterns: [
                {
                  match: "\\b[0-9]+(?:\\.[0-9]+)*\\b",
                  name: "constant.numeric.swift"
                }
              ]
            },
            {
              begin: '\\b(message|renamed)\\s*(:)\\s*(?=")',
              beginCaptures: {
                1: { name: "keyword.other.swift" },
                2: { name: "punctuation.separator.key-value.swift" }
              },
              end: "(?!\\G)",
              patterns: [{ include: "#literals" }]
            },
            {
              captures: {
                1: { name: "keyword.other.platform.all.swift" },
                2: { name: "keyword.other.swift" },
                3: { name: "invalid.illegal.character-not-allowed-here.swift" }
              },
              match: "(?:(\\*)|\\b(deprecated|unavailable|noasync)\\b)\\s*(.*?)(?=[,)])"
            }
          ]
        },
        {
          begin: "((@)objc)(\\()",
          beginCaptures: {
            1: { name: "storage.modifier.attribute.swift" },
            2: { name: "punctuation.definition.attribute.swift" },
            3: { name: "punctuation.definition.arguments.begin.swift" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.swift" }
          },
          name: "meta.attribute.objc.swift",
          patterns: [
            {
              captures: {
                1: {
                  name: "invalid.illegal.missing-colon-after-selector-piece.swift"
                }
              },
              match: "\\w*(?::(?:\\w*:)*(\\w*))?",
              name: "entity.name.function.swift"
            }
          ]
        },
        {
          begin: "(@)(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)",
          beginCaptures: {
            0: { name: "storage.modifier.attribute.swift" },
            1: { name: "punctuation.definition.attribute.swift" },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" }
          },
          end: "(?!\\G\\()",
          name: "meta.attribute.swift",
          patterns: [
            {
              begin: "\\(",
              beginCaptures: {
                0: { name: "punctuation.definition.arguments.begin.swift" }
              },
              end: "\\)",
              endCaptures: {
                0: { name: "punctuation.definition.arguments.end.swift" }
              },
              name: "meta.arguments.attribute.swift",
              patterns: [{ include: "#expressions" }]
            }
          ]
        }
      ]
    },
    "builtin-functions": {
      patterns: [
        {
          match: "(?<=\\.)(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\\s*[({])\\b",
          name: "support.function.swift"
        },
        {
          match: "(?<=\\.)(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)(?=\\s*\\()",
          name: "support.function.swift"
        },
        {
          match: "(?<=\\.)(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\\s*\\()",
          name: "support.function.swift"
        }
      ]
    },
    "builtin-global-functions": {
      patterns: [
        {
          begin: "\\b(type)(\\()\\s*(of)(:)",
          beginCaptures: {
            1: { name: "support.function.dynamic-type.swift" },
            2: { name: "punctuation.definition.arguments.begin.swift" },
            3: { name: "support.variable.parameter.swift" },
            4: { name: "punctuation.separator.argument-label.begin.swift" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.swift" }
          },
          patterns: [{ include: "#expressions" }]
        },
        {
          match: "\\b(?:anyGenerator|autoreleasepool)(?=\\s*[({])\\b",
          name: "support.function.swift"
        },
        {
          match: "\\b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\\s*\\()",
          name: "support.function.swift"
        },
        {
          match: "\\b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\\s*\\()",
          name: "support.function.swift"
        }
      ]
    },
    "builtin-properties": {
      patterns: [
        {
          match: "(?<=^Process\\.|\\WProcess\\.|^CommandLine\\.|\\WCommandLine\\.)(arguments|argc|unsafeArgv)",
          name: "support.variable.swift"
        },
        {
          match: "(?<=\\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\\b",
          name: "support.variable.swift"
        },
        {
          match: "(?<=\\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\\b",
          name: "support.variable.swift"
        },
        {
          match: "(?<=\\.)(?:s(?:calarValue|i(?:ze|gnalingNaN)|o(?:und|me)|uppressed|prite|et)|n(?:one|egative(?:Subnormal|Normal|Infinity|Zero))|c(?:ol(?:or|lection)|ustomized)|t(?:o(?:NearestOr(?:Even|AwayFromZero)|wardZero)|uple|ext)|i(?:nt|mage)|optional|d(?:ictionary|o(?:uble|wn))|u(?:Int|p|rl)|p(?:o(?:sitive(?:Subnormal|Normal|Infinity|Zero)|int)|lus)|e(?:rror|mptyInput)|view|quietNaN|float|a(?:ttributedString|wayFromZero)|r(?:ectangle|ange)|generated|minus|b(?:ool|ezierPath))\\b",
          name: "support.variable.swift"
        }
      ]
    },
    "builtin-types": {
      patterns: [
        { include: "#builtin-types-builtin-class-type" },
        { include: "#builtin-types-builtin-enum-type" },
        { include: "#builtin-types-builtin-protocol-type" },
        { include: "#builtin-types-builtin-struct-type" },
        { include: "#builtin-types-builtin-typealias" },
        { match: "\\bAny\\b", name: "support.type.any.swift" }
      ]
    },
    "builtin-types-builtin-class-type": {
      match: "\\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\\b",
      name: "support.class.swift"
    },
    "builtin-types-builtin-enum-type": {
      patterns: [
        {
          match: "\\b(?:CommandLine|Process(?=\\.))\\b",
          name: "support.constant.swift"
        },
        { match: "\\bNever\\b", name: "support.constant.never.swift" },
        {
          match: "\\b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\\b",
          name: "support.type.swift"
        },
        {
          match: "\\b(?:MirrorDisposition|QuickLookObject)\\b",
          name: "support.type.swift"
        }
      ]
    },
    "builtin-types-builtin-protocol-type": {
      patterns: [
        {
          match: "\\b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\\b",
          name: "support.type.swift"
        },
        {
          match: "\\b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\\b",
          name: "support.type.swift"
        }
      ]
    },
    "builtin-types-builtin-struct-type": {
      patterns: [
        {
          match: "\\b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\\b",
          name: "support.type.swift"
        },
        {
          match: "\\b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\\b",
          name: "support.type.swift"
        }
      ]
    },
    "builtin-types-builtin-typealias": {
      patterns: [
        {
          match: "\\b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\\b",
          name: "support.type.swift"
        },
        {
          match: "\\b(?:Generator|PlaygroundQuickLook|UWord|Word)\\b",
          name: "support.type.swift"
        }
      ]
    },
    "code-block": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.section.scope.begin.swift" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.section.scope.end.swift" } },
      patterns: [{ include: "$self" }]
    },
    comments: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.comment.swift" } },
          match: "\\A^(#!).*$\\n?",
          name: "comment.line.number-sign.swift"
        },
        {
          begin: "/\\*\\*(?!/)",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.swift" }
          },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.swift" } },
          name: "comment.block.documentation.swift",
          patterns: [{ include: "#comments-nested" }]
        },
        {
          begin: "/\\*:",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.swift" }
          },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.swift" } },
          name: "comment.block.documentation.playground.swift",
          patterns: [{ include: "#comments-nested" }]
        },
        {
          begin: "/\\*",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.swift" }
          },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.swift" } },
          name: "comment.block.swift",
          patterns: [{ include: "#comments-nested" }]
        },
        {
          match: "\\*/",
          name: "invalid.illegal.unexpected-end-of-block-comment.swift"
        },
        {
          begin: "(^[ \\t]+)?(?=//)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.swift" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "///",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.swift" }
              },
              end: "$",
              name: "comment.line.triple-slash.documentation.swift"
            },
            {
              begin: "//:",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.swift" }
              },
              end: "$",
              name: "comment.line.double-slash.documentation.swift"
            },
            {
              begin: "//",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.swift" }
              },
              end: "$",
              name: "comment.line.double-slash.swift"
            }
          ]
        }
      ]
    },
    "comments-nested": {
      begin: "/\\*",
      end: "\\*/",
      patterns: [{ include: "#comments-nested" }]
    },
    "compiler-control": {
      patterns: [
        {
          begin: "^\\s*(#)(if|elseif)\\s+(false)\\b.*?(?=$|//|/\\*)",
          beginCaptures: {
            0: { name: "meta.preprocessor.conditional.swift" },
            1: { name: "punctuation.definition.preprocessor.swift" },
            2: { name: "keyword.control.import.preprocessor.conditional.swift" },
            3: { name: "constant.language.boolean.swift" }
          },
          contentName: "comment.block.preprocessor.swift",
          end: "(?=^\\s*(#(elseif|else|endif)\\b))"
        },
        {
          begin: "^\\s*(#)(if|elseif)\\s+",
          captures: {
            1: { name: "punctuation.definition.preprocessor.swift" },
            2: { name: "keyword.control.import.preprocessor.conditional.swift" }
          },
          end: "(?=\\s*(?://|/\\*))|$",
          name: "meta.preprocessor.conditional.swift",
          patterns: [
            { match: "(&&|\\|\\|)", name: "keyword.operator.logical.swift" },
            {
              match: "\\b(true|false)\\b",
              name: "constant.language.boolean.swift"
            },
            {
              captures: {
                1: { name: "keyword.other.condition.swift" },
                2: { name: "punctuation.definition.parameters.begin.swift" },
                3: { name: "support.constant.platform.architecture.swift" },
                4: { name: "punctuation.definition.parameters.end.swift" }
              },
              match: "\\b(arch)\\s*(\\()\\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\\w+)\\s*(\\))"
            },
            {
              captures: {
                1: { name: "keyword.other.condition.swift" },
                2: { name: "punctuation.definition.parameters.begin.swift" },
                3: { name: "support.constant.platform.os.swift" },
                4: { name: "punctuation.definition.parameters.end.swift" }
              },
              match: "\\b(os)\\s*(\\()\\s*(?:(macOS|OSX|iOS|tvOS|watchOS|Android|Linux|FreeBSD|Windows|PS4)|\\w+)\\s*(\\))"
            },
            {
              captures: {
                1: { name: "keyword.other.condition.swift" },
                2: { name: "punctuation.definition.parameters.begin.swift" },
                3: { name: "entity.name.type.module.swift" },
                4: { name: "punctuation.definition.parameters.end.swift" }
              },
              match: "\\b(canImport)\\s*(\\()([\\p{L}_][\\p{L}_\\p{N}\\p{M}]*)(\\))"
            },
            {
              begin: "\\b(targetEnvironment)\\s*(\\()",
              beginCaptures: {
                1: { name: "keyword.other.condition.swift" },
                2: { name: "punctuation.definition.parameters.begin.swift" }
              },
              end: "(\\))|$",
              endCaptures: {
                1: { name: "punctuation.definition.parameters.end.swift" }
              },
              patterns: [
                {
                  match: "\\b(simulator|UIKitForMac)\\b",
                  name: "support.constant.platform.environment.swift"
                }
              ]
            },
            {
              begin: "\\b(swift|compiler)\\s*(\\()",
              beginCaptures: {
                1: { name: "keyword.other.condition.swift" },
                2: { name: "punctuation.definition.parameters.begin.swift" }
              },
              end: "(\\))|$",
              endCaptures: {
                1: { name: "punctuation.definition.parameters.end.swift" }
              },
              patterns: [
                { match: ">=|<", name: "keyword.operator.comparison.swift" },
                {
                  match: "\\b[0-9]+(?:\\.[0-9]+)*\\b",
                  name: "constant.numeric.swift"
                }
              ]
            }
          ]
        },
        {
          captures: {
            1: { name: "punctuation.definition.preprocessor.swift" },
            2: { name: "keyword.control.import.preprocessor.conditional.swift" },
            3: {
              patterns: [
                {
                  match: "\\S+",
                  name: "invalid.illegal.character-not-allowed-here.swift"
                }
              ]
            }
          },
          match: "^\\s*(#)(else|endif)(.*?)(?=$|//|/\\*)",
          name: "meta.preprocessor.conditional.swift"
        },
        {
          captures: {
            1: { name: "punctuation.definition.preprocessor.swift" },
            2: {
              name: "keyword.control.import.preprocessor.sourcelocation.swift"
            },
            4: { name: "punctuation.definition.parameters.begin.swift" },
            5: {
              patterns: [
                {
                  begin: '(file)\\s*(:)\\s*(?=")',
                  beginCaptures: {
                    1: { name: "support.variable.parameter.swift" },
                    2: { name: "punctuation.separator.key-value.swift" }
                  },
                  end: "(?!\\G)",
                  patterns: [{ include: "#literals" }]
                },
                {
                  captures: {
                    1: { name: "support.variable.parameter.swift" },
                    2: { name: "punctuation.separator.key-value.swift" },
                    3: { name: "constant.numeric.integer.swift" }
                  },
                  match: "(line)\\s*(:)\\s*([0-9]+)"
                },
                { match: ",", name: "punctuation.separator.parameters.swift" },
                {
                  match: "\\S+",
                  name: "invalid.illegal.character-not-allowed-here.swift"
                }
              ]
            },
            6: { name: "punctuation.definition.parameters.begin.swift" },
            7: {
              patterns: [
                {
                  match: "\\S+",
                  name: "invalid.illegal.character-not-allowed-here.swift"
                }
              ]
            }
          },
          match: "^\\s*(#)(sourceLocation)((\\()([^)]*)(\\)))(.*?)(?=$|//|/\\*)",
          name: "meta.preprocessor.sourcelocation.swift"
        }
      ]
    },
    conditionals: {
      patterns: [
        {
          begin: "(?<!\\.)\\b(if|guard|switch|for)\\b",
          beginCaptures: { 1: { patterns: [{ include: "#keywords" }] } },
          end: "(?=\\{)",
          patterns: [{ include: "#expressions-without-trailing-closures" }]
        },
        {
          begin: "(?<!\\.)\\b(while)\\b",
          beginCaptures: { 1: { patterns: [{ include: "#keywords" }] } },
          end: "(?=\\{)|$",
          patterns: [{ include: "#expressions-without-trailing-closures" }]
        }
      ]
    },
    declarations: {
      patterns: [
        { include: "#declarations-function" },
        { include: "#declarations-function-initializer" },
        { include: "#declarations-function-subscript" },
        { include: "#declarations-typed-variable-declaration" },
        { include: "#declarations-import" },
        { include: "#declarations-operator" },
        { include: "#declarations-precedencegroup" },
        { include: "#declarations-protocol" },
        { include: "#declarations-type" },
        { include: "#declarations-extension" },
        { include: "#declarations-typealias" },
        { include: "#declarations-macro" }
      ]
    },
    "declarations-available-types": {
      patterns: [
        { include: "#comments" },
        { include: "#builtin-types" },
        { include: "#attributes" },
        { match: "\\basync\\b", name: "storage.modifier.async.swift" },
        {
          match: "\\b(?:throws|rethrows)\\b",
          name: "storage.modifier.exception.swift"
        },
        { match: "\\bsome\\b", name: "keyword.other.operator.type.opaque.swift" },
        {
          match: "\\bany\\b",
          name: "keyword.other.operator.type.existential.swift"
        },
        { match: "\\b(?:repeat|each)\\b", name: "keyword.control.loop.swift" },
        {
          match: "\\b(?:inout|isolated|borrowing|consuming)\\b",
          name: "storage.modifier.swift"
        },
        { match: "\\bSelf\\b", name: "variable.language.swift" },
        {
          captures: { 1: { name: "keyword.operator.type.function.swift" } },
          match: "(?<![/=\\-+!*%<>&|\\^~.])(->)(?![/=\\-+!*%<>&|\\^~.])"
        },
        {
          captures: { 1: { name: "keyword.operator.type.composition.swift" } },
          match: "(?<![/=\\-+!*%<>&|\\^~.])(&)(?![/=\\-+!*%<>&|\\^~.])"
        },
        { match: "[?!]", name: "keyword.operator.type.optional.swift" },
        {
          match: "\\.\\.\\.",
          name: "keyword.operator.function.variadic-parameter.swift"
        },
        { match: "\\bprotocol\\b", name: "keyword.other.type.composition.swift" },
        {
          match: "(?<=\\.)(?:Protocol|Type)\\b",
          name: "keyword.other.type.metatype.swift"
        },
        { include: "#declarations-available-types-tuple-type" },
        { include: "#declarations-available-types-collection-type" },
        { include: "#declarations-generic-argument-clause" }
      ]
    },
    "declarations-available-types-collection-type": {
      begin: "\\[",
      beginCaptures: {
        0: { name: "punctuation.section.collection-type.begin.swift" }
      },
      end: "\\]|(?=[>){}])",
      endCaptures: { 0: { name: "punctuation.section.collection-type.end.swift" } },
      patterns: [
        { include: "#declarations-available-types" },
        {
          begin: ":",
          beginCaptures: { 0: { name: "punctuation.separator.key-value.swift" } },
          end: "(?=\\]|[>){}])",
          patterns: [
            {
              match: ":",
              name: "invalid.illegal.extra-colon-in-dictionary-type.swift"
            },
            { include: "#declarations-available-types" }
          ]
        }
      ]
    },
    "declarations-available-types-tuple-type": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.section.tuple-type.begin.swift" } },
      end: "\\)|(?=[>\\]{}])",
      endCaptures: { 0: { name: "punctuation.section.tuple-type.end.swift" } },
      patterns: [{ include: "#declarations-available-types" }]
    },
    "declarations-extension": {
      begin: "\\b(extension)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))",
      beginCaptures: {
        1: { name: "storage.type.$1.swift" },
        2: {
          name: "entity.name.type.swift",
          patterns: [{ include: "#declarations-available-types" }]
        },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?<=\\})",
      name: "meta.definition.type.$1.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-where-clause" },
        { include: "#declarations-inheritance-clause" },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } },
          name: "meta.definition.type.body.swift",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "declarations-function": {
      begin: "(?x)\n\\b\n(func)\n\\s+\n(\n  (?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)\n  | (?:\n    (\n      (?<oph>                # operator-head\n        [/=\\-+!*%<>&|^~?]\n        | [\\x{00A1}-\\x{00A7}]\n        | [\\x{00A9}\\x{00AB}]\n        | [\\x{00AC}\\x{00AE}]\n        | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n        | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n        | [\\x{2030}-\\x{203E}]\n        | [\\x{2041}-\\x{2053}]\n        | [\\x{2055}-\\x{205E}]\n        | [\\x{2190}-\\x{23FF}]\n        | [\\x{2500}-\\x{2775}]\n        | [\\x{2794}-\\x{2BFF}]\n        | [\\x{2E00}-\\x{2E7F}]\n        | [\\x{3001}-\\x{3003}]\n        | [\\x{3008}-\\x{3030}]\n      )\n      (\n        \\g<oph>\n        | (?<opc>                # operator-character\n          [\\x{0300}-\\x{036F}]\n          | [\\x{1DC0}-\\x{1DFF}]\n          | [\\x{20D0}-\\x{20FF}]\n          | [\\x{FE00}-\\x{FE0F}]\n          | [\\x{FE20}-\\x{FE2F}]\n          | [\\x{E0100}-\\x{E01EF}]\n        )\n      )*\n    )\n    | ( \\. ( \\g<oph> | \\g<opc> | \\. )+ )      # Dot operators\n  )\n)\n\\s*\n(?=\\(|<)",
      beginCaptures: {
        1: { name: "storage.type.function.swift" },
        2: { name: "entity.name.function.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?<=\\})|$(?# functions in protocol declarations or generated interfaces have no body)",
      name: "meta.definition.function.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-parameter-clause" },
        { include: "#declarations-function-result" },
        { include: "#async-throws" },
        { include: "#declarations-generic-where-clause" },
        {
          begin: "(\\{)",
          beginCaptures: {
            1: { name: "punctuation.section.function.begin.swift" }
          },
          end: "(\\})",
          endCaptures: { 1: { name: "punctuation.section.function.end.swift" } },
          name: "meta.definition.function.body.swift",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "declarations-function-initializer": {
      begin: "(?<!\\.)\\b(init[?!]*(?# only one is valid, but we want the in\u21E5 snippet to produce something that looks good))\\s*(?=\\(|<)",
      beginCaptures: {
        1: {
          name: "storage.type.function.swift",
          patterns: [
            {
              match: "(?<=[?!])[?!]+",
              name: "invalid.illegal.character-not-allowed-here.swift"
            }
          ]
        }
      },
      end: "(?<=\\})|$",
      name: "meta.definition.function.initializer.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-parameter-clause" },
        { include: "#async-throws" },
        { include: "#declarations-generic-where-clause" },
        {
          begin: "(\\{)",
          beginCaptures: {
            1: { name: "punctuation.section.function.begin.swift" }
          },
          end: "(\\})",
          endCaptures: { 1: { name: "punctuation.section.function.end.swift" } },
          name: "meta.definition.function.body.swift",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "declarations-function-result": {
      begin: "(?<![/=\\-+!*%<>&|\\^~.])(->)(?![/=\\-+!*%<>&|\\^~.])\\s*",
      beginCaptures: { 1: { name: "keyword.operator.function-result.swift" } },
      end: "(?!\\G)(?=\\{|\\bwhere\\b|;|=)|$",
      name: "meta.function-result.swift",
      patterns: [{ include: "#declarations-available-types" }]
    },
    "declarations-function-subscript": {
      begin: "(?<!\\.)\\b(subscript)\\s*(?=\\(|<)",
      beginCaptures: { 1: { name: "storage.type.function.swift" } },
      end: "(?<=\\})|$",
      name: "meta.definition.function.subscript.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-parameter-clause" },
        { include: "#declarations-function-result" },
        { include: "#async-throws" },
        { include: "#declarations-generic-where-clause" },
        {
          begin: "(\\{)",
          beginCaptures: {
            1: { name: "punctuation.section.function.begin.swift" }
          },
          end: "(\\})",
          endCaptures: { 1: { name: "punctuation.section.function.end.swift" } },
          name: "meta.definition.function.body.swift",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "declarations-generic-argument-clause": {
      begin: "<",
      beginCaptures: {
        0: { name: "punctuation.separator.generic-argument-clause.begin.swift" }
      },
      end: ">|(?=[)\\]{}])",
      endCaptures: {
        0: { name: "punctuation.separator.generic-argument-clause.end.swift" }
      },
      name: "meta.generic-argument-clause.swift",
      patterns: [{ include: "#declarations-available-types" }]
    },
    "declarations-generic-parameter-clause": {
      begin: "<",
      beginCaptures: {
        0: { name: "punctuation.separator.generic-parameter-clause.begin.swift" }
      },
      end: ">|(?=[^\\w\\d:<>\\s,=&`])(?# characters besides these are never valid in a generic param list -- even if it's not really a valid clause, we should stop trying to parse it if we see one of them.)",
      endCaptures: {
        0: { name: "punctuation.separator.generic-parameter-clause.end.swift" }
      },
      name: "meta.generic-parameter-clause.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-where-clause" },
        { match: "\\beach\\b", name: "keyword.control.loop.swift" },
        {
          captures: { 1: { name: "variable.language.generic-parameter.swift" } },
          match: "\\b((?!\\d)\\w[\\w\\d]*)\\b"
        },
        { match: ",", name: "punctuation.separator.generic-parameters.swift" },
        {
          begin: "(:)\\s*",
          beginCaptures: {
            1: {
              name: "punctuation.separator.generic-parameter-constraint.swift"
            }
          },
          end: "(?=[,>]|(?!\\G)\\bwhere\\b)",
          name: "meta.generic-parameter-constraint.swift",
          patterns: [
            {
              begin: "\\G",
              end: "(?=[,>]|(?!\\G)\\bwhere\\b)",
              name: "entity.other.inherited-class.swift",
              patterns: [
                { include: "#declarations-type-identifier" },
                { include: "#declarations-type-operators" }
              ]
            }
          ]
        }
      ]
    },
    "declarations-generic-where-clause": {
      begin: "\\b(where)\\b\\s*",
      beginCaptures: {
        1: { name: "keyword.other.generic-constraint-introducer.swift" }
      },
      end: "(?!\\G)$|(?=[>{};\\n]|//|/\\*)",
      name: "meta.generic-where-clause.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-where-clause-requirement-list" }
      ]
    },
    "declarations-generic-where-clause-requirement-list": {
      begin: "\\G|,\\s*",
      end: "(?=[,>{};\\n]|//|/\\*)",
      patterns: [
        { include: "#comments" },
        { include: "#constraint" },
        { include: "#declarations-available-types" },
        {
          begin: "(?<![/=\\-+!*%<>&|\\^~.])(==)(?![/=\\-+!*%<>&|\\^~.])",
          beginCaptures: {
            1: { name: "keyword.operator.generic-constraint.same-type.swift" }
          },
          end: "(?=\\s*[,>{};\\n]|//|/\\*)",
          name: "meta.generic-where-clause.same-type-requirement.swift",
          patterns: [{ include: "#declarations-available-types" }]
        },
        {
          begin: "(?<![/=\\-+!*%<>&|\\^~.])(:)(?![/=\\-+!*%<>&|\\^~.])",
          beginCaptures: {
            1: { name: "keyword.operator.generic-constraint.conforms-to.swift" }
          },
          end: "(?=\\s*[,>{};\\n]|//|/\\*)",
          name: "meta.generic-where-clause.conformance-requirement.swift",
          patterns: [
            {
              begin: "\\G\\s*",
              contentName: "entity.other.inherited-class.swift",
              end: "(?=\\s*[,>{};\\n]|//|/\\*)",
              patterns: [{ include: "#declarations-available-types" }]
            }
          ]
        }
      ]
    },
    "declarations-import": {
      begin: "(?<!\\.)\\b(import)\\s+",
      beginCaptures: { 1: { name: "keyword.control.import.swift" } },
      end: "(;)|$\\n?|(?=//|/\\*)",
      endCaptures: { 1: { name: "punctuation.terminator.statement.swift" } },
      name: "meta.import.swift",
      patterns: [
        {
          begin: "\\G(?!;|$|//|/\\*)(?:(typealias|struct|class|actor|enum|protocol|var|func)\\s+)?",
          beginCaptures: { 1: { name: "storage.modifier.swift" } },
          end: "(?=;|$|//|/\\*)",
          patterns: [
            {
              captures: {
                1: { name: "punctuation.definition.identifier.swift" },
                2: { name: "punctuation.definition.identifier.swift" }
              },
              match: "(?x)\n(?<=\\G|\\.)\n(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)",
              name: "entity.name.type.swift"
            },
            {
              match: "(?x)\n(?<=\\G|\\.)\n\\$[0-9]+",
              name: "entity.name.type.swift"
            },
            {
              captures: {
                1: {
                  patterns: [
                    {
                      match: "\\.",
                      name: "invalid.illegal.dot-not-allowed-here.swift"
                    }
                  ]
                }
              },
              match: "(?x)\n(?<=\\G|\\.)\n(?:\n  (\n    (?<oph>                # operator-head\n      [/=\\-+!*%<>&|^~?]\n      | [\\x{00A1}-\\x{00A7}]\n      | [\\x{00A9}\\x{00AB}]\n      | [\\x{00AC}\\x{00AE}]\n      | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n      | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n      | [\\x{2030}-\\x{203E}]\n      | [\\x{2041}-\\x{2053}]\n      | [\\x{2055}-\\x{205E}]\n      | [\\x{2190}-\\x{23FF}]\n      | [\\x{2500}-\\x{2775}]\n      | [\\x{2794}-\\x{2BFF}]\n      | [\\x{2E00}-\\x{2E7F}]\n      | [\\x{3001}-\\x{3003}]\n      | [\\x{3008}-\\x{3030}]\n    )\n    (\n      \\g<oph>\n      | (?<opc>                # operator-character\n        [\\x{0300}-\\x{036F}]\n        | [\\x{1DC0}-\\x{1DFF}]\n        | [\\x{20D0}-\\x{20FF}]\n        | [\\x{FE00}-\\x{FE0F}]\n        | [\\x{FE20}-\\x{FE2F}]\n        | [\\x{E0100}-\\x{E01EF}]\n      )\n    )*\n  )\n  | ( \\. ( \\g<oph> | \\g<opc> | \\. )+ )      # Dot operators\n)\n(?=\\.|;|$|//|/\\*|\\s)",
              name: "entity.name.type.swift"
            },
            { match: "\\.", name: "punctuation.separator.import.swift" },
            {
              begin: "(?!\\s*(;|$|//|/\\*))",
              end: "(?=\\s*(;|$|//|/\\*))",
              name: "invalid.illegal.character-not-allowed-here.swift"
            }
          ]
        }
      ]
    },
    "declarations-inheritance-clause": {
      begin: "(:)(?=\\s*\\{)|(:)\\s*",
      beginCaptures: {
        1: { name: "invalid.illegal.empty-inheritance-clause.swift" },
        2: { name: "punctuation.separator.inheritance-clause.swift" }
      },
      end: "(?!\\G)$|(?=[={}]|(?!\\G)\\bwhere\\b)",
      name: "meta.inheritance-clause.swift",
      patterns: [
        {
          begin: "\\bclass\\b",
          beginCaptures: { 0: { name: "storage.type.class.swift" } },
          end: "(?=[={}]|(?!\\G)\\bwhere\\b)",
          patterns: [
            { include: "#comments" },
            { include: "#declarations-inheritance-clause-more-types" }
          ]
        },
        {
          begin: "\\G",
          end: "(?!\\G)$|(?=[={}]|(?!\\G)\\bwhere\\b)",
          patterns: [
            { include: "#comments" },
            { include: "#declarations-inheritance-clause-inherited-type" },
            { include: "#declarations-inheritance-clause-more-types" },
            { include: "#declarations-type-operators" }
          ]
        }
      ]
    },
    "declarations-inheritance-clause-inherited-type": {
      begin: "(?=[`\\p{L}_])",
      end: "(?!\\G)",
      name: "entity.other.inherited-class.swift",
      patterns: [{ include: "#declarations-type-identifier" }]
    },
    "declarations-inheritance-clause-more-types": {
      begin: ",\\s*",
      end: "(?!\\G)(?!//|/\\*)|(?=[,={}]|(?!\\G)\\bwhere\\b)",
      name: "meta.inheritance-list.more-types",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-inheritance-clause-inherited-type" },
        { include: "#declarations-inheritance-clause-more-types" },
        { include: "#declarations-type-operators" }
      ]
    },
    "declarations-macro": {
      begin: "(?x)\n\\b\n(macro)\n\\s+\n((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\n\\s*\n(?=\\(|<|=)",
      beginCaptures: {
        1: { name: "storage.type.function.swift" },
        2: { name: "entity.name.function.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "$|(?=;|//|/\\*|\\}|=)",
      name: "meta.definition.macro.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-parameter-clause" },
        { include: "#declarations-function-result" },
        { include: "#async-throws" },
        { include: "#declarations-generic-where-clause" }
      ]
    },
    "declarations-operator": {
      begin: "(?x)\n(?:\n  \\b(prefix|infix|postfix)\n  \\s+\n)?\n\\b\n(operator)\n\\s+\n(\n  (\n    (?<oph>                  # operator-head\n      [/=\\-+!*%<>&|^~?]\n      | [\\x{00A1}-\\x{00A7}]\n      | [\\x{00A9}\\x{00AB}]\n      | [\\x{00AC}\\x{00AE}]\n      | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n      | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n      | [\\x{2030}-\\x{203E}]\n      | [\\x{2041}-\\x{2053}]\n      | [\\x{2055}-\\x{205E}]\n      | [\\x{2190}-\\x{23FF}]\n      | [\\x{2500}-\\x{2775}]\n      | [\\x{2794}-\\x{2BFF}]\n      | [\\x{2E00}-\\x{2E7F}]\n      | [\\x{3001}-\\x{3003}]\n      | [\\x{3008}-\\x{3030}]\n    )\n    (\n      \\g<oph>\n      | \\.                  # Invalid dot\n      | (?<opc>                # operator-character\n        [\\x{0300}-\\x{036F}]\n        | [\\x{1DC0}-\\x{1DFF}]\n        | [\\x{20D0}-\\x{20FF}]\n        | [\\x{FE00}-\\x{FE0F}]\n        | [\\x{FE20}-\\x{FE2F}]\n        | [\\x{E0100}-\\x{E01EF}]\n      )\n    )*+\n  )\n  | ( \\. ( \\g<oph> | \\g<opc> | \\. )++ )      # Dot operators\n)\n\\s*",
      beginCaptures: {
        1: { name: "storage.modifier.swift" },
        2: { name: "storage.type.function.operator.swift" },
        3: { name: "entity.name.function.operator.swift" },
        4: {
          name: "entity.name.function.operator.swift",
          patterns: [
            { match: "\\.", name: "invalid.illegal.dot-not-allowed-here.swift" }
          ]
        }
      },
      end: "(;)|$\\n?|(?=//|/\\*)",
      endCaptures: { 1: { name: "punctuation.terminator.statement.swift" } },
      name: "meta.definition.operator.swift",
      patterns: [
        { include: "#declarations-operator-swift2" },
        { include: "#declarations-operator-swift3" },
        {
          match: "((?!$|;|//|/\\*)\\S)+",
          name: "invalid.illegal.character-not-allowed-here.swift"
        }
      ]
    },
    "declarations-operator-swift2": {
      begin: "\\G(\\{)",
      beginCaptures: { 1: { name: "punctuation.definition.operator.begin.swift" } },
      end: "(\\})",
      endCaptures: { 1: { name: "punctuation.definition.operator.end.swift" } },
      patterns: [
        { include: "#comments" },
        {
          captures: {
            1: { name: "storage.modifier.swift" },
            2: { name: "keyword.other.operator.associativity.swift" }
          },
          match: "\\b(associativity)\\s+(left|right)\\b"
        },
        {
          captures: {
            1: { name: "storage.modifier.swift" },
            2: { name: "constant.numeric.integer.swift" }
          },
          match: "\\b(precedence)\\s+([0-9]+)\\b"
        },
        {
          captures: { 1: { name: "storage.modifier.swift" } },
          match: "\\b(assignment)\\b"
        }
      ]
    },
    "declarations-operator-swift3": {
      captures: {
        2: {
          name: "entity.other.inherited-class.swift",
          patterns: [{ include: "#declarations-types-precedencegroup" }]
        },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      match: "\\G(:)\\s*((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))"
    },
    "declarations-parameter-clause": {
      begin: "(\\()",
      beginCaptures: {
        1: { name: "punctuation.definition.parameters.begin.swift" }
      },
      end: "(\\))(?:\\s*(async)\\b)?",
      endCaptures: {
        1: { name: "punctuation.definition.parameters.end.swift" },
        2: { name: "storage.modifier.async.swift" }
      },
      name: "meta.parameter-clause.swift",
      patterns: [{ include: "#declarations-parameter-list" }]
    },
    "declarations-parameter-list": {
      patterns: [
        {
          captures: {
            1: { name: "entity.name.function.swift" },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" },
            4: { name: "variable.parameter.function.swift" },
            5: { name: "punctuation.definition.identifier.swift" },
            6: { name: "punctuation.definition.identifier.swift" }
          },
          match: "((?<q1>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q1>))\\s+((?<q2>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q2>))(?=\\s*:)"
        },
        {
          captures: {
            1: { name: "variable.parameter.function.swift" },
            2: { name: "entity.name.function.swift" },
            3: { name: "punctuation.definition.identifier.swift" },
            4: { name: "punctuation.definition.identifier.swift" }
          },
          match: "(((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)))(?=\\s*:)"
        },
        {
          begin: ":\\s*(?!\\s)",
          end: "(?=[,)])",
          patterns: [
            { include: "#declarations-available-types" },
            {
              match: ":",
              name: "invalid.illegal.extra-colon-in-parameter-list.swift"
            },
            {
              begin: "=",
              beginCaptures: { 0: { name: "keyword.operator.assignment.swift" } },
              end: "(?=[,)])",
              patterns: [{ include: "#expressions" }]
            }
          ]
        }
      ]
    },
    "declarations-precedencegroup": {
      begin: "\\b(precedencegroup)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(?=\\{)",
      beginCaptures: {
        1: { name: "storage.type.precedencegroup.swift" },
        2: { name: "entity.name.type.precedencegroup.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?!\\G)",
      name: "meta.definition.precedencegroup.swift",
      patterns: [
        {
          begin: "\\{",
          beginCaptures: {
            0: { name: "punctuation.definition.precedencegroup.begin.swift" }
          },
          end: "\\}",
          endCaptures: {
            0: { name: "punctuation.definition.precedencegroup.end.swift" }
          },
          patterns: [
            { include: "#comments" },
            {
              captures: {
                1: { name: "storage.modifier.swift" },
                2: {
                  name: "entity.other.inherited-class.swift",
                  patterns: [{ include: "#declarations-types-precedencegroup" }]
                },
                3: { name: "punctuation.definition.identifier.swift" },
                4: { name: "punctuation.definition.identifier.swift" }
              },
              match: "\\b(higherThan|lowerThan)\\s*:\\s*((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))"
            },
            {
              captures: {
                1: { name: "storage.modifier.swift" },
                2: { name: "keyword.other.operator.associativity.swift" }
              },
              match: "\\b(associativity)\\b(?:\\s*:\\s*(right|left|none)\\b)?"
            },
            {
              captures: {
                1: { name: "storage.modifier.swift" },
                2: { name: "constant.language.boolean.swift" }
              },
              match: "\\b(assignment)\\b(?:\\s*:\\s*(true|false)\\b)?"
            }
          ]
        }
      ]
    },
    "declarations-protocol": {
      begin: "\\b(protocol)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))",
      beginCaptures: {
        1: { name: "storage.type.$1.swift" },
        2: { name: "entity.name.type.$1.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?<=\\})",
      name: "meta.definition.type.protocol.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-inheritance-clause" },
        { include: "#declarations-generic-where-clause" },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } },
          name: "meta.definition.type.body.swift",
          patterns: [
            { include: "#declarations-protocol-protocol-method" },
            { include: "#declarations-protocol-protocol-initializer" },
            { include: "#declarations-protocol-associated-type" },
            { include: "$self" }
          ]
        }
      ]
    },
    "declarations-protocol-associated-type": {
      begin: "\\b(associatedtype)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*",
      beginCaptures: {
        1: { name: "keyword.other.declaration-specifier.swift" },
        2: { name: "variable.language.associatedtype.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?!\\G)$|(?=[;}]|$)",
      name: "meta.definition.associatedtype.swift",
      patterns: [
        { include: "#declarations-inheritance-clause" },
        { include: "#declarations-generic-where-clause" },
        { include: "#declarations-typealias-assignment" }
      ]
    },
    "declarations-protocol-protocol-initializer": {
      begin: "(?<!\\.)\\b(init[?!]*(?# only one is valid, but we want the in\u21E5 snippet to produce something that looks good))\\s*(?=\\(|<)",
      beginCaptures: {
        1: {
          name: "storage.type.function.swift",
          patterns: [
            {
              match: "(?<=[?!])[?!]+",
              name: "invalid.illegal.character-not-allowed-here.swift"
            }
          ]
        }
      },
      end: "$|(?=;|//|/\\*|\\})",
      name: "meta.definition.function.initializer.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-parameter-clause" },
        { include: "#async-throws" },
        { include: "#declarations-generic-where-clause" },
        {
          begin: "\\{",
          beginCaptures: {
            0: { name: "punctuation.section.function.begin.swift" }
          },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.section.function.end.swift" } },
          name: "invalid.illegal.function-body-not-allowed-in-protocol.swift",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "declarations-protocol-protocol-method": {
      begin: "(?x)\n\\b\n(func)\n\\s+\n(\n  (?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)\n    | (?:\n      (\n        (?<oph>                # operator-head\n          [/=\\-+!*%<>&|^~?]\n          | [\\x{00A1}-\\x{00A7}]\n          | [\\x{00A9}\\x{00AB}]\n          | [\\x{00AC}\\x{00AE}]\n          | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n          | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n          | [\\x{2030}-\\x{203E}]\n          | [\\x{2041}-\\x{2053}]\n          | [\\x{2055}-\\x{205E}]\n          | [\\x{2190}-\\x{23FF}]\n          | [\\x{2500}-\\x{2775}]\n          | [\\x{2794}-\\x{2BFF}]\n          | [\\x{2E00}-\\x{2E7F}]\n          | [\\x{3001}-\\x{3003}]\n          | [\\x{3008}-\\x{3030}]\n        )\n        (\n          \\g<oph>\n          | (?<opc>                # operator-character\n            [\\x{0300}-\\x{036F}]\n            | [\\x{1DC0}-\\x{1DFF}]\n            | [\\x{20D0}-\\x{20FF}]\n            | [\\x{FE00}-\\x{FE0F}]\n            | [\\x{FE20}-\\x{FE2F}]\n            | [\\x{E0100}-\\x{E01EF}]\n          )\n        )*\n      )\n      | ( \\. ( \\g<oph> | \\g<opc> | \\. )+ )      # Dot operators\n    )\n  )\n\\s*\n(?=\\(|<)",
      beginCaptures: {
        1: { name: "storage.type.function.swift" },
        2: { name: "entity.name.function.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "$|(?=;|//|/\\*|\\})",
      name: "meta.definition.function.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-parameter-clause" },
        { include: "#declarations-function-result" },
        { include: "#async-throws" },
        { include: "#declarations-generic-where-clause" },
        {
          begin: "\\{",
          beginCaptures: {
            0: { name: "punctuation.section.function.begin.swift" }
          },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.section.function.end.swift" } },
          name: "invalid.illegal.function-body-not-allowed-in-protocol.swift",
          patterns: [{ include: "$self" }]
        }
      ]
    },
    "declarations-type": {
      patterns: [
        {
          begin: "\\b(class(?!\\s+(?:func|var|let)\\b)|struct|actor)\\b\\s*((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))",
          beginCaptures: {
            1: { name: "storage.type.$1.swift" },
            2: { name: "entity.name.type.$1.swift" },
            3: { name: "punctuation.definition.identifier.swift" },
            4: { name: "punctuation.definition.identifier.swift" }
          },
          end: "(?<=\\})",
          name: "meta.definition.type.$1.swift",
          patterns: [
            { include: "#comments" },
            { include: "#declarations-generic-parameter-clause" },
            { include: "#declarations-generic-where-clause" },
            { include: "#declarations-inheritance-clause" },
            {
              begin: "\\{",
              beginCaptures: {
                0: { name: "punctuation.definition.type.begin.swift" }
              },
              end: "\\}",
              endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } },
              name: "meta.definition.type.body.swift",
              patterns: [{ include: "$self" }]
            }
          ]
        },
        { include: "#declarations-type-enum" }
      ]
    },
    "declarations-type-enum": {
      begin: "\\b(enum)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))",
      beginCaptures: {
        1: { name: "storage.type.$1.swift" },
        2: { name: "entity.name.type.$1.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?<=\\})",
      name: "meta.definition.type.$1.swift",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-generic-parameter-clause" },
        { include: "#declarations-generic-where-clause" },
        { include: "#declarations-inheritance-clause" },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.definition.type.begin.swift" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.definition.type.end.swift" } },
          name: "meta.definition.type.body.swift",
          patterns: [
            { include: "#declarations-type-enum-enum-case-clause" },
            { include: "$self" }
          ]
        }
      ]
    },
    "declarations-type-enum-associated-values": {
      begin: "\\G\\(",
      beginCaptures: {
        0: { name: "punctuation.definition.parameters.begin.swift" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.parameters.end.swift" } },
      patterns: [
        { include: "#comments" },
        {
          begin: "(?x)\n(?:(_)|((?<q1>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*\\k<q1>))\n\\s+\n(((?<q2>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*\\k<q2>))\n\\s*(:)",
          beginCaptures: {
            1: { name: "entity.name.function.swift" },
            2: { name: "invalid.illegal.distinct-labels-not-allowed.swift" },
            5: { name: "variable.parameter.function.swift" },
            7: { name: "punctuation.separator.argument-label.swift" }
          },
          end: "(?=[,)\\]])",
          patterns: [{ include: "#declarations-available-types" }]
        },
        {
          begin: "(((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*\\k<q>))\\s*(:)",
          beginCaptures: {
            1: { name: "entity.name.function.swift" },
            2: { name: "variable.parameter.function.swift" },
            4: { name: "punctuation.separator.argument-label.swift" }
          },
          end: "(?=[,)\\]])",
          patterns: [{ include: "#declarations-available-types" }]
        },
        {
          begin: "(?![,)\\]])(?=\\S)",
          end: "(?=[,)\\]])",
          patterns: [
            { include: "#declarations-available-types" },
            {
              match: ":",
              name: "invalid.illegal.extra-colon-in-parameter-list.swift"
            }
          ]
        }
      ]
    },
    "declarations-type-enum-enum-case": {
      begin: "(?x)((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*",
      beginCaptures: { 1: { name: "variable.other.enummember.swift" } },
      end: "(?<=\\))|(?![=(])",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-type-enum-associated-values" },
        { include: "#declarations-type-enum-raw-value-assignment" }
      ]
    },
    "declarations-type-enum-enum-case-clause": {
      begin: "\\b(case)\\b\\s*",
      beginCaptures: { 1: { name: "storage.type.enum.case.swift" } },
      end: "(?=[;}])|(?!\\G)(?!//|/\\*)(?=[^\\s,])",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-type-enum-enum-case" },
        { include: "#declarations-type-enum-more-cases" }
      ]
    },
    "declarations-type-enum-more-cases": {
      begin: ",\\s*",
      end: "(?!\\G)(?!//|/\\*)(?=[;}]|[^\\s,])",
      name: "meta.enum-case.more-cases",
      patterns: [
        { include: "#comments" },
        { include: "#declarations-type-enum-enum-case" },
        { include: "#declarations-type-enum-more-cases" }
      ]
    },
    "declarations-type-enum-raw-value-assignment": {
      begin: "(=)\\s*",
      beginCaptures: { 1: { name: "keyword.operator.assignment.swift" } },
      end: "(?!\\G)",
      patterns: [{ include: "#comments" }, { include: "#literals" }]
    },
    "declarations-type-identifier": {
      begin: "((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*",
      beginCaptures: {
        1: {
          name: "meta.type-name.swift",
          patterns: [{ include: "#builtin-types" }]
        },
        2: { name: "punctuation.definition.identifier.swift" },
        3: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?!<)",
      patterns: [
        {
          begin: "(?=<)",
          end: "(?!\\G)",
          patterns: [{ include: "#declarations-generic-argument-clause" }]
        }
      ]
    },
    "declarations-type-operators": {
      patterns: [
        {
          captures: { 1: { name: "keyword.operator.type.composition.swift" } },
          match: "(?<![/=\\-+!*%<>&|\\^~.])(&)(?![/=\\-+!*%<>&|\\^~.])"
        },
        {
          captures: {
            1: { name: "keyword.operator.type.requirement-suppression.swift" }
          },
          match: "(?<![/=\\-+!*%<>&|\\^~.])(~)(?![/=\\-+!*%<>&|\\^~.])"
        }
      ]
    },
    "declarations-typealias": {
      begin: "\\b(typealias)\\s+((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*",
      beginCaptures: {
        1: { name: "keyword.other.declaration-specifier.swift" },
        2: { name: "entity.name.type.typealias.swift" },
        3: { name: "punctuation.definition.identifier.swift" },
        4: { name: "punctuation.definition.identifier.swift" }
      },
      end: "(?!\\G)$|(?=;|//|/\\*|$)",
      name: "meta.definition.typealias.swift",
      patterns: [
        {
          begin: "\\G(?=<)",
          end: "(?!\\G)",
          patterns: [{ include: "#declarations-generic-parameter-clause" }]
        },
        { include: "#declarations-typealias-assignment" }
      ]
    },
    "declarations-typealias-assignment": {
      begin: "(=)\\s*",
      beginCaptures: { 1: { name: "keyword.operator.assignment.swift" } },
      end: "(?!\\G)$|(?=;|//|/\\*|$)",
      patterns: [{ include: "#declarations-available-types" }]
    },
    "declarations-typed-variable-declaration": {
      begin: "(?x)\n\\b(?:(async)\\s+)?(let|var)\\b\\s+\n(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>)\\s*\n:",
      beginCaptures: {
        1: { name: "storage.modifier.async.swift" },
        2: { name: "keyword.other.declaration-specifier.swift" }
      },
      end: "(?=$|[={])",
      patterns: [{ include: "#declarations-available-types" }]
    },
    "declarations-types-precedencegroup": {
      patterns: [
        {
          match: "\\b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\\b",
          name: "support.type.swift"
        }
      ]
    },
    expressions: {
      patterns: [
        {
          include: "#expressions-without-trailing-closures-or-member-references"
        },
        { include: "#expressions-trailing-closure" },
        { include: "#member-reference" }
      ]
    },
    "expressions-trailing-closure": {
      patterns: [
        {
          captures: {
            1: { name: "support.function.any-method.swift" },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" }
          },
          match: "(#?(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))(?=\\s*\\{)",
          name: "meta.function-call.trailing-closure-only.swift"
        },
        {
          captures: {
            1: {
              name: "support.function.any-method.trailing-closure-label.swift"
            },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" },
            4: { name: "punctuation.separator.argument-label.swift" }
          },
          match: "((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(:)(?=\\s*\\{)"
        }
      ]
    },
    "expressions-without-trailing-closures": {
      patterns: [
        {
          include: "#expressions-without-trailing-closures-or-member-references"
        },
        { include: "#member-references" }
      ]
    },
    "expressions-without-trailing-closures-or-member-references": {
      patterns: [
        { include: "#comments" },
        { include: "#code-block" },
        { include: "#attributes" },
        {
          include: "#expressions-without-trailing-closures-or-member-references-closure-parameter"
        },
        { include: "#literals" },
        { include: "#operators" },
        { include: "#builtin-types" },
        { include: "#builtin-functions" },
        { include: "#builtin-global-functions" },
        { include: "#builtin-properties" },
        {
          include: "#expressions-without-trailing-closures-or-member-references-compound-name"
        },
        { include: "#conditionals" },
        { include: "#keywords" },
        {
          include: "#expressions-without-trailing-closures-or-member-references-availability-condition"
        },
        {
          include: "#expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression"
        },
        {
          include: "#expressions-without-trailing-closures-or-member-references-macro-expansion"
        },
        {
          include: "#expressions-without-trailing-closures-or-member-references-subscript-expression"
        },
        {
          include: "#expressions-without-trailing-closures-or-member-references-parenthesized-expression"
        },
        { match: "\\b_\\b", name: "support.variable.discard-value.swift" }
      ]
    },
    "expressions-without-trailing-closures-or-member-references-availability-condition": {
      begin: "\\B(#(?:un)?available)(\\()",
      beginCaptures: {
        1: { name: "support.function.availability-condition.swift" },
        2: { name: "punctuation.definition.arguments.begin.swift" }
      },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } },
      patterns: [
        {
          captures: {
            1: { name: "keyword.other.platform.os.swift" },
            2: { name: "constant.numeric.swift" }
          },
          match: "\\s*\\b((?:iOS|macOS|OSX|watchOS|tvOS|UIKitForMac)(?:ApplicationExtension)?)\\b(?:\\s+([0-9]+(?:\\.[0-9]+)*\\b))"
        },
        {
          captures: {
            1: { name: "keyword.other.platform.all.swift" },
            2: { name: "invalid.illegal.character-not-allowed-here.swift" }
          },
          match: "(\\*)\\s*(.*?)(?=[,)])"
        },
        {
          match: "[^\\s,)]+",
          name: "invalid.illegal.character-not-allowed-here.swift"
        }
      ]
    },
    "expressions-without-trailing-closures-or-member-references-closure-parameter": { match: "\\$[0-9]+", name: "variable.language.closure-parameter.swift" },
    "expressions-without-trailing-closures-or-member-references-compound-name": {
      captures: {
        1: { name: "entity.name.function.compound-name.swift" },
        2: { name: "punctuation.definition.entity.swift" },
        3: { name: "punctuation.definition.entity.swift" },
        4: {
          patterns: [
            {
              captures: {
                1: { name: "punctuation.definition.entity.swift" },
                2: { name: "punctuation.definition.entity.swift" }
              },
              match: "(?<q>`?)(?!_:)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>):",
              name: "entity.name.function.compound-name.swift"
            }
          ]
        }
      },
      match: "(?x)\n((?<q1>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q1>))           # function name\n\\(\n  (\n    (\n      ((?<q2>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q2>))   # argument label\n      :                        # colon\n    )+\n  )\n\\)"
    },
    "expressions-without-trailing-closures-or-member-references-expression-element-list": {
      patterns: [
        { include: "#comments" },
        {
          begin: "((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(:)",
          beginCaptures: {
            1: { name: "support.function.any-method.swift" },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" },
            4: { name: "punctuation.separator.argument-label.swift" }
          },
          end: "(?=[,)\\]])",
          patterns: [{ include: "#expressions" }]
        },
        {
          begin: "(?![,)\\]])(?=\\S)",
          end: "(?=[,)\\]])",
          patterns: [{ include: "#expressions" }]
        }
      ]
    },
    "expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression": {
      patterns: [
        {
          begin: "(#?(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))\\s*(\\()",
          beginCaptures: {
            1: { name: "support.function.any-method.swift" },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" },
            4: { name: "punctuation.definition.arguments.begin.swift" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.swift" }
          },
          name: "meta.function-call.swift",
          patterns: [
            {
              include: "#expressions-without-trailing-closures-or-member-references-expression-element-list"
            }
          ]
        },
        {
          begin: "(?<=[`\\])}>\\p{L}_\\p{N}\\p{M}])\\s*(\\()",
          beginCaptures: {
            1: { name: "punctuation.definition.arguments.begin.swift" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.swift" }
          },
          name: "meta.function-call.swift",
          patterns: [
            {
              include: "#expressions-without-trailing-closures-or-member-references-expression-element-list"
            }
          ]
        }
      ]
    },
    "expressions-without-trailing-closures-or-member-references-macro-expansion": {
      match: "(#(?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))",
      name: "support.function.any-method.swift"
    },
    "expressions-without-trailing-closures-or-member-references-parenthesized-expression": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.section.tuple.begin.swift" } },
      end: "(\\))\\s*((?:\\b(?:async|throws|rethrows)\\s)*)",
      endCaptures: {
        1: { name: "punctuation.section.tuple.end.swift" },
        2: {
          patterns: [
            {
              match: "\\brethrows\\b",
              name: "invalid.illegal.rethrows-only-allowed-on-function-declarations.swift"
            },
            { include: "#async-throws" }
          ]
        }
      },
      patterns: [
        {
          include: "#expressions-without-trailing-closures-or-member-references-expression-element-list"
        }
      ]
    },
    "expressions-without-trailing-closures-or-member-references-subscript-expression": {
      begin: "(?<=[`\\p{L}_\\p{N}\\p{M}])\\s*(\\[)",
      beginCaptures: {
        1: { name: "punctuation.definition.arguments.begin.swift" }
      },
      end: "\\]",
      endCaptures: { 0: { name: "punctuation.definition.arguments.end.swift" } },
      name: "meta.subscript-expression.swift",
      patterns: [
        {
          include: "#expressions-without-trailing-closures-or-member-references-expression-element-list"
        }
      ]
    },
    keywords: {
      patterns: [
        {
          match: "(?<!\\.)\\b(?:if|else|guard|where|switch|case|default|fallthrough)\\b",
          name: "keyword.control.branch.swift"
        },
        {
          match: "(?<!\\.)\\b(?:continue|break|fallthrough|return)\\b",
          name: "keyword.control.transfer.swift"
        },
        {
          match: "(?<!\\.)\\b(?:while|for|in|each)\\b",
          name: "keyword.control.loop.swift"
        },
        {
          match: "\\bany\\b(?=\\s*`?[\\p{L}_])",
          name: "keyword.other.operator.type.existential.swift"
        },
        {
          captures: {
            1: { name: "keyword.control.loop.swift" },
            2: { name: "punctuation.whitespace.trailing.repeat.swift" }
          },
          match: "(?<!\\.)\\b(repeat)\\b(\\s*)"
        },
        { match: "(?<!\\.)\\bdefer\\b", name: "keyword.control.defer.swift" },
        {
          captures: {
            1: { name: "invalid.illegal.try-must-precede-await.swift" },
            2: { name: "keyword.control.await.swift" }
          },
          match: "(?<!\\.)\\b(?:(await\\s+try)|(await))\\b"
        },
        {
          match: "(?<!\\.)\\b(?:catch|throw|try)\\b|\\btry[?!]\\B",
          name: "keyword.control.exception.swift"
        },
        {
          match: "(?<!\\.)\\b(?:throws|rethrows)\\b",
          name: "storage.modifier.exception.swift"
        },
        {
          captures: {
            1: { name: "keyword.control.exception.swift" },
            2: { name: "punctuation.whitespace.trailing.do.swift" }
          },
          match: "(?<!\\.)\\b(do)\\b(\\s*)"
        },
        {
          captures: {
            1: { name: "storage.modifier.async.swift" },
            2: { name: "keyword.other.declaration-specifier.swift" }
          },
          match: "(?<!\\.)\\b(?:(async)\\s+)?(let|var)\\b"
        },
        {
          match: "(?<!\\.)\\b(?:associatedtype|operator|typealias)\\b",
          name: "keyword.other.declaration-specifier.swift"
        },
        {
          match: "(?<!\\.)\\b(class|enum|extension|precedencegroup|protocol|struct|actor)\\b(?=\\s*`?[\\p{L}_])",
          name: "storage.type.$1.swift"
        },
        {
          match: "(?<!\\.)\\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix|distributed|nonisolated|borrowing|consuming)\\b",
          name: "storage.modifier.swift"
        },
        {
          match: "\\binit[?!]|\\binit\\b|(?<!\\.)\\b(?:func|deinit|subscript|didSet|get|set|willSet)\\b",
          name: "storage.type.function.swift"
        },
        {
          match: "(?<!\\.)\\b(?:fileprivate|private|internal|public|open|package)\\b",
          name: "keyword.other.declaration-specifier.accessibility.swift"
        },
        {
          match: "(?<!\\.)\\bunowned\\((?:safe|unsafe)\\)|(?<!\\.)\\b(?:weak|unowned)\\b",
          name: "keyword.other.capture-specifier.swift"
        },
        {
          captures: {
            1: { name: "keyword.other.type.swift" },
            2: { name: "keyword.other.type.metatype.swift" }
          },
          match: "(?<=\\.)(?:(dynamicType|self)|(Protocol|Type))\\b"
        },
        {
          match: "(?<!\\.)\\b(?:super|self|Self)\\b",
          name: "variable.language.swift"
        },
        {
          match: "\\B(?:#file|#filePath|#fileID|#line|#column|#function|#dsohandle)\\b|\\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\\b",
          name: "support.variable.swift"
        },
        { match: "(?<!\\.)\\bimport\\b", name: "keyword.control.import.swift" },
        {
          match: "(?<!\\.)\\bconsume(?=\\s+`?[\\p{L}_])",
          name: "keyword.control.consume.swift"
        },
        {
          match: "(?<!\\.)\\bcopy(?=\\s+`?[\\p{L}_])",
          name: "keyword.control.copy.swift"
        }
      ]
    },
    literals: {
      patterns: [
        { include: "#literals-boolean" },
        { include: "#literals-numeric" },
        { include: "#literals-string" },
        { match: "\\bnil\\b", name: "constant.language.nil.swift" },
        {
          match: "\\B#(colorLiteral|imageLiteral|fileLiteral)\\b",
          name: "support.function.object-literal.swift"
        },
        {
          match: "\\B#externalMacro\\b",
          name: "support.function.builtin-macro.swift"
        },
        { match: "\\B#keyPath\\b", name: "support.function.key-path.swift" },
        {
          begin: "\\B(#selector)(\\()(?:\\s*(getter|setter)\\s*(:))?",
          beginCaptures: {
            1: { name: "support.function.selector-reference.swift" },
            2: { name: "punctuation.definition.arguments.begin.swift" },
            3: { name: "support.variable.parameter.swift" },
            4: { name: "punctuation.separator.argument-label.swift" }
          },
          end: "\\)",
          endCaptures: {
            0: { name: "punctuation.definition.arguments.end.swift" }
          },
          patterns: [{ include: "#expressions" }]
        },
        { include: "#literals-regular-expression-literal" }
      ]
    },
    "literals-boolean": {
      match: "\\b(true|false)\\b",
      name: "constant.language.boolean.swift"
    },
    "literals-numeric": {
      patterns: [
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)[0-9][0-9_]*(?=\\.[0-9]|[eE])(?:\\.[0-9][0-9_]*)?(?:[eE][-+]?[0-9][0-9_]*)?\\b(?!\\.[0-9])",
          name: "constant.numeric.float.decimal.swift"
        },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\\.[0-9a-fA-F][0-9a-fA-F_]*)?[pP][-+]?[0-9][0-9_]*\\b(?!\\.[0-9])",
          name: "constant.numeric.float.hexadecimal.swift"
        },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\\.[0-9a-fA-F][0-9a-fA-F_]*)?(?:[pP][-+]?\\w*)\\b(?!\\.[0-9])",
          name: "invalid.illegal.numeric.float.invalid-exponent.swift"
        },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)\\.[0-9][\\w.]*",
          name: "invalid.illegal.numeric.float.missing-exponent.swift"
        },
        {
          match: "(?<=\\s|^)\\-?\\.[0-9][\\w.]*",
          name: "invalid.illegal.numeric.float.missing-leading-zero.swift"
        },
        {
          match: "(\\B\\-|\\b)0[box]_[0-9a-fA-F_]*(?:[pPeE][+-]?\\w+)?[\\w.]+",
          name: "invalid.illegal.numeric.leading-underscore.swift"
        },
        { match: "(?<=[\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)[0-9]+\\b" },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)0b[01][01_]*\\b(?!\\.[0-9])",
          name: "constant.numeric.integer.binary.swift"
        },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)0o[0-7][0-7_]*\\b(?!\\.[0-9])",
          name: "constant.numeric.integer.octal.swift"
        },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)[0-9][0-9_]*\\b(?!\\.[0-9])",
          name: "constant.numeric.integer.decimal.swift"
        },
        {
          match: "(\\B\\-|\\b)(?<![\\[\\](){}\\p{L}_\\p{N}\\p{M}]\\.)0x[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\.[0-9])",
          name: "constant.numeric.integer.hexadecimal.swift"
        },
        {
          match: "(\\B\\-|\\b)[0-9][\\w.]*",
          name: "invalid.illegal.numeric.other.swift"
        }
      ]
    },
    "literals-regular-expression-literal": {
      patterns: [
        {
          begin: "(#+)/\\n",
          end: "/\\1",
          name: "string.regexp.block.swift",
          patterns: [
            { include: "#literals-regular-expression-literal-regex-guts" },
            { include: "#literals-regular-expression-literal-line-comment" }
          ]
        },
        {
          captures: {
            0: {
              patterns: [
                { include: "#literals-regular-expression-literal-regex-guts" }
              ]
            },
            1: { name: "punctuation.definition.string.begin.regexp.swift" },
            12: { name: "punctuation.definition.string.end.regexp.swift" },
            13: { name: "invalid.illegal.returns-not-allowed.regexp" }
          },
          match: "(?x)\n(((\\#+)?)/)     # (1) for captures, (2) for matching end, (3) for conditionals\n(?(3)|(?!/))   # is not a comment\n(?(3)|(?!\\s))  # does not start with a space or tab\n(\\\\\\s)? # (4) may start with an escaped space or tab\n(?<guts>\n  (?>   # no backtracking, avoids issues with negative lookbehind at end\n    (?:\n      \\\\Q\n        (?:(?!\\\\E)(?!/\\2).)*+\n        (?:\\\\E\n          # A quoted sequence may not have a closing E, in which case it extends to the end of the regex\n          | (?(3)|(?<!\\s))(?=/\\2)\n        )\n      | \\\\.\n      | \\(\\?\\#[^)]*\\)\n      | \\(\\?\n          # we only support a fixed maximum number of braces because otherwise we can't balance the number of open and close braces\n          \\{(?<g1>\\{)?+(?<g2>\\{)?+(?<g3>\\{)?+(?<g4>\\{)?+(?<g5>\\{)?+\n          .+?\n          \\}(?(<g1>)\\})(?(<g2>)\\})(?(<g3>)\\})(?(<g4>)\\})(?(<g5>)\\})\n          (?:\\[(?!\\d)\\w+\\])?\n          [X<>]?\n        \\)\n      | (?<class>\\[ (?:\\\\. | [^\\[\\]] | \\g<class>)+ \\])\n      | \\(\\g<guts>?+\\)\n      | (?:(?!/\\2)[^()\\[\\\\])+  # any character (until end)\n    )+\n  )\n)?+\n# may end with a space only if it is an extended literal or contains only a single escaped space\n(?(3)|(?(5)(?<!\\s)))\n(/\\2)     # (12)\n| \\#+/.+(\\n)",
          name: "string.regexp.line.swift"
        }
      ]
    },
    "literals-regular-expression-literal-backreference-or-subpattern": {
      patterns: [
        {
          captures: {
            1: { name: "constant.character.escape.backslash.regexp" },
            2: { name: "variable.other.group-name.regexp" },
            3: { name: "keyword.operator.recursion-level.regexp" },
            4: { name: "constant.numeric.integer.decimal.regexp" },
            5: { name: "constant.numeric.integer.decimal.regexp" },
            6: { name: "keyword.operator.recursion-level.regexp" },
            7: { name: "constant.numeric.integer.decimal.regexp" },
            8: { name: "constant.character.escape.backslash.regexp" }
          },
          match: "(?x)(\\\\g\\{) (?: ((?!\\d)\\w+) (?:([+-])(\\d+))? | ([+-]?\\d+) (?:([+-])(\\d+))? ) (\\})"
        },
        {
          captures: {
            1: { name: "constant.character.escape.backslash.regexp" },
            2: { name: "constant.numeric.integer.decimal.regexp" },
            3: { name: "keyword.operator.recursion-level.regexp" },
            4: { name: "constant.numeric.integer.decimal.regexp" }
          },
          match: "(?x)(\\\\g) ([+-]?\\d+) (?:([+-])(\\d+))?"
        },
        {
          captures: {
            1: { name: "constant.character.escape.backslash.regexp" },
            3: { name: "variable.other.group-name.regexp" },
            4: { name: "keyword.operator.recursion-level.regexp" },
            5: { name: "constant.numeric.integer.decimal.regexp" },
            6: { name: "constant.numeric.integer.decimal.regexp" },
            7: { name: "keyword.operator.recursion-level.regexp" },
            8: { name: "constant.numeric.integer.decimal.regexp" },
            9: { name: "constant.character.escape.backslash.regexp" }
          },
          match: "(?x)(\\\\[gk](<)|\\\\[gk]') (?: ((?!\\d)\\w+) (?:([+-])(\\d+))? | ([+-]?\\d+) (?:([+-])(\\d+))? ) ((?(2)>|'))"
        },
        {
          captures: {
            1: { name: "constant.character.escape.backslash.regexp" },
            2: { name: "variable.other.group-name.regexp" },
            3: { name: "keyword.operator.recursion-level.regexp" },
            4: { name: "constant.numeric.integer.decimal.regexp" },
            5: { name: "constant.character.escape.backslash.regexp" }
          },
          match: "(?x)(\\\\k\\{) ((?!\\d)\\w+) (?:([+-])(\\d+))? (\\})"
        },
        { match: "\\\\[1-9][0-9]+", name: "keyword.other.back-reference.regexp" },
        {
          captures: {
            1: { name: "keyword.other.back-reference.regexp" },
            2: { name: "variable.other.group-name.regexp" },
            3: { name: "keyword.operator.recursion-level.regexp" },
            4: { name: "constant.numeric.integer.decimal.regexp" },
            5: { name: "keyword.other.back-reference.regexp" }
          },
          match: "(?x)(\\(\\?(?:P[=>]|&)) ((?!\\d)\\w+) (?:([+-])(\\d+))? (\\))"
        },
        { match: "\\(\\?R\\)", name: "keyword.other.back-reference.regexp" },
        {
          captures: {
            1: { name: "keyword.other.back-reference.regexp" },
            2: { name: "constant.numeric.integer.decimal.regexp" },
            3: { name: "keyword.operator.recursion-level.regexp" },
            4: { name: "constant.numeric.integer.decimal.regexp" },
            5: { name: "keyword.other.back-reference.regexp" }
          },
          match: "(?x)(\\(\\?) ([+-]?\\d+) (?:([+-])(\\d+))? (\\))"
        }
      ]
    },
    "literals-regular-expression-literal-backtracking-directive-or-global-matching-option": {
      captures: {
        1: { name: "keyword.control.directive.regexp" },
        2: { name: "keyword.control.directive.regexp" },
        3: { name: "keyword.control.directive.regexp" },
        4: { name: "variable.language.tag.regexp" },
        5: { name: "keyword.control.directive.regexp" },
        6: { name: "keyword.operator.assignment.regexp" },
        7: { name: "constant.numeric.integer.decimal.regexp" },
        8: { name: "keyword.control.directive.regexp" },
        9: { name: "keyword.control.directive.regexp" }
      },
      match: "(?x)\n(\\(\\*)\n(?:\n  (ACCEPT|FAIL|F|MARK(?=:)|(?=:)|COMMIT|PRUNE|SKIP|THEN)\n    (?:(:)([^)]+))?\n  | (?:(LIMIT_(?:DEPTH|HEAP|MATCH))(=)(\\d+))\n  | (\n      CRLF | CR | ANYCRLF | ANY | LF | NUL\n      | BSR_ANYCRLF | BSR_UNICODE\n      | NOTEMPTY_ATSTART | NOTEMPTY\n      | NO_AUTO_POSSESS | NO_DOTSTAR_ANCHOR\n      | NO_JIT | NO_START_OPT | UTF | UCP\n    )\n)\n(\\))"
    },
    "literals-regular-expression-literal-callout": {
      captures: {
        1: { name: "punctuation.definition.group.regexp" },
        10: { name: "entity.name.function.callout.regexp" },
        11: { name: "entity.name.function.callout.regexp" },
        12: { name: "punctuation.definition.group.regexp" },
        13: { name: "punctuation.definition.group.regexp" },
        14: { name: "keyword.control.callout.regexp" },
        15: { name: "entity.name.function.callout.regexp" },
        16: { name: "variable.language.tag-name.regexp" },
        17: { name: "punctuation.definition.group.regexp" },
        18: { name: "punctuation.definition.group.regexp" },
        19: { name: "keyword.control.callout.regexp" },
        2: { name: "keyword.control.callout.regexp" },
        26: { name: "variable.language.tag-name.regexp" },
        27: { name: "keyword.control.callout.regexp" },
        28: { name: "punctuation.definition.group.regexp" },
        3: { name: "constant.numeric.integer.decimal.regexp" },
        4: { name: "entity.name.function.callout.regexp" },
        5: { name: "entity.name.function.callout.regexp" },
        6: { name: "entity.name.function.callout.regexp" },
        7: { name: "entity.name.function.callout.regexp" },
        8: { name: "entity.name.function.callout.regexp" },
        9: { name: "entity.name.function.callout.regexp" }
      },
      match: "(?x)\n# PCRECallout\n(\\()(?<keyw>\\?C)\n  (?:\n    (?<num>\\d+)\n    | `(?<name>(?:[^`]|``)*)`\n    | '(?<name>(?:[^']|'')*)'\n    | \"(?<name>(?:[^\"]|\"\")*)\"\n    | \\^(?<name>(?:[^\\^]|\\^\\^)*)\\^\n    | %(?<name>(?:[^%]|%%)*)%\n    | \\#(?<name>(?:[^#]|\\#\\#)*)\\#\n    | \\$(?<name>(?:[^$]|\\$\\$)*)\\$\n    | \\{(?<name>(?:[^}]|\\}\\})*)\\}\n  )?\n(\\))\n# NamedCallout\n| (\\()(?<keyw>\\*)\n    (?<name>(?!\\d)\\w+)\n    (?:\\[(?<tag>(?!\\d)\\w+)\\])?\n    (?:\\{ [^,}]+ (?:,[^,}]+)* \\})?\n  (\\))\n# InterpolatedCallout\n| (\\()(?<keyw>\\?)\n    # we only support a fixed maximum number of braces because otherwise we can't balance the number of open and close braces\n    (\\{(?<g1>\\{)?+(?<g2>\\{)?+(?<g3>\\{)?+(?<g4>\\{)?+(?<g5>\\{)?+) .+? \\}(?(<g1>)\\})(?(<g2>)\\})(?(<g3>)\\})(?(<g4>)\\})(?(<g5>)\\})\n    (?:\\[(?<tag>(?!\\d)\\w+)\\])?\n    (?<keyw>[X<>]?)\n  (\\))",
      name: "meta.callout.regexp"
    },
    "literals-regular-expression-literal-character-properties": {
      captures: {
        1: { name: "support.variable.character-property.regexp" },
        2: { name: "punctuation.definition.character-class.regexp" },
        3: { name: "support.variable.character-property.regexp" },
        4: { name: "punctuation.definition.character-class.regexp" }
      },
      match: "(?x)\n\\\\[pP]\\{ ([\\s\\w-]+(?:=[\\s\\w-]+)?) \\}\n| (\\[:) ([\\s\\w-]+(?:=[\\s\\w-]+)?) (:\\])",
      name: "constant.other.character-class.set.regexp"
    },
    "literals-regular-expression-literal-custom-char-class": {
      patterns: [
        {
          begin: "(\\[)(\\^)?",
          beginCaptures: {
            1: { name: "punctuation.definition.character-class.regexp" },
            2: { name: "keyword.operator.negation.regexp" }
          },
          end: "\\]",
          endCaptures: {
            0: { name: "punctuation.definition.character-class.regexp" }
          },
          name: "constant.other.character-class.set.regexp",
          patterns: [
            {
              include: "#literals-regular-expression-literal-custom-char-class-members"
            }
          ]
        }
      ]
    },
    "literals-regular-expression-literal-custom-char-class-members": {
      patterns: [
        { match: "\\\\b", name: "constant.character.escape.backslash.regexp" },
        { include: "#literals-regular-expression-literal-custom-char-class" },
        { include: "#literals-regular-expression-literal-quote" },
        { include: "#literals-regular-expression-literal-set-operators" },
        { include: "#literals-regular-expression-literal-unicode-scalars" },
        { include: "#literals-regular-expression-literal-character-properties" }
      ]
    },
    "literals-regular-expression-literal-group-option-toggle": {
      match: "(?x)\n\\(\\?\n(?:\n  \\^(?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*\n  | (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})+\n  | (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})* - (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*\n)\n\\)",
      name: "keyword.other.option-toggle.regexp"
    },
    "literals-regular-expression-literal-group-or-conditional": {
      patterns: [
        {
          begin: "(\\()(\\?~)",
          beginCaptures: {
            1: { name: "punctuation.definition.group.regexp" },
            2: { name: "keyword.control.conditional.absent.regexp" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.group.regexp" } },
          name: "meta.group.absent.regexp",
          patterns: [
            { include: "#literals-regular-expression-literal-regex-guts" }
          ]
        },
        {
          begin: "(?x)\n# KnownConditionalStart\n(\\() (?<cond>\\?\\()\n  (?:\n    (?<NumberRef> (?<num>[+-]?\\d+)(?:(?<op>[+-])(?<num>\\d+))? )\n    | (?<cond>R) \\g<NumberRef>?\n    | (?<cond>R&) (?<NamedRef> (?<name>(?!\\d)\\w+) (?:(?<op>[+-])(?<num>\\d+))? )\n    | (?<cond><) (?:\\g<NamedRef>|\\g<NumberRef>) (?<cond>>)\n    | (?<cond>') (?:\\g<NamedRef>|\\g<NumberRef>) (?<cond>')\n    | (?<cond>DEFINE)\n    | (?<cond>VERSION)(?<compar>>?=)(?<num>\\d+\\.\\d+)\n  )\n(?<cond>\\))\n| (\\()(?<cond>\\?)(?=\\()",
          beginCaptures: {
            1: { name: "punctuation.definition.group.regexp" },
            10: { name: "variable.other.group-name.regexp" },
            11: { name: "keyword.operator.recursion-level.regexp" },
            12: { name: "constant.numeric.integer.decimal.regexp" },
            13: { name: "keyword.control.conditional.regexp" },
            14: { name: "keyword.control.conditional.regexp" },
            15: { name: "keyword.control.conditional.regexp" },
            16: { name: "keyword.control.conditional.regexp" },
            17: { name: "keyword.control.conditional.regexp" },
            18: { name: "keyword.control.conditional.regexp" },
            19: { name: "keyword.operator.comparison.regexp" },
            2: { name: "keyword.control.conditional.regexp" },
            20: { name: "constant.numeric.integer.decimal.regexp" },
            21: { name: "keyword.control.conditional.regexp" },
            22: { name: "punctuation.definition.group.regexp" },
            23: { name: "keyword.control.conditional.regexp" },
            4: { name: "constant.numeric.integer.decimal.regexp" },
            5: { name: "keyword.operator.recursion-level.regexp" },
            6: { name: "constant.numeric.integer.decimal.regexp" },
            7: { name: "keyword.control.conditional.regexp" },
            8: { name: "keyword.control.conditional.regexp" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.group.regexp" } },
          name: "meta.group.conditional.regexp",
          patterns: [
            { include: "#literals-regular-expression-literal-regex-guts" }
          ]
        },
        {
          begin: "(?x)\n(\\()\n(\n  # BasicGroupKind\n  (\\?)\n  (?:\n    ([:|>=!*] | <[=!*])\n    # named groups\n    | P?< (?:((?!\\d)\\w+) (-))? ((?!\\d)\\w+) >\n    | ' (?:((?!\\d)\\w+) (-))? ((?!\\d)\\w+) '\n    # matching options\n    | (?:\n      \\^(?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*\n      | (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})+\n      | (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})* - (?:[iJmnsUxwDPSW]|xx|y\\{[gw]\\})*\n    ):  # case without : is handled by group-option-toggle\n  )\n  # PCRE2GroupKind\n  | \\*(\n    atomic\n    |pla|positive_lookahead\n    |nla|negative_lookahead\n    |plb|positive_lookbehind\n    |nlb|negative_lookbehind\n    |napla|non_atomic_positive_lookahead\n    |naplb|non_atomic_positive_lookbehind\n    |sr|script_run\n    |asr|atomic_script_run\n  ):\n)?+",
          beginCaptures: {
            1: { name: "punctuation.definition.group.regexp" },
            10: { name: "variable.other.group-name.regexp" },
            2: { name: "keyword.other.group-options.regexp" },
            3: { name: "punctuation.definition.group.regexp" },
            4: { name: "punctuation.definition.group.regexp" },
            5: { name: "variable.other.group-name.regexp" },
            6: { name: "keyword.operator.balancing-group.regexp" },
            7: { name: "variable.other.group-name.regexp" },
            8: { name: "variable.other.group-name.regexp" },
            9: { name: "keyword.operator.balancing-group.regexp" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.group.regexp" } },
          name: "meta.group.regexp",
          patterns: [
            { include: "#literals-regular-expression-literal-regex-guts" }
          ]
        }
      ]
    },
    "literals-regular-expression-literal-line-comment": {
      captures: { 1: { name: "punctuation.definition.comment.regexp" } },
      match: "(\\#).*$",
      name: "comment.line.regexp"
    },
    "literals-regular-expression-literal-quote": {
      begin: "\\\\Q",
      beginCaptures: { 0: { name: "constant.character.escape.backslash.regexp" } },
      end: "\\\\E|(\\n)",
      endCaptures: {
        0: { name: "constant.character.escape.backslash.regexp" },
        1: { name: "invalid.illegal.returns-not-allowed.regexp" }
      },
      name: "string.quoted.other.regexp.swift"
    },
    "literals-regular-expression-literal-regex-guts": {
      patterns: [
        { include: "#literals-regular-expression-literal-quote" },
        {
          begin: "\\(\\?\\#",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.begin.regexp" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.regexp" } },
          name: "comment.block.regexp"
        },
        {
          begin: "<\\{",
          beginCaptures: {
            0: { name: "punctuation.section.embedded.begin.regexp" }
          },
          end: "\\}>",
          endCaptures: { 0: { name: "punctuation.section.embedded.end.regexp" } },
          name: "meta.embedded.expression.regexp"
        },
        { include: "#literals-regular-expression-literal-unicode-scalars" },
        { include: "#literals-regular-expression-literal-character-properties" },
        {
          match: "[$^]|\\\\[AbBGyYzZ]|\\\\K",
          name: "keyword.control.anchor.regexp"
        },
        {
          include: "#literals-regular-expression-literal-backtracking-directive-or-global-matching-option"
        },
        { include: "#literals-regular-expression-literal-callout" },
        {
          include: "#literals-regular-expression-literal-backreference-or-subpattern"
        },
        {
          match: "\\.|\\\\[CdDhHNORsSvVwWX]",
          name: "constant.character.character-class.regexp"
        },
        {
          match: "\\\\c.",
          name: "constant.character.entity.control-character.regexp"
        },
        { match: "\\\\[^c]", name: "constant.character.escape.backslash.regexp" },
        { match: "\\|", name: "keyword.operator.or.regexp" },
        { match: "[*+?]", name: "keyword.operator.quantifier.regexp" },
        {
          match: "\\{\\s*\\d+\\s*(?:,\\s*\\d*\\s*)?\\}|\\{\\s*,\\s*\\d+\\s*\\}",
          name: "keyword.operator.quantifier.regexp"
        },
        { include: "#literals-regular-expression-literal-custom-char-class" },
        { include: "#literals-regular-expression-literal-group-option-toggle" },
        { include: "#literals-regular-expression-literal-group-or-conditional" }
      ]
    },
    "literals-regular-expression-literal-set-operators": {
      patterns: [
        { match: "&&", name: "keyword.operator.intersection.regexp.swift" },
        { match: "--", name: "keyword.operator.subtraction.regexp.swift" },
        {
          match: "\\~\\~",
          name: "keyword.operator.symmetric-difference.regexp.swift"
        }
      ]
    },
    "literals-regular-expression-literal-unicode-scalars": {
      match: "(?x)\n\\\\u\\{\\s*(?:[0-9a-fA-F]+\\s*)+\\}\n| \\\\u[0-9a-fA-F]{4}\n| \\\\x\\{[0-9a-fA-F]+\\}\n| \\\\x[0-9a-fA-F]{0,2}\n| \\\\U[0-9a-fA-F]{8}\n| \\\\o\\{[0-7]+\\}\n| \\\\0[0-7]{0,3}\n| \\\\N\\{(?:U\\+[0-9a-fA-F]{1,8} | [\\s\\w-]+)\\}",
      name: "constant.character.numeric.regexp"
    },
    "literals-string": {
      patterns: [
        {
          begin: '"""',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.swift" }
          },
          end: '"""(#*)',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.swift" },
            1: { name: "invalid.illegal.extra-closing-delimiter.swift" }
          },
          name: "string.quoted.double.block.swift",
          patterns: [
            {
              match: '\\G.+(?=""")|\\G.+',
              name: "invalid.illegal.content-after-opening-delimiter.swift"
            },
            {
              match: "\\\\\\s*\\n",
              name: "constant.character.escape.newline.swift"
            },
            { include: "#literals-string-string-guts" },
            {
              match: '\\S((?!\\\\\\().)*(?=""")',
              name: "invalid.illegal.content-before-closing-delimiter.swift"
            }
          ]
        },
        {
          begin: '#"""',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.swift" }
          },
          end: '"""#(#*)',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.swift" },
            1: { name: "invalid.illegal.extra-closing-delimiter.swift" }
          },
          name: "string.quoted.double.block.raw.swift",
          patterns: [
            {
              match: '\\G.+(?=""")|\\G.+',
              name: "invalid.illegal.content-after-opening-delimiter.swift"
            },
            {
              match: "\\\\#\\s*\\n",
              name: "constant.character.escape.newline.swift"
            },
            { include: "#literals-string-raw-string-guts" },
            {
              match: '\\S((?!\\\\#\\().)*(?=""")',
              name: "invalid.illegal.content-before-closing-delimiter.swift"
            }
          ]
        },
        {
          begin: '(##+)"""',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.swift" }
          },
          end: '"""\\1(#*)',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.swift" },
            1: { name: "invalid.illegal.extra-closing-delimiter.swift" }
          },
          name: "string.quoted.double.block.raw.swift",
          patterns: [
            {
              match: '\\G.+(?=""")|\\G.+',
              name: "invalid.illegal.content-after-opening-delimiter.swift"
            }
          ]
        },
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.swift" }
          },
          end: '"(#*)',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.swift" },
            1: { name: "invalid.illegal.extra-closing-delimiter.swift" }
          },
          name: "string.quoted.double.single-line.swift",
          patterns: [
            {
              match: "\\r|\\n",
              name: "invalid.illegal.returns-not-allowed.swift"
            },
            { include: "#literals-string-string-guts" }
          ]
        },
        {
          begin: '(##+)"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.raw.swift" }
          },
          end: '"\\1(#*)',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.raw.swift" },
            1: { name: "invalid.illegal.extra-closing-delimiter.swift" }
          },
          name: "string.quoted.double.single-line.raw.swift",
          patterns: [
            {
              match: "\\r|\\n",
              name: "invalid.illegal.returns-not-allowed.swift"
            }
          ]
        },
        {
          begin: '#"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.raw.swift" }
          },
          end: '"#(#*)',
          endCaptures: {
            0: { name: "punctuation.definition.string.end.raw.swift" },
            1: { name: "invalid.illegal.extra-closing-delimiter.swift" }
          },
          name: "string.quoted.double.single-line.raw.swift",
          patterns: [
            {
              match: "\\r|\\n",
              name: "invalid.illegal.returns-not-allowed.swift"
            },
            { include: "#literals-string-raw-string-guts" }
          ]
        }
      ]
    },
    "literals-string-raw-string-guts": {
      patterns: [
        { match: `\\\\#[0\\\\tnr"']`, name: "constant.character.escape.swift" },
        {
          match: "\\\\#u\\{[0-9a-fA-F]{1,8}\\}",
          name: "constant.character.escape.unicode.swift"
        },
        {
          begin: "\\\\#\\(",
          beginCaptures: {
            0: { name: "punctuation.section.embedded.begin.swift" }
          },
          contentName: "source.swift",
          end: "(\\))",
          endCaptures: {
            0: { name: "punctuation.section.embedded.end.swift" },
            1: { name: "source.swift" }
          },
          name: "meta.embedded.line.swift",
          patterns: [{ include: "$self" }, { begin: "\\(", end: "\\)" }]
        },
        { match: "\\\\#.", name: "invalid.illegal.escape-not-recognized" }
      ]
    },
    "literals-string-string-guts": {
      patterns: [
        { match: `\\\\[0\\\\tnr"']`, name: "constant.character.escape.swift" },
        {
          match: "\\\\u\\{[0-9a-fA-F]{1,8}\\}",
          name: "constant.character.escape.unicode.swift"
        },
        {
          begin: "\\\\\\(",
          beginCaptures: {
            0: { name: "punctuation.section.embedded.begin.swift" }
          },
          contentName: "source.swift",
          end: "(\\))",
          endCaptures: {
            0: { name: "punctuation.section.embedded.end.swift" },
            1: { name: "source.swift" }
          },
          name: "meta.embedded.line.swift",
          patterns: [{ include: "$self" }, { begin: "\\(", end: "\\)" }]
        },
        { match: "\\\\.", name: "invalid.illegal.escape-not-recognized" }
      ]
    },
    "member-reference": {
      patterns: [
        {
          captures: {
            1: { name: "variable.other.swift" },
            2: { name: "punctuation.definition.identifier.swift" },
            3: { name: "punctuation.definition.identifier.swift" }
          },
          match: "(?<=\\.)((?<q>`?)[\\p{L}_][\\p{L}_\\p{N}\\p{M}]*(\\k<q>))"
        }
      ]
    },
    operators: {
      patterns: [
        {
          match: "\\b(is\\b|as([!?]\\B|\\b))",
          name: "keyword.operator.type-casting.swift"
        },
        {
          begin: "(?x)\n(?=\n  (?<oph>                # operator-head\n    [/=\\-+!*%<>&|^~?]\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  )\n  | \\.\n  (\n    \\g<oph>              # operator-head\n    | \\.\n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)",
          end: "(?!\\G)",
          patterns: [
            {
              captures: {
                0: {
                  patterns: [
                    {
                      match: "\\G(\\+\\+|\\-\\-)$",
                      name: "keyword.operator.increment-or-decrement.swift"
                    },
                    {
                      match: "\\G(\\+|\\-)$",
                      name: "keyword.operator.arithmetic.unary.swift"
                    },
                    {
                      match: "\\G!$",
                      name: "keyword.operator.logical.not.swift"
                    },
                    {
                      match: "\\G~$",
                      name: "keyword.operator.bitwise.not.swift"
                    },
                    { match: ".+", name: "keyword.operator.custom.prefix.swift" }
                  ]
                }
              },
              match: "(?x)\n\\G                    # Matching from the beginning ensures\n                    # that we start with operator-head\n(?<=^|[\\s(\\[{,;:])\n(\n  (?!(//|/\\*|\\*/))\n  (\n    [/=\\-+!*%<>&|^~?]        # operator-head\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  \n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)++\n(?![\\s)\\]},;:]|\\z)"
            },
            {
              captures: {
                0: {
                  patterns: [
                    {
                      match: "\\G(\\+\\+|\\-\\-)$",
                      name: "keyword.operator.increment-or-decrement.swift"
                    },
                    {
                      match: "\\G!$",
                      name: "keyword.operator.increment-or-decrement.swift"
                    },
                    { match: ".+", name: "keyword.operator.custom.postfix.swift" }
                  ]
                }
              },
              match: "(?x)\n\\G                    # Matching from the beginning ensures\n                    # that we start with operator-head\n(?<!^|[\\s(\\[{,;:])\n(\n  (?!(//|/\\*|\\*/))\n  (\n    [/=\\-+!*%<>&|^~?]        # operator-head\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  \n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)++\n(?=[\\s)\\]},;:]|\\z)"
            },
            {
              captures: {
                0: {
                  patterns: [
                    { match: "\\G=$", name: "keyword.operator.assignment.swift" },
                    {
                      match: "\\G(\\+|\\-|\\*|/|%|<<|>>|&|\\^|\\||&&|\\|\\|)=$",
                      name: "keyword.operator.assignment.compound.swift"
                    },
                    {
                      match: "\\G(\\+|\\-|\\*|/)$",
                      name: "keyword.operator.arithmetic.swift"
                    },
                    {
                      match: "\\G&(\\+|\\-|\\*)$",
                      name: "keyword.operator.arithmetic.overflow.swift"
                    },
                    {
                      match: "\\G%$",
                      name: "keyword.operator.arithmetic.remainder.swift"
                    },
                    {
                      match: "\\G(==|!=|>|<|>=|<=|~=)$",
                      name: "keyword.operator.comparison.swift"
                    },
                    {
                      match: "\\G\\?\\?$",
                      name: "keyword.operator.coalescing.swift"
                    },
                    {
                      match: "\\G(&&|\\|\\|)$",
                      name: "keyword.operator.logical.swift"
                    },
                    {
                      match: "\\G(&|\\||\\^|<<|>>)$",
                      name: "keyword.operator.bitwise.swift"
                    },
                    {
                      match: "\\G(===|!==)$",
                      name: "keyword.operator.bitwise.swift"
                    },
                    { match: "\\G\\?$", name: "keyword.operator.ternary.swift" },
                    { match: ".+", name: "keyword.operator.custom.infix.swift" }
                  ]
                }
              },
              match: "(?x)\n\\G                    # Matching from the beginning ensures\n                    # that we start with operator-head\n(\n  (?!(//|/\\*|\\*/))\n  (\n    [/=\\-+!*%<>&|^~?]        # operator-head\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  \n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)++"
            },
            {
              captures: {
                0: {
                  patterns: [
                    {
                      match: ".+",
                      name: "keyword.operator.custom.prefix.dot.swift"
                    }
                  ]
                }
              },
              match: "(?x)\n\\G                    # Matching from the beginning ensures\n                    # that we start with operator-head\n(?<=^|[\\s(\\[{,;:])\n\\.                    # dot\n(\n  (?!(//|/\\*|\\*/))\n  (\n    \\.                # dot\n    | [/=\\-+!*%<>&|^~?]        # operator-head\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  \n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)++\n(?![\\s)\\]},;:]|\\z)"
            },
            {
              captures: {
                0: {
                  patterns: [
                    {
                      match: ".+",
                      name: "keyword.operator.custom.postfix.dot.swift"
                    }
                  ]
                }
              },
              match: "(?x)\n\\G                    # Matching from the beginning ensures\n                    # that we start with operator-head\n(?<!^|[\\s(\\[{,;:])\n\\.                    # dot\n(\n  (?!(//|/\\*|\\*/))\n  (\n    \\.                # dot\n    | [/=\\-+!*%<>&|^~?]        # operator-head\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  \n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)++\n(?=[\\s)\\]},;:]|\\z)"
            },
            {
              captures: {
                0: {
                  patterns: [
                    {
                      match: "\\G\\.\\.[.<]$",
                      name: "keyword.operator.range.swift"
                    },
                    {
                      match: ".+",
                      name: "keyword.operator.custom.infix.dot.swift"
                    }
                  ]
                }
              },
              match: "(?x)\n\\G                    # Matching from the beginning ensures\n                    # that we start with operator-head\n\\.                    # dot\n(\n  (?!(//|/\\*|\\*/))\n  (\n    \\.                # dot\n    | [/=\\-+!*%<>&|^~?]        # operator-head\n    | [\\x{00A1}-\\x{00A7}]\n    | [\\x{00A9}\\x{00AB}]\n    | [\\x{00AC}\\x{00AE}]\n    | [\\x{00B0}-\\x{00B1}\\x{00B6}\\x{00BB}\\x{00BF}\\x{00D7}\\x{00F7}]\n    | [\\x{2016}-\\x{2017}\\x{2020}-\\x{2027}]\n    | [\\x{2030}-\\x{203E}]\n    | [\\x{2041}-\\x{2053}]\n    | [\\x{2055}-\\x{205E}]\n    | [\\x{2190}-\\x{23FF}]\n    | [\\x{2500}-\\x{2775}]\n    | [\\x{2794}-\\x{2BFF}]\n    | [\\x{2E00}-\\x{2E7F}]\n    | [\\x{3001}-\\x{3003}]\n    | [\\x{3008}-\\x{3030}]\n  \n    | [\\x{0300}-\\x{036F}]        # operator-character\n    | [\\x{1DC0}-\\x{1DFF}]\n    | [\\x{20D0}-\\x{20FF}]\n    | [\\x{FE00}-\\x{FE0F}]\n    | [\\x{FE20}-\\x{FE2F}]\n    | [\\x{E0100}-\\x{E01EF}]\n  )\n)++"
            }
          ]
        },
        { match: ":", name: "keyword.operator.ternary.swift" }
      ]
    },
    root: {
      patterns: [
        { include: "#compiler-control" },
        { include: "#declarations" },
        { include: "#expressions" }
      ]
    }
  },
  scopeName: "source.swift"
};
var source_swift_default = grammar27;

// node_modules/@wooorm/starry-night/lang/source.ts.js
var grammar28 = {
  extensions: [".ts", ".cts", ".mts"],
  names: ["typescript", "ts"],
  patterns: [
    { include: "#directives" },
    { include: "#statements" },
    { include: "#shebang" }
  ],
  repository: {
    "access-modifier": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "storage.modifier.ts"
    },
    "after-operator-block-as-object-literal": {
      begin: "(?<!\\+\\+|--)(?<=[:=(,\\[?+!>]|^await|[^\\._$[:alnum:]]await|^return|[^\\._$[:alnum:]]return|^yield|[^\\._$[:alnum:]]yield|^throw|[^\\._$[:alnum:]]throw|^in|[^\\._$[:alnum:]]in|^of|[^\\._$[:alnum:]]of|^typeof|[^\\._$[:alnum:]]typeof|&&|\\|\\||\\*)\\s*(\\{)",
      beginCaptures: { 1: { name: "punctuation.definition.block.ts" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      name: "meta.objectliteral.ts",
      patterns: [{ include: "#object-member" }]
    },
    "array-binding-pattern": {
      begin: "(?:(\\.\\.\\.)\\s*)?(\\[)",
      beginCaptures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "punctuation.definition.binding-pattern.array.ts" }
      },
      end: "\\]",
      endCaptures: {
        0: { name: "punctuation.definition.binding-pattern.array.ts" }
      },
      patterns: [{ include: "#binding-element" }, { include: "#punctuation-comma" }]
    },
    "array-binding-pattern-const": {
      begin: "(?:(\\.\\.\\.)\\s*)?(\\[)",
      beginCaptures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "punctuation.definition.binding-pattern.array.ts" }
      },
      end: "\\]",
      endCaptures: {
        0: { name: "punctuation.definition.binding-pattern.array.ts" }
      },
      patterns: [
        { include: "#binding-element-const" },
        { include: "#punctuation-comma" }
      ]
    },
    "array-literal": {
      begin: "\\s*(\\[)",
      beginCaptures: { 1: { name: "meta.brace.square.ts" } },
      end: "\\]",
      endCaptures: { 0: { name: "meta.brace.square.ts" } },
      name: "meta.array.literal.ts",
      patterns: [{ include: "#expression" }, { include: "#punctuation-comma" }]
    },
    "arrow-function": {
      patterns: [
        {
          captures: {
            1: { name: "storage.modifier.async.ts" },
            2: { name: "variable.parameter.ts" }
          },
          match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
          name: "meta.arrow.ts"
        },
        {
          begin: "(?x) (?:\n  (?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  )\n)",
          beginCaptures: { 1: { name: "storage.modifier.async.ts" } },
          end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
          name: "meta.arrow.ts",
          patterns: [
            { include: "#comment" },
            { include: "#type-parameters" },
            { include: "#function-parameters" },
            { include: "#arrow-return-type" },
            { include: "#possibly-arrow-return-type" }
          ]
        },
        {
          begin: "=>",
          beginCaptures: { 0: { name: "storage.type.function.arrow.ts" } },
          end: "((?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S)))(?!\\/[\\/\\*])",
          name: "meta.arrow.ts",
          patterns: [
            { include: "#single-line-comment-consuming-line-ending" },
            { include: "#decl-block" },
            { include: "#expression" }
          ]
        }
      ]
    },
    "arrow-return-type": {
      begin: "(?<=\\))\\s*(:)",
      beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } },
      end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
      name: "meta.return.type.arrow.ts",
      patterns: [{ include: "#arrow-return-type-body" }]
    },
    "arrow-return-type-body": {
      patterns: [
        {
          begin: "(?<=[:])(?=\\s*\\{)",
          end: "(?<=\\})",
          patterns: [{ include: "#type-object" }]
        },
        { include: "#type-predicate-operator" },
        { include: "#type" }
      ]
    },
    "async-modifier": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(async)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "storage.modifier.async.ts"
    },
    "binding-element": {
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        { include: "#numeric-literal" },
        { include: "#regex" },
        { include: "#object-binding-pattern" },
        { include: "#array-binding-pattern" },
        { include: "#destructuring-variable-rest" },
        { include: "#variable-initializer" }
      ]
    },
    "binding-element-const": {
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        { include: "#numeric-literal" },
        { include: "#regex" },
        { include: "#object-binding-pattern-const" },
        { include: "#array-binding-pattern-const" },
        { include: "#destructuring-variable-rest-const" },
        { include: "#variable-initializer" }
      ]
    },
    "boolean-literal": {
      patterns: [
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "constant.language.boolean.true.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "constant.language.boolean.false.ts"
        }
      ]
    },
    brackets: {
      patterns: [
        { begin: "{", end: "}|(?=\\*/)", patterns: [{ include: "#brackets" }] },
        { begin: "\\[", end: "\\]|(?=\\*/)", patterns: [{ include: "#brackets" }] }
      ]
    },
    cast: {
      patterns: [
        {
          captures: {
            1: { name: "meta.brace.angle.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "meta.brace.angle.ts" }
          },
          match: "\\s*(<)\\s*(const)\\s*(>)",
          name: "cast.expr.ts"
        },
        {
          begin: "(?:(?<!\\+\\+|--)(?<=^return|[^\\._$[:alnum:]]return|^throw|[^\\._$[:alnum:]]throw|^yield|[^\\._$[:alnum:]]yield|^await|[^\\._$[:alnum:]]await|^default|[^\\._$[:alnum:]]default|[=(,:>*?\\&\\|\\^]|[^_$[:alnum:]](?:\\+\\+|\\-\\-)|[^\\+]\\+|[^\\-]\\-))\\s*(<)(?!<?\\=)(?!\\s*$)",
          beginCaptures: { 1: { name: "meta.brace.angle.ts" } },
          end: "(\\>)",
          endCaptures: { 1: { name: "meta.brace.angle.ts" } },
          name: "cast.expr.ts",
          patterns: [{ include: "#type" }]
        },
        {
          begin: "(?:(?<=^))\\s*(<)(?=[_$[:alpha:]][_$[:alnum:]]*\\s*>)",
          beginCaptures: { 1: { name: "meta.brace.angle.ts" } },
          end: "(\\>)",
          endCaptures: { 1: { name: "meta.brace.angle.ts" } },
          name: "cast.expr.ts",
          patterns: [{ include: "#type" }]
        }
      ]
    },
    "class-declaration": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(class)\\b(?=\\s+|/[/*])",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "storage.modifier.ts" },
        4: { name: "storage.type.class.ts" }
      },
      end: "(?<=\\})",
      name: "meta.class.ts",
      patterns: [{ include: "#class-declaration-or-expression-patterns" }]
    },
    "class-declaration-or-expression-patterns": {
      patterns: [
        { include: "#comment" },
        { include: "#class-or-interface-heritage" },
        {
          captures: { 0: { name: "entity.name.type.class.ts" } },
          match: "[_$[:alpha:]][_$[:alnum:]]*"
        },
        { include: "#type-parameters" },
        { include: "#class-or-interface-body" }
      ]
    },
    "class-expression": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(class)\\b(?=\\s+|[<{]|\\/[\\/*])",
      beginCaptures: {
        1: { name: "storage.modifier.ts" },
        2: { name: "storage.type.class.ts" }
      },
      end: "(?<=\\})",
      name: "meta.class.ts",
      patterns: [{ include: "#class-declaration-or-expression-patterns" }]
    },
    "class-or-interface-body": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      patterns: [
        { include: "#comment" },
        { include: "#decorator" },
        {
          begin: "(?<=:)\\s*",
          end: "(?=\\s|[;),}\\]:\\-\\+]|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
          patterns: [{ include: "#expression" }]
        },
        { include: "#method-declaration" },
        { include: "#indexer-declaration" },
        { include: "#field-declaration" },
        { include: "#string" },
        { include: "#type-annotation" },
        { include: "#variable-initializer" },
        { include: "#access-modifier" },
        { include: "#property-accessor" },
        { include: "#async-modifier" },
        { include: "#after-operator-block-as-object-literal" },
        { include: "#decl-block" },
        { include: "#expression" },
        { include: "#punctuation-comma" },
        { include: "#punctuation-semicolon" }
      ]
    },
    "class-or-interface-heritage": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(extends|implements)\\b)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      beginCaptures: { 1: { name: "storage.modifier.ts" } },
      end: "(?=\\{)",
      patterns: [
        { include: "#comment" },
        { include: "#class-or-interface-heritage" },
        { include: "#type-parameters" },
        { include: "#expressionWithoutIdentifiers" },
        {
          captures: {
            1: { name: "entity.name.type.module.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" }
          },
          match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\??\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*)"
        },
        {
          captures: { 1: { name: "entity.other.inherited-class.ts" } },
          match: "([_$[:alpha:]][_$[:alnum:]]*)"
        },
        { include: "#expressionPunctuations" }
      ]
    },
    comment: {
      patterns: [
        {
          begin: "/\\*\\*(?!/)",
          beginCaptures: { 0: { name: "punctuation.definition.comment.ts" } },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.ts" } },
          name: "comment.block.documentation.ts",
          patterns: [{ include: "#docblock" }]
        },
        {
          begin: "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
          beginCaptures: {
            1: { name: "punctuation.definition.comment.ts" },
            2: { name: "storage.type.internaldeclaration.ts" },
            3: { name: "punctuation.decorator.internaldeclaration.ts" }
          },
          end: "\\*/",
          endCaptures: { 0: { name: "punctuation.definition.comment.ts" } },
          name: "comment.block.ts"
        },
        {
          begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.ts" },
            2: { name: "comment.line.double-slash.ts" },
            3: { name: "punctuation.definition.comment.ts" },
            4: { name: "storage.type.internaldeclaration.ts" },
            5: { name: "punctuation.decorator.internaldeclaration.ts" }
          },
          contentName: "comment.line.double-slash.ts",
          end: "(?=$)"
        }
      ]
    },
    "control-statement": {
      patterns: [
        { include: "#switch-statement" },
        { include: "#for-loop" },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.trycatch.ts"
        },
        {
          captures: {
            1: { name: "keyword.control.loop.ts" },
            2: { name: "entity.name.label.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|goto)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.loop.ts"
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          beginCaptures: { 0: { name: "keyword.control.flow.ts" } },
          end: "(?=[;}]|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
          patterns: [{ include: "#expression" }]
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.switch.ts"
        },
        { include: "#if-statement" },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(else|if)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.conditional.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(with)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.with.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(package)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(debugger)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.other.debugger.ts"
        }
      ]
    },
    "decl-block": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      name: "meta.block.ts",
      patterns: [{ include: "#statements" }]
    },
    declaration: {
      patterns: [
        { include: "#decorator" },
        { include: "#var-expr" },
        { include: "#function-declaration" },
        { include: "#class-declaration" },
        { include: "#interface-declaration" },
        { include: "#enum-declaration" },
        { include: "#namespace-declaration" },
        { include: "#type-alias-declaration" },
        { include: "#import-equals-declaration" },
        { include: "#import-declaration" },
        { include: "#export-declaration" },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "storage.modifier.ts"
        }
      ]
    },
    decorator: {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@",
      beginCaptures: { 0: { name: "punctuation.decorator.ts" } },
      end: "(?=\\s)",
      name: "meta.decorator.ts",
      patterns: [{ include: "#expression" }]
    },
    "destructuring-const": {
      patterns: [
        {
          begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)",
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          name: "meta.object-binding-pattern-variable.ts",
          patterns: [
            { include: "#object-binding-pattern-const" },
            { include: "#type-annotation" },
            { include: "#comment" }
          ]
        },
        {
          begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)",
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          name: "meta.array-binding-pattern-variable.ts",
          patterns: [
            { include: "#array-binding-pattern-const" },
            { include: "#type-annotation" },
            { include: "#comment" }
          ]
        }
      ]
    },
    "destructuring-parameter": {
      patterns: [
        {
          begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\{)",
          beginCaptures: {
            1: { name: "keyword.operator.rest.ts" },
            2: { name: "punctuation.definition.binding-pattern.object.ts" }
          },
          end: "\\}",
          endCaptures: {
            0: { name: "punctuation.definition.binding-pattern.object.ts" }
          },
          name: "meta.parameter.object-binding-pattern.ts",
          patterns: [{ include: "#parameter-object-binding-element" }]
        },
        {
          begin: "(?<!=|:)\\s*(?:(\\.\\.\\.)\\s*)?(\\[)",
          beginCaptures: {
            1: { name: "keyword.operator.rest.ts" },
            2: { name: "punctuation.definition.binding-pattern.array.ts" }
          },
          end: "\\]",
          endCaptures: {
            0: { name: "punctuation.definition.binding-pattern.array.ts" }
          },
          name: "meta.paramter.array-binding-pattern.ts",
          patterns: [
            { include: "#parameter-binding-element" },
            { include: "#punctuation-comma" }
          ]
        }
      ]
    },
    "destructuring-parameter-rest": {
      captures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "variable.parameter.ts" }
      },
      match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)"
    },
    "destructuring-variable": {
      patterns: [
        {
          begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\{)",
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          name: "meta.object-binding-pattern-variable.ts",
          patterns: [
            { include: "#object-binding-pattern" },
            { include: "#type-annotation" },
            { include: "#comment" }
          ]
        },
        {
          begin: "(?<!=|:|^of|[^\\._$[:alnum:]]of|^in|[^\\._$[:alnum:]]in)\\s*(?=\\[)",
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          name: "meta.array-binding-pattern-variable.ts",
          patterns: [
            { include: "#array-binding-pattern" },
            { include: "#type-annotation" },
            { include: "#comment" }
          ]
        }
      ]
    },
    "destructuring-variable-rest": {
      captures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "meta.definition.variable.ts variable.other.readwrite.ts" }
      },
      match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)"
    },
    "destructuring-variable-rest-const": {
      captures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "meta.definition.variable.ts variable.other.constant.ts" }
      },
      match: "(?:(\\.\\.\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)"
    },
    directives: {
      begin: "^(///)\\s*(?=<(reference|amd-dependency|amd-module)(\\s+(path|types|no-default-lib|lib|name|resolution-mode)\\s*=\\s*((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)))+\\s*/>\\s*$)",
      beginCaptures: { 1: { name: "punctuation.definition.comment.ts" } },
      end: "(?=$)",
      name: "comment.line.triple-slash.directive.ts",
      patterns: [
        {
          begin: "(<)(reference|amd-dependency|amd-module)",
          beginCaptures: {
            1: { name: "punctuation.definition.tag.directive.ts" },
            2: { name: "entity.name.tag.directive.ts" }
          },
          end: "/>",
          endCaptures: { 0: { name: "punctuation.definition.tag.directive.ts" } },
          name: "meta.tag.ts",
          patterns: [
            {
              match: "path|types|no-default-lib|lib|name|resolution-mode",
              name: "entity.other.attribute-name.directive.ts"
            },
            { match: "=", name: "keyword.operator.assignment.ts" },
            { include: "#string" }
          ]
        }
      ]
    },
    docblock: {
      patterns: [
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "constant.language.access-type.jsdoc" }
          },
          match: "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b"
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "entity.name.type.instance.jsdoc" },
            4: { name: "punctuation.definition.bracket.angle.begin.jsdoc" },
            5: { name: "constant.other.email.link.underline.jsdoc" },
            6: { name: "punctuation.definition.bracket.angle.end.jsdoc" }
          },
          match: "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?"
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "entity.name.type.instance.jsdoc" },
            4: { name: "keyword.operator.control.jsdoc" },
            5: { name: "entity.name.type.instance.jsdoc" }
          },
          match: "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>"
        },
        {
          begin: "((@)example)\\s+",
          beginCaptures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" }
          },
          end: "(?=@|\\*/)",
          name: "meta.example.jsdoc",
          patterns: [
            { match: "^\\s\\*\\s+" },
            {
              begin: "\\G(<)caption(>)",
              beginCaptures: {
                0: { name: "entity.name.tag.inline.jsdoc" },
                1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" },
                2: { name: "punctuation.definition.bracket.angle.end.jsdoc" }
              },
              contentName: "constant.other.description.jsdoc",
              end: "(</)caption(>)|(?=\\*/)",
              endCaptures: {
                0: { name: "entity.name.tag.inline.jsdoc" },
                1: { name: "punctuation.definition.bracket.angle.begin.jsdoc" },
                2: { name: "punctuation.definition.bracket.angle.end.jsdoc" }
              }
            },
            {
              captures: { 0: { name: "source.embedded.ts" } },
              match: "[^\\s@*](?:[^*]|\\*[^/])*"
            }
          ]
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "constant.language.symbol-type.jsdoc" }
          },
          match: "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b"
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "variable.other.link.underline.jsdoc" },
            4: { name: "entity.name.type.instance.jsdoc" }
          },
          match: "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)"
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "variable.other.jsdoc" }
          },
          match: "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)"
        },
        {
          begin: "(?x)((@)template)\\s+(?={)",
          beginCaptures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" }
          },
          end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          patterns: [
            { include: "#jsdoctype" },
            { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" }
          ]
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "variable.other.jsdoc" }
          },
          match: "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)"
        },
        {
          begin: "((@)typedef)\\s+(?={)",
          beginCaptures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" }
          },
          end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          patterns: [
            { include: "#jsdoctype" },
            {
              match: "(?:[^@\\s*/]|\\*[^/])+",
              name: "entity.name.type.instance.jsdoc"
            }
          ]
        },
        {
          begin: "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
          beginCaptures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" }
          },
          end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          patterns: [
            { include: "#jsdoctype" },
            { match: "([A-Za-z_$][\\w$.\\[\\]]*)", name: "variable.other.jsdoc" },
            {
              captures: {
                1: {
                  name: "punctuation.definition.optional-value.begin.bracket.square.jsdoc"
                },
                2: { name: "keyword.operator.assignment.jsdoc" },
                3: { name: "source.embedded.ts" },
                4: {
                  name: "punctuation.definition.optional-value.end.bracket.square.jsdoc"
                },
                5: { name: "invalid.illegal.syntax.jsdoc" }
              },
              match: `(?x)
(\\[)\\s*
[\\w$]+
(?:
  (?:\\[\\])?                                        # Foo[ ].bar properties within an array
  \\.                                                # Foo.Bar namespaced parameter
  [\\w$]+
)*
(?:
  \\s*
  (=)                                                # [foo=bar] Default parameter value
  \\s*
  (
    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
    (?>
      "(?:(?:\\*(?!/))|(?:\\\\(?!"))|[^*\\\\])*?" |                      # [foo="bar"] Double-quoted
      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted
      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal
      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else
    )*
  )
)?
\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))`,
              name: "variable.other.jsdoc"
            }
          ]
        },
        {
          begin: "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|satisfies|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
          beginCaptures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" }
          },
          end: "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          patterns: [{ include: "#jsdoctype" }]
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "entity.name.type.instance.jsdoc" }
          },
          match: "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)"
        },
        {
          begin: `((@)(?:default(?:value)?|license|version))\\s+(([''"]))`,
          beginCaptures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "variable.other.jsdoc" },
            4: { name: "punctuation.definition.string.begin.jsdoc" }
          },
          contentName: "variable.other.jsdoc",
          end: "(\\3)|(?=$|\\*/)",
          endCaptures: {
            0: { name: "variable.other.jsdoc" },
            1: { name: "punctuation.definition.string.end.jsdoc" }
          }
        },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" },
            3: { name: "variable.other.jsdoc" }
          },
          match: "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)"
        },
        {
          captures: { 1: { name: "punctuation.definition.block.tag.jsdoc" } },
          match: "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
          name: "storage.type.class.jsdoc"
        },
        { include: "#inline-tags" },
        {
          captures: {
            1: { name: "storage.type.class.jsdoc" },
            2: { name: "punctuation.definition.block.tag.jsdoc" }
          },
          match: "((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\\s+)"
        }
      ]
    },
    "enum-declaration": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "storage.modifier.ts" },
        4: { name: "storage.type.enum.ts" },
        5: { name: "entity.name.type.enum.ts" }
      },
      end: "(?<=\\})",
      name: "meta.enum.declaration.ts",
      patterns: [
        { include: "#comment" },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
          end: "\\}",
          endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
          patterns: [
            { include: "#comment" },
            {
              begin: "([_$[:alpha:]][_$[:alnum:]]*)",
              beginCaptures: { 0: { name: "variable.other.enummember.ts" } },
              end: "(?=,|\\}|$)",
              patterns: [
                { include: "#comment" },
                { include: "#variable-initializer" }
              ]
            },
            {
              begin: "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
              end: "(?=,|\\}|$)",
              patterns: [
                { include: "#string" },
                { include: "#array-literal" },
                { include: "#comment" },
                { include: "#variable-initializer" }
              ]
            },
            { include: "#punctuation-comma" }
          ]
        }
      ]
    },
    "export-declaration": {
      patterns: [
        {
          captures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "keyword.control.as.ts" },
            3: { name: "storage.type.namespace.ts" },
            4: { name: "entity.name.type.module.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)\\s+(as)\\s+(namespace)\\s+([_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?(?:(?:\\s*(=))|(?:\\s+(default)(?=\\s+)))",
          beginCaptures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "keyword.control.type.ts" },
            3: { name: "keyword.operator.assignment.ts" },
            4: { name: "keyword.control.default.ts" }
          },
          end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
          name: "meta.export.default.ts",
          patterns: [
            { include: "#interface-declaration" },
            { include: "#expression" }
          ]
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(export)(?:\\s+(type))?\\b(?!(\\$)|(\\s*:))((?=\\s*[\\{*])|((?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s|,))(?!\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))",
          beginCaptures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "keyword.control.type.ts" }
          },
          end: "(?=$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
          name: "meta.export.ts",
          patterns: [{ include: "#import-export-declaration" }]
        }
      ]
    },
    expression: {
      patterns: [
        { include: "#expressionWithoutIdentifiers" },
        { include: "#identifiers" },
        { include: "#expressionPunctuations" }
      ]
    },
    "expression-inside-possibly-arrow-parens": {
      patterns: [
        { include: "#expressionWithoutIdentifiers" },
        { include: "#comment" },
        { include: "#string" },
        { include: "#decorator" },
        { include: "#destructuring-parameter" },
        {
          captures: { 1: { name: "storage.modifier.ts" } },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)"
        },
        {
          captures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.operator.rest.ts" },
            3: { name: "entity.name.function.ts variable.language.this.ts" },
            4: { name: "entity.name.function.ts" },
            5: { name: "keyword.operator.optional.ts" }
          },
          match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))"
        },
        {
          captures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.operator.rest.ts" },
            3: { name: "variable.parameter.ts variable.language.this.ts" },
            4: { name: "variable.parameter.ts" },
            5: { name: "keyword.operator.optional.ts" }
          },
          match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*[:,]|$)"
        },
        { include: "#type-annotation" },
        { include: "#variable-initializer" },
        { match: ",", name: "punctuation.separator.parameter.ts" },
        { include: "#identifiers" },
        { include: "#expressionPunctuations" }
      ]
    },
    "expression-operators": {
      patterns: [
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(await)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.control.flow.ts"
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?=\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*\\*)",
          beginCaptures: { 1: { name: "keyword.control.flow.ts" } },
          end: "\\*",
          endCaptures: { 0: { name: "keyword.generator.asterisk.ts" } },
          patterns: [{ include: "#comment" }]
        },
        {
          captures: {
            1: { name: "keyword.control.flow.ts" },
            2: { name: "keyword.generator.asterisk.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(yield)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s*(\\*))?"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))delete(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.expression.delete.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))in(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()",
          name: "keyword.operator.expression.in.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))of(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?!\\()",
          name: "keyword.operator.expression.of.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.expression.instanceof.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.new.ts"
        },
        { include: "#typeof-operator" },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))void(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.expression.void.ts"
        },
        {
          captures: {
            1: { name: "keyword.control.as.ts" },
            2: { name: "storage.modifier.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*($|[;,:})\\]]))"
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+",
          beginCaptures: {
            1: { name: "keyword.control.as.ts" },
            2: { name: "keyword.control.satisfies.ts" }
          },
          end: "(?=^|[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisfies)\\s+)|(\\s+\\<))",
          patterns: [{ include: "#type" }]
        },
        { match: "\\.\\.\\.", name: "keyword.operator.spread.ts" },
        {
          match: "\\*=|(?<!\\()/=|%=|\\+=|\\-=",
          name: "keyword.operator.assignment.compound.ts"
        },
        {
          match: "\\&=|\\^=|<<=|>>=|>>>=|\\|=",
          name: "keyword.operator.assignment.compound.bitwise.ts"
        },
        { match: "<<|>>>|>>", name: "keyword.operator.bitwise.shift.ts" },
        { match: "===|!==|==|!=", name: "keyword.operator.comparison.ts" },
        { match: "<=|>=|<>|<|>", name: "keyword.operator.relational.ts" },
        {
          captures: {
            1: { name: "keyword.operator.logical.ts" },
            2: { name: "keyword.operator.assignment.compound.ts" },
            3: { name: "keyword.operator.arithmetic.ts" }
          },
          match: "(?<=[_$[:alnum:]])(\\!)\\s*(?:(/=)|(?:(/)(?![/*])))"
        },
        { match: "\\!|&&|\\|\\||\\?\\?", name: "keyword.operator.logical.ts" },
        { match: "\\&|~|\\^|\\|", name: "keyword.operator.bitwise.ts" },
        { match: "\\=", name: "keyword.operator.assignment.ts" },
        { match: "--", name: "keyword.operator.decrement.ts" },
        { match: "\\+\\+", name: "keyword.operator.increment.ts" },
        { match: "%|\\*|/|-|\\+", name: "keyword.operator.arithmetic.ts" },
        {
          begin: "(?<=[_$[:alnum:])\\]])\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)+(?:(/=)|(?:(/)(?![/*]))))",
          end: "(?:(/=)|(?:(/)(?!\\*([^\\*]|(\\*[^\\/]))*\\*\\/)))",
          endCaptures: {
            1: { name: "keyword.operator.assignment.compound.ts" },
            2: { name: "keyword.operator.arithmetic.ts" }
          },
          patterns: [{ include: "#comment" }]
        },
        {
          captures: {
            1: { name: "keyword.operator.assignment.compound.ts" },
            2: { name: "keyword.operator.arithmetic.ts" }
          },
          match: "(?<=[_$[:alnum:])\\]])\\s*(?:(/=)|(?:(/)(?![/*])))"
        }
      ]
    },
    expressionPunctuations: {
      patterns: [
        { include: "#punctuation-comma" },
        { include: "#punctuation-accessor" }
      ]
    },
    expressionWithoutIdentifiers: {
      patterns: [
        { include: "#string" },
        { include: "#regex" },
        { include: "#comment" },
        { include: "#function-expression" },
        { include: "#class-expression" },
        { include: "#arrow-function" },
        { include: "#paren-expression-possibly-arrow" },
        { include: "#cast" },
        { include: "#ternary-expression" },
        { include: "#new-expr" },
        { include: "#instanceof-expr" },
        { include: "#object-literal" },
        { include: "#expression-operators" },
        { include: "#function-call" },
        { include: "#literal" },
        { include: "#support-objects" },
        { include: "#paren-expression" }
      ]
    },
    "field-declaration": {
      begin: "(?x)(?<!\\()(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s+)?(?=\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|\\}|$))",
      beginCaptures: { 1: { name: "storage.modifier.ts" } },
      end: "(?x)(?=\\}|;|,|$|(^(?!\\s*((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|(\\#?[_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(?:(?:(\\?)|(\\!))\\s*)?(=|:|;|,|$))))|(?<=\\})",
      name: "meta.field.declaration.ts",
      patterns: [
        { include: "#variable-initializer" },
        { include: "#type-annotation" },
        { include: "#string" },
        { include: "#array-literal" },
        { include: "#numeric-literal" },
        { include: "#comment" },
        {
          captures: {
            1: { name: "meta.definition.property.ts entity.name.function.ts" },
            2: { name: "keyword.operator.optional.ts" },
            3: { name: "keyword.operator.definiteassignment.ts" }
          },
          match: "(?x)(\\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\\?)|(\\!))?(?=\\s*\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))"
        },
        {
          match: "\\#?[_$[:alpha:]][_$[:alnum:]]*",
          name: "meta.definition.property.ts variable.object.property.ts"
        },
        { match: "\\?", name: "keyword.operator.optional.ts" },
        { match: "\\!", name: "keyword.operator.definiteassignment.ts" }
      ]
    },
    "for-loop": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))for(?=((\\s+|(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*))await)?\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)?(\\())",
      beginCaptures: { 0: { name: "keyword.control.loop.ts" } },
      end: "(?<=\\))",
      patterns: [
        { include: "#comment" },
        { match: "await", name: "keyword.control.loop.ts" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "meta.brace.round.ts" } },
          end: "\\)",
          endCaptures: { 0: { name: "meta.brace.round.ts" } },
          patterns: [
            { include: "#var-expr" },
            { include: "#expression" },
            { include: "#punctuation-semicolon" }
          ]
        }
      ]
    },
    "function-body": {
      patterns: [
        { include: "#comment" },
        { include: "#type-parameters" },
        { include: "#function-parameters" },
        { include: "#return-type" },
        { include: "#type-function-return-type" },
        { include: "#decl-block" },
        { match: "\\*", name: "keyword.generator.asterisk.ts" }
      ]
    },
    "function-call": {
      patterns: [
        {
          begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
          end: "(?<=\\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
          patterns: [
            {
              begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
              end: "(?=\\s*(?:(\\?\\.\\s*)|(\\!))?((<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?\\())",
              name: "meta.function-call.ts",
              patterns: [{ include: "#function-call-target" }]
            },
            { include: "#comment" },
            { include: "#function-call-optionals" },
            { include: "#type-arguments" },
            { include: "#paren-expression" }
          ]
        },
        {
          begin: "(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))",
          end: "(?<=\\>)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))|(?<=[\\)]))(<\\s*[\\{\\[\\(]\\s*$))",
          patterns: [
            {
              begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*)(\\s*\\??\\.\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*))",
              end: "(?=(<\\s*[\\{\\[\\(]\\s*$))",
              name: "meta.function-call.ts",
              patterns: [{ include: "#function-call-target" }]
            },
            { include: "#comment" },
            { include: "#function-call-optionals" },
            { include: "#type-arguments" }
          ]
        }
      ]
    },
    "function-call-optionals": {
      patterns: [
        {
          match: "\\?\\.",
          name: "meta.function-call.ts punctuation.accessor.optional.ts"
        },
        {
          match: "\\!",
          name: "meta.function-call.ts keyword.operator.definiteassignment.ts"
        }
      ]
    },
    "function-call-target": {
      patterns: [
        { include: "#support-function-call-identifiers" },
        {
          match: "(\\#?[_$[:alpha:]][_$[:alnum:]]*)",
          name: "entity.name.function.ts"
        }
      ]
    },
    "function-declaration": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "storage.modifier.async.ts" },
        4: { name: "storage.type.function.ts" },
        5: { name: "keyword.generator.asterisk.ts" },
        6: { name: "meta.definition.function.ts entity.name.function.ts" }
      },
      end: "(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|(?<=\\})",
      name: "meta.function.ts",
      patterns: [{ include: "#function-name" }, { include: "#function-body" }]
    },
    "function-expression": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      beginCaptures: {
        1: { name: "storage.modifier.async.ts" },
        2: { name: "storage.type.function.ts" },
        3: { name: "keyword.generator.asterisk.ts" },
        4: { name: "meta.definition.function.ts entity.name.function.ts" }
      },
      end: "(?=;)|(?<=\\})",
      name: "meta.function.expression.ts",
      patterns: [
        { include: "#function-name" },
        { include: "#single-line-comment-consuming-line-ending" },
        { include: "#function-body" }
      ]
    },
    "function-name": {
      match: "[_$[:alpha:]][_$[:alnum:]]*",
      name: "meta.definition.function.ts entity.name.function.ts"
    },
    "function-parameters": {
      begin: "\\(",
      beginCaptures: { 0: { name: "punctuation.definition.parameters.begin.ts" } },
      end: "\\)",
      endCaptures: { 0: { name: "punctuation.definition.parameters.end.ts" } },
      name: "meta.parameters.ts",
      patterns: [{ include: "#function-parameters-body" }]
    },
    "function-parameters-body": {
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        { include: "#decorator" },
        { include: "#destructuring-parameter" },
        { include: "#parameter-name" },
        { include: "#parameter-type-annotation" },
        { include: "#variable-initializer" },
        { match: ",", name: "punctuation.separator.parameter.ts" }
      ]
    },
    identifiers: {
      patterns: [
        { include: "#object-identifiers" },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "entity.name.function.ts" }
          },
          match: "(?x)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n))"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "variable.other.constant.property.ts" }
          },
          match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "variable.other.property.ts" }
          },
          match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\\#?[_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          match: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          name: "variable.other.constant.ts"
        },
        {
          match: "[_$[:alpha:]][_$[:alnum:]]*",
          name: "variable.other.readwrite.ts"
        }
      ]
    },
    "if-statement": {
      patterns: [
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bif\\s*(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))\\s*(?!\\{))",
          end: "(?=;|$|\\})",
          patterns: [
            { include: "#comment" },
            {
              begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if)\\s*(\\()",
              beginCaptures: {
                1: { name: "keyword.control.conditional.ts" },
                2: { name: "meta.brace.round.ts" }
              },
              end: "\\)",
              endCaptures: { 0: { name: "meta.brace.round.ts" } },
              patterns: [{ include: "#expression" }]
            },
            {
              begin: "(?<=\\))\\s*\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
              beginCaptures: {
                0: { name: "punctuation.definition.string.begin.ts" }
              },
              end: "(/)([dgimsuy]*)",
              endCaptures: {
                1: { name: "punctuation.definition.string.end.ts" },
                2: { name: "keyword.other.ts" }
              },
              name: "string.regexp.ts",
              patterns: [{ include: "#regexp" }]
            },
            { include: "#statements" }
          ]
        }
      ]
    },
    "import-declaration": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "keyword.control.import.ts" },
        4: { name: "keyword.control.type.ts" }
      },
      end: "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)",
      name: "meta.import.ts",
      patterns: [
        { include: "#single-line-comment-consuming-line-ending" },
        { include: "#comment" },
        { include: "#string" },
        {
          begin: `(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*["'])`,
          end: "\\bfrom\\b",
          endCaptures: { 0: { name: "keyword.control.from.ts" } },
          patterns: [{ include: "#import-export-declaration" }]
        },
        { include: "#import-export-declaration" }
      ]
    },
    "import-equals-declaration": {
      patterns: [
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
          beginCaptures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "keyword.control.import.ts" },
            4: { name: "keyword.control.type.ts" },
            5: { name: "variable.other.readwrite.alias.ts" },
            6: { name: "keyword.operator.assignment.ts" },
            7: { name: "keyword.control.require.ts" },
            8: { name: "meta.brace.round.ts" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "meta.brace.round.ts" } },
          name: "meta.import-equals.external.ts",
          patterns: [{ include: "#comment" }, { include: "#string" }]
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
          beginCaptures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "keyword.control.import.ts" },
            4: { name: "keyword.control.type.ts" },
            5: { name: "variable.other.readwrite.alias.ts" },
            6: { name: "keyword.operator.assignment.ts" }
          },
          end: "(?=;|$|^)",
          name: "meta.import-equals.internal.ts",
          patterns: [
            { include: "#single-line-comment-consuming-line-ending" },
            { include: "#comment" },
            {
              captures: {
                1: { name: "entity.name.type.module.ts" },
                2: { name: "punctuation.accessor.ts" },
                3: { name: "punctuation.accessor.optional.ts" }
              },
              match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))"
            },
            {
              match: "([_$[:alpha:]][_$[:alnum:]]*)",
              name: "variable.other.readwrite.ts"
            }
          ]
        }
      ]
    },
    "import-export-assert-clause": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(with)|(assert))\\s*(\\{)",
      beginCaptures: {
        1: { name: "keyword.control.with.ts" },
        2: { name: "keyword.control.assert.ts" },
        3: { name: "punctuation.definition.block.ts" }
      },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        {
          match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          name: "meta.object-literal.key.ts"
        },
        { match: ":", name: "punctuation.separator.key-value.ts" }
      ]
    },
    "import-export-block": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      name: "meta.block.ts",
      patterns: [{ include: "#import-export-clause" }]
    },
    "import-export-clause": {
      patterns: [
        { include: "#comment" },
        {
          captures: {
            1: { name: "keyword.control.type.ts" },
            2: { name: "keyword.control.default.ts" },
            3: { name: "constant.language.import-export-all.ts" },
            4: { name: "variable.other.readwrite.ts" },
            5: { name: "keyword.control.as.ts" },
            6: { name: "keyword.control.default.ts" },
            7: { name: "variable.other.readwrite.alias.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(?:(\\btype)\\s+)?(?:(\\bdefault)|(\\*)|(\\b[_$[:alpha:]][_$[:alnum:]]*)))\\s+(as)\\s+(?:(default(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|([_$[:alpha:]][_$[:alnum:]]*))"
        },
        { include: "#punctuation-comma" },
        { match: "\\*", name: "constant.language.import-export-all.ts" },
        { match: "\\b(default)\\b", name: "keyword.control.default.ts" },
        {
          captures: {
            1: { name: "keyword.control.type.ts" },
            2: { name: "variable.other.readwrite.alias.ts" }
          },
          match: "(?:(\\btype)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)"
        }
      ]
    },
    "import-export-declaration": {
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        { include: "#import-export-block" },
        { match: "\\bfrom\\b", name: "keyword.control.from.ts" },
        { include: "#import-export-assert-clause" },
        { include: "#import-export-clause" }
      ]
    },
    "indexer-declaration": {
      begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
      beginCaptures: {
        1: { name: "storage.modifier.ts" },
        2: { name: "meta.brace.square.ts" },
        3: { name: "variable.parameter.ts" }
      },
      end: "(\\])\\s*(\\?\\s*)?|$",
      endCaptures: {
        1: { name: "meta.brace.square.ts" },
        2: { name: "keyword.operator.optional.ts" }
      },
      name: "meta.indexer.declaration.ts",
      patterns: [{ include: "#type-annotation" }]
    },
    "indexer-mapped-type-declaration": {
      begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([+-])?(readonly)\\s*)?\\s*(\\[)\\s*([_$[:alpha:]][_$[:alnum:]]*)\\s+(in)\\s+",
      beginCaptures: {
        1: { name: "keyword.operator.type.modifier.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "meta.brace.square.ts" },
        4: { name: "entity.name.type.ts" },
        5: { name: "keyword.operator.expression.in.ts" }
      },
      end: "(\\])([+-])?\\s*(\\?\\s*)?|$",
      endCaptures: {
        1: { name: "meta.brace.square.ts" },
        2: { name: "keyword.operator.type.modifier.ts" },
        3: { name: "keyword.operator.optional.ts" }
      },
      name: "meta.indexer.mappedtype.declaration.ts",
      patterns: [
        {
          captures: { 1: { name: "keyword.control.as.ts" } },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+"
        },
        { include: "#type" }
      ]
    },
    "inline-tags": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.bracket.square.begin.jsdoc" },
            2: { name: "punctuation.definition.bracket.square.end.jsdoc" }
          },
          match: "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
          name: "constant.other.description.jsdoc"
        },
        {
          begin: "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
          beginCaptures: {
            1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" },
            2: { name: "storage.type.class.jsdoc" },
            3: { name: "punctuation.definition.inline.tag.jsdoc" }
          },
          end: "}|(?=\\*/)",
          endCaptures: {
            0: { name: "punctuation.definition.bracket.curly.end.jsdoc" }
          },
          name: "entity.name.type.instance.jsdoc",
          patterns: [
            {
              captures: {
                1: { name: "variable.other.link.underline.jsdoc" },
                2: { name: "punctuation.separator.pipe.jsdoc" }
              },
              match: "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?"
            },
            {
              captures: {
                1: { name: "variable.other.description.jsdoc" },
                2: { name: "punctuation.separator.pipe.jsdoc" }
              },
              match: "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?"
            }
          ]
        }
      ]
    },
    "instanceof-expr": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      beginCaptures: { 1: { name: "keyword.operator.expression.instanceof.ts" } },
      end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(===|!==|==|!=)|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
      patterns: [{ include: "#type" }]
    },
    "interface-declaration": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(?:(abstract)\\s+)?\\b(interface)\\b(?=\\s+|/[/*])",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "storage.modifier.ts" },
        4: { name: "storage.type.interface.ts" }
      },
      end: "(?<=\\})",
      name: "meta.interface.ts",
      patterns: [
        { include: "#comment" },
        { include: "#class-or-interface-heritage" },
        {
          captures: { 0: { name: "entity.name.type.interface.ts" } },
          match: "[_$[:alpha:]][_$[:alnum:]]*"
        },
        { include: "#type-parameters" },
        { include: "#class-or-interface-body" }
      ]
    },
    jsdoctype: {
      patterns: [
        { match: "\\G{(?:[^}*]|\\*[^/}])+$", name: "invalid.illegal.type.jsdoc" },
        {
          begin: "\\G({)",
          beginCaptures: {
            0: { name: "entity.name.type.instance.jsdoc" },
            1: { name: "punctuation.definition.bracket.curly.begin.jsdoc" }
          },
          contentName: "entity.name.type.instance.jsdoc",
          end: "((}))\\s*|(?=\\*/)",
          endCaptures: {
            1: { name: "entity.name.type.instance.jsdoc" },
            2: { name: "punctuation.definition.bracket.curly.end.jsdoc" }
          },
          patterns: [{ include: "#brackets" }]
        }
      ]
    },
    label: {
      patterns: [
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)",
          beginCaptures: {
            1: { name: "entity.name.label.ts" },
            2: { name: "punctuation.separator.label.ts" }
          },
          end: "(?<=\\})",
          patterns: [{ include: "#decl-block" }]
        },
        {
          captures: {
            1: { name: "entity.name.label.ts" },
            2: { name: "punctuation.separator.label.ts" }
          },
          match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)"
        }
      ]
    },
    literal: {
      patterns: [
        { include: "#numeric-literal" },
        { include: "#boolean-literal" },
        { include: "#null-literal" },
        { include: "#undefined-literal" },
        { include: "#numericConstant-literal" },
        { include: "#array-literal" },
        { include: "#this-literal" },
        { include: "#super-literal" }
      ]
    },
    "method-declaration": {
      patterns: [
        {
          begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?\\s*\\b(constructor)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          beginCaptures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "storage.modifier.ts" },
            4: { name: "storage.modifier.async.ts" },
            5: { name: "storage.type.ts" }
          },
          end: "(?=\\}|;|,|$)|(?<=\\})",
          name: "meta.method.declaration.ts",
          patterns: [
            { include: "#method-declaration-name" },
            { include: "#function-body" }
          ]
        },
        {
          begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:(?:\\s*\\b(new)\\b(?!:)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|(?:(\\*)\\s*)?)(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
          beginCaptures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "storage.modifier.ts" },
            4: { name: "storage.modifier.async.ts" },
            5: { name: "keyword.operator.new.ts" },
            6: { name: "keyword.generator.asterisk.ts" }
          },
          end: "(?=\\}|;|,|$)|(?<=\\})",
          name: "meta.method.declaration.ts",
          patterns: [
            { include: "#method-declaration-name" },
            { include: "#function-body" }
          ]
        },
        {
          begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(override)\\s+)?(?:\\b(public|private|protected)\\s+)?(?:\\b(abstract)\\s+)?(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
          beginCaptures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "storage.modifier.ts" },
            4: { name: "storage.modifier.async.ts" },
            5: { name: "storage.type.property.ts" },
            6: { name: "keyword.generator.asterisk.ts" }
          },
          end: "(?=\\}|;|,|$)|(?<=\\})",
          name: "meta.method.declaration.ts",
          patterns: [
            { include: "#method-declaration-name" },
            { include: "#function-body" }
          ]
        }
      ]
    },
    "method-declaration-name": {
      begin: "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
      end: "(?=\\(|\\<)",
      patterns: [
        { include: "#string" },
        { include: "#array-literal" },
        { include: "#numeric-literal" },
        {
          match: "[_$[:alpha:]][_$[:alnum:]]*",
          name: "meta.definition.method.ts entity.name.function.ts"
        },
        { match: "\\?", name: "keyword.operator.optional.ts" }
      ]
    },
    "namespace-declaration": {
      begin: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module)\\s+(?=[_$[:alpha:]\"'`]))",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "storage.type.namespace.ts" }
      },
      end: "(?<=\\})|(?=;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
      name: "meta.namespace.declaration.ts",
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        {
          match: "([_$[:alpha:]][_$[:alnum:]]*)",
          name: "entity.name.type.module.ts"
        },
        { include: "#punctuation-accessor" },
        { include: "#decl-block" }
      ]
    },
    "new-expr": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      beginCaptures: { 1: { name: "keyword.operator.new.ts" } },
      end: "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))new(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
      name: "new.expr.ts",
      patterns: [{ include: "#expression" }]
    },
    "null-literal": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "constant.language.null.ts"
    },
    "numeric-literal": {
      patterns: [
        {
          captures: { 1: { name: "storage.type.numeric.bigint.ts" } },
          match: "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
          name: "constant.numeric.hex.ts"
        },
        {
          captures: { 1: { name: "storage.type.numeric.bigint.ts" } },
          match: "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
          name: "constant.numeric.binary.ts"
        },
        {
          captures: { 1: { name: "storage.type.numeric.bigint.ts" } },
          match: "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
          name: "constant.numeric.octal.ts"
        },
        {
          captures: {
            0: { name: "constant.numeric.decimal.ts" },
            1: { name: "meta.delimiter.decimal.period.ts" },
            10: { name: "meta.delimiter.decimal.period.ts" },
            11: { name: "storage.type.numeric.bigint.ts" },
            12: { name: "meta.delimiter.decimal.period.ts" },
            13: { name: "storage.type.numeric.bigint.ts" },
            14: { name: "storage.type.numeric.bigint.ts" },
            2: { name: "storage.type.numeric.bigint.ts" },
            3: { name: "meta.delimiter.decimal.period.ts" },
            4: { name: "storage.type.numeric.bigint.ts" },
            5: { name: "meta.delimiter.decimal.period.ts" },
            6: { name: "storage.type.numeric.bigint.ts" },
            7: { name: "storage.type.numeric.bigint.ts" },
            8: { name: "meta.delimiter.decimal.period.ts" },
            9: { name: "storage.type.numeric.bigint.ts" }
          },
          match: "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)"
        }
      ]
    },
    "numericConstant-literal": {
      patterns: [
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "constant.language.nan.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "constant.language.infinity.ts"
        }
      ]
    },
    "object-binding-element": {
      patterns: [
        { include: "#comment" },
        {
          begin: "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
          end: "(?=,|\\})",
          patterns: [
            { include: "#object-binding-element-propertyName" },
            { include: "#binding-element" }
          ]
        },
        { include: "#object-binding-pattern" },
        { include: "#destructuring-variable-rest" },
        { include: "#variable-initializer" },
        { include: "#punctuation-comma" }
      ]
    },
    "object-binding-element-const": {
      patterns: [
        { include: "#comment" },
        {
          begin: "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
          end: "(?=,|\\})",
          patterns: [
            { include: "#object-binding-element-propertyName" },
            { include: "#binding-element-const" }
          ]
        },
        { include: "#object-binding-pattern-const" },
        { include: "#destructuring-variable-rest-const" },
        { include: "#variable-initializer" },
        { include: "#punctuation-comma" }
      ]
    },
    "object-binding-element-propertyName": {
      begin: "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
      end: "(:)",
      endCaptures: { 0: { name: "punctuation.destructuring.ts" } },
      patterns: [
        { include: "#string" },
        { include: "#array-literal" },
        { include: "#numeric-literal" },
        {
          match: "([_$[:alpha:]][_$[:alnum:]]*)",
          name: "variable.object.property.ts"
        }
      ]
    },
    "object-binding-pattern": {
      begin: "(?:(\\.\\.\\.)\\s*)?(\\{)",
      beginCaptures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "punctuation.definition.binding-pattern.object.ts" }
      },
      end: "\\}",
      endCaptures: {
        0: { name: "punctuation.definition.binding-pattern.object.ts" }
      },
      patterns: [{ include: "#object-binding-element" }]
    },
    "object-binding-pattern-const": {
      begin: "(?:(\\.\\.\\.)\\s*)?(\\{)",
      beginCaptures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "punctuation.definition.binding-pattern.object.ts" }
      },
      end: "\\}",
      endCaptures: {
        0: { name: "punctuation.definition.binding-pattern.object.ts" }
      },
      patterns: [{ include: "#object-binding-element-const" }]
    },
    "object-identifiers": {
      patterns: [
        {
          match: "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\??\\.\\s*prototype\\b(?!\\$))",
          name: "support.class.ts"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "variable.other.constant.object.property.ts" },
            4: { name: "variable.other.object.property.ts" }
          },
          match: "(?x)(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (\\#?[[:upper:]][_$[:digit:][:upper:]]*) |\n  (\\#?[_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)"
        },
        {
          captures: {
            1: { name: "variable.other.constant.object.ts" },
            2: { name: "variable.other.object.ts" }
          },
          match: "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\??\\.\\s*\\#?[_$[:alpha:]][_$[:alnum:]]*)"
        }
      ]
    },
    "object-literal": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      name: "meta.objectliteral.ts",
      patterns: [{ include: "#object-member" }]
    },
    "object-literal-method-declaration": {
      begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
      beginCaptures: {
        1: { name: "storage.modifier.async.ts" },
        2: { name: "storage.type.property.ts" },
        3: { name: "keyword.generator.asterisk.ts" }
      },
      end: "(?=\\}|;|,)|(?<=\\})",
      name: "meta.method.declaration.ts",
      patterns: [
        { include: "#method-declaration-name" },
        { include: "#function-body" },
        {
          begin: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:\\b(async)\\s+)?(?:\\b(get|set)\\s+)?(?:(\\*)\\s*)?(?=\\s*(((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??))\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?[\\(])",
          beginCaptures: {
            1: { name: "storage.modifier.async.ts" },
            2: { name: "storage.type.property.ts" },
            3: { name: "keyword.generator.asterisk.ts" }
          },
          end: "(?=\\(|\\<)",
          patterns: [{ include: "#method-declaration-name" }]
        }
      ]
    },
    "object-member": {
      patterns: [
        { include: "#comment" },
        { include: "#object-literal-method-declaration" },
        {
          begin: "(?=\\[)",
          end: "(?=:)|((?<=[\\]])(?=\\s*[\\(\\<]))",
          name: "meta.object.member.ts meta.object-literal.key.ts",
          patterns: [{ include: "#comment" }, { include: "#array-literal" }]
        },
        {
          begin: "(?=[\\'\\\"\\`])",
          end: "(?=:)|((?<=[\\'\\\"\\`])(?=((\\s*[\\(\\<,}])|(\\s+(as|satisifies)\\s+))))",
          name: "meta.object.member.ts meta.object-literal.key.ts",
          patterns: [{ include: "#comment" }, { include: "#string" }]
        },
        {
          begin: "(?x)(?=(\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)))",
          end: "(?=:)|(?=\\s*([\\(\\<,}])|(\\s+as|satisifies\\s+))",
          name: "meta.object.member.ts meta.object-literal.key.ts",
          patterns: [{ include: "#comment" }, { include: "#numeric-literal" }]
        },
        {
          begin: "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])",
          end: "(?=\\}|;|,)|(?<=\\})",
          name: "meta.method.declaration.ts",
          patterns: [{ include: "#function-body" }]
        },
        {
          captures: {
            0: { name: "meta.object-literal.key.ts" },
            1: { name: "constant.numeric.decimal.ts" }
          },
          match: "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          name: "meta.object.member.ts"
        },
        {
          captures: {
            0: { name: "meta.object-literal.key.ts" },
            1: { name: "entity.name.function.ts" }
          },
          match: "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:(\\s*\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/)*\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          name: "meta.object.member.ts"
        },
        {
          captures: { 0: { name: "meta.object-literal.key.ts" } },
          match: "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
          name: "meta.object.member.ts"
        },
        {
          begin: "\\.\\.\\.",
          beginCaptures: { 0: { name: "keyword.operator.spread.ts" } },
          end: "(?=,|\\})",
          name: "meta.object.member.ts",
          patterns: [{ include: "#expression" }]
        },
        {
          captures: { 1: { name: "variable.other.readwrite.ts" } },
          match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)",
          name: "meta.object.member.ts"
        },
        {
          captures: {
            1: { name: "keyword.control.as.ts" },
            2: { name: "storage.modifier.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))",
          name: "meta.object.member.ts"
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(as)|(satisfies))\\s+",
          beginCaptures: {
            1: { name: "keyword.control.as.ts" },
            2: { name: "keyword.control.satisfies.ts" }
          },
          end: "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as|satisifies)\\s+))",
          name: "meta.object.member.ts",
          patterns: [{ include: "#type" }]
        },
        {
          begin: "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
          end: "(?=,|\\}|$|\\/\\/|\\/\\*)",
          name: "meta.object.member.ts",
          patterns: [{ include: "#expression" }]
        },
        {
          begin: ":",
          beginCaptures: {
            0: {
              name: "meta.object-literal.key.ts punctuation.separator.key-value.ts"
            }
          },
          end: "(?=,|\\})",
          name: "meta.object.member.ts",
          patterns: [
            {
              begin: "(?<=:)\\s*(async)?(?=\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
              beginCaptures: { 1: { name: "storage.modifier.async.ts" } },
              end: "(?<=\\))",
              patterns: [
                { include: "#type-parameters" },
                {
                  begin: "\\(",
                  beginCaptures: { 0: { name: "meta.brace.round.ts" } },
                  end: "\\)",
                  endCaptures: { 0: { name: "meta.brace.round.ts" } },
                  patterns: [
                    { include: "#expression-inside-possibly-arrow-parens" }
                  ]
                }
              ]
            },
            {
              begin: "(?<=:)\\s*(async)?\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
              beginCaptures: {
                1: { name: "storage.modifier.async.ts" },
                2: { name: "meta.brace.round.ts" }
              },
              end: "\\)",
              endCaptures: { 0: { name: "meta.brace.round.ts" } },
              patterns: [{ include: "#expression-inside-possibly-arrow-parens" }]
            },
            {
              begin: "(?<=:)\\s*(async)?\\s*(?=\\<\\s*$)",
              beginCaptures: { 1: { name: "storage.modifier.async.ts" } },
              end: "(?<=\\>)",
              patterns: [{ include: "#type-parameters" }]
            },
            {
              begin: "(?<=\\>)\\s*(\\()(?=\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
              beginCaptures: { 1: { name: "meta.brace.round.ts" } },
              end: "\\)",
              endCaptures: { 0: { name: "meta.brace.round.ts" } },
              patterns: [{ include: "#expression-inside-possibly-arrow-parens" }]
            },
            { include: "#possibly-arrow-return-type" },
            { include: "#expression" }
          ]
        },
        { include: "#punctuation-comma" },
        { include: "#decl-block" }
      ]
    },
    "parameter-array-binding-pattern": {
      begin: "(?:(\\.\\.\\.)\\s*)?(\\[)",
      beginCaptures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "punctuation.definition.binding-pattern.array.ts" }
      },
      end: "\\]",
      endCaptures: {
        0: { name: "punctuation.definition.binding-pattern.array.ts" }
      },
      patterns: [
        { include: "#parameter-binding-element" },
        { include: "#punctuation-comma" }
      ]
    },
    "parameter-binding-element": {
      patterns: [
        { include: "#comment" },
        { include: "#string" },
        { include: "#numeric-literal" },
        { include: "#regex" },
        { include: "#parameter-object-binding-pattern" },
        { include: "#parameter-array-binding-pattern" },
        { include: "#destructuring-parameter-rest" },
        { include: "#variable-initializer" }
      ]
    },
    "parameter-name": {
      patterns: [
        {
          captures: { 1: { name: "storage.modifier.ts" } },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|protected|private|readonly)\\s+(?=(override|public|protected|private|readonly)\\s+)"
        },
        {
          captures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.operator.rest.ts" },
            3: { name: "entity.name.function.ts variable.language.this.ts" },
            4: { name: "entity.name.function.ts" },
            5: { name: "keyword.operator.optional.ts" }
          },
          match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))"
        },
        {
          captures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.operator.rest.ts" },
            3: { name: "variable.parameter.ts variable.language.this.ts" },
            4: { name: "variable.parameter.ts" },
            5: { name: "keyword.operator.optional.ts" }
          },
          match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(override|public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*(\\??)"
        }
      ]
    },
    "parameter-object-binding-element": {
      patterns: [
        { include: "#comment" },
        {
          begin: "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(:))",
          end: "(?=,|\\})",
          patterns: [
            { include: "#object-binding-element-propertyName" },
            { include: "#parameter-binding-element" },
            { include: "#paren-expression" }
          ]
        },
        { include: "#parameter-object-binding-pattern" },
        { include: "#destructuring-parameter-rest" },
        { include: "#variable-initializer" },
        { include: "#punctuation-comma" }
      ]
    },
    "parameter-object-binding-pattern": {
      begin: "(?:(\\.\\.\\.)\\s*)?(\\{)",
      beginCaptures: {
        1: { name: "keyword.operator.rest.ts" },
        2: { name: "punctuation.definition.binding-pattern.object.ts" }
      },
      end: "\\}",
      endCaptures: {
        0: { name: "punctuation.definition.binding-pattern.object.ts" }
      },
      patterns: [{ include: "#parameter-object-binding-element" }]
    },
    "parameter-type-annotation": {
      patterns: [
        {
          begin: "(:)",
          beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } },
          end: "(?=[,)])|(?==[^>])",
          name: "meta.type.annotation.ts",
          patterns: [{ include: "#type" }]
        }
      ]
    },
    "paren-expression": {
      begin: "\\(",
      beginCaptures: { 0: { name: "meta.brace.round.ts" } },
      end: "\\)",
      endCaptures: { 0: { name: "meta.brace.round.ts" } },
      patterns: [{ include: "#expression" }]
    },
    "paren-expression-possibly-arrow": {
      patterns: [
        {
          begin: "(?<=[(=,])\\s*(async)?(?=\\s*((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\(\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))",
          beginCaptures: { 1: { name: "storage.modifier.async.ts" } },
          end: "(?<=\\))",
          patterns: [
            { include: "#paren-expression-possibly-arrow-with-typeparameters" }
          ]
        },
        {
          begin: "(?<=[(=,]|=>|^return|[^\\._$[:alnum:]]return)\\s*(async)?(?=\\s*((((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*))?\\()|(<)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)))\\s*$)",
          beginCaptures: { 1: { name: "storage.modifier.async.ts" } },
          end: "(?<=\\))",
          patterns: [
            { include: "#paren-expression-possibly-arrow-with-typeparameters" }
          ]
        },
        { include: "#possibly-arrow-return-type" }
      ]
    },
    "paren-expression-possibly-arrow-with-typeparameters": {
      patterns: [
        { include: "#type-parameters" },
        {
          begin: "\\(",
          beginCaptures: { 0: { name: "meta.brace.round.ts" } },
          end: "\\)",
          endCaptures: { 0: { name: "meta.brace.round.ts" } },
          patterns: [{ include: "#expression-inside-possibly-arrow-parens" }]
        }
      ]
    },
    "possibly-arrow-return-type": {
      begin: "(?<=\\)|^)\\s*(:)(?=\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*=>)",
      beginCaptures: {
        1: {
          name: "meta.arrow.ts meta.return.type.arrow.ts keyword.operator.type.annotation.ts"
        }
      },
      contentName: "meta.arrow.ts meta.return.type.arrow.ts",
      end: "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
      patterns: [{ include: "#arrow-return-type-body" }]
    },
    "property-accessor": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(accessor|get|set)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "storage.type.property.ts"
    },
    "punctuation-accessor": {
      captures: {
        1: { name: "punctuation.accessor.ts" },
        2: { name: "punctuation.accessor.optional.ts" }
      },
      match: "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))"
    },
    "punctuation-comma": { match: ",", name: "punctuation.separator.comma.ts" },
    "punctuation-semicolon": {
      match: ";",
      name: "punctuation.terminator.statement.ts"
    },
    "qstring-double": {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } },
      end: '(")|((?:[^\\\\\\n])$)',
      endCaptures: {
        1: { name: "punctuation.definition.string.end.ts" },
        2: { name: "invalid.illegal.newline.ts" }
      },
      name: "string.quoted.double.ts",
      patterns: [{ include: "#string-character-escape" }]
    },
    "qstring-single": {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } },
      end: "(\\')|((?:[^\\\\\\n])$)",
      endCaptures: {
        1: { name: "punctuation.definition.string.end.ts" },
        2: { name: "invalid.illegal.newline.ts" }
      },
      name: "string.quoted.single.ts",
      patterns: [{ include: "#string-character-escape" }]
    },
    regex: {
      patterns: [
        {
          begin: "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          beginCaptures: { 1: { name: "punctuation.definition.string.begin.ts" } },
          end: "(/)([dgimsuy]*)",
          endCaptures: {
            1: { name: "punctuation.definition.string.end.ts" },
            2: { name: "keyword.other.ts" }
          },
          name: "string.regexp.ts",
          patterns: [{ include: "#regexp" }]
        },
        {
          begin: "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          beginCaptures: { 0: { name: "punctuation.definition.string.begin.ts" } },
          end: "(/)([dgimsuy]*)",
          endCaptures: {
            1: { name: "punctuation.definition.string.end.ts" },
            2: { name: "keyword.other.ts" }
          },
          name: "string.regexp.ts",
          patterns: [{ include: "#regexp" }]
        }
      ]
    },
    "regex-character-class": {
      patterns: [
        {
          match: "\\\\[wWsSdDtrnvf]|\\.",
          name: "constant.other.character-class.regexp"
        },
        {
          match: "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})",
          name: "constant.character.numeric.regexp"
        },
        { match: "\\\\c[A-Z]", name: "constant.character.control.regexp" },
        { match: "\\\\.", name: "constant.character.escape.backslash.regexp" }
      ]
    },
    regexp: {
      patterns: [
        { match: "\\\\[bB]|\\^|\\$", name: "keyword.control.anchor.regexp" },
        {
          captures: {
            0: { name: "keyword.other.back-reference.regexp" },
            1: { name: "variable.other.regexp" }
          },
          match: "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>"
        },
        {
          match: "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??",
          name: "keyword.operator.quantifier.regexp"
        },
        { match: "\\|", name: "keyword.operator.or.regexp" },
        {
          begin: "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
          beginCaptures: {
            1: { name: "punctuation.definition.group.regexp" },
            2: { name: "punctuation.definition.group.assertion.regexp" },
            3: { name: "meta.assertion.look-ahead.regexp" },
            4: { name: "meta.assertion.negative-look-ahead.regexp" },
            5: { name: "meta.assertion.look-behind.regexp" },
            6: { name: "meta.assertion.negative-look-behind.regexp" }
          },
          end: "(\\))",
          endCaptures: { 1: { name: "punctuation.definition.group.regexp" } },
          name: "meta.group.assertion.regexp",
          patterns: [{ include: "#regexp" }]
        },
        {
          begin: "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
          beginCaptures: {
            0: { name: "punctuation.definition.group.regexp" },
            1: { name: "punctuation.definition.group.no-capture.regexp" },
            2: { name: "variable.other.regexp" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.group.regexp" } },
          name: "meta.group.regexp",
          patterns: [{ include: "#regexp" }]
        },
        {
          begin: "(\\[)(\\^)?",
          beginCaptures: {
            1: { name: "punctuation.definition.character-class.regexp" },
            2: { name: "keyword.operator.negation.regexp" }
          },
          end: "(\\])",
          endCaptures: {
            1: { name: "punctuation.definition.character-class.regexp" }
          },
          name: "constant.other.character-class.set.regexp",
          patterns: [
            {
              captures: {
                1: { name: "constant.character.numeric.regexp" },
                2: { name: "constant.character.control.regexp" },
                3: { name: "constant.character.escape.backslash.regexp" },
                4: { name: "constant.character.numeric.regexp" },
                5: { name: "constant.character.control.regexp" },
                6: { name: "constant.character.escape.backslash.regexp" }
              },
              match: "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              name: "constant.other.character-class.range.regexp"
            },
            { include: "#regex-character-class" }
          ]
        },
        { include: "#regex-character-class" }
      ]
    },
    "return-type": {
      patterns: [
        {
          begin: "(?<=\\))\\s*(:)(?=\\s*\\S)",
          beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } },
          end: "(?<![:|&])(?=$|^|[{};,]|//)",
          name: "meta.return.type.ts",
          patterns: [{ include: "#return-type-core" }]
        },
        {
          begin: "(?<=\\))\\s*(:)",
          beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } },
          end: "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
          name: "meta.return.type.ts",
          patterns: [{ include: "#return-type-core" }]
        }
      ]
    },
    "return-type-core": {
      patterns: [
        { include: "#comment" },
        {
          begin: "(?<=[:|&])(?=\\s*\\{)",
          end: "(?<=\\})",
          patterns: [{ include: "#type-object" }]
        },
        { include: "#type-predicate-operator" },
        { include: "#type" }
      ]
    },
    shebang: {
      captures: { 1: { name: "punctuation.definition.comment.ts" } },
      match: "\\A(#!).*(?=$)",
      name: "comment.line.shebang.ts"
    },
    "single-line-comment-consuming-line-ending": {
      begin: "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
      beginCaptures: {
        1: { name: "punctuation.whitespace.comment.leading.ts" },
        2: { name: "comment.line.double-slash.ts" },
        3: { name: "punctuation.definition.comment.ts" },
        4: { name: "storage.type.internaldeclaration.ts" },
        5: { name: "punctuation.decorator.internaldeclaration.ts" }
      },
      contentName: "comment.line.double-slash.ts",
      end: "(?=^)"
    },
    statements: {
      patterns: [
        { include: "#declaration" },
        { include: "#control-statement" },
        { include: "#after-operator-block-as-object-literal" },
        { include: "#decl-block" },
        { include: "#label" },
        { include: "#expression" },
        { include: "#punctuation-semicolon" },
        { include: "#string" },
        { include: "#comment" }
      ]
    },
    string: {
      patterns: [
        { include: "#qstring-single" },
        { include: "#qstring-double" },
        { include: "#template" }
      ]
    },
    "string-character-escape": {
      match: "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)",
      name: "constant.character.escape.ts"
    },
    "super-literal": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))super\\b(?!\\$)",
      name: "variable.language.super.ts"
    },
    "support-function-call-identifiers": {
      patterns: [
        { include: "#literal" },
        { include: "#support-objects" },
        { include: "#object-identifiers" },
        { include: "#punctuation-accessor" },
        {
          match: "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*[\\(]\\s*[\\\"\\'\\`]))",
          name: "keyword.operator.expression.import.ts"
        }
      ]
    },
    "support-objects": {
      patterns: [
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(arguments)\\b(?!\\$)",
          name: "variable.language.arguments.ts"
        },
        {
          match: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array\n  |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)",
          name: "support.class.builtin.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)",
          name: "support.class.error.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Promise)\\b(?!\\$)",
          name: "support.class.promise.ts"
        },
        {
          match: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()",
          name: "support.function.ts"
        },
        {
          captures: {
            1: { name: "support.constant.math.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: { name: "support.function.math.ts" },
            5: { name: "support.constant.property.math.ts" }
          },
          match: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Math)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "support.class.console.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: { name: "support.function.console.ts" }
          },
          match: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(console)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "support.constant.json.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: { name: "support.function.json.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(JSON)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(parse|stringify))?\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "keyword.control.import.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: { name: "support.variable.property.importmeta.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(import)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(meta)\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "keyword.operator.new.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: { name: "support.variable.property.target.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(new)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(target)\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "support.variable.property.ts" },
            4: { name: "support.constant.ts" }
          },
          match: "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (?:(constructor|length|prototype|__proto__)\\b(?!\\$|\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\())\n  |\n  (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\\b(?!\\$)))"
        },
        {
          captures: {
            1: { name: "support.variable.dom.ts" },
            2: { name: "support.class.dom.ts" }
          },
          match: "(?x) (?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.)) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "support.constant.dom.ts" },
            4: { name: "support.variable.property.dom.ts" }
          },
          match: "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\\()"
        },
        {
          match: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)",
          name: "support.class.node.ts"
        },
        {
          captures: {
            1: { name: "support.variable.object.process.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: { name: "support.variable.property.process.ts" },
            5: { name: "support.function.process.ts" }
          },
          match: "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(process)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)"
        },
        {
          captures: {
            1: { name: "support.type.object.module.ts" },
            2: { name: "support.type.object.module.ts" },
            3: { name: "punctuation.accessor.ts" },
            4: { name: "punctuation.accessor.optional.ts" },
            5: { name: "support.type.object.module.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(exports)|(module)(?:(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)",
          name: "support.variable.object.node.ts"
        },
        {
          captures: {
            1: { name: "punctuation.accessor.ts" },
            2: { name: "punctuation.accessor.optional.ts" },
            3: { name: "support.function.event-handler.ts" },
            4: { name: "support.function.ts" },
            5: { name: "support.function.dom.ts" },
            6: { name: "support.function.promise.ts" }
          },
          match: "(?x) (?:(\\.)|(\\?\\.(?!\\s*[[:digit:]]))) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n ) |\n (all|catch|finally|race|reject|resolve|then\n )\n)(?=\\s*\\()"
        }
      ]
    },
    "switch-statement": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?=\\bswitch\\s*\\()",
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      name: "switch-statement.expr.ts",
      patterns: [
        { include: "#comment" },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(switch)\\s*(\\()",
          beginCaptures: {
            1: { name: "keyword.control.switch.ts" },
            2: { name: "meta.brace.round.ts" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "meta.brace.round.ts" } },
          name: "switch-expression.expr.ts",
          patterns: [{ include: "#expression" }]
        },
        {
          begin: "\\{",
          beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
          end: "(?=\\})",
          name: "switch-block.expr.ts",
          patterns: [
            {
              begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
              beginCaptures: { 1: { name: "keyword.control.switch.ts" } },
              end: "(?=:)",
              name: "case-clause.expr.ts",
              patterns: [{ include: "#expression" }]
            },
            {
              begin: "(:)\\s*(\\{)",
              beginCaptures: {
                1: {
                  name: "case-clause.expr.ts punctuation.definition.section.case-statement.ts"
                },
                2: { name: "meta.block.ts punctuation.definition.block.ts" }
              },
              contentName: "meta.block.ts",
              end: "\\}",
              endCaptures: {
                0: { name: "meta.block.ts punctuation.definition.block.ts" }
              },
              patterns: [{ include: "#statements" }]
            },
            {
              captures: {
                0: {
                  name: "case-clause.expr.ts punctuation.definition.section.case-statement.ts"
                }
              },
              match: "(:)"
            },
            { include: "#statements" }
          ]
        }
      ]
    },
    template: {
      patterns: [
        { include: "#template-call" },
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
          beginCaptures: {
            1: { name: "entity.name.function.tagged-template.ts" },
            2: {
              name: "string.template.ts punctuation.definition.string.template.begin.ts"
            }
          },
          contentName: "string.template.ts",
          end: "`",
          endCaptures: {
            0: {
              name: "string.template.ts punctuation.definition.string.template.end.ts"
            }
          },
          patterns: [
            { include: "#template-substitution-element" },
            { include: "#string-character-escape" }
          ]
        }
      ]
    },
    "template-call": {
      patterns: [
        {
          begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
          end: "(?=`)",
          patterns: [
            {
              begin: "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\??\\.\\s*)*|(\\??\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
              end: "(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)?`)",
              patterns: [
                { include: "#support-function-call-identifiers" },
                {
                  match: "([_$[:alpha:]][_$[:alnum:]]*)",
                  name: "entity.name.function.tagged-template.ts"
                }
              ]
            },
            { include: "#type-arguments" }
          ]
        },
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)?\\s*(?=(<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))(([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>|\\<\\s*(((keyof|infer|typeof|readonly)\\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))(?=\\s*([\\<\\>\\,\\.\\[]|=>|&(?!&)|\\|(?!\\|)))))([^<>\\(]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(?<==)\\>)*(?<!=)\\>))*(?<!=)\\>)*(?<!=)>\\s*)`)",
          beginCaptures: { 1: { name: "entity.name.function.tagged-template.ts" } },
          end: "(?=`)",
          patterns: [{ include: "#type-arguments" }]
        }
      ]
    },
    "template-substitution-element": {
      begin: "\\$\\{",
      beginCaptures: {
        0: { name: "punctuation.definition.template-expression.begin.ts" }
      },
      contentName: "meta.embedded.line.ts",
      end: "\\}",
      endCaptures: {
        0: { name: "punctuation.definition.template-expression.end.ts" }
      },
      name: "meta.template.expression.ts",
      patterns: [{ include: "#expression" }]
    },
    "template-type": {
      patterns: [
        { include: "#template-call" },
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
          beginCaptures: {
            1: { name: "entity.name.function.tagged-template.ts" },
            2: {
              name: "string.template.ts punctuation.definition.string.template.begin.ts"
            }
          },
          contentName: "string.template.ts",
          end: "`",
          endCaptures: {
            0: {
              name: "string.template.ts punctuation.definition.string.template.end.ts"
            }
          },
          patterns: [
            { include: "#template-type-substitution-element" },
            { include: "#string-character-escape" }
          ]
        }
      ]
    },
    "template-type-substitution-element": {
      begin: "\\$\\{",
      beginCaptures: {
        0: { name: "punctuation.definition.template-expression.begin.ts" }
      },
      contentName: "meta.embedded.line.ts",
      end: "\\}",
      endCaptures: {
        0: { name: "punctuation.definition.template-expression.end.ts" }
      },
      name: "meta.template.expression.ts",
      patterns: [{ include: "#type" }]
    },
    "ternary-expression": {
      begin: "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
      beginCaptures: { 1: { name: "keyword.operator.ternary.ts" } },
      end: "\\s*(:)",
      endCaptures: { 1: { name: "keyword.operator.ternary.ts" } },
      patterns: [{ include: "#expression" }]
    },
    "this-literal": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)",
      name: "variable.language.this.ts"
    },
    type: {
      patterns: [
        { include: "#comment" },
        { include: "#type-string" },
        { include: "#numeric-literal" },
        { include: "#type-primitive" },
        { include: "#type-builtin-literals" },
        { include: "#type-parameters" },
        { include: "#type-tuple" },
        { include: "#type-object" },
        { include: "#type-operators" },
        { include: "#type-conditional" },
        { include: "#type-fn-type-parameters" },
        { include: "#type-paren-or-function-parameters" },
        { include: "#type-function-return-type" },
        {
          captures: { 1: { name: "storage.modifier.ts" } },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*"
        },
        { include: "#type-name" }
      ]
    },
    "type-alias-declaration": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
      beginCaptures: {
        1: { name: "keyword.control.export.ts" },
        2: { name: "storage.modifier.ts" },
        3: { name: "storage.type.type.ts" },
        4: { name: "entity.name.type.alias.ts" }
      },
      end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
      name: "meta.type.declaration.ts",
      patterns: [
        { include: "#comment" },
        { include: "#type-parameters" },
        {
          begin: "(=)\\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          beginCaptures: {
            1: { name: "keyword.operator.assignment.ts" },
            2: { name: "keyword.control.intrinsic.ts" }
          },
          end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
          patterns: [{ include: "#type" }]
        },
        {
          begin: "(=)\\s*",
          beginCaptures: { 1: { name: "keyword.operator.assignment.ts" } },
          end: "(?=\\}|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
          patterns: [{ include: "#type" }]
        }
      ]
    },
    "type-annotation": {
      patterns: [
        {
          begin: "(:)(?=\\s*\\S)",
          beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } },
          end: "(?<![:|&])(?!\\s*[|&]\\s+)((?=^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
          name: "meta.type.annotation.ts",
          patterns: [{ include: "#type" }]
        },
        {
          begin: "(:)",
          beginCaptures: { 1: { name: "keyword.operator.type.annotation.ts" } },
          end: "(?<![:|&])((?=[,);\\}\\]]|\\/\\/)|(?==[^>])|(?=^\\s*$)|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
          name: "meta.type.annotation.ts",
          patterns: [{ include: "#type" }]
        }
      ]
    },
    "type-arguments": {
      begin: "\\<",
      beginCaptures: {
        0: { name: "punctuation.definition.typeparameters.begin.ts" }
      },
      end: "\\>",
      endCaptures: { 0: { name: "punctuation.definition.typeparameters.end.ts" } },
      name: "meta.type.parameters.ts",
      patterns: [{ include: "#type-arguments-body" }]
    },
    "type-arguments-body": {
      patterns: [
        {
          captures: { 0: { name: "keyword.operator.type.ts" } },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        { include: "#type" },
        { include: "#punctuation-comma" }
      ]
    },
    "type-builtin-literals": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "support.type.builtin.ts"
    },
    "type-conditional": {
      patterns: [
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+",
          beginCaptures: { 1: { name: "storage.modifier.ts" } },
          end: "(?<=:)",
          patterns: [
            {
              begin: "\\?",
              beginCaptures: { 0: { name: "keyword.operator.ternary.ts" } },
              end: ":",
              endCaptures: { 0: { name: "keyword.operator.ternary.ts" } },
              patterns: [{ include: "#type" }]
            },
            { include: "#type" }
          ]
        }
      ]
    },
    "type-fn-type-parameters": {
      patterns: [
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b(?=\\s*\\<)",
          beginCaptures: {
            1: { name: "meta.type.constructor.ts storage.modifier.ts" },
            2: { name: "meta.type.constructor.ts keyword.control.new.ts" }
          },
          end: "(?<=>)",
          patterns: [{ include: "#comment" }, { include: "#type-parameters" }]
        },
        {
          begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(abstract)\\s+)?(new)\\b\\s*(?=\\()",
          beginCaptures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.control.new.ts" }
          },
          end: "(?<=\\))",
          name: "meta.type.constructor.ts",
          patterns: [{ include: "#function-parameters" }]
        },
        {
          begin: "(?x)(\n  (?=\n    [(]\\s*(\n      ([)]) |\n      (\\.\\.\\.) |\n      ([_$[:alnum:]]+\\s*(\n        ([:,?=])|\n        ([)]\\s*=>)\n      ))\n    )\n  )\n)",
          end: "(?<=\\))",
          name: "meta.type.function.ts",
          patterns: [{ include: "#function-parameters" }]
        }
      ]
    },
    "type-function-return-type": {
      patterns: [
        {
          begin: "(=>)(?=\\s*\\S)",
          beginCaptures: { 1: { name: "storage.type.function.arrow.ts" } },
          end: "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)",
          name: "meta.type.function.return.ts",
          patterns: [{ include: "#type-function-return-type-core" }]
        },
        {
          begin: "=>",
          beginCaptures: { 0: { name: "storage.type.function.arrow.ts" } },
          end: "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
          name: "meta.type.function.return.ts",
          patterns: [{ include: "#type-function-return-type-core" }]
        }
      ]
    },
    "type-function-return-type-core": {
      patterns: [
        { include: "#comment" },
        {
          begin: "(?<==>)(?=\\s*\\{)",
          end: "(?<=\\})",
          patterns: [{ include: "#type-object" }]
        },
        { include: "#type-predicate-operator" },
        { include: "#type" }
      ]
    },
    "type-infer": {
      patterns: [
        {
          captures: {
            1: { name: "keyword.operator.expression.infer.ts" },
            2: { name: "entity.name.type.ts" },
            3: { name: "keyword.operator.expression.extends.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(infer)\\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))(?:\\s+(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))?",
          name: "meta.type.infer.ts"
        }
      ]
    },
    "type-name": {
      patterns: [
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(<)",
          captures: {
            1: { name: "entity.name.type.module.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" },
            4: {
              name: "meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts"
            }
          },
          contentName: "meta.type.parameters.ts",
          end: "(>)",
          endCaptures: {
            1: {
              name: "meta.type.parameters.ts punctuation.definition.typeparameters.end.ts"
            }
          },
          patterns: [{ include: "#type-arguments-body" }]
        },
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(<)",
          beginCaptures: {
            1: { name: "entity.name.type.ts" },
            2: {
              name: "meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts"
            }
          },
          contentName: "meta.type.parameters.ts",
          end: "(>)",
          endCaptures: {
            1: {
              name: "meta.type.parameters.ts punctuation.definition.typeparameters.end.ts"
            }
          },
          patterns: [{ include: "#type-arguments-body" }]
        },
        {
          captures: {
            1: { name: "entity.name.type.module.ts" },
            2: { name: "punctuation.accessor.ts" },
            3: { name: "punctuation.accessor.optional.ts" }
          },
          match: "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))"
        },
        { match: "[_$[:alpha:]][_$[:alnum:]]*", name: "entity.name.type.ts" }
      ]
    },
    "type-object": {
      begin: "\\{",
      beginCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      end: "\\}",
      endCaptures: { 0: { name: "punctuation.definition.block.ts" } },
      name: "meta.object.type.ts",
      patterns: [
        { include: "#comment" },
        { include: "#method-declaration" },
        { include: "#indexer-declaration" },
        { include: "#indexer-mapped-type-declaration" },
        { include: "#field-declaration" },
        { include: "#type-annotation" },
        {
          begin: "\\.\\.\\.",
          beginCaptures: { 0: { name: "keyword.operator.spread.ts" } },
          end: "(?=\\}|;|,|$)|(?<=\\})",
          patterns: [{ include: "#type" }]
        },
        { include: "#punctuation-comma" },
        { include: "#punctuation-semicolon" },
        { include: "#type" }
      ]
    },
    "type-operators": {
      patterns: [
        { include: "#typeof-operator" },
        { include: "#type-infer" },
        {
          begin: "([&|])(?=\\s*\\{)",
          beginCaptures: { 0: { name: "keyword.operator.type.ts" } },
          end: "(?<=\\})",
          patterns: [{ include: "#type-object" }]
        },
        {
          begin: "[&|]",
          beginCaptures: { 0: { name: "keyword.operator.type.ts" } },
          end: "(?=\\S)"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.expression.keyof.ts"
        },
        { match: "(\\?|\\:)", name: "keyword.operator.ternary.ts" },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()",
          name: "keyword.operator.expression.import.ts"
        }
      ]
    },
    "type-parameters": {
      begin: "(<)",
      beginCaptures: {
        1: { name: "punctuation.definition.typeparameters.begin.ts" }
      },
      end: "(>)",
      endCaptures: { 1: { name: "punctuation.definition.typeparameters.end.ts" } },
      name: "meta.type.parameters.ts",
      patterns: [
        { include: "#comment" },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "storage.modifier.ts"
        },
        { include: "#type" },
        { include: "#punctuation-comma" },
        { match: "(=)(?!>)", name: "keyword.operator.assignment.ts" }
      ]
    },
    "type-paren-or-function-parameters": {
      begin: "\\(",
      beginCaptures: { 0: { name: "meta.brace.round.ts" } },
      end: "\\)",
      endCaptures: { 0: { name: "meta.brace.round.ts" } },
      name: "meta.type.paren.cover.ts",
      patterns: [
        {
          captures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.operator.rest.ts" },
            3: { name: "entity.name.function.ts variable.language.this.ts" },
            4: { name: "entity.name.function.ts" },
            5: { name: "keyword.operator.optional.ts" }
          },
          match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))))"
        },
        {
          captures: {
            1: { name: "storage.modifier.ts" },
            2: { name: "keyword.operator.rest.ts" },
            3: { name: "variable.parameter.ts variable.language.this.ts" },
            4: { name: "variable.parameter.ts" },
            5: { name: "keyword.operator.optional.ts" }
          },
          match: "(?x)(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(public|private|protected|readonly)\\s+)?(?:(\\.\\.\\.)\\s*)?(?<!=|:)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=:)"
        },
        { include: "#type-annotation" },
        { match: ",", name: "punctuation.separator.parameter.ts" },
        { include: "#type" }
      ]
    },
    "type-predicate-operator": {
      patterns: [
        {
          captures: {
            1: { name: "keyword.operator.type.asserts.ts" },
            2: { name: "variable.parameter.ts variable.language.this.ts" },
            3: { name: "variable.parameter.ts" },
            4: { name: "keyword.operator.expression.is.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(asserts)\\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s(is)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          captures: {
            1: { name: "keyword.operator.type.asserts.ts" },
            2: { name: "variable.parameter.ts variable.language.this.ts" },
            3: { name: "variable.parameter.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(asserts)\\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))asserts(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.type.asserts.ts"
        },
        {
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))is(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
          name: "keyword.operator.expression.is.ts"
        }
      ]
    },
    "type-primitive": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "support.type.primitive.ts"
    },
    "type-string": {
      patterns: [
        { include: "#qstring-single" },
        { include: "#qstring-double" },
        { include: "#template-type" }
      ]
    },
    "type-tuple": {
      begin: "\\[",
      beginCaptures: { 0: { name: "meta.brace.square.ts" } },
      end: "\\]",
      endCaptures: { 0: { name: "meta.brace.square.ts" } },
      name: "meta.type.tuple.ts",
      patterns: [
        { match: "\\.\\.\\.", name: "keyword.operator.rest.ts" },
        {
          captures: {
            1: { name: "entity.name.label.ts" },
            2: { name: "keyword.operator.optional.ts" },
            3: { name: "punctuation.separator.label.ts" }
          },
          match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\?)?\\s*(:)"
        },
        { include: "#type" },
        { include: "#punctuation-comma" }
      ]
    },
    "typeof-operator": {
      begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))typeof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      beginCaptures: { 0: { name: "keyword.operator.expression.typeof.ts" } },
      end: "(?=[,);}\\]=>:&|{\\?]|(extends\\s+)|$|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))",
      patterns: [{ include: "#type-arguments" }, { include: "#expression" }]
    },
    "undefined-literal": {
      match: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
      name: "constant.language.undefined.ts"
    },
    "var-expr": {
      patterns: [
        {
          begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
          end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^let|[^\\._$[:alnum:]]let|^var|[^\\._$[:alnum:]]var)(?=\\s*$)))",
          name: "meta.var.expr.ts",
          patterns: [
            {
              begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(var|let)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
              beginCaptures: {
                1: { name: "keyword.control.export.ts" },
                2: { name: "storage.modifier.ts" },
                3: { name: "storage.type.ts" }
              },
              end: "(?=\\S)"
            },
            { include: "#destructuring-variable" },
            { include: "#var-single-variable" },
            { include: "#variable-initializer" },
            { include: "#comment" },
            {
              begin: "(,)\\s*(?=$|\\/\\/)",
              beginCaptures: { 1: { name: "punctuation.separator.comma.ts" } },
              end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
              patterns: [
                { include: "#single-line-comment-consuming-line-ending" },
                { include: "#comment" },
                { include: "#destructuring-variable" },
                { include: "#var-single-variable" },
                { include: "#punctuation-comma" }
              ]
            },
            { include: "#punctuation-comma" }
          ]
        },
        {
          begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
          beginCaptures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "storage.type.ts" }
          },
          end: "(?!(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))((?=^|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b))|((?<!^const|[^\\._$[:alnum:]]const)(?=\\s*$)))",
          name: "meta.var.expr.ts",
          patterns: [
            {
              begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(const(?!\\s+enum\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
              beginCaptures: {
                1: { name: "keyword.control.export.ts" },
                2: { name: "storage.modifier.ts" },
                3: { name: "storage.type.ts" }
              },
              end: "(?=\\S)"
            },
            { include: "#destructuring-const" },
            { include: "#var-single-const" },
            { include: "#variable-initializer" },
            { include: "#comment" },
            {
              begin: "(,)\\s*(?=$|\\/\\/)",
              beginCaptures: { 1: { name: "punctuation.separator.comma.ts" } },
              end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
              patterns: [
                { include: "#single-line-comment-consuming-line-ending" },
                { include: "#comment" },
                { include: "#destructuring-const" },
                { include: "#var-single-const" },
                { include: "#punctuation-comma" }
              ]
            },
            { include: "#punctuation-comma" }
          ]
        },
        {
          begin: "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
          beginCaptures: {
            1: { name: "keyword.control.export.ts" },
            2: { name: "storage.modifier.ts" },
            3: { name: "storage.type.ts" }
          },
          name: "meta.var.expr.ts",
          patterns: [
            {
              begin: "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b((?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b))(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
              beginCaptures: {
                1: { name: "keyword.control.export.ts" },
                2: { name: "storage.modifier.ts" },
                3: { name: "storage.type.ts" }
              },
              end: "(?=\\S)"
            },
            { include: "#var-single-const" },
            { include: "#variable-initializer" },
            { include: "#comment" },
            {
              begin: "(,)\\s*((?!\\S)|(?=\\/\\/))",
              beginCaptures: { 1: { name: "punctuation.separator.comma.ts" } },
              end: "(?<!,)(((?==|;|}|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$)))",
              patterns: [
                { include: "#single-line-comment-consuming-line-ending" },
                { include: "#comment" },
                { include: "#var-single-const" },
                { include: "#punctuation-comma" }
              ]
            },
            { include: "#punctuation-comma" }
          ]
        }
      ]
    },
    "var-single-const": {
      patterns: [
        {
          begin: "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          beginCaptures: {
            1: {
              name: "meta.definition.variable.ts variable.other.constant.ts entity.name.function.ts"
            }
          },
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))",
          name: "meta.var-single-variable.expr.ts",
          patterns: [{ include: "#var-single-variable-type-annotation" }]
        },
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)",
          beginCaptures: {
            1: { name: "meta.definition.variable.ts variable.other.constant.ts" }
          },
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))",
          name: "meta.var-single-variable.expr.ts",
          patterns: [{ include: "#var-single-variable-type-annotation" }]
        }
      ]
    },
    "var-single-variable": {
      patterns: [
        {
          begin: "(?x)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)) |\n(:\\s*(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Function(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))) |\n(:\\s*((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*))))))) |\n(:\\s*(=>|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(<[^<>]*>)|[^<>(),=])+=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    ((<\\s*$)|((<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?[\\(]\\s*((([\\{\\[]\\s*)?$)|((\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})\\s*((:\\s*\\{?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))|((\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])\\s*((:\\s*\\[?$)|((\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+\\s*)?=\\s*)))))) |\n    # sure shot arrow functions even if => is on new line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?\n  [(]\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*\n  (\n    ([)]\\s*:) |                                                                                       # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                                                  # [(]param: | [(]...param:\n  )\n) |\n\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<]|\\<\\s*(((const\\s+)?[_$[:alpha:]])|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\]))([^=<>]|=[^<])*\\>)*\\>)*>\\s*)?                                                                                 # typeparameters\n  \\(\\s*(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*(([_$[:alpha:]]|(\\{([^\\{\\}]|(\\{([^\\{\\}]|\\{[^\\{\\}]*\\})*\\}))*\\})|(\\[([^\\[\\]]|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])*\\]))*\\])|(\\.\\.\\.\\s*[_$[:alpha:]]))([^()\\'\\\"\\`]|(\\(([^\\(\\)]|(\\(([^\\(\\)]|\\([^\\(\\)]*\\))*\\)))*\\))|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`))*)?\\)   # parameters\n  (\\s*:\\s*([^<>\\(\\)\\{\\}]|\\<([^<>]|\\<([^<>]|\\<[^<>]+\\>)+\\>)+\\>|\\([^\\(\\)]+\\)|\\{[^\\{\\}]+\\})+)?                                                                        # return type\n  \\s*=>                                                                                               # arrow operator\n)\n  ))\n)))",
          beginCaptures: {
            1: { name: "meta.definition.variable.ts entity.name.function.ts" },
            2: { name: "keyword.operator.definiteassignment.ts" }
          },
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))",
          name: "meta.var-single-variable.expr.ts",
          patterns: [{ include: "#var-single-variable-type-annotation" }]
        },
        {
          begin: "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\\!)?",
          beginCaptures: {
            1: { name: "meta.definition.variable.ts variable.other.constant.ts" },
            2: { name: "keyword.operator.definiteassignment.ts" }
          },
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))",
          name: "meta.var-single-variable.expr.ts",
          patterns: [{ include: "#var-single-variable-type-annotation" }]
        },
        {
          begin: "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?",
          beginCaptures: {
            1: {
              name: "meta.definition.variable.ts variable.other.readwrite.ts"
            },
            2: { name: "keyword.operator.definiteassignment.ts" }
          },
          end: "(?=$|^|[;,=}]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+)|(;|^\\s*$|(?:^\\s*(?:abstract|async|(?:\\bawait\\s+(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)\\b)|break|case|catch|class|const|continue|declare|do|else|enum|export|finally|function|for|goto|if|import|interface|let|module|namespace|switch|return|throw|try|type|(?:\\busing(?=\\s+(?!in\\b|of\\b(?!\\s*(?:of\\b|=)))[_$[:alpha:]])\\b)|var|while)\\b)))",
          name: "meta.var-single-variable.expr.ts",
          patterns: [{ include: "#var-single-variable-type-annotation" }]
        }
      ]
    },
    "var-single-variable-type-annotation": {
      patterns: [
        { include: "#type-annotation" },
        { include: "#string" },
        { include: "#comment" }
      ]
    },
    "variable-initializer": {
      patterns: [
        {
          begin: "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)",
          beginCaptures: { 1: { name: "keyword.operator.assignment.ts" } },
          end: "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
          patterns: [{ include: "#expression" }]
        },
        {
          begin: "(?<!=|!)(=)(?!=)",
          beginCaptures: { 1: { name: "keyword.operator.assignment.ts" } },
          end: "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<![\\|\\&\\+\\-\\*\\/])(?<=\\S)(?<!=)(?=\\s*$)",
          patterns: [{ include: "#expression" }]
        }
      ]
    }
  },
  scopeName: "source.ts"
};
var source_ts_default = grammar28;

// node_modules/@wooorm/starry-night/lang/source.vbnet.js
var grammar29 = {
  extensions: [
    ".bi",
    ".ctl",
    ".dsr",
    ".rbbas",
    ".rbfrm",
    ".rbmnu",
    ".rbres",
    ".rbtbar",
    ".rbuistate",
    ".vb",
    ".vbhtml",
    ".vbs"
  ],
  names: [
    "classic-visual-basic",
    "fb",
    "freebasic",
    "realbasic",
    "vb-.net",
    "vb-6",
    "vb.net",
    "vb6",
    "vbnet",
    "vbscript",
    "visual-basic",
    "visual-basic-.net",
    "visual-basic-6",
    "visual-basic-6.0",
    "visual-basic-classic"
  ],
  patterns: [
    { include: "#comment-single-quote" },
    { include: "#comment-rem" },
    { include: "#keyword-a" },
    { include: "#keyword-b" },
    { include: "#keyword-c" },
    { include: "#keyword-d" },
    { include: "#keyword-e" },
    { include: "#keyword-f" },
    { include: "#keyword-g" },
    { include: "#keyword-h" },
    { include: "#keyword-i" },
    { include: "#keyword-j" },
    { include: "#keyword-k" },
    { include: "#keyword-l" },
    { include: "#keyword-m" },
    { include: "#keyword-n" },
    { include: "#keyword-o" },
    { include: "#keyword-p" },
    { include: "#keyword-r" },
    { include: "#keyword-s" },
    { include: "#keyword-t" },
    { include: "#keyword-u" },
    { include: "#keyword-v" },
    { include: "#keyword-w" },
    { include: "#keyword-x" },
    { include: "#keyword-y" },
    { include: "#integer-literal" },
    { include: "#floating-point-literal" },
    { include: "#character-literal" },
    { include: "#string-literal" },
    { include: "#date-literal" },
    { include: "#symbol" },
    { include: "#identifier" }
  ],
  repository: {
    "character-literal": {
      match: '(?i:["\\x{201C}\\x{201D}]([^"\\x{201C}\\x{201D}]|["\\x{201C}\\x{201D}]{2})["\\x{201C}\\x{201D}]C)',
      name: "string.quoted.double.vbnet"
    },
    "comment-rem": {
      match: "(?i)(?<=[^_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Nd}\\p{Mn}\\p{Mc}\\p{Cf}\\p{Pc}])REM((?=[\\r|\\n])| [^\\r\\n]*)",
      name: "comment.line.singlequote.vbnet"
    },
    "comment-single-quote": {
      match: "['\\x{2018}\\x{2019}][^\\r\\n]*",
      name: "comment.line.singlequote.vbnet"
    },
    "date-literal": {
      match: "(#\\s*(((((\\d+/\\d+/\\d+)|(\\d+-\\d+-\\d+))\\s+(\\d+:\\d+(:\\d+)?\\s*(AM|PM)?)))|((\\d+/\\d+/\\d+)|(\\d+-\\d+-\\d+))|(\\d+:\\d+(:\\d+)?\\s*(AM|PM)?))\\s*#)",
      name: "string.quoted.double.vbnet"
    },
    "floating-point-literal": {
      match: "(?i:[0-9]*(\\.[0-9]+)?((?<=[0-9])E[+-]?[0-9]+)?(?<=[0-9])[FRD@&#]?)",
      name: "string.quoted.double.vbnet"
    },
    identifier: {
      match: "(([\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}]|_[_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Nd}\\p{Mn}\\p{Mc}\\p{Cf}\\p{Pc}])[_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Nd}\\p{Mn}\\p{Mc}\\p{Cf}\\p{Pc}]*[%&@!#$]?|\\[([\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}]|_[_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Nd}\\p{Mn}\\p{Mc}\\p{Cf}\\p{Pc}])[_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Nd}\\p{Mn}\\p{Mc}\\p{Cf}\\p{Pc}]*\\])",
      name: "variable.other.namespace-alias.vbnet"
    },
    "integer-literal": {
      match: "(?i)(&H[0-9A-F]+|&O[0-7]+|&B[0-1]+|[0-9]+)(S|I|L|US|UI|UL|%|!)?",
      name: "string.quoted.double.vbnet"
    },
    "keyword-a": {
      match: "(?i)(?<![.!])(AddHandler|AddressOf|Aggregate|Alias|And|AndAlso|Ansi|As|Ascending|Assembly|Async(?=\\s+(Sub|Function))|Auto|Await)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-b": {
      match: "(?i)(?<![.!])((?<=Compare)\\s+Binary|Boolean|ByRef|Byte|ByVal)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-c": {
      match: "(?i)(?<![.!])(Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|(?<=Option\\s)Compare|Const|Continue|CShort|CSng|CStr|CType|Custom(?=\\s+Event))\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-d": {
      match: "(?i)(?<![.!])(Date|Decimal|Declare|Default|Delegate|Descending|Dim|DirectCast|Distinct|Do|Double)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-e": {
      match: "(?i)(?<![.!])(Each|Else|ElseIf|End|EndIf|Enum|Equals|Erase|Error|Event|Exit|(?<=Option)\\s+Explicit)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-f": {
      match: "(?i)(?<![.!])(False|Finally|For|Friend|From(?=\\s+{)|From|Function)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-g": {
      match: "(?i)(?<![.!])(Get|GetType|Global|GoSub|GoTo|Group\\s+By|Group)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-h": {
      match: "(?i)(?<![.!])(Handles)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-i": {
      match: "(?i)(?<![.!])(If|Implements|Imports|In|(?<=Option)\\s+Infer|Inherits|Integer|Interface|Into|Is|IsNot|Iterator(?=\\s+(Function|Property)))\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-j": { match: "(?i)(?<![.!])(Join)\\b", name: "keyword.other.vbnet" },
    "keyword-k": { match: "(?i)(?<![.!])(Key)\\b", name: "keyword.other.vbnet" },
    "keyword-l": {
      match: "(?i)(?<![.!])(Let|Lib|Like|Long|Loop)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-m": {
      match: "(?i)(?<![.!])(Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-n": {
      match: "(?i)(?<![.!])(NameOf|Namespace|Narrowing|New|Next|Not|Nothing|NotInheritable|NotOverridable)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-o": {
      match: "(?i)(?<![.!])(Object|Of|(?<=Explicit|Infer|Strict)\\s+Off|On|Operator|Option|Optional|Or|Order\\s+By|OrElse|Out|Overloads|Overridable|Overrides)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-p": {
      match: "(?i)(?<![.!])(ParamArray|Partial(?=\\s+(Class|Structure|Module|Interface))|Partial(?=\\s+(Class|Structure|Module|Interface|Sub|Public|Private|Protected|Friend|MustInherit|NotInheritable|NotOverrideable|Overridable|Shared))|Preserve|Private|Property|Protected|Public)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-r": {
      match: "(?i)(?<![.!])(RaiseEvent|ReadOnly|ReDim|(?<=#|#End\\s)Region|RemoveHandler|Resume|Return)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-s": {
      match: "(?i)(?<![.!])(Select|Set|Shadows|Shared|Short|Single|Skip|Static|Step|Stop|(?<=Option)\\s+Strict|String|Structure|Sub|SyncLock)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-t": {
      match: "(?i)(?<![.!])(Take|(?<=Compare)\\s+Text|Then|Throw|To|True|Try|TryCast|TypeOf)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-u": {
      match: "(?i)(?<![.!])(Unicode|Until|Using)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-v": {
      match: "(?i)(?<![.!])(Variant)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-w": {
      match: "(?i)(?<![.!])(Wend|When|Where|While|Widening|With|WithEvents|WriteOnly)\\b",
      name: "keyword.other.vbnet"
    },
    "keyword-x": { match: "(?i)(?<![.!])(Xor)\\b", name: "keyword.other.vbnet" },
    "keyword-y": {
      match: "(?i)(?<![.!])(Yield)\\b",
      name: "keyword.other.vbnet"
    },
    "string-literal": {
      match: '(["\\x{201C}\\x{201D}]([^"\\x{201C}\\x{201D}]|["\\x{201C}\\x{201D}]{2})*["\\x{201C}\\x{201D}])',
      name: "string.quoted.double.vbnet"
    },
    symbol: {
      match: "(([&*+\\-/\\\\^<=>])|([(){}!#,.:]|((?<= )_(?=\\s$)))|\\?)",
      name: "variable.other.namespace-alias.vbnet"
    }
  },
  scopeName: "source.vbnet"
};
var source_vbnet_default = grammar29;

// node_modules/@wooorm/starry-night/lang/source.yaml.js
var grammar30 = {
  extensions: [
    ".anim",
    ".asset",
    ".ksy",
    ".lkml",
    ".lookml",
    ".mat",
    ".meta",
    ".mir",
    ".prefab",
    ".raml",
    ".reek",
    ".rviz",
    ".sublime-syntax",
    ".syntax",
    ".unity",
    ".yaml-tmlanguage",
    ".yaml.sed",
    ".yml.mysql"
  ],
  names: [
    "jar-manifest",
    "kaitai-struct",
    "ksy",
    "lookml",
    "oasv2-yaml",
    "oasv3-yaml",
    "raml",
    "unity3d-asset",
    "yaml",
    "yml"
  ],
  patterns: [
    { include: "#erb" },
    { include: "#comment" },
    { match: "\\t+", name: "invalid.illegal.whitespace.yaml" },
    { match: "^---", name: "punctuation.definition.directives.end.yaml" },
    { match: "^\\.\\.\\.", name: "punctuation.definition.document.end.yaml" },
    {
      begin: "^(\\s*)(?:(-)|(?:(?:(-)(\\s*))?([^!@#%&*>,][^:#]*\\S)\\s*(:)))(?:\\s+((!)[^!\\s]+))?\\s+(?=\\||>)",
      beginCaptures: {
        2: { name: "punctuation.definition.entry.yaml" },
        3: { name: "punctuation.definition.entry.yaml" },
        5: { name: "entity.name.tag.yaml" },
        6: { name: "punctuation.separator.key-value.yaml" },
        7: { name: "keyword.other.tag.local.yaml" },
        8: { name: "punctuation.definition.tag.local.yaml" }
      },
      contentName: "string.unquoted.block.yaml",
      end: "^((?!$)(?!\\1\\s+)|(?=\\s\\4(-|[^\\s!@#%&*>,].*:\\s+)))",
      patterns: [
        { begin: "\\G", end: "$", patterns: [{ include: "#comment" }] },
        { include: "#constants" },
        { include: "#erb" }
      ]
    },
    {
      begin: "^(\\s*)([^!@#%&*>,][^:#]*\\S)\\s*(:)(?:\\s+((!)[^!\\s]+))?\\s+(?=\\||>)",
      beginCaptures: {
        2: { name: "entity.name.tag.yaml" },
        3: { name: "punctuation.separator.key-value.yaml" },
        4: { name: "keyword.other.tag.local.yaml" },
        5: { name: "punctuation.definition.tag.local.yaml" }
      },
      contentName: "string.unquoted.block.yaml",
      end: "^(?!$)(?!\\1\\s+)",
      patterns: [
        { begin: "\\G", end: "$", patterns: [{ include: "#comment" }] },
        { include: "#constants" },
        { include: "#erb" }
      ]
    },
    {
      captures: {
        1: { name: "entity.name.tag.merge.yaml" },
        2: { name: "punctuation.separator.key-value.yaml" },
        3: { patterns: [{ include: "#variables" }] }
      },
      match: "(<<)\\s*(:)\\s+(.+)$"
    },
    {
      begin: `(?>^(\\s*)(-)?\\s*)([^!{@#%&*>,'"][^#]*?)(:)\\s+((!!)omap)?`,
      beginCaptures: {
        2: { name: "punctuation.definition.entry.yaml" },
        3: { name: "entity.name.tag.yaml" },
        4: { name: "punctuation.separator.key-value.yaml" },
        5: { name: "keyword.other.omap.yaml" },
        6: { name: "punctuation.definition.tag.omap.yaml" }
      },
      end: "^((?!\\1\\s+)|(?=\\1\\s*(-|[^!@#%&*>,].*:\\s+|#)))",
      patterns: [{ include: "#scalar-content" }]
    },
    {
      begin: `^(\\s*)(-)?\\s*(?:((')([^']*?)('))|((")([^"]*?)(")))(:)\\s+((!!)omap)?`,
      beginCaptures: {
        10: { name: "punctuation.definition.string.end.yaml" },
        11: { name: "punctuation.separator.key-value.yaml" },
        12: { name: "keyword.other.omap.yaml" },
        13: { name: "punctuation.definition.tag.omap.yaml" },
        2: { name: "punctuation.definition.entry.yaml" },
        3: { name: "string.quoted.single.yaml" },
        4: { name: "punctuation.definition.string.begin.yaml" },
        5: { name: "entity.name.tag.yaml" },
        6: { name: "punctuation.definition.string.end.yaml" },
        7: { name: "string.quoted.double.yaml" },
        8: { name: "punctuation.definition.string.begin.yaml" },
        9: { name: "entity.name.tag.yaml" }
      },
      end: "^((?!\\1\\s+)|(?=\\1\\s*(-|[^!@#%&*>,].*:\\s+|#)))",
      patterns: [{ include: "#scalar-content" }]
    },
    {
      begin: "^(\\s*)(-)\\s+(?:((!!)omap)|((!)[^!\\s]+)|(?![!@#%&*>,]))",
      beginCaptures: {
        2: { name: "punctuation.definition.entry.yaml" },
        3: { name: "keyword.other.omap.yaml" },
        4: { name: "punctuation.definition.tag.omap.yaml" },
        5: { name: "keyword.other.tag.local.yaml" },
        6: { name: "punctuation.definition.tag.local.yaml" }
      },
      end: "^((?!\\1\\s+)|(?=\\1\\s*(-|[^!@#%&*>,].*:\\s+|#)))",
      patterns: [{ include: "#scalar-content" }]
    },
    { include: "#variables" },
    { include: "#strings" }
  ],
  repository: {
    comment: {
      begin: "(?<=^|\\s)#(?!{)",
      beginCaptures: { 0: { name: "punctuation.definition.comment.yaml" } },
      end: "$",
      name: "comment.line.number-sign.yaml"
    },
    constants: {
      match: "(?<=\\s)(true|false|null|True|False|Null|TRUE|FALSE|NULL|~)(?=\\s*$)",
      name: "constant.language.yaml"
    },
    date: {
      captures: { 1: { name: "constant.other.date.yaml" } },
      match: "([0-9]{4}-[0-9]{2}-[0-9]{2})\\s*($|(?=#)(?!#{))"
    },
    erb: {
      begin: "<%+(?!>)=?",
      beginCaptures: { 0: { name: "punctuation.definition.embedded.begin.ruby" } },
      contentName: "source.ruby.rails",
      end: "(%)>",
      endCaptures: {
        0: { name: "punctuation.definition.embedded.end.ruby" },
        1: { name: "source.ruby.rails" }
      },
      name: "meta.embedded.line.ruby",
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.comment.ruby" } },
          match: "(#).*?(?=%>)",
          name: "comment.line.number-sign.ruby"
        }
      ]
    },
    escaped_char: {
      patterns: [
        { match: "\\\\u[A-Fa-f0-9]{4}", name: "constant.character.escape.yaml" },
        { match: "\\\\U[A-Fa-f0-9]{8}", name: "constant.character.escape.yaml" },
        { match: "\\\\x[0-9A-Fa-f]{2}", name: "constant.character.escape.yaml" },
        {
          match: '\\\\[0abtnvfre "/\\\\N_LP]',
          name: "constant.character.escape.yaml"
        },
        {
          match: "\\\\(u.{4}|U.{8}|x.{2}|.)",
          name: "invalid.illegal.escape.yaml"
        }
      ]
    },
    numeric: {
      patterns: [
        {
          match: "[-+]?[0-9]+(?=\\s*($|#(?!#{)))",
          name: "constant.numeric.integer.yaml"
        },
        {
          match: "0o[0-7]+(?=\\s*($|#(?!#{)))",
          name: "constant.numeric.octal.yaml"
        },
        {
          match: "0x[0-9a-fA-F]+(?=\\s*($|#(?!#{)))",
          name: "constant.numeric.hexadecimal.yaml"
        },
        {
          match: "[-+]?(.[0-9]+|[0-9]+(.[0-9]*)?)([eE][-+]?[0-9]+)?(?=\\s*($|#(?!#{)))",
          name: "constant.numeric.float.yaml"
        },
        {
          match: "[-+]?(.inf|.Inf|.INF)(?=\\s*($|#(?!#{)))",
          name: "constant.numeric.float.yaml"
        },
        {
          match: "(.nan|.NaN|.NAN)(?=\\s*($|#(?!#{)))",
          name: "constant.numeric.float.yaml"
        }
      ]
    },
    "scalar-content": {
      patterns: [
        { include: "#comment" },
        {
          match: "!(?=\\s)",
          name: "punctuation.definition.tag.non-specific.yaml"
        },
        { include: "#constants" },
        { include: "#date" },
        { include: "#numeric" },
        { include: "#strings" }
      ]
    },
    strings: {
      patterns: [
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.yaml" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.yaml" } },
          name: "string.quoted.double.yaml",
          patterns: [{ include: "#escaped_char" }, { include: "#erb" }]
        },
        {
          applyEndPatternLast: true,
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.yaml" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.yaml" } },
          name: "string.quoted.single.yaml",
          patterns: [
            { match: "''", name: "constant.character.escape.yaml" },
            { include: "#erb" }
          ]
        },
        {
          begin: "`",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.yaml" }
          },
          end: "`",
          endCaptures: { 0: { name: "punctuation.definition.string.end.yaml" } },
          name: "string.interpolated.yaml",
          patterns: [{ include: "#escaped_char" }, { include: "#erb" }]
        },
        {
          match: `[^\\s"'\\n](?!\\s*#(?!{))([^#\\n]|((?<!\\s)#))*`,
          name: "string.unquoted.yaml"
        }
      ]
    },
    variables: {
      captures: { 1: { name: "punctuation.definition.variable.yaml" } },
      match: "(&|\\*)\\w+$",
      name: "variable.other.yaml"
    }
  },
  scopeName: "source.yaml"
};
var source_yaml_default = grammar30;

// node_modules/@wooorm/starry-night/lang/text.html.basic.js
var grammar31 = {
  extensions: [".hta", ".htm", ".html.hl", ".kit", ".mtml", ".xht", ".xhtml"],
  names: ["html", "kit", "mtml", "xhtml"],
  patterns: [
    {
      begin: "(<\\?)(xml)",
      captures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.xml.html" }
      },
      end: "(\\?>)",
      name: "meta.tag.preprocessor.xml.html",
      patterns: [
        { include: "#tag-generic-attribute" },
        { include: "#string-double-quoted" },
        { include: "#string-single-quoted" }
      ]
    },
    {
      begin: "<!--",
      captures: { 0: { name: "punctuation.definition.comment.html" } },
      end: "--\\s*>",
      name: "comment.block.html",
      patterns: [
        {
          match: "--(?!-*\\s*>)",
          name: "invalid.illegal.bad-comments-or-CDATA.html"
        },
        { include: "#embedded-code" }
      ]
    },
    {
      begin: "<!",
      captures: { 0: { name: "punctuation.definition.tag.html" } },
      end: ">",
      name: "meta.tag.sgml.html",
      patterns: [
        {
          begin: "(?i:DOCTYPE)",
          captures: { 1: { name: "entity.name.tag.doctype.html" } },
          end: "(?=>)",
          name: "meta.tag.sgml.doctype.html",
          patterns: [
            {
              match: '"[^">]*"',
              name: "string.quoted.double.doctype.identifiers-and-DTDs.html"
            }
          ]
        },
        {
          begin: "\\[CDATA\\[",
          end: "]](?=>)",
          name: "constant.other.inline-data.html"
        },
        {
          match: "(\\s*)(?!--|>)\\S(\\s*)",
          name: "invalid.illegal.bad-comments-or-CDATA.html"
        }
      ]
    },
    { include: "#embedded-code" },
    {
      begin: "(?i)(?=<style(\\s+|>))",
      end: "(?i)(</)(style)(>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.style.html" },
        3: { name: "punctuation.definition.tag.html" }
      },
      name: "meta.tag.style.html",
      patterns: [
        {
          begin: "(?i)\\G(<)(style)",
          beginCaptures: {
            1: { name: "punctuation.definition.tag.html" },
            2: { name: "entity.name.tag.style.html" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.definition.tag.html" } },
          patterns: [{ include: "#tag-stuff" }]
        },
        {
          begin: "(?!\\G)",
          end: "(?i)(?=</style>)",
          name: "source.css.embedded.html",
          patterns: [{ include: "#embedded-code" }, { include: "source.css" }]
        }
      ]
    },
    {
      begin: `(?i)(?=<script\\s+.*?\\btype\\s*=\\s*['"]?text/(?:x-handlebars|(?:x-(?:handlebars-)?|ng-)?template|html|ractive)['"]?(\\s+|>))`,
      end: "(</)((?i)script)(>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.script.html" },
        3: { name: "punctuation.definition.tag.html" }
      },
      name: "meta.tag.script.html",
      patterns: [
        {
          begin: "(?i)\\G(<)(script)",
          beginCaptures: {
            1: { name: "punctuation.definition.tag.html" },
            2: { name: "entity.name.tag.script.html" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.definition.tag.html" } },
          patterns: [{ include: "#tag-stuff" }]
        },
        {
          begin: "(?!\\G)",
          end: "(?i)(?=<\/script>)",
          name: "text.embedded.html",
          patterns: [{ include: "text.html.basic" }]
        }
      ]
    },
    {
      begin: `(?i)(?=<script\\s+.*?\\btype\\s*=\\s*['"]?text/coffeescript['"]?(\\s+|>))`,
      end: "(</)((?i)script)(>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.script.html" },
        3: { name: "punctuation.definition.tag.html" }
      },
      name: "meta.tag.script.html",
      patterns: [
        {
          begin: "(?i)\\G(<)(script)",
          beginCaptures: {
            1: { name: "punctuation.definition.tag.html" },
            2: { name: "entity.name.tag.script.html" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.definition.tag.html" } },
          patterns: [{ include: "#tag-stuff" }]
        },
        {
          begin: "(?!\\G)",
          end: "(?i)(?=<\/script>)",
          name: "source.coffee.embedded.html",
          patterns: [
            {
              begin: "###",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.coffee" }
              },
              end: "###|(?=(?i)<\/script>)",
              endCaptures: { 0: { name: "punctuation.definition.comment.coffee" } },
              name: "comment.block.coffee"
            },
            {
              begin: "#",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.coffee" }
              },
              end: "(?=(?i)<\/script>|$)",
              name: "comment.line.number-sign.coffee"
            },
            { include: "source.coffee" }
          ]
        }
      ]
    },
    {
      begin: `(?i)(?=<script\\s+.*?\\btype\\s*=\\s*['"]?application/graphql['"]?(\\s+|>))`,
      end: "(</)((?i)script)(>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.script.html" },
        3: { name: "punctuation.definition.tag.html" }
      },
      name: "meta.tag.script.html",
      patterns: [
        {
          begin: "(?i)\\G(<)(script)",
          beginCaptures: {
            1: { name: "punctuation.definition.tag.html" },
            2: { name: "entity.name.tag.script.html" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.definition.tag.html" } },
          patterns: [{ include: "#tag-stuff" }]
        },
        {
          begin: "(?!\\G)",
          end: "(?i)(?=<\/script>)",
          name: "source.graphql.embedded.html",
          patterns: [
            {
              begin: "#",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.graphql" }
              },
              end: "(?=(?i)<\/script>|$)",
              name: "comment.line.number-sign.graphql"
            },
            { include: "source.graphql" }
          ]
        }
      ]
    },
    {
      begin: "(?i)(?=<script(\\s+|>))",
      end: "(</)((?i)script)(>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.script.html" },
        3: { name: "punctuation.definition.tag.html" }
      },
      name: "meta.tag.script.html",
      patterns: [
        {
          begin: "(?i)\\G(<)(script)",
          beginCaptures: {
            1: { name: "punctuation.definition.tag.html" },
            2: { name: "entity.name.tag.script.html" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.definition.tag.html" } },
          patterns: [{ include: "#tag-stuff" }]
        },
        {
          begin: "(?!\\G)",
          end: "(?i)(?=<\/script>)",
          name: "source.js.embedded.html",
          patterns: [
            {
              begin: "//",
              beginCaptures: { 0: { name: "punctuation.definition.comment.js" } },
              end: "(?=(?i)<\/script>|$)",
              name: "comment.line.double-slash.js"
            },
            {
              begin: "/\\*",
              beginCaptures: {
                0: { name: "punctuation.definition.comment.begin.js" }
              },
              end: "\\*/|(?=(?i)<\/script>)",
              endCaptures: {
                0: { name: "punctuation.definition.comment.begin.js" }
              },
              name: "comment.block.js"
            },
            { include: "source.js" }
          ]
        }
      ]
    },
    {
      begin: "(?i)(</?)(body|head|html)(?=\\s|/?>)",
      captures: {
        1: { name: "punctuation.definition.tag.html" },
        2: { name: "entity.name.tag.structure.$2.html" }
      },
      end: "(>)",
      name: "meta.tag.structure.$2.html",
      patterns: [{ include: "#tag-stuff" }]
    },
    {
      begin: "(?i)(</?)(address|blockquote|dd|div|section|article|aside|header|footer|nav|menu|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|pre)(?=\\s|/?>)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.begin.html" },
        2: { name: "entity.name.tag.block.$2.html" }
      },
      end: "(>)",
      endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } },
      name: "meta.tag.block.$2.html",
      patterns: [{ include: "#tag-stuff" }]
    },
    {
      begin: "(?i)(</?)(a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)(?=\\s|/?>)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.begin.html" },
        2: { name: "entity.name.tag.inline.$2.html" }
      },
      end: "((?: ?/)?>)",
      endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } },
      name: "meta.tag.inline.$2.html",
      patterns: [{ include: "#tag-stuff" }]
    },
    {
      begin: "(</?)([a-zA-Z0-9:-]+)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.begin.html" },
        2: { name: "entity.name.tag.other.html" }
      },
      end: "(>)",
      endCaptures: { 1: { name: "punctuation.definition.tag.end.html" } },
      name: "meta.tag.other.html",
      patterns: [{ include: "#tag-stuff" }]
    },
    { include: "#character-reference" },
    { match: "<>", name: "invalid.illegal.incomplete.html" }
  ],
  repository: {
    "character-reference": {
      patterns: [
        {
          begin: "(&)(#\\d+|#[xX][0-9a-fA-F]+)",
          beginCaptures: {
            1: { name: "punctuation.definition.entity.begin.html" },
            2: { name: "entity.name.entity.other.html" }
          },
          end: ";",
          endCaptures: { 0: { name: "punctuation.definition.entity.end.html" } },
          name: "constant.character.entity.html"
        },
        {
          captures: {
            1: { name: "punctuation.definition.entity.begin.html" },
            2: { name: "entity.name.entity.other.html" },
            3: { name: "punctuation.definition.entity.end.html" }
          },
          match: "(&)([a-zA-Z0-9]+)(;)",
          name: "constant.character.entity.html"
        },
        {
          match: "&(?!\\s|<|&|[a-zA-Z0-9])",
          name: "invalid.illegal.bad-ampersand.html"
        }
      ]
    },
    "embedded-code": { patterns: [{ include: "#smarty" }, { include: "#python" }] },
    python: {
      begin: "(?:^\\s*)<\\?python(?!.*\\?>)",
      end: "\\?>(?:\\s*$\\n)?",
      name: "source.python.embedded.html",
      patterns: [{ include: "source.python" }]
    },
    smarty: {
      patterns: [
        {
          begin: "(\\{(literal)\\})",
          captures: {
            1: { name: "source.smarty.embedded.html" },
            2: { name: "support.function.built-in.smarty" }
          },
          end: "(\\{/(literal)\\})"
        }
      ]
    },
    "string-double-quoted": {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.html" } },
      name: "string.quoted.double.html",
      patterns: [{ include: "#embedded-code" }, { include: "#character-reference" }]
    },
    "string-single-quoted": {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.html" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.html" } },
      name: "string.quoted.single.html",
      patterns: [{ include: "#embedded-code" }, { include: "#character-reference" }]
    },
    "tag-class-attribute": {
      begin: "\\b(class)\\s*(=)\\s*",
      captures: {
        1: { name: "entity.other.attribute-name.class.html" },
        2: { name: "punctuation.separator.key-value.html" }
      },
      end: "(?!\\G)|(?=\\s|/?>)",
      name: "meta.attribute-with-value.class.html",
      patterns: [
        { include: "#string-double-quoted" },
        { include: "#string-single-quoted" },
        { include: "#unquoted-attribute" }
      ]
    },
    "tag-generic-attribute": {
      patterns: [
        {
          begin: `([^\\s/=>"'<]+)\\s*(=)\\s*`,
          beginCaptures: {
            1: { name: "entity.other.attribute-name.html" },
            2: { name: "punctuation.separator.key-value.html" }
          },
          end: "(?!\\G)|(?=\\s|/?>)",
          name: "meta.attribute-with-value.html",
          patterns: [
            { include: "#string-double-quoted" },
            { include: "#string-single-quoted" },
            { include: "#unquoted-attribute" }
          ]
        },
        {
          captures: { 0: { name: "entity.other.attribute-name.html" } },
          match: `[^\\s/=>"'<]+`,
          name: "meta.attribute-without-value.html"
        }
      ]
    },
    "tag-id-attribute": {
      begin: "\\b(id)\\s*(=)\\s*",
      captures: {
        1: { name: "entity.other.attribute-name.id.html" },
        2: { name: "punctuation.separator.key-value.html" }
      },
      end: "(?!\\G)|(?=\\s|/?>)",
      name: "meta.attribute-with-value.id.html",
      patterns: [
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.html" }
          },
          contentName: "meta.toc-list.id.html",
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.html" } },
          name: "string.quoted.double.html",
          patterns: [
            { include: "#embedded-code" },
            { include: "#character-reference" }
          ]
        },
        {
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.html" }
          },
          contentName: "meta.toc-list.id.html",
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.html" } },
          name: "string.quoted.single.html",
          patterns: [
            { include: "#embedded-code" },
            { include: "#character-reference" }
          ]
        },
        { include: "#unquoted-attribute" }
      ]
    },
    "tag-stuff": {
      patterns: [
        { include: "#tag-id-attribute" },
        { include: "#tag-class-attribute" },
        { include: "#tag-style-attribute" },
        { include: "#tag-generic-attribute" },
        { include: "#string-double-quoted" },
        { include: "#string-single-quoted" },
        { include: "#embedded-code" }
      ]
    },
    "tag-style-attribute": {
      begin: "\\b(style)\\s*(=)\\s*",
      beginCaptures: {
        1: { name: "entity.other.attribute-name.style.html" },
        2: { name: "punctuation.separator.key-value.html" }
      },
      end: "(?!\\G)|(?=\\s|/?>)",
      name: "meta.attribute-with-value.style.html",
      patterns: [
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.html" }
          },
          contentName: "source.css.style.html",
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.html" } },
          name: "string.quoted.double.html",
          patterns: [
            {
              captures: {
                0: {
                  patterns: [
                    { include: "#embedded-code" },
                    { include: "#entities" },
                    { include: "source.css#rule-list-innards" }
                  ]
                }
              },
              match: '[^"]+',
              name: "meta.property-list.css"
            }
          ]
        },
        {
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.html" }
          },
          contentName: "source.css.style.html",
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.html" } },
          name: "string.quoted.single.html",
          patterns: [
            {
              captures: {
                0: {
                  patterns: [
                    { include: "#embedded-code" },
                    { include: "#entities" },
                    { include: "source.css#rule-list-innards" }
                  ]
                }
              },
              match: "[^']+",
              name: "meta.property-list.css"
            }
          ]
        },
        {
          captures: {
            0: {
              name: "source.css.style.html",
              patterns: [
                {
                  captures: {
                    0: { patterns: [{ include: "source.css#rule-list-innards" }] }
                  },
                  match: ".+",
                  name: "meta.property-list.css"
                }
              ]
            }
          },
          match: "([^\\s&>\"'<=`]|&(?=>))+",
          name: "string.unquoted.html"
        }
      ]
    },
    "unquoted-attribute": {
      patterns: [
        { include: "#character-reference" },
        { match: "([^\\s&>\"'<=`]|&(?=>))+", name: "string.unquoted.html" }
      ]
    }
  },
  scopeName: "text.html.basic"
};
var text_html_basic_default = grammar31;

// node_modules/@wooorm/starry-night/lang/text.html.php.js
var grammar32 = {
  dependencies: ["text.html.basic"],
  extensions: [
    ".aw",
    ".ctp",
    ".php3",
    ".php4",
    ".php5",
    ".phps",
    ".phpt",
    ".phtml"
  ],
  injections: {
    "^text.html - (meta.embedded | meta.tag), L:^text.html meta.tag, L:text.html.php source.js": {
      patterns: [
        {
          begin: "(^\\s*)(?=<\\?(?![^?]*\\?>))",
          beginCaptures: {
            0: { name: "punctuation.whitespace.embedded.leading.php" }
          },
          end: "(?!\\G)(\\s*$\\n)?",
          endCaptures: {
            0: { name: "punctuation.whitespace.embedded.trailing.php" }
          },
          patterns: [
            {
              begin: "<\\?(?i:php|=)?",
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" }
              },
              contentName: "source.php",
              end: "(\\?)>",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "source.php" }
              },
              name: "meta.embedded.block.php",
              patterns: [{ include: "#language" }]
            }
          ]
        },
        {
          begin: "<\\?(?i:php|=)?(?![^?]*\\?>)",
          beginCaptures: {
            0: { name: "punctuation.section.embedded.begin.php" }
          },
          contentName: "source.php",
          end: "(\\?)>",
          endCaptures: {
            0: { name: "punctuation.section.embedded.end.php" },
            1: { name: "source.php" }
          },
          name: "meta.embedded.block.php",
          patterns: [{ include: "#language" }]
        },
        {
          begin: "<\\?(?i:php|=)?",
          beginCaptures: {
            0: { name: "punctuation.section.embedded.begin.php" }
          },
          end: ">",
          endCaptures: { 0: { name: "punctuation.section.embedded.end.php" } },
          name: "meta.embedded.line.php",
          patterns: [
            {
              captures: {
                1: { name: "source.php" },
                2: { name: "punctuation.section.embedded.end.php" },
                3: { name: "source.php" }
              },
              match: "\\G(\\s*)((\\?))(?=>)",
              name: "meta.special.empty-tag.php"
            },
            {
              begin: "\\G",
              contentName: "source.php",
              end: "(\\?)(?=>)",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "source.php" }
              },
              patterns: [{ include: "#language" }]
            }
          ]
        }
      ]
    }
  },
  names: ["html+php", "inc", "php"],
  patterns: [{ include: "text.html.basic" }],
  repository: {
    "class-builtin": {
      patterns: [
        {
          captures: { 1: { name: "punctuation.separator.inheritance.php" } },
          match: "(?ix)\n						(\\\\)?\\b\n						(st(dClass|reamWrapper)|R(RD(Graph|Creator|Updater)|untimeException|e(sourceBundle|cursive(RegexIterator|Ca(chingIterator|llbackFilterIterator)|TreeIterator|Iterator(Iterator)?|DirectoryIterator|FilterIterator|ArrayIterator)|flect(ion(Generator|Method|Class|Type|ZendExtension|Object|P(arameter|roperty)|Extension|Function(Abstract)?)?|or)|gexIterator)|angeException)|G(ender\\\\Gender|lobIterator|magick(Draw|Pixel)?)|X(sltProcessor|ML(Reader|Diff\\\\(Memory|Base|DOM|File)|Writer)|SLTProcessor)|M(ysqlndUh(Connection|PreparedStatement)|ongo(Re(sultException|gex)|Grid(fsFile|FS(Cursor|File)?)|BinData|C(o(de|llection|mmandCursor)|ursor(Interface|Exception)?|lient)|Timestamp|I(n(sertBatch|t(32|64))|d)|D(B(Ref|\\\\(BSON\\\\(Regex|M(inKey|axKey)|Binary|Serializable|Timestamp|ObjectID|Decimal128|U(nserializable|TCDateTime)|Javascript)|Driver\\\\(Read(Concern|Preference)|Manager|BulkWrite|Server|C(ommand|ursor(Id)?)|Exception\\\\WriteException|Query|Write(Result|Concern(Error)?|Error))))?|eleteBatch|ate)|UpdateBatch|Pool|Write(Batch|ConcernException)|Log)?|u(tex|ltipleIterator)|e(ssageFormatter|mcache(d)?))|Bad(MethodCallException|FunctionCallException)|tidy(Node)?|S(ync(ReaderWriter|Mutex|S(haredMemory|emaphore)|Event)|impleXML(Iterator|Element)|oap(Server|Header|Client|Param|Var|Fault)|NMP|CA(_(SoapProxy|LocalProxy))?|p(hinxClient|oofchecker|l(M(inHeap|axHeap)|S(tack|ubject)|Heap|T(ype|empFileObject)|Ob(server|jectStorage)|DoublyLinkedList|PriorityQueue|Enum|Queue|Fi(le(Info|Object)|xedArray)))|e(ssionHandler(Interface)?|ekableIterator|rializable)|DO_(Model_(ReflectionDataObject|Type|Property)|Sequence|D(ata(Object|Factory)|AS_(Relational|XML(_Document)?|Setting|ChangeSummary|Data(Object|Factory)))|Exception|List)|wish(Result(s)?|Search)?|VM(Model)?|QLite(Result|3(Result|Stmt)?|Database|Unbuffered)|AM(Message|Connection))|H(RTime\\\\(StopWatch|PerformanceCounter)|aru(Image|Outline|D(oc|estination)|Page|Encoder|Font|Annotation))\n						|Ya(f_(R(oute(_(Re(write|gex)|Map|S(tatic|imple|upervar)|Interface)|r)|e(sponse_Abstract|quest_(Simple|Http|Abstract)|gistry))|Session|Con(troller_Abstract|fig_(Simple|Ini|Abstract))|Dispatcher|Plugin_Abstract|Exception|View_(Simple|Interface)|Loader|A(ction_Abstract|pplication))|r_(Server(_Exception)?|C(oncurrent_Client|lient(_Exception)?)))|N(o(RewindIterator|rmalizer)|umberFormatter)|C(o(nd|untable|ll(ectable|ator))|URLFile|a(chingIterator|llbackFilterIterator))|T(hread(ed)?|okyoTyrant(Table|Iterator|Query)?|ra(nsliterator|versable))|I(n(tl(RuleBasedBreakIterator|BreakIterator|C(har|odePointBreakIterator|alendar)|TimeZone|Iterator|DateFormatter|PartsIterator)|validArgumentException|finiteIterator)|terator(Iterator|Aggregate)?|magick(Draw|Pixel(Iterator)?|Kernel)?)|php_user_filter|Z(MQ(Socket|Context|Device|Poll)?|ipArchive|ookeeper)|O(CI\\-(Collection|Lob)|ut(erIterator|Of(RangeException|BoundsException))|verflowException)|D(s\\\\(Map|S(tack|e(t|quence))|Hashable|Collection|Deque|P(air|riorityQueue)|Vector|Queue)|irectory(Iterator)?|omainException|OM(XPath|N(ode(list)?|amedNodeMap)|C(haracterData|omment|dataSection)|Text|Implementation|Document(Fragment)?|ProcessingInstruction|E(ntityReference|lement)|Attr)|ate(Time(I(nterface|mmutable)|Zone)?|Interval|Period))|U(n(derflowException|expectedValueException)|Converter|I\\\\(Menu(Item)?|Size|Control(s\\\\(Radio|Gr(id|oup)|MultilineEntry|B(ox|utton)|S(pin|eparator|lider)|C(heck|o(lorButton|mbo))|Tab|P(icker|rogress)|E(ntry|ditableCombo)|Form|Label))?|Draw\\\\(Matrix|Brush(\\\\(RadialGradient|Gradient|LinearGradient))?|Stroke|Color|Text\\\\(Font(\\\\Descriptor)?|Layout)|P(en|ath))|Point|Executor|Window|Area))|JsonSerializable|finfo|P(har(Data|FileInfo)?|ool|DO(Statement)?|arentIterator)|E(v(S(tat|ignal)|Ch(ild|eck)|Timer|I(o|dle)|ent(B(uffer(Event)?|ase)|SslContext|Http(Request|Connection)?|Config|DnsBase|Util|Listener)?|P(eriodic|repare)|Embed|Fork|Watcher|Loop)?|rrorException|xception|mptyIterator)|V(8Js(Exception)?|arnish(Stat|Log|Admin))|KTaglib_(MPEG_(File|AudioProperties)|Tag|ID3v2_(Tag|Frame|AttachedPictureFrame))|QuickHash(StringIntHash|Int(S(tringHash|et)|Hash))|F(il(terIterator|esystemIterator)|ANNConnection)|mysqli(_(stmt|driver|warning|result))?|W(orker|eak(Map|ref))|L(imitIterator|o(cale|gicException)|ua(Closure)?|engthException|apack)|A(ppendIterator|PC(Iterator|UIterator)|rray(Iterator|Object|Access)))\n						\\b\n					",
          name: "support.class.builtin.php"
        }
      ]
    },
    "class-name": {
      patterns: [
        {
          begin: "(?i)(?=\\\\?[a-z_0-9]+\\\\)",
          end: "(?i)([a-z_][a-z_0-9]*)?(?=[^a-z0-9_\\\\]|\\z)",
          endCaptures: { 1: { name: "support.class.php" } },
          patterns: [{ include: "#namespace" }]
        },
        { include: "#class-builtin" },
        {
          begin: "(?=[\\\\a-zA-Z_])",
          end: "(?i)([a-z_][a-z_0-9]*)?(?=[^a-z0-9_\\\\]|\\z)",
          endCaptures: { 1: { name: "support.class.php" } },
          patterns: [{ include: "#namespace" }]
        }
      ]
    },
    comments: {
      patterns: [
        {
          begin: "/\\*\\*(?:#@\\+)?\\s*$",
          captures: { 0: { name: "punctuation.definition.comment.php" } },
          end: "\\*/",
          name: "comment.block.documentation.phpdoc.php",
          patterns: [{ include: "#php_doc" }]
        },
        {
          begin: "/\\*",
          captures: { 0: { name: "punctuation.definition.comment.php" } },
          end: "\\*/",
          name: "comment.block.php"
        },
        {
          begin: "(^[ \\t]+)?(?=//)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.php" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "//",
              beginCaptures: { 0: { name: "punctuation.definition.comment.php" } },
              end: "\\n|(?=\\?>)",
              name: "comment.line.double-slash.php"
            }
          ]
        },
        {
          begin: "(^[ \\t]+)?(?=#)",
          beginCaptures: {
            1: { name: "punctuation.whitespace.comment.leading.php" }
          },
          end: "(?!\\G)",
          patterns: [
            {
              begin: "#",
              beginCaptures: { 0: { name: "punctuation.definition.comment.php" } },
              end: "\\n|(?=\\?>)",
              name: "comment.line.number-sign.php"
            }
          ]
        }
      ]
    },
    constants: {
      patterns: [
        {
          begin: "(?xi)(?=\n			            (\n			                (\\\\[a-z_][a-z_0-9]*\\\\[a-z_][a-z_0-9\\\\]*)|\n			                ([a-z_][a-z_0-9]*\\\\[a-z_][a-z_0-9\\\\]*)\n			            )\n			            [^a-z_0-9\\\\])",
          end: "(?i)([a-z_][a-z_0-9]*)?(?=[^a-z0-9_\\\\])",
          endCaptures: { 1: { name: "constant.other.php" } },
          patterns: [{ include: "#namespace" }]
        },
        {
          begin: "(?=\\\\?[a-zA-Z_\\x{7f}-\\x{ff}])",
          end: "(?=[^\\\\a-zA-Z_\\x{7f}-\\x{ff}])",
          patterns: [
            {
              match: "(?i)\\b(TRUE|FALSE|NULL|__(FILE|DIR|FUNCTION|CLASS|METHOD|LINE|NAMESPACE)__|ON|OFF|YES|NO|NL|BR|TAB)\\b",
              name: "constant.language.php"
            },
            {
              captures: { 1: { name: "punctuation.separator.inheritance.php" } },
              match: "(\\\\)?\\b(STD(IN|OUT|ERR)|ZEND_(THREAD_SAFE|DEBUG_BUILD)|DEFAULT_INCLUDE_PATH|P(HP_(R(OUND_HALF_(ODD|DOWN|UP|EVEN)|ELEASE_VERSION)|M(INOR_VERSION|A(XPATHLEN|JOR_VERSION))|BINDIR|S(HLIB_SUFFIX|YSCONFDIR|API)|CONFIG_FILE_(SCAN_DIR|PATH)|INT_(MAX|SIZE)|ZTS|O(S|UTPUT_HANDLER_(START|CONT|END))|D(EBUG|ATADIR)|URL_(SCHEME|HOST|USER|P(ORT|A(SS|TH))|QUERY|FRAGMENT)|PREFIX|E(XT(RA_VERSION|ENSION_DIR)|OL)|VERSION(_ID)?|WINDOWS_(NT_(SERVER|DOMAIN_CONTROLLER|WORKSTATION)|VERSION_(M(INOR|AJOR)|BUILD|S(UITEMASK|P_M(INOR|AJOR))|P(RODUCTTYPE|LATFORM)))|L(IBDIR|OCALSTATEDIR))|EAR_(INSTALL_DIR|EXTENSION_DIR))|E_(RECOVERABLE_ERROR|STRICT|NOTICE|CO(RE_(ERROR|WARNING)|MPILE_(ERROR|WARNING))|DEPRECATED|USER_(NOTICE|DEPRECATED|ERROR|WARNING)|PARSE|ERROR|WARNING|ALL))\\b",
              name: "support.constant.core.php"
            },
            {
              captures: { 1: { name: "punctuation.separator.inheritance.php" } },
              match: "(\\\\)?\\b(RADIXCHAR|GROUPING|M(_(1_PI|SQRT(1_2|2|3|PI)|2_(SQRTPI|PI)|PI(_(2|4))?|E(ULER)?|L(N(10|2|PI)|OG(10E|2E)))|ON_(GROUPING|1(1|2|0)?|7|2|8|THOUSANDS_SEP|3|DECIMAL_POINT|9|4|5|6))|S(TR_PAD_(RIGHT|BOTH|LEFT)|ORT_(REGULAR|STRING|NUMERIC|DESC|LOCALE_STRING|ASC)|EEK_(SET|CUR|END))|H(TML_(SPECIALCHARS|ENTITIES)|ASH_HMAC)|YES(STR|EXPR)|N(_(S(IGN_POSN|EP_BY_SPACE)|CS_PRECEDES)|O(STR|EXPR)|EGATIVE_SIGN|AN)|C(R(YPT_(MD5|BLOWFISH|S(HA(256|512)|TD_DES|ALT_LENGTH)|EXT_DES)|NCYSTR|EDITS_(G(ROUP|ENERAL)|MODULES|SAPI|DOCS|QA|FULLPAGE|ALL))|HAR_MAX|O(NNECTION_(NORMAL|TIMEOUT|ABORTED)|DESET|UNT_(RECURSIVE|NORMAL))|URRENCY_SYMBOL|ASE_(UPPER|LOWER))|__COMPILER_HALT_OFFSET__|T(HOUS(EP|ANDS_SEP)|_FMT(_AMPM)?)|IN(T_(CURR_SYMBOL|FRAC_DIGITS)|I_(S(YSTEM|CANNER_(RAW|NORMAL))|USER|PERDIR|ALL)|F(O_(GENERAL|MODULES|C(REDITS|ONFIGURATION)|ENVIRONMENT|VARIABLES|LICENSE|ALL))?)|D(_(T_FMT|FMT)|IRECTORY_SEPARATOR|ECIMAL_POINT|A(Y_(1|7|2|3|4|5|6)|TE_(R(SS|FC(1(123|036)|2822|8(22|50)|3339))|COOKIE|ISO8601|W3C|ATOM)))|UPLOAD_ERR_(NO_(TMP_DIR|FILE)|CANT_WRITE|INI_SIZE|OK|PARTIAL|EXTENSION|FORM_SIZE)|P(M_STR|_(S(IGN_POSN|EP_BY_SPACE)|CS_PRECEDES)|OSITIVE_SIGN|ATH(_SEPARATOR|INFO_(BASENAME|DIRNAME|EXTENSION|FILENAME)))|E(RA(_(YEAR|T_FMT|D_(T_FMT|FMT)))?|XTR_(REFS|SKIP|IF_EXISTS|OVERWRITE|PREFIX_(SAME|I(NVALID|F_EXISTS)|ALL))|NT_(NOQUOTES|COMPAT|IGNORE|QUOTES))|FRAC_DIGITS|L(C_(M(ONETARY|ESSAGES)|NUMERIC|C(TYPE|OLLATE)|TIME|ALL)|O(G_(MAIL|SYSLOG|N(O(TICE|WAIT)|DELAY|EWS)|C(R(IT|ON)|ONS)|INFO|ODELAY|D(EBUG|AEMON)|U(SER|UCP)|P(ID|ERROR)|E(RR|MERG)|KERN|WARNING|L(OCAL(1|7|2|3|4|5|0|6)|PR)|A(UTH(PRIV)?|LERT))|CK_(SH|NB|UN|EX)))|A(M_STR|B(MON_(1(1|2|0)?|7|2|8|3|9|4|5|6)|DAY_(1|7|2|3|4|5|6))|SSERT_(BAIL|CALLBACK|QUIET_EVAL|WARNING|ACTIVE)|LT_DIGITS))\\b",
              name: "support.constant.std.php"
            },
            {
              captures: { 1: { name: "punctuation.separator.inheritance.php" } },
              match: "(?x)\n								(\\\\)?\\b\n								(GLOB_(MARK|BRACE|NO(SORT|CHECK|ESCAPE)|ONLYDIR|ERR|AVAILABLE_FLAGS)|XML_(SAX_IMPL|HTML_DOCUMENT_NODE|N(OTATION_NODE|AMESPACE_DECL_NODE)|C(OMMENT_NODE|DATA_SECTION_NODE)|TEXT_NODE|OPTION_(SKIP_(TAGSTART|WHITE)|CASE_FOLDING|TARGET_ENCODING)|D(TD_NODE|OCUMENT_(NODE|TYPE_NODE|FRAG_NODE))|PI_NODE|E(RROR_(RECURSIVE_ENTITY_REF|MISPLACED_XML_PI|B(INARY_ENTITY_REF|AD_CHAR_REF)|SYNTAX|NO(NE|_(MEMORY|ELEMENTS))|TAG_MISMATCH|IN(CORRECT_ENCODING|VALID_TOKEN)|DUPLICATE_ATTRIBUTE|UN(CLOSED_(CDATA_SECTION|TOKEN)|DEFINED_ENTITY|KNOWN_ENCODING)|JUNK_AFTER_DOC_ELEMENT|PAR(TIAL_CHAR|AM_ENTITY_REF)|EXTERNAL_ENTITY_HANDLING|A(SYNC_ENTITY|TTRIBUTE_EXTERNAL_ENTITY_REF))|NTITY_(REF_NODE|NODE|DECL_NODE)|LEMENT_(NODE|DECL_NODE))|LOCAL_NAMESPACE|ATTRIBUTE_(N(MTOKEN(S)?|O(TATION|DE))|CDATA|ID(REF(S)?)?|DECL_NODE|EN(TITY|UMERATION)))|M(HASH_(RIPEMD(1(28|60)|256|320)|GOST|MD(2|4|5)|S(HA(1|2(24|56)|384|512)|NEFRU256)|HAVAL(1(28|92|60)|2(24|56))|CRC32(B)?|TIGER(1(28|60))?|WHIRLPOOL|ADLER32)|YSQL(_(BOTH|NUM|CLIENT_(SSL|COMPRESS|I(GNORE_SPACE|NTERACTIVE))|ASSOC)|I_(RE(PORT_(STRICT|INDEX|OFF|ERROR|ALL)|FRESH_(GRANT|MASTER|BACKUP_LOG|S(TATUS|LAVE)|HOSTS|T(HREADS|ABLES)|LOG)|AD_DEFAULT_(GROUP|FILE))|GROUP_FLAG|MULTIPLE_KEY_FLAG|B(INARY_FLAG|OTH|LOB_FLAG)|S(T(MT_ATTR_(CURSOR_TYPE|UPDATE_MAX_LENGTH|PREFETCH_ROWS)|ORE_RESULT)|E(RVER_QUERY_(NO_(GOOD_INDEX_USED|INDEX_USED)|WAS_SLOW)|T_(CHARSET_NAME|FLAG)))|N(O(_D(EFAULT_VALUE_FLAG|ATA)|T_NULL_FLAG)|UM(_FLAG)?)|C(URSOR_TYPE_(READ_ONLY|SCROLLABLE|NO_CURSOR|FOR_UPDATE)|LIENT_(SSL|NO_SCHEMA|COMPRESS|I(GNORE_SPACE|NTERACTIVE)|FOUND_ROWS))|T(YPE_(GEOMETRY|MEDIUM_BLOB|B(IT|LOB)|S(HORT|TRING|ET)|YEAR|N(ULL|EWD(ECIMAL|ATE))|CHAR|TI(ME(STAMP)?|NY(_BLOB)?)|INT(24|ERVAL)|D(OUBLE|ECIMAL|ATE(TIME)?)|ENUM|VAR_STRING|FLOAT|LONG(_BLOB|LONG)?)|IMESTAMP_FLAG)|INIT_COMMAND|ZEROFILL_FLAG|O(N_UPDATE_NOW_FLAG|PT_(NET_(READ_BUFFER_SIZE|CMD_BUFFER_SIZE)|CONNECT_TIMEOUT|INT_AND_FLOAT_NATIVE|LOCAL_INFILE))|D(EBUG_TRACE_ENABLED|ATA_TRUNCATED)|U(SE_RESULT|N(SIGNED_FLAG|IQUE_KEY_FLAG))|P(RI_KEY_FLAG|ART_KEY_FLAG)|ENUM_FLAG|A(S(SOC|YNC)|UTO_INCREMENT_FLAG)))|CRYPT_(R(C(2|6)|IJNDAEL_(1(28|92)|256)|AND)|GOST|XTEA|M(ODE_(STREAM|NOFB|C(BC|FB)|OFB|ECB)|ARS)|BLOWFISH(_COMPAT)?|S(ERPENT|KIPJACK|AFER(128|PLUS|64))|C(RYPT|AST_(128|256))|T(RIPLEDES|HREEWAY|WOFISH)|IDEA|3DES|\n									DE(S|CRYPT|V_(RANDOM|URANDOM))|PANAMA|EN(CRYPT|IGNA)|WAKE|LOKI97|ARCFOUR(_IV)?))|S(TREAM_(REPORT_ERRORS|M(UST_SEEK|KDIR_RECURSIVE)|BUFFER_(NONE|FULL|LINE)|S(HUT_(RD(WR)?|WR)|OCK_(R(DM|AW)|S(TREAM|EQPACKET)|DGRAM)|ERVER_(BIND|LISTEN))|NOTIFY_(RE(SOLVE|DIRECTED)|MIME_TYPE_IS|SEVERITY_(INFO|ERR|WARN)|CO(MPLETED|NNECT)|PROGRESS|F(ILE_SIZE_IS|AILURE)|AUTH_RE(SULT|QUIRED))|C(RYPTO_METHOD_(SSLv(2(_(SERVER|CLIENT)|3_(SERVER|CLIENT))|3_(SERVER|CLIENT))|TLS_(SERVER|CLIENT))|LIENT_(CONNECT|PERSISTENT|ASYNC_CONNECT)|AST_(FOR_SELECT|AS_STREAM))|I(GNORE_URL|S_URL|PPROTO_(RAW|TCP|I(CMP|P)|UDP))|O(OB|PTION_(READ_(BUFFER|TIMEOUT)|BLOCKING|WRITE_BUFFER))|U(RL_STAT_(QUIET|LINK)|SE_PATH)|P(EEK|F_(INET(6)?|UNIX))|ENFORCE_SAFE_MODE|FILTER_(READ|WRITE|ALL))|UNFUNCS_RET_(STRING|TIMESTAMP|DOUBLE)|QLITE(_(R(OW|EADONLY)|MIS(MATCH|USE)|B(OTH|USY)|SCHEMA|N(O(MEM|T(FOUND|ADB)|LFS)|UM)|C(O(RRUPT|NSTRAINT)|ANTOPEN)|TOOBIG|I(NTER(RUPT|NAL)|OERR)|OK|DONE|P(ROTOCOL|ERM)|E(RROR|MPTY)|F(ORMAT|ULL)|LOCKED|A(BORT|SSOC|UTH))|3_(B(OTH|LOB)|NU(M|LL)|TEXT|INTEGER|OPEN_(READ(ONLY|WRITE)|CREATE)|FLOAT|ASSOC)))|CURL(M(SG_DONE|_(BAD_(HANDLE|EASY_HANDLE)|CALL_MULTI_PERFORM|INTERNAL_ERROR|O(UT_OF_MEMORY|K)))|SSH_AUTH_(HOST|NONE|DEFAULT|P(UBLICKEY|ASSWORD)|KEYBOARD)|CLOSEPOLICY_(SLOWEST|CALLBACK|OLDEST|LEAST_(RECENTLY_USED|TRAFFIC))|_(HTTP_VERSION_(1_(1|0)|NONE)|NETRC_(REQUIRED|IGNORED|OPTIONAL)|TIMECOND_(IF(MODSINCE|UNMODSINCE)|LASTMOD)|IPRESOLVE_(V(4|6)|WHATEVER)|VERSION_(SSL|IPV6|KERBEROS4|LIBZ))|INFO_(RE(DIRECT_(COUNT|TIME)|QUEST_SIZE)|S(SL_VERIFYRESULT|TARTTRANSFER_TIME|IZE_(DOWNLOAD|UPLOAD)|PEED_(DOWNLOAD|UPLOAD))|H(TTP_CODE|EADER_(SIZE|OUT))|NAMELOOKUP_TIME|C(ON(NECT_TIME|TENT_(TYPE|LENGTH_(DOWNLOAD|UPLOAD)))|ERTINFO)|TOTAL_TIME|PR(IVATE|ETRANSFER_TIME)|EFFECTIVE_URL|FILETIME)|OPT_(R(E(SUME_FROM|TURNTRANSFER|DIR_PROTOCOLS|FERER|AD(DATA|FUNCTION))|AN(GE|DOM_FILE))|MAX(REDIRS|CONNECTS)|B(INARYTRANSFER|UFFERSIZE)|S(S(H_(HOST_PUBLIC_KEY_MD5|P(RIVATE_KEYFILE|UBLIC_KEYFILE)|AUTH_TYPES)|L(CERT(TYPE|PASSWD)?|_(CIPHER_LIST|VERIFY(HOST|PEER))|ENGINE(_DEFAULT)?|VERSION|KEY(TYPE|PASSWD)?))|TDERR)|H(TTP(GET|HEADER|200ALIASES|_VERSION|PROXYTUNNEL|AUTH)|EADER(FUNCTION)?)\n									|N(O(BODY|SIGNAL|PROGRESS)|ETRC)|C(RLF|O(NNECTTIMEOUT(_MS)?|OKIE(SESSION|JAR|FILE)?)|USTOMREQUEST|ERTINFO|LOSEPOLICY|A(INFO|PATH))|T(RANSFERTEXT|CP_NODELAY|IME(CONDITION|OUT(_MS)?|VALUE))|I(N(TERFACE|FILE(SIZE)?)|PRESOLVE)|DNS_(CACHE_TIMEOUT|USE_GLOBAL_CACHE)|U(RL|SER(PWD|AGENT)|NRESTRICTED_AUTH|PLOAD)|P(R(IVATE|O(GRESSFUNCTION|XY(TYPE|USERPWD|PORT|AUTH)?|TOCOLS))|O(RT|ST(REDIR|QUOTE|FIELDS)?)|UT)|E(GDSOCKET|NCODING)|VERBOSE|K(RB4LEVEL|EYPASSWD)|QUOTE|F(RESH_CONNECT|TP(SSLAUTH|_(S(SL|KIP_PASV_IP)|CREATE_MISSING_DIRS|USE_EP(RT|SV)|FILEMETHOD)|PORT|LISTONLY|APPEND)|ILE(TIME)?|O(RBID_REUSE|LLOWLOCATION)|AILONERROR)|WRITE(HEADER|FUNCTION)|LOW_SPEED_(TIME|LIMIT)|AUTOREFERER)|PRO(XY_(SOCKS(4|5)|HTTP)|TO_(S(CP|FTP)|HTTP(S)?|T(ELNET|FTP)|DICT|F(TP(S)?|ILE)|LDAP(S)?|ALL))|E_(RE(CV_ERROR|AD_ERROR)|GOT_NOTHING|MALFORMAT_USER|BAD_(C(ONTENT_ENCODING|ALLING_ORDER)|PASSWORD_ENTERED|FUNCTION_ARGUMENT)|S(S(H|L_(C(IPHER|ONNECT_ERROR|ERTPROBLEM|ACERT)|PEER_CERTIFICATE|ENGINE_(SETFAILED|NOTFOUND)))|HARE_IN_USE|END_ERROR)|HTTP_(RANGE_ERROR|NOT_FOUND|PO(RT_FAILED|ST_ERROR))|COULDNT_(RESOLVE_(HOST|PROXY)|CONNECT)|T(OO_MANY_REDIRECTS|ELNET_OPTION_SYNTAX)|O(BSOLETE|UT_OF_MEMORY|PERATION_TIMEOUTED|K)|U(RL_MALFORMAT(_USER)?|N(SUPPORTED_PROTOCOL|KNOWN_TELNET_OPTION))|PARTIAL_FILE|F(TP_(BAD_DOWNLOAD_RESUME|SSL_FAILED|C(OULDNT_(RETR_FILE|GET_SIZE|S(TOR_FILE|ET_(BINARY|ASCII))|USE_REST)|ANT_(RECONNECT|GET_HOST))|USER_PASSWORD_INCORRECT|PORT_FAILED|QUOTE_ERROR|W(RITE_ERROR|EIRD_(SERVER_REPLY|227_FORMAT|USER_REPLY|PAS(S_REPLY|V_REPLY)))|ACCESS_DENIED)|ILE(SIZE_EXCEEDED|_COULDNT_READ_FILE)|UNCTION_NOT_FOUND|AILED_INIT)|WRITE_ERROR|L(IBRARY_NOT_FOUND|DAP_(SEARCH_FAILED|CANNOT_BIND|INVALID_URL))|ABORTED_BY_CALLBACK)|VERSION_NOW|FTP(METHOD_(MULTICWD|SINGLECWD|NOCWD)|SSL_(NONE|CONTROL|TRY|ALL)|AUTH_(SSL|TLS|DEFAULT))|AUTH_(GSSNEGOTIATE|BASIC|NTLM|DIGEST|ANY(SAFE)?))|I(MAGETYPE_(GIF|XBM|BMP|SWF|COUNT|TIFF_(MM|II)|I(CO|FF)|UNKNOWN|J(B2|P(X|2|C|EG(2000)?))|P(SD|NG)|WBMP)|NPUT_(REQUEST|GET|SE(RVER|SSION)|COOKIE|POST|ENV)|CONV_(MIME_DECODE_(STRICT|CONTINUE_ON_ERROR)|IMPL|VERSION))|D(NS_(MX|S(RV|OA)|HINFO|N(S|APTR)|CNAME|TXT|PTR|A(NY|LL|AAA|6)?)|OM(STRING_SIZE_ERR|_(SYNTAX_ERR|HIERARCHY_REQUEST_ERR|N(O(_(MODIFICATION_ALLOWED_ERR|DATA_ALLOWED_ERR)|T_(SUPPORTED_ERR|FOUND_ERR))|AMESPACE_ERR)|IN(DEX_SIZE_ERR|USE_ATTRIBUTE_ERR|VALID_(MODIFICATION_ERR|STATE_ERR|CHARACTER_ERR|ACCESS_ERR))|PHP_ERR|VALIDATION_ERR|WRONG_DOCUMENT_ERR)))|JSON_(HEX_(TAG|QUOT|A(MP|POS))|NUMERIC_CHECK|ERROR_(S(YNTAX|TATE_MISMATCH)|NONE|CTRL_CHAR|DEPTH|UTF8)|FORCE_OBJECT)|P(REG_(RECURSION_LIMIT_ERROR|GREP_INVERT|BA(CKTRACK_LIMIT_ERROR|D_UTF8_(OFFSET_ERROR|ERROR))|S(PLIT_(NO_EMPTY|OFFSET_CAPTURE|DELIM_CAPTURE)|ET_ORDER)|NO_ERROR|INTERNAL_ERROR|OFFSET_CAPTURE|PATTERN_ORDER)|SFS_(PASS_ON|ERR_FATAL|F(EED_ME|LAG_(NORMAL|FLUSH_(CLOSE|INC))))|CRE_VERSION|OSIX_(R_OK|X_OK|S_IF(REG|BLK|SOCK|CHR|IFO)|F_OK|W_OK))|F(NM_(NOESCAPE|CASEFOLD|P(ERIOD|ATHNAME))|IL(TER_(REQUIRE_(SCALAR|ARRAY)|SANITIZE_(MAGIC_QUOTES|S(TRI(NG|PPED)|PECIAL_CHARS)|NUMBER_(INT|FLOAT)|URL|E(MAIL|NCODED)|FULL_SPECIAL_CHARS)|NULL_ON_FAILURE|CALLBACK|DEFAULT|UNSAFE_RAW|VALIDATE_(REGEXP|BOOLEAN|I(NT|P)|URL|EMAIL|FLOAT)|F(ORCE_ARRAY|LAG_(S(CHEME_REQUIRED|TRIP_(BACKTICK|HIGH|LOW))|HOST_REQUIRED|NO(NE|_(RES_RANGE|PRIV_RANGE|ENCODE_QUOTES))|IPV(4|6)|PATH_REQUIRED|E(MPTY_STRING_NULL|NCODE_(HIGH|LOW|AMP))|QUERY_REQUIRED|ALLOW_(SCIENTIFIC|HEX|THOUSAND|OCTAL|FRACTION))))|E(_(BINARY|SKIP_EMPTY_LINES|NO_DEFAULT_CONTEXT|TEXT|IGNORE_NEW_LINES|USE_INCLUDE_PATH|APPEND)|INFO_(RAW|MIME(_(TYPE|ENCODING))?|SYMLINK|NONE|CONTINUE|DEVICES|PRESERVE_ATIME)))|ORCE_(GZIP|DEFLATE))|LIBXML_(XINCLUDE|N(SCLEAN|O(XMLDECL|BLANKS|NET|CDATA|E(RROR|MPTYTAG|NT)|WARNING))|COMPACT|D(TD(VALID|LOAD|ATTR)|OTTED_VERSION)|PARSEHUGE|ERR_(NONE|ERROR|FATAL|WARNING)|VERSION|LOADED_VERSION))\n							\\b\n							",
              name: "support.constant.ext.php"
            },
            {
              captures: { 1: { name: "punctuation.separator.inheritance.php" } },
              match: "(\\\\)?\\bT_(RE(TURN|QUIRE(_ONCE)?)|G(OTO|LOBAL)|XOR_EQUAL|M(INUS_EQUAL|OD_EQUAL|UL_EQUAL|ETHOD_C|L_COMMENT)|B(REAK|OOL(_CAST|EAN_(OR|AND))|AD_CHARACTER)|S(R(_EQUAL)?|T(RING(_(CAST|VARNAME))?|A(RT_HEREDOC|TIC))|WITCH|L(_EQUAL)?)|HALT_COMPILER|N(S_(SEPARATOR|C)|UM_STRING|EW|AMESPACE)|C(HARACTER|O(MMENT|N(ST(ANT_ENCAPSED_STRING)?|CAT_EQUAL|TINUE))|URLY_OPEN|L(O(SE_TAG|NE)|ASS(_C)?)|A(SE|TCH))|T(RY|HROW)|I(MPLEMENTS|S(SET|_(GREATER_OR_EQUAL|SMALLER_OR_EQUAL|NOT_(IDENTICAL|EQUAL)|IDENTICAL|EQUAL))|N(STANCEOF|C(LUDE(_ONCE)?)?|T(_CAST|ERFACE)|LINE_HTML)|F)|O(R_EQUAL|BJECT_(CAST|OPERATOR)|PEN_TAG(_WITH_ECHO)?|LD_FUNCTION)|D(NUMBER|I(R|V_EQUAL)|O(C_COMMENT|UBLE_(C(OLON|AST)|ARROW)|LLAR_OPEN_CURLY_BRACES)?|E(C(LARE)?|FAULT))|U(SE|NSET(_CAST)?)|P(R(I(NT|VATE)|OTECTED)|UBLIC|LUS_EQUAL|AAMAYIM_NEKUDOTAYIM)|E(X(TENDS|IT)|MPTY|N(CAPSED_AND_WHITESPACE|D(SWITCH|_HEREDOC|IF|DECLARE|FOR(EACH)?|WHILE))|CHO|VAL|LSE(IF)?)|VAR(IABLE)?|F(I(NAL|LE)|OR(EACH)?|UNC(_C|TION))|WHI(TESPACE|LE)|L(NUMBER|I(ST|NE)|OGICAL_(XOR|OR|AND))|A(RRAY(_CAST)?|BSTRACT|S|ND_EQUAL))\\b",
              name: "support.constant.parser-token.php"
            },
            {
              match: "[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*",
              name: "constant.other.php"
            }
          ]
        }
      ]
    },
    "function-arguments": {
      patterns: [
        { include: "#comments" },
        {
          begin: "(?ix)\n						(?:                                                           # Optional\n							(\\?)?\n							(?:\n							  (array|bool|float|int|string|mixed|never|object)        # scalar-type\n							  | (callable|iterable)                                   # base-type-declaration\n							  | ([a-z_0-9\\\\]*[a-z_][a-z_0-9]*)\n							)\n							\\s+\n						)?\n						(?:(&)\\s*)?                                               # Reference\n						((\\$+)[a-z_\\x{7f}-\\x{ff}][a-z0-9_\\x{7f}-\\x{ff}]*)             # Variable name\n					",
          beginCaptures: {
            1: { name: "storage.modifier.nullable.php" },
            2: { name: "storage.type.$2.php" },
            3: { name: "storage.modifier.$3.php" },
            4: { patterns: [{ include: "#class-name" }] },
            5: { name: "storage.modifier.reference.php" },
            6: { name: "variable.other.php" },
            7: { name: "punctuation.definition.variable.php" }
          },
          end: "(?=,|\\)|/[/*]|\\#)",
          name: "meta.function.argment.php",
          patterns: [
            {
              begin: "\\s*(=)",
              beginCaptures: { 1: { name: "keyword.operator.assignment.php" } },
              end: "(?=,|\\)|/[/*]|\\#)",
              patterns: [{ include: "#parameter-default-types" }]
            },
            {
              match: "\\S",
              name: "invalid.illegal.character-not-allowed-here.php"
            }
          ]
        }
      ]
    },
    "function-call": {
      patterns: [
        {
          begin: "(?i)(?=\\\\?[a-z_0-9\\\\]+\\\\[a-z_][a-z0-9_]*\\s*\\()",
          end: "(?=\\s*\\()",
          patterns: [{ include: "#user-function-call" }]
        },
        {
          match: "(?i)\\b(print|echo)\\b",
          name: "support.function.construct.php"
        },
        {
          begin: "(?i)(\\\\)?(?=\\b[a-z_][a-z_0-9]*\\s*\\()",
          beginCaptures: { 1: { name: "punctuation.separator.inheritance.php" } },
          end: "(?=\\s*\\()",
          patterns: [
            {
              match: "(?i)\\b(isset|unset|e(val|mpty)|list)(?=\\s*\\()",
              name: "support.function.construct.php"
            },
            { include: "#support" },
            { include: "#user-function-call" }
          ]
        }
      ]
    },
    heredoc: {
      patterns: [
        {
          begin: '(?=<<<\\s*("?)([a-zA-Z_]+[a-zA-Z0-9_]*)(\\1)\\s*$)',
          end: "(?!\\G)",
          injections: { "*": { patterns: [{ include: "#interpolation" }] } },
          name: "string.unquoted.heredoc.php",
          patterns: [{ include: "#heredoc_interior" }]
        },
        {
          begin: "(?=<<<\\s*('?)([a-zA-Z_]+[a-zA-Z0-9_]*)(\\1)\\s*$)",
          end: "(?!\\G)",
          name: "string.unquoted.heredoc.nowdoc.php",
          patterns: [{ include: "#heredoc_interior" }]
        }
      ],
      repository: {
        heredoc_interior: {
          patterns: [
            {
              begin: `(<<<)\\s*(['"]?)(HTML)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "text.html",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              name: "meta.embedded.html",
              patterns: [{ include: "text.html.basic" }]
            },
            {
              begin: `(<<<)\\s*(['"]?)(XML)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "text.xml",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              name: "meta.embedded.xml",
              patterns: [{ include: "text.xml" }]
            },
            {
              begin: `(<<<)\\s*(['"]?)(SQL)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "source.sql",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              name: "meta.embedded.sql",
              patterns: [{ include: "source.sql" }]
            },
            {
              begin: `(<<<)\\s*(['"]?)(JAVASCRIPT)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "source.js",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              name: "meta.embedded.js",
              patterns: [{ include: "source.js" }]
            },
            {
              begin: `(<<<)\\s*(['"]?)(JSON)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "source.json",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              name: "meta.embedded.json",
              patterns: [{ include: "source.json" }]
            },
            {
              begin: `(<<<)\\s*(['"]?)(CSS)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "source.css",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              name: "meta.embedded.css",
              patterns: [{ include: "source.css" }]
            },
            {
              begin: `(<<<)\\s*(['"]?)(REGEX)(\\2)\\s*$\\n?`,
              beginCaptures: {
                0: { name: "punctuation.section.embedded.begin.php" },
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              contentName: "string.regexp.heredoc.php",
              end: "^\\s*(\\3)\\b",
              endCaptures: {
                0: { name: "punctuation.section.embedded.end.php" },
                1: { name: "keyword.operator.heredoc.php" }
              },
              patterns: [
                {
                  match: "(\\\\){1,2}[.$^\\[\\]{}]",
                  name: "constant.character.escape.regex.php"
                },
                {
                  captures: {
                    1: {
                      name: "punctuation.definition.arbitrary-repitition.php"
                    },
                    3: { name: "punctuation.definition.arbitrary-repitition.php" }
                  },
                  match: "(\\{)\\d+(,\\d+)?(\\})",
                  name: "string.regexp.arbitrary-repitition.php"
                },
                {
                  begin: "\\[(?:\\^?\\])?",
                  captures: {
                    0: { name: "punctuation.definition.character-class.php" }
                  },
                  end: "\\]",
                  name: "string.regexp.character-class.php",
                  patterns: [
                    {
                      match: "\\\\[\\\\'\\[\\]]",
                      name: "constant.character.escape.php"
                    }
                  ]
                },
                { match: "[$^+*]", name: "keyword.operator.regexp.php" },
                {
                  begin: "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
                  beginCaptures: {
                    1: { name: "punctuation.definition.comment.php" }
                  },
                  end: "$\\n?",
                  endCaptures: {
                    0: { name: "punctuation.definition.comment.php" }
                  },
                  name: "comment.line.number-sign.php"
                }
              ]
            },
            {
              begin: `(<<<)\\s*(['"]?)([a-zA-Z_]+[a-zA-Z0-9_]*)(\\2)`,
              beginCaptures: {
                1: { name: "punctuation.definition.string.php" },
                3: { name: "keyword.operator.heredoc.php" }
              },
              end: "^\\s*(\\3)\\b",
              endCaptures: { 1: { name: "keyword.operator.heredoc.php" } }
            }
          ]
        }
      }
    },
    instantiation: {
      begin: "(?i)(new)\\s+",
      beginCaptures: { 1: { name: "keyword.other.new.php" } },
      end: "(?i)(?=[^$a-z0-9_\\\\])",
      patterns: [
        { match: "(parent|static|self)(?=[^a-z0-9_])", name: "storage.type.php" },
        { include: "#class-name" },
        { include: "#variable-name" }
      ]
    },
    interpolation: {
      patterns: [
        { match: "\\\\[0-7]{1,3}", name: "constant.numeric.octal.php" },
        { match: "\\\\x[0-9A-Fa-f]{1,2}", name: "constant.numeric.hex.php" },
        { match: '\\\\[enrt\\\\\\$\\"]', name: "constant.character.escape.php" },
        {
          begin: "(\\{)(?=\\$.*?\\})",
          beginCaptures: { 1: { name: "punctuation.definition.variable.php" } },
          end: "(\\})",
          endCaptures: { 1: { name: "punctuation.definition.variable.php" } },
          patterns: [{ include: "#language" }]
        },
        { include: "#variable-name" }
      ]
    },
    "invoke-call": {
      captures: {
        1: { name: "punctuation.definition.variable.php" },
        2: { name: "variable.other.php" }
      },
      match: "(?i)(\\$+)([a-z_][a-z_0-9]*)(?=\\s*\\()",
      name: "meta.function-call.invoke.php"
    },
    language: {
      patterns: [
        { include: "#comments" },
        { match: "\\{", name: "punctuation.section.scope.begin.php" },
        { match: "\\}", name: "punctuation.section.scope.end.php" },
        {
          begin: "(?i)^\\s*(interface)\\s+([a-z0-9_]+)\\s*(extends)?\\s*",
          beginCaptures: {
            1: { name: "storage.type.interface.php" },
            2: { name: "entity.name.type.interface.php" },
            3: { name: "storage.modifier.extends.php" }
          },
          end: "((?:[a-zA-Z0-9_]+\\s*,\\s*)*)([a-zA-Z0-9_]+)?\\s*(?:(?=\\{)|$)",
          endCaptures: {
            1: {
              patterns: [
                {
                  match: "[a-zA-Z0-9_]+",
                  name: "entity.other.inherited-class.php"
                },
                { match: ",", name: "punctuation.separator.classes.php" }
              ]
            },
            2: { name: "entity.other.inherited-class.php" }
          },
          name: "meta.interface.php",
          patterns: [{ include: "#namespace" }]
        },
        {
          begin: "(?i)^\\s*(enum)\\s+([a-z0-9_]+)\\s*(implements)?\\s*",
          beginCaptures: {
            1: { name: "storage.type.enum.php" },
            2: { name: "entity.name.type.enum.php" },
            3: { name: "storage.modifier.extends.php" }
          },
          end: "((?:[a-zA-Z0-9_]+\\s*,\\s*)*)([a-zA-Z0-9_]+)?\\s*(?:(?=\\{)|$)",
          endCaptures: {
            1: {
              patterns: [
                {
                  match: "[a-zA-Z0-9_]+",
                  name: "entity.other.inherited-class.php"
                },
                { match: ",", name: "punctuation.separator.classes.php" }
              ]
            },
            2: { name: "entity.other.inherited-class.php" }
          },
          name: "meta.enum.php",
          patterns: [{ include: "#namespace" }]
        },
        {
          begin: "(?i)(?:^|(?<=<\\?php))\\s*(namespace)\\b\\s+(?=([a-z0-9_\\\\]+\\s*($|[;{]|(\\/[\\/*])))|$)",
          beginCaptures: { 1: { name: "keyword.other.namespace.php" } },
          contentName: "entity.name.type.namespace.php",
          end: "(?i)(?=\\s*$|[^a-z0-9_\\\\])",
          name: "meta.namespace.php",
          patterns: [
            { match: "\\\\", name: "punctuation.separator.inheritance.php" }
          ]
        },
        {
          begin: "(?i)\\s*\\b(use)\\s+(?:((const)|(function))\\s+)?",
          beginCaptures: {
            1: { name: "keyword.other.use.php" },
            3: { name: "storage.type.const.php" },
            4: { name: "storage.type.function.php" }
          },
          end: "(?=;|(?:^\\s*$))",
          name: "meta.use.php",
          patterns: [
            { include: "#comments" },
            {
              begin: "(?i)\\s*(?=[a-z_0-9\\\\])",
              end: "(?xi)(?:\n    			                (?:\\s*(as)\\b\\s*([a-z_0-9]*)\\s*(?=,|;|$))\n    			                |(?=,|;|$)\n    			            )",
              endCaptures: {
                1: { name: "keyword.other.use-as.php" },
                2: { name: "support.other.namespace.use-as.php" }
              },
              patterns: [
                { include: "#class-builtin" },
                {
                  begin: "(?i)\\s*(?=[\\\\a-z_0-9])",
                  end: "$|(?=[\\s,;])",
                  name: "support.other.namespace.use.php",
                  patterns: [
                    {
                      match: "\\\\",
                      name: "punctuation.separator.inheritance.php"
                    }
                  ]
                }
              ]
            },
            { match: "\\s*,\\s*" }
          ]
        },
        {
          begin: "(?i)^\\s*(trait)\\s+([a-zA-Z0-9_]+)",
          beginCaptures: {
            1: { name: "storage.type.trait.php" },
            2: { name: "entity.name.type.trait.php" }
          },
          end: "(?=\\{)",
          name: "meta.trait.php"
        },
        {
          begin: "(?i)^\\s*(abstract|final)?\\s*(class)\\s+([a-z0-9_]+)\\s*",
          beginCaptures: {
            1: { name: "storage.modifier.abstract.php" },
            2: { name: "storage.type.class.php" },
            3: { name: "entity.name.type.class.php" }
          },
          end: "(?=[;{])",
          name: "meta.class.php",
          patterns: [
            { include: "#comments" },
            {
              begin: "(?i)(extends)\\s+",
              beginCaptures: { 1: { name: "storage.modifier.extends.php" } },
              contentName: "meta.other.inherited-class.php",
              end: "(?i)(?=[^a-z_0-9\\\\])",
              patterns: [
                {
                  begin: "(?i)(?=\\\\?[a-z_0-9]+\\\\)",
                  end: "(?i)([a-z_][a-z_0-9]*)?(?=[^a-z0-9_\\\\])",
                  endCaptures: { 1: { name: "entity.other.inherited-class.php" } },
                  patterns: [{ include: "#namespace" }]
                },
                { include: "#class-builtin" },
                { include: "#namespace" },
                {
                  match: "(?i)[a-z_][a-z_0-9]*",
                  name: "entity.other.inherited-class.php"
                }
              ]
            },
            {
              begin: "(?i)(implements)\\s+",
              beginCaptures: { 1: { name: "storage.modifier.implements.php" } },
              end: "(?i)(?=[;{])",
              patterns: [
                { include: "#comments" },
                {
                  begin: "(?i)(?=[a-z0-9_\\\\]+)",
                  contentName: "meta.other.inherited-class.php",
                  end: "(?i)(?:\\s*(?:,|(?=[^a-z0-9_\\\\\\s]))\\s*)",
                  patterns: [
                    {
                      begin: "(?i)(?=\\\\?[a-z_0-9]+\\\\)",
                      end: "(?i)([a-z_][a-z_0-9]*)?(?=[^a-z0-9_\\\\])",
                      endCaptures: {
                        1: { name: "entity.other.inherited-class.php" }
                      },
                      patterns: [{ include: "#namespace" }]
                    },
                    { include: "#class-builtin" },
                    { include: "#namespace" },
                    {
                      match: "(?i)[a-z_][a-z_0-9]*",
                      name: "entity.other.inherited-class.php"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          captures: { 1: { name: "keyword.control.php" } },
          match: "\\s*\\b((break|c(ase|ontinue)|d(e(clare|fault)|ie|o)|e(lse(if)?|nd(declare|for(each)?|if|switch|while)|xit)|for(each)?|if|match|return|switch|use|while|yield))\\b"
        },
        {
          begin: "(?i)\\b((?:require|include)(?:_once)?)\\b\\s*",
          beginCaptures: { 1: { name: "keyword.control.import.include.php" } },
          end: "(?=\\s|;|$)",
          name: "meta.include.php",
          patterns: [{ include: "#language" }]
        },
        {
          begin: "\\b(catch)\\b\\s*\\(\\s*",
          beginCaptures: { 1: { name: "keyword.control.exception.catch.php" } },
          end: "([A-Za-z_][A-Za-z_0-9]*)\\s*((\\$+)[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)?\\s*\\)",
          endCaptures: {
            1: { name: "support.class.exception.php" },
            2: { name: "variable.other.php" },
            3: { name: "punctuation.definition.variable.php" }
          },
          name: "meta.catch.php",
          patterns: [{ include: "#namespace" }]
        },
        {
          match: "\\b(catch|try|throw|exception|finally)\\b",
          name: "keyword.control.exception.php"
        },
        {
          begin: "(?i)\\b(function)\\s*(&\\s*)?(?=\\()",
          beginCaptures: {
            1: { name: "storage.type.function.php" },
            2: { name: "storage.modifier.reference.php" }
          },
          end: "\\{",
          name: "meta.function.closure.php",
          patterns: [
            {
              begin: "(\\()",
              beginCaptures: {
                1: { name: "punctuation.definition.parameters.begin.php" }
              },
              contentName: "meta.function.arguments.php",
              end: "(\\))",
              endCaptures: {
                1: { name: "punctuation.definition.parameters.end.php" }
              },
              patterns: [{ include: "#function-arguments" }]
            },
            {
              begin: "(?i)(use)\\s*(\\()",
              beginCaptures: {
                1: { name: "keyword.other.function.use.php" },
                2: { name: "punctuation.definition.parameters.begin.php" }
              },
              end: "(\\))",
              endCaptures: {
                1: { name: "punctuation.definition.parameters.end.php" }
              },
              patterns: [
                {
                  captures: {
                    1: { name: "storage.modifier.reference.php" },
                    2: { name: "variable.other.php" },
                    3: { name: "punctuation.definition.variable.php" }
                  },
                  match: "(?:\\s*(&))?\\s*((\\$+)[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)\\s*(?=,|\\))",
                  name: "meta.function.closure.use.php"
                }
              ]
            }
          ]
        },
        {
          begin: "(?x)\\s*\n					    ((?:(?:final|abstract|public|private|protected|static)\\s+)*)\n				        (function)\n				        (?:\\s+|(\\s*&\\s*))\n				        (?:\n				            (__(?:call|construct|debugInfo|destruct|get|set|isset|unset|tostring|clone|set_state|sleep|wakeup|autoload|invoke|callStatic))\n				            |([a-zA-Z0-9_]+)\n				        )\n				        \\s*\n				        (\\()",
          beginCaptures: {
            1: {
              patterns: [
                {
                  match: "final|abstract|public|private|protected|static",
                  name: "storage.modifier.php"
                }
              ]
            },
            2: { name: "storage.type.function.php" },
            3: { name: "storage.modifier.reference.php" },
            4: { name: "support.function.magic.php" },
            5: { name: "entity.name.function.php" },
            6: { name: "punctuation.definition.parameters.begin.php" }
          },
          contentName: "meta.function.arguments.php",
          end: "(?ix)\n						(\\))                                             # Close arguments\n						(?:                                              # Optional return type\n							\\s*(:)\\s*\n							(\\?)?\n							(?:\n							  (array|bool|float|int|string|mixed|never|object)    # scalar-type\n							  | (callable|iterable)                               # base-type-declaration\n							  | (void)\n							  | (self|parent|static)                              # late static binding\n							  | ([a-z_0-9\\\\]*[a-z_][a-z_0-9]*)                    # qualified-name\n							)\n						)?\n					",
          endCaptures: {
            1: { name: "punctuation.definition.parameters.end.php" },
            2: { name: "punctuation.separator.return-type.php" },
            3: { name: "storage.modifier.nullable.php" },
            4: { name: "storage.type.$4.php" },
            5: { name: "storage.modifier.$5.php" },
            6: { name: "storage.type.void.php" },
            7: { name: "storage.type.$7.php" },
            8: { patterns: [{ include: "#class-name" }] }
          },
          name: "meta.function.php",
          patterns: [{ include: "#function-arguments" }]
        },
        { include: "#invoke-call" },
        {
          begin: "(?xi)\\s*(?=\n				        [a-z_0-9$\\\\]+(::)\n                        (?:\n        				    ([a-z_][a-z_0-9]*)\\s*\\(\n        				    |\n        				    ((\\$+)[a-z_\\x{7f}-\\x{ff}][a-z0-9_\\x{7f}-\\x{ff}]*)\n        				    |\n        				    ([a-z_\\x{7f}-\\x{ff}][a-z0-9_\\x{7f}-\\x{ff}]*)\n        				)?\n				    )",
          end: "(?x)(::)\n                        (?:\n        				    ([A-Za-z_][A-Za-z_0-9]*)\\s*\\(\n        				    |\n        				    ((\\$+)[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)\n        				    |\n        				    ([a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)\n        				)?",
          endCaptures: {
            1: { name: "keyword.operator.class.php" },
            2: { name: "meta.function-call.static.php" },
            3: { name: "variable.other.class.php" },
            4: { name: "punctuation.definition.variable.php" },
            5: { name: "constant.other.class.php" }
          },
          patterns: [
            { match: "(self|static|parent)\\b", name: "storage.type.php" },
            { include: "#class-name" },
            { include: "#variable-name" }
          ]
        },
        { include: "#variables" },
        { include: "#strings" },
        {
          captures: {
            1: { name: "support.function.construct.php" },
            2: { name: "punctuation.definition.array.begin.php" },
            3: { name: "punctuation.definition.array.end.php" }
          },
          match: "(array)(\\()(\\))",
          name: "meta.array.empty.php"
        },
        {
          begin: "(array)(\\()",
          beginCaptures: {
            1: { name: "support.function.construct.php" },
            2: { name: "punctuation.definition.array.begin.php" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.array.end.php" } },
          name: "meta.array.php",
          patterns: [{ include: "#language" }]
        },
        {
          captures: { 1: { name: "storage.type.php" } },
          match: "(?i)\\s*\\(\\s*(array|real|double|float|int(eger)?|bool(ean)?|string|object|binary|unset)\\s*\\)"
        },
        {
          match: "(?i)\\b(array|real|double|float|int(eger)?|bool(ean)?|string|mixed|never|object|class|clone|var|function|interface|parent|self|object)\\b",
          name: "storage.type.php"
        },
        {
          match: "(?i)\\b(global|abstract|const|extends|implements|final|p(r(ivate|otected)|ublic)|static)\\b",
          name: "storage.modifier.php"
        },
        { include: "#object" },
        { match: ";", name: "punctuation.terminator.expression.php" },
        { include: "#heredoc" },
        { match: "\\.=?", name: "keyword.operator.string.php" },
        { match: "=>", name: "keyword.operator.key.php" },
        {
          captures: {
            1: { name: "keyword.operator.assignment.php" },
            2: { name: "storage.modifier.reference.php" },
            3: { name: "storage.modifier.reference.php" }
          },
          match: "(?:(\\=)(&))|(&(?=[$A-Za-z_]))"
        },
        { match: "(@)", name: "keyword.operator.error-control.php" },
        {
          match: "(\\-\\-|\\+\\+)",
          name: "keyword.operator.increment-decrement.php"
        },
        { match: "(\\-|\\+|\\*|/|%)", name: "keyword.operator.arithmetic.php" },
        {
          match: "(?i)(!|&&|\\|\\|)|\\b(and|or|xor|as)\\b",
          name: "keyword.operator.logical.php"
        },
        { include: "#function-call" },
        { match: "<<|>>|~|\\^|&|\\|", name: "keyword.operator.bitwise.php" },
        {
          match: "(===|==|!==|!=|<=|>=|<>|<|>)",
          name: "keyword.operator.comparison.php"
        },
        { match: "=", name: "keyword.operator.assignment.php" },
        {
          begin: "(?i)\\b(instanceof)\\b\\s+(?=[\\\\$a-z_])",
          beginCaptures: { 1: { name: "keyword.operator.type.php" } },
          end: "(?=[^\\\\$A-Za-z_0-9])",
          patterns: [{ include: "#class-name" }, { include: "#variable-name" }]
        },
        { include: "#numbers" },
        { include: "#instantiation" },
        {
          captures: {
            1: { name: "keyword.control.goto.php" },
            2: { name: "support.other.php" }
          },
          match: "(?i)(goto)\\s+([a-z_][a-z_0-9]*)"
        },
        {
          captures: { 1: { name: "entity.name.goto-label.php" } },
          match: "(?i)^\\s*([a-z_][a-z_0-9]*)\\s*:"
        },
        { include: "#string-backtick" },
        {
          begin: "\\[",
          beginCaptures: { 0: { name: "punctuation.section.array.begin.php" } },
          end: "\\]",
          endCaptures: { 0: { name: "punctuation.section.array.end.php" } },
          patterns: [{ include: "#language" }]
        },
        { include: "#constants" }
      ]
    },
    namespace: {
      begin: "(?i)(?:(namespace)|[a-z0-9_]+)?(\\\\)(?=.*?([^a-z0-9_\\\\]|\\z))",
      beginCaptures: {
        1: { name: "variable.language.namespace.php" },
        2: { name: "punctuation.separator.inheritance.php" }
      },
      end: "(?i)(?=[a-z0-9_]*([^a-z0-9_\\\\]|\\z))",
      name: "support.other.namespace.php",
      patterns: [
        {
          captures: { 1: { name: "punctuation.separator.inheritance.php" } },
          match: "(?i)(\\\\)"
        }
      ]
    },
    numbers: {
      match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b",
      name: "constant.numeric.php"
    },
    object: {
      patterns: [
        {
          begin: "(->)(\\$?\\{)",
          beginCaptures: {
            1: { name: "keyword.operator.class.php" },
            2: { name: "punctuation.definition.variable.php" }
          },
          end: "(\\})",
          endCaptures: { 1: { name: "punctuation.definition.variable.php" } },
          patterns: [{ include: "#language" }]
        },
        {
          captures: {
            1: { name: "keyword.operator.class.php" },
            2: { name: "meta.function-call.object.php" },
            3: { name: "variable.other.property.php" },
            4: { name: "punctuation.definition.variable.php" }
          },
          match: "(?x)(\\??->)\n            				(?:\n            				    ([A-Za-z_][A-Za-z_0-9]*)\\s*\\(\n            				    |\n            				    ((\\$+)?[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)\n            				)?"
        }
      ]
    },
    "parameter-default-types": {
      patterns: [
        { include: "#strings" },
        { include: "#numbers" },
        { include: "#string-backtick" },
        { include: "#variables" },
        { match: "=>", name: "keyword.operator.key.php" },
        { match: "=", name: "keyword.operator.assignment.php" },
        { match: "&(?=\\s*\\$)", name: "storage.modifier.reference.php" },
        {
          begin: "(array)\\s*(\\()",
          beginCaptures: {
            1: { name: "support.function.construct.php" },
            2: { name: "punctuation.definition.array.begin.php" }
          },
          end: "\\)",
          endCaptures: { 0: { name: "punctuation.definition.array.end.php" } },
          name: "meta.array.php",
          patterns: [{ include: "#parameter-default-types" }]
        },
        { include: "#instantiation" },
        {
          begin: "(?xi)\\s*(?=\n				        [a-z_0-9\\\\]+(::)\n    				    ([a-z_\\x{7f}-\\x{ff}][a-z0-9_\\x{7f}-\\x{ff}]*)?\n				    )",
          end: "(?i)(::)([a-z_\\x{7f}-\\x{ff}][a-z0-9_\\x{7f}-\\x{ff}]*)?",
          endCaptures: {
            1: { name: "keyword.operator.class.php" },
            2: { name: "constant.other.class.php" }
          },
          patterns: [{ include: "#class-name" }]
        },
        { include: "#constants" }
      ]
    },
    php_doc: {
      patterns: [
        {
          match: "^(?!\\s*\\*).*$\\n?",
          name: "invalid.illegal.missing-asterisk.phpdoc.php"
        },
        {
          captures: {
            1: { name: "keyword.other.phpdoc.php" },
            3: { name: "storage.modifier.php" },
            4: { name: "invalid.illegal.wrong-access-type.phpdoc.php" }
          },
          match: "^\\s*\\*\\s*(@access)\\s+((public|private|protected)|(.+))\\s*$"
        },
        {
          captures: {
            1: { name: "keyword.other.phpdoc.php" },
            2: { name: "markup.underline.link.php" }
          },
          match: "(@xlink)\\s+(.+)\\s*$"
        },
        {
          match: "\\@(a(bstract|uthor)|c(ategory|opyright)|example|global|internal|li(cense|nk)|pa(ckage|ram)|return|s(ee|ince|tatic|ubpackage)|t(hrows|odo)|v(ar|ersion)|uses|deprecated|final|ignore)\\b",
          name: "keyword.other.phpdoc.php"
        },
        {
          captures: { 1: { name: "keyword.other.phpdoc.php" } },
          match: "\\{(@(link)).+?\\}",
          name: "meta.tag.inline.phpdoc.php"
        }
      ]
    },
    "regex-double-quoted": {
      begin: '(?x)"/ (?= (\\\\.|[^"/])++/[imsxeADSUXu]*" )',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      end: '(/)([imsxeADSUXu]*)(")',
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.regexp.double-quoted.php",
      patterns: [
        {
          match: "(\\\\){1,2}[.$^\\[\\]{}]",
          name: "constant.character.escape.regex.php"
        },
        { include: "#interpolation" },
        {
          captures: {
            1: { name: "punctuation.definition.arbitrary-repitition.php" },
            3: { name: "punctuation.definition.arbitrary-repitition.php" }
          },
          match: "(\\{)\\d+(,\\d+)?(\\})",
          name: "string.regexp.arbitrary-repitition.php"
        },
        {
          begin: "\\[(?:\\^?\\])?",
          captures: { 0: { name: "punctuation.definition.character-class.php" } },
          end: "\\]",
          name: "string.regexp.character-class.php",
          patterns: [{ include: "#interpolation" }]
        },
        { match: "[$^+*]", name: "keyword.operator.regexp.php" }
      ]
    },
    "regex-single-quoted": {
      begin: "(?x)'/ (?= ( \\\\ (?: \\\\ (?: \\\\ [\\\\']? | [^'] ) | . ) | [^'/] )++/[imsxeADSUXu]*' )",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      end: "(/)([imsxeADSUXu]*)(')",
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.regexp.single-quoted.php",
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.arbitrary-repitition.php" },
            3: { name: "punctuation.definition.arbitrary-repitition.php" }
          },
          match: "(\\{)\\d+(,\\d+)?(\\})",
          name: "string.regexp.arbitrary-repitition.php"
        },
        {
          begin: "\\[(?:\\^?\\])?",
          captures: { 0: { name: "punctuation.definition.character-class.php" } },
          end: "\\]",
          name: "string.regexp.character-class.php",
          patterns: [{ include: "#single_quote_regex_escape" }]
        },
        { match: "[$^+*]", name: "keyword.operator.regexp.php" },
        { include: "#single_quote_regex_escape" }
      ],
      repository: {
        single_quote_regex_escape: {
          match: "(?x) \\\\ (?: \\\\ (?: \\\\ [\\\\']? | [^'] ) | . )",
          name: "constant.character.escape.php"
        }
      }
    },
    "sql-string-double-quoted": {
      begin: '"\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER)\\b)',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      contentName: "source.sql.embedded.php",
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.quoted.double.sql.php",
      patterns: [
        {
          match: '#(\\\\"|[^"])*(?="|$\\n?)',
          name: "comment.line.number-sign.sql"
        },
        {
          match: '--(\\\\"|[^"])*(?="|$\\n?)',
          name: "comment.line.double-dash.sql"
        },
        { match: "\\\\[\\\\\"`']", name: "constant.character.escape.php" },
        {
          match: `'(?=((\\\\')|[^'"])*("|$))`,
          name: "string.quoted.single.unclosed.sql"
        },
        {
          match: '`(?=((\\\\`)|[^`"])*("|$))',
          name: "string.quoted.other.backtick.unclosed.sql"
        },
        {
          begin: "'",
          end: "'",
          name: "string.quoted.single.sql",
          patterns: [{ include: "#interpolation" }]
        },
        {
          begin: "`",
          end: "`",
          name: "string.quoted.other.backtick.sql",
          patterns: [{ include: "#interpolation" }]
        },
        { include: "#interpolation" },
        { include: "source.sql" }
      ]
    },
    "sql-string-single-quoted": {
      begin: "'\\s*(?=(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER)\\b)",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      contentName: "source.sql.embedded.php",
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.quoted.single.sql.php",
      patterns: [
        {
          match: "#(\\\\'|[^'])*(?='|$\\n?)",
          name: "comment.line.number-sign.sql"
        },
        {
          match: "--(\\\\'|[^'])*(?='|$\\n?)",
          name: "comment.line.double-dash.sql"
        },
        { match: "\\\\[\\\\'`\"]", name: "constant.character.escape.php" },
        {
          match: "`(?=((\\\\`)|[^`'])*('|$))",
          name: "string.quoted.other.backtick.unclosed.sql"
        },
        {
          match: `"(?=((\\\\")|[^"'])*('|$))`,
          name: "string.quoted.double.unclosed.sql"
        },
        { include: "source.sql" }
      ]
    },
    "string-backtick": {
      begin: "`",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      end: "`",
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.interpolated.php",
      patterns: [
        { match: "\\\\.", name: "constant.character.escape.php" },
        { include: "#interpolation" }
      ]
    },
    "string-double-quoted": {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      contentName: "meta.string-contents.quoted.double.php",
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.quoted.double.php",
      patterns: [{ include: "#interpolation" }]
    },
    "string-single-quoted": {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.php" } },
      contentName: "meta.string-contents.quoted.single.php",
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.php" } },
      name: "string.quoted.single.php",
      patterns: [{ match: "\\\\[\\\\']", name: "constant.character.escape.php" }]
    },
    strings: {
      patterns: [
        { include: "#regex-double-quoted" },
        { include: "#sql-string-double-quoted" },
        { include: "#string-double-quoted" },
        { include: "#regex-single-quoted" },
        { include: "#sql-string-single-quoted" },
        { include: "#string-single-quoted" }
      ]
    },
    support: {
      patterns: [
        {
          match: "(?i)\\bapc_(s(tore|ma_info)|c(ompile_file|lear_cache|a(s|che_info))|inc|de(c|fine_constants|lete(_file)?)|exists|fetch|load_constants|add|bin_(dump(file)?|load(file)?))\\b",
          name: "support.function.apc.php"
        },
        {
          match: "(?i)\\bapcu_(s(tore|ma_info)|c(lear_cache|a(s|che_info))|inc|de(c|lete)|e(ntry|xists)|fetch|add)\\b",
          name: "support.function.apcu.php"
        },
        {
          match: "(?i)\\b(s(huffle|izeof|ort)|n(ext|at(sort|casesort))|c(o(unt|mpact)|urrent)|in_array|u(sort|ksort|asort)|p(os|rev)|e(nd|ach|xtract)|k(sort|ey(_exists)?|rsort)|list|a(sort|r(sort|ray(_(s(hift|um|plice|earch|lice)|c(h(unk|ange_key_case)|o(unt_values|lumn|mbine))|intersect(_(u(key|assoc)|key|assoc))?|diff(_(u(key|assoc)|key|assoc))?|u(n(shift|ique)|intersect(_(uassoc|assoc))?|diff(_(uassoc|assoc))?)|p(op|ush|ad|roduct)|values|key(s|_exists)|f(il(ter|l(_keys)?)|lip)|walk(_recursive)?|r(e(duce|place(_recursive)?|verse)|and)|m(ultisort|erge(_recursive)?|ap)))?))|r(sort|eset|ange))\\b",
          name: "support.function.array.php"
        },
        {
          match: "(?i)\\b(s(how_source|ys_getloadavg|leep)|highlight_(string|file)|con(stant|nection_(status|aborted))|time_(sleep_until|nanosleep)|ignore_user_abort|d(ie|efine(d)?)|u(sleep|n(iqid|pack))|__halt_compiler|p(hp_(strip_whitespace|check_syntax)|ack)|e(val|xit)|get_browser)\\b",
          name: "support.function.basic_functions.php"
        },
        {
          match: "(?i)\\bbc(s(cale|ub|qrt)|comp|div|pow(mod)?|add|m(od|ul))\\b",
          name: "support.function.bcmath.php"
        },
        { match: "(?i)\\bblenc_encrypt\\b", name: "support.function.blenc.php" },
        {
          match: "(?i)\\bMongoDB\\\\BSON\\\\(to(JSON|PHP)|from(JSON|PHP))\\b",
          name: "support.function.bson.php"
        },
        {
          match: "(?i)\\bbz(c(ompress|lose)|open|decompress|err(str|no|or)|flush|write|read)\\b",
          name: "support.function.bz2.php"
        },
        {
          match: "(?i)\\b(cal_(to_jd|info|days_in_month|from_jd)|unixtojd|j(d(to(unix|j(ulian|ewish)|french|gregorian)|dayofweek|monthname)|uliantojd|ewishtojd)|easter_da(ys|te)|frenchtojd|gregoriantojd)\\b",
          name: "support.function.calendar.php"
        },
        {
          match: "(?i)\\b(c(lass_(exists|alias)|all_user_method(_array)?)|trait_exists|i(s_(subclass_of|a)|nterface_exists)|__autoload|property_exists|get_(c(lass(_(vars|methods))?|alled_class)|object_vars|declared_(classes|traits|interfaces)|parent_class)|method_exists)\\b",
          name: "support.function.classobj.php"
        },
        {
          match: "(?i)\\b(com_(create_guid|print_typeinfo|event_sink|load_typelib|get_active_object|message_pump)|variant_(s(ub|et(_type)?)|n(ot|eg)|c(a(st|t)|mp)|i(nt|div|mp)|or|d(iv|ate_(to_timestamp|from_timestamp))|pow|eqv|fix|a(nd|dd|bs)|round|get_type|xor|m(od|ul)))\\b",
          name: "support.function.com.php"
        },
        {
          match: "(?i)\\brandom_(int|bytes)\\b",
          name: "support.function.csprng.php"
        },
        {
          match: "(?i)\\bctype_(space|cntrl|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit)\\b",
          name: "support.function.ctype.php"
        },
        {
          match: "(?i)\\bcurl_(s(hare_(setopt|close|init)|trerror|etopt(_array)?)|c(opy_handle|lose)|init|unescape|pause|e(scape|rr(no|or)|xec)|version|file_create|reset|getinfo|multi_(s(trerror|e(topt|lect))|close|in(it|fo_read)|exec|add_handle|remove_handle|getcontent))\\b",
          name: "support.function.curl.php"
        },
        {
          match: "(?i)\\b(str(totime|ptime|ftime)|checkdate|time(zone_(name_(from_abbr|get)|transitions_get|identifiers_list|o(pen|ffset_get)|version_get|location_get|abbreviations_list))?|idate|date(_(su(n(set|_info|rise)|b)|create(_(immutable(_from_format)?|from_format))?|time(stamp_(set|get)|zone_(set|get)|_set)|i(sodate_set|nterval_(create_from_date_string|format))|offset_get|d(iff|efault_timezone_(set|get)|ate_set)|parse(_from_format)?|format|add|get_last_errors|modify))?|localtime|g(et(timeofday|date)|m(strftime|date|mktime))|m(icrotime|ktime))\\b",
          name: "support.function.datetime.php"
        },
        {
          match: "(?i)\\bdba_(sync|handlers|nextkey|close|insert|op(timize|en)|delete|popen|exists|key_split|f(irstkey|etch)|list|replace)\\b",
          name: "support.function.dba.php"
        },
        {
          match: "(?i)\\bdbx_(sort|c(o(nnect|mpare)|lose)|e(scape_string|rror)|query|fetch_row)\\b",
          name: "support.function.dbx.php"
        },
        {
          match: "(?i)\\b(scandir|c(h(dir|root)|losedir)|opendir|dir|re(winddir|addir)|getcwd)\\b",
          name: "support.function.dir.php"
        },
        {
          match: "(?i)\\beio_(s(y(nc(_file_range|fs)?|mlink)|tat(vfs)?|e(ndfile|t_m(in_parallel|ax_(idle|p(oll_(time|reqs)|arallel)))|ek))|n(threads|op|pending|re(qs|ady))|c(h(own|mod)|ustom|lose|ancel)|truncate|init|open|dup2|u(nlink|time)|poll|event_loop|f(s(ync|tat(vfs)?)|ch(own|mod)|truncate|datasync|utime|allocate)|write|l(stat|ink)|r(e(name|a(d(dir|link|ahead)?|lpath))|mdir)|g(et_(event_stream|last_error)|rp(_(cancel|limit|add))?)|mk(nod|dir)|busy)\\b",
          name: "support.function.eio.php"
        },
        {
          match: "(?i)\\benchant_(dict_(s(tore_replacement|uggest)|check|is_in_session|describe|quick_check|add_to_(session|personal)|get_error)|broker_(set_(ordering|dict_path)|init|d(ict_exists|escribe)|free(_dict)?|list_dicts|request_(dict|pwl_dict)|get_(dict_path|error)))\\b",
          name: "support.function.enchant.php"
        },
        {
          match: "(?i)\\b(s(plit(i)?|ql_regcase)|ereg(i(_replace)?|_replace)?)\\b",
          name: "support.function.ereg.php"
        },
        {
          match: "(?i)\\b(set_e(rror_handler|xception_handler)|trigger_error|debug_(print_backtrace|backtrace)|user_error|error_(clear_last|log|reporting|get_last)|restore_e(rror_handler|xception_handler))\\b",
          name: "support.function.errorfunc.php"
        },
        {
          match: "(?i)\\b(s(hell_exec|ystem)|p(assthru|roc_(nice|close|terminate|open|get_status))|e(scapeshell(cmd|arg)|xec))\\b",
          name: "support.function.exec.php"
        },
        {
          match: "(?i)\\b(exif_(t(humbnail|agname)|imagetype|read_data)|read_exif_data)\\b",
          name: "support.function.exif.php"
        },
        {
          match: "(?i)\\bfann_(s(huffle_train_data|cale_(train(_data)?|input(_train_data)?|output(_train_data)?)|ubset_train_data|et_(s(caling_params|arprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift))|ca(scade_(num_candidate_groups|candidate_(stagnation_epochs|change_fraction|limit)|output_(stagnation_epochs|change_fraction)|weight_multiplier|activation_(steepnesses|functions)|m(in_(cand_epochs|out_epochs)|ax_(cand_epochs|out_epochs)))|llback)|train(ing_algorithm|_(stop_function|error_function))|input_scaling_params|output_scaling_params|error_log|quickprop_(decay|mu)|weight(_array)?|learning_(rate|momentum)|activation_(steepness(_(hidden|output|layer))?|function(_(hidden|output|layer))?)|rprop_(increase_factor|de(crease_factor|lta_(zero|m(in|ax))))|bit_fail_limit)|ave(_train)?)|num_(input_train_data|output_train_data)|c(opy|lear_scaling_params|ascadetrain_on_(data|file)|reate_(s(hortcut(_array)?|tandard(_array)?|parse(_array)?)|train(_from_callback)?|from_file))|t(est(_data)?|rain(_(on_(data|file)|epoch))?)|init_weights|d(uplicate_train_data|es(cale_(train|input|output)|troy(_train)?))|print_error|length_train_data|r(un|e(set_(MSE|err(str|no))|ad_train_from_file)|andomize_weights)|get_(sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|n(um_(input|output|layers)|etwork_type)|MSE|c(onnection_(array|rate)|ascade_(num_candidate(s|_groups)|candidate_(stagnation_epochs|change_fraction|limit)|output_(stagnation_epochs|change_fraction)|weight_multiplier|activation_(steepnesses(_count)?|functions(_count)?)|m(in_(cand_epochs|out_epochs)|ax_(cand_epochs|out_epochs))))|t(otal_(neurons|connections)|rain(ing_algorithm|_(stop_function|error_function)))|err(str|no)|quickprop_(decay|mu)|l(earning_(rate|momentum)|ayer_array)|activation_(steepness|function)|rprop_(increase_factor|de(crease_factor|lta_(zero|m(in|ax))))|bi(t_fail(_limit)?|as_array))|merge_train_data)\\b",
          name: "support.function.fann.php"
        },
        {
          match: "(?i)\\b(s(ymlink|tat|et_file_buffer)|c(h(own|grp|mod)|opy|learstatcache)|t(ouch|empnam|mpfile)|is_(dir|uploaded_file|executable|file|writ(eable|able)|link|readable)|d(i(sk(_(total_space|free_space)|freespace)|rname)|elete)|u(nlink|mask)|p(close|open|a(thinfo|rse_ini_(string|file)))|f(s(canf|tat|eek)|nmatch|close|t(ell|runcate)|ile(size|ctime|type|inode|owner|_(put_contents|exists|get_contents)|perms|atime|group|mtime)?|open|p(ut(s|csv)|assthru)|eof|flush|write|lock|read|get(s(s)?|c(sv)?))|l(stat|ch(own|grp)|ink(info)?)|r(e(name|wind|a(d(file|link)|lpath(_cache_(size|get))?))|mdir)|glob|m(ove_uploaded_file|kdir)|basename)\\b",
          name: "support.function.file.php"
        },
        {
          match: "(?i)\\b(finfo_(set_flags|close|open|file|buffer)|mime_content_type)\\b",
          name: "support.function.fileinfo.php"
        },
        {
          match: "(?i)\\bfilter_(has_var|i(nput(_array)?|d)|var(_array)?|list)\\b",
          name: "support.function.filter.php"
        },
        {
          match: "(?i)\\bfastcgi_finish_request\\b",
          name: "support.function.fpm.php"
        },
        {
          match: "(?i)\\b(c(all_user_func(_array)?|reate_function)|unregister_tick_function|f(orward_static_call(_array)?|unc(tion_exists|_(num_args|get_arg(s)?)))|register_(shutdown_function|tick_function)|get_defined_functions)\\b",
          name: "support.function.funchand.php"
        },
        {
          match: "(?i)\\b(ngettext|textdomain|d(ngettext|c(ngettext|gettext)|gettext)|gettext|bind(textdomain|_textdomain_codeset))\\b",
          name: "support.function.gettext.php"
        },
        {
          match: "(?i)\\bgmp_(s(can(1|0)|trval|ign|ub|etbit|qrt(rem)?)|hamdist|ne(g|xtprime)|c(om|lrbit|mp)|testbit|i(n(tval|it|vert)|mport)|or|div(_(q(r)?|r)|exact)?|jacobi|p(o(pcount|w(m)?)|erfect_square|rob_prime)|export|fact|legendre|a(nd|dd|bs)|r(oot(rem)?|andom(_(seed|range|bits))?)|gcd(ext)?|xor|m(od|ul))\\b",
          name: "support.function.gmp.php"
        },
        {
          match: "(?i)\\bhash(_(h(kdf|mac(_file)?)|copy|init|update(_(stream|file))?|pbkdf2|equals|fi(nal|le)|algos))?\\b",
          name: "support.function.hash.php"
        },
        {
          match: "(?i)\\b(iconv(_(s(tr(pos|len|rpos)|ubstr|et_encoding)|get_encoding|mime_(decode(_headers)?|encode)))?|ob_iconv_handler)\\b",
          name: "support.function.iconv.php"
        },
        {
          match: "(?i)\\biis_(s(t(op_serv(ice|er)|art_serv(ice|er))|et_(s(cript_map|erver_rights)|dir_security|app_settings))|add_server|remove_server|get_(s(cript_map|erv(ice_state|er_(rights|by_(comment|path))))|dir_security))\\b",
          name: "support.function.iisfunc.php"
        },
        {
          match: "(?i)\\b(i(ptc(parse|embed)|mage(s(y|cale|tring(up)?|et(style|clip|t(hickness|ile)|interpolation|pixel|brush)|avealpha|x)|c(har(up)?|o(nvolution|py(res(ized|ampled)|merge(gray)?)?|lor(s(total|et|forindex)|closest(hwb|alpha)?|transparent|deallocate|exact(alpha)?|a(t|llocate(alpha)?)|resolve(alpha)?|match))|r(op(auto)?|eate(truecolor|from(string|jpeg|png|w(ebp|bmp)|g(if|d(2(part)?)?)|x(pm|bm)|bmp))?))|t(ypes|tf(text|bbox)|ruecolortopalette)|i(struecolor|nterlace)|2wbmp|openpolygon|d(estroy|ashedline)|jpeg|_type_to_(extension|mime_type)|p(s(slantfont|text|e(ncodefont|xtendfont)|freefont|loadfont|bbox)|ng|olygon|alette(copy|totruecolor))|ellipse|f(t(text|bbox)|il(ter|l(toborder|ed(polygon|ellipse|arc|rectangle))?)|ont(height|width)|lip)|w(ebp|bmp)|l(ine|oadfont|ayereffect)|a(ntialias|ffine(matrix(concat|get))?|lphablending|rc)|r(otate|e(solution|ctangle))|g(if|d(2)?|etclip|ammacorrect|rab(screen|window))|xbm|bmp))|jpeg2wbmp|png2wbmp|g(d_info|etimagesize(fromstring)?))\\b",
          name: "support.function.image.php"
        },
        {
          match: "(?i)\\b(s(ys_get_temp_dir|et_(time_limit|include_path|magic_quotes_runtime))|cli_(set_process_title|get_process_title)|ini_(set|alter|restore|get(_all)?)|zend_(thread_id|version|logo_guid)|dl|p(hp(credits|info|_(sapi_name|ini_(scanned_files|loaded_file)|uname|logo_guid)|version)|utenv)|extension_loaded|version_compare|assert(_options)?|restore_include_path|g(c_(collect_cycles|disable|enable(d)?|mem_caches)|et(opt|_(c(urrent_user|fg_var)|include(d_files|_path)|defined_constants|extension_funcs|loaded_extensions|re(sources|quired_files)|magic_quotes_(runtime|gpc))|env|lastmod|rusage|my(inode|uid|pid|gid)))|m(emory_get_(usage|peak_usage)|a(in|gic_quotes_runtime)))\\b",
          name: "support.function.info.php"
        },
        {
          match: "(?i)\\bibase_(se(t_event_handler|rv(ice_(detach|attach)|er_info))|n(um_(params|fields)|ame_result)|c(o(nnect|mmit(_ret)?)|lose)|trans|d(elete_user|rop_db|b_info)|p(connect|aram_info|repare)|e(rr(code|msg)|xecute)|query|f(ield_info|etch_(object|assoc|row)|ree_(event_handler|query|result))|wait_event|a(dd_user|ffected_rows)|r(ollback(_ret)?|estore)|gen_id|m(odify_user|aintain_db)|b(lob_(c(lose|ancel|reate)|i(nfo|mport)|open|echo|add|get)|ackup))\\b",
          name: "support.function.interbase.php"
        },
        {
          match: "(?i)\\b(n(ormalizer_(normalize|is_normalized)|umfmt_(set_(symbol|text_attribute|pattern|attribute)|create|parse(_currency)?|format(_currency)?|get_(symbol|text_attribute|pattern|error_(code|message)|locale|attribute)))|collator_(s(ort(_with_sort_keys)?|et_(strength|attribute))|c(ompare|reate)|asort|get_(s(trength|ort_key)|error_(code|message)|locale|attribute))|transliterator_(create(_(inverse|from_rules))?|transliterate|list_ids|get_error_(code|message))|i(ntl(cal_get_error_(code|message)|tz_get_error_(code|message)|_(is_failure|error_name|get_error_(code|message)))|dn_to_(utf8|ascii))|datefmt_(set_(calendar|timezone(_id)?|pattern|lenient)|create|is_lenient|parse|format(_object)?|localtime|get_(calendar(_object)?|time(type|zone(_id)?)|datetype|pattern|error_(code|message)|locale))|locale_(set_default|c(ompose|anonicalize)|parse|filter_matches|lookup|accept_from_http|get_(script|d(isplay_(script|name|variant|language|region)|efault)|primary_language|keywords|all_variants|region))|resourcebundle_(c(ount|reate)|locales|get(_error_(code|message))?)|grapheme_(s(tr(str|i(str|pos)|pos|len|r(ipos|pos))|ubstr)|extract)|msgfmt_(set_pattern|create|parse(_message)?|format(_message)?|get_(pattern|error_(code|message)|locale)))\\b",
          name: "support.function.intl.php"
        },
        {
          match: "(?i)\\bjson_(decode|encode|last_error(_msg)?)\\b",
          name: "support.function.json.php"
        },
        {
          match: "(?i)\\bldap_(s(tart_tls|ort|e(t_(option|rebind_proc)|arch)|asl_bind)|next_(entry|attribute|reference)|c(o(n(nect|trol_paged_result(_response)?)|unt_entries|mpare)|lose)|t61_to_8859|d(n2ufn|elete)|8859_to_t61|unbind|parse_re(sult|ference)|e(scape|rr(no|2str|or)|xplode_dn)|f(irst_(entry|attribute|reference)|ree_result)|list|add|re(name|ad)|get_(option|dn|entries|values(_len)?|attributes)|mod(ify(_batch)?|_(del|add|replace))|bind)\\b",
          name: "support.function.ldap.php"
        },
        {
          match: "(?i)\\blibxml_(set_(streams_context|external_entity_loader)|clear_errors|disable_entity_loader|use_internal_errors|get_(errors|last_error))\\b",
          name: "support.function.libxml.php"
        },
        {
          match: "(?i)\\b(ezmlm_hash|mail)\\b",
          name: "support.function.mail.php"
        },
        {
          match: "(?i)\\b(s(in(h)?|qrt|rand)|h(ypot|exdec)|c(os(h)?|eil)|tan(h)?|i(s_(nan|infinite|finite)|ntdiv)|octdec|de(c(hex|oct|bin)|g2rad)|p(i|ow)|exp(m1)?|f(loor|mod)|l(cg_value|og(1(p|0))?)|a(sin(h)?|cos(h)?|tan(h|2)?|bs)|r(ound|a(nd|d2deg))|getrandmax|m(t_(srand|rand|getrandmax)|in|ax)|b(indec|ase_convert))\\b",
          name: "support.function.math.php"
        },
        {
          match: "(?i)\\bmb_(s(tr(str|cut|to(upper|lower)|i(str|pos|mwidth)|pos|width|len|r(chr|i(chr|pos)|pos))|ubst(itute_character|r(_count)?)|plit|end_mail)|http_(input|output)|c(heck_encoding|onvert_(case|encoding|variables|kana))|internal_encoding|output_handler|de(code_(numericentity|mimeheader)|tect_(order|encoding))|p(arse_str|referred_mime_name)|e(ncod(ing_aliases|e_(numericentity|mimeheader))|reg(i(_replace)?|_(search(_(setpos|init|pos|regs|get(pos|regs)))?|replace(_callback)?|match))?)|l(ist_encodings|anguage)|regex_(set_options|encoding)|get_info)\\b",
          name: "support.function.mbstring.php"
        },
        {
          match: "(?i)\\bm(crypt_(c(fb|reate_iv|bc)|ofb|decrypt|e(nc(_(self_test|is_block_(algorithm(_mode)?|mode)|get_(supported_key_sizes|iv_size|key_size|algorithms_name|modes_name|block_size))|rypt)|cb)|list_(algorithms|modes)|ge(neric(_(init|deinit|end))?|t_(cipher_name|iv_size|key_size|block_size))|module_(self_test|close|is_block_(algorithm(_mode)?|mode)|open|get_(supported_key_sizes|algo_(key_size|block_size))))|decrypt_generic)\\b",
          name: "support.function.mcrypt.php"
        },
        {
          match: "(?i)\\bmemcache_debug\\b",
          name: "support.function.memcache.php"
        },
        {
          match: "(?i)\\bmhash(_(count|keygen_s2k|get_(hash_name|block_size)))?\\b",
          name: "support.function.mhash.php"
        },
        {
          match: "(?i)\\b(log_(cmd_(insert|delete|update)|killcursor|write_batch|reply|getmore)|bson_(decode|encode))\\b",
          name: "support.function.mongo.php"
        },
        {
          match: "(?i)\\bmysql_(s(tat|e(t_charset|lect_db))|num_(fields|rows)|c(onnect|l(ient_encoding|ose)|reate_db)|t(hread_id|ablename)|in(sert_id|fo)|d(ata_seek|rop_db|b_(name|query))|unbuffered_query|p(connect|ing)|e(scape_string|rr(no|or))|query|f(ield_(seek|name|t(ype|able)|flags|len)|etch_(object|field|lengths|a(ssoc|rray)|row)|ree_result)|list_(tables|dbs|processes|fields)|affected_rows|re(sult|al_escape_string)|get_(server_info|host_info|client_info|proto_info))\\b",
          name: "support.function.mysql.php"
        },
        {
          match: "(?i)\\bmysqli_(s(sl_set|t(ore_result|at|mt_(s(tore_result|end_long_data)|next_result|close|init|data_seek|prepare|execute|f(etch|ree_result)|attr_(set|get)|res(ult_metadata|et)|get_(warnings|result)|more_results|bind_(param|result)))|e(nd_(query|long_data)|t_(charset|opt|local_infile_(handler|default))|lect_db)|lave_query|avepoint)|next_result|c(ha(nge_user|racter_set_name)|o(nnect|mmit)|l(ient_encoding|ose))|thread_safe|init|options|d(isable_r(pl_parse|eads_from_master)|ump_debug_info|ebug|ata_seek)|use_result|p(ing|oll|aram_count|repare)|e(scape_string|nable_r(pl_parse|eads_from_master)|xecute|mbedded_server_(start|end))|kill|query|f(ield_seek|etch(_(object|field(s|_direct)?|a(ssoc|ll|rray)|row))?|ree_result)|autocommit|r(ollback|pl_(p(arse_enabled|robe)|query_type)|e(port|fresh|lease_savepoint|a(p_async_query|l_(connect|escape_string|query))))|get_(c(harset|onnection_stats|lient_(stats|info|version)|ache_stats)|warnings|links_stats|metadata)|m(ore_results|ulti_query|aster_query)|b(ind_(param|result)|egin_transaction))\\b",
          name: "support.function.mysqli.php"
        },
        {
          match: "(?i)\\bmysqlnd_memcache_(set|get_config)\\b",
          name: "support.function.mysqlnd-memcache.php"
        },
        {
          match: "(?i)\\bmysqlnd_ms_(set_(user_pick_server|qos)|dump_servers|query_is_select|fabric_select_(shard|global)|get_(stats|last_(used_connection|gtid))|xa_(commit|rollback|gc|begin)|match_wild)\\b",
          name: "support.function.mysqlnd-ms.php"
        },
        {
          match: "(?i)\\bmysqlnd_qc_(set_(storage_handler|cache_condition|is_select|user_handlers)|clear_cache|get_(normalized_query_trace_log|c(ore_stats|ache_info)|query_trace_log|available_handlers))\\b",
          name: "support.function.mysqlnd-qc.php"
        },
        {
          match: "(?i)\\bmysqlnd_uh_(set_(statement_proxy|connection_proxy)|convert_to_mysqlnd)\\b",
          name: "support.function.mysqlnd-uh.php"
        },
        {
          match: "(?i)\\b(s(yslog|ocket_(set_(timeout|blocking)|get_status)|et(cookie|rawcookie))|h(ttp_response_code|eader(s_(sent|list)|_re(gister_callback|move))?)|c(heckdnsrr|loselog)|i(net_(ntop|pton)|p2long)|openlog|d(ns_(check_record|get_(record|mx))|efine_syslog_variables)|pfsockopen|fsockopen|long2ip|get(servby(name|port)|host(name|by(name(l)?|addr))|protobyn(umber|ame)|mxrr))\\b",
          name: "support.function.network.php"
        },
        {
          match: "(?i)\\bnsapi_(virtual|re(sponse_headers|quest_headers))\\b",
          name: "support.function.nsapi.php"
        },
        {
          match: "(?i)\\boci(s(tatementtype|e(tprefetch|rverversion)|avelob(file)?)|n(umcols|ew(c(ollection|ursor)|descriptor)|logon)|c(o(l(umn(s(cale|ize)|name|type(raw)?|isnull|precision)|l(size|trim|a(ssign(elem)?|ppend)|getelem|max))|mmit)|loselob|ancel)|internaldebug|definebyname|_(s(tatement_type|e(t_(client_i(nfo|dentifier)|prefetch|edition|action|module_name)|rver_version))|n(um_(fields|rows)|ew_(c(o(nnect|llection)|ursor)|descriptor))|c(o(nnect|mmit)|l(ient_version|ose)|ancel)|internal_debug|d(isable_taf_callback|efine_by_name)|p(connect|a(ssword_change|rse))|e(rror|xecute)|f(ield_(s(cale|ize)|name|type(_raw)?|is_null|precision)|etch(_(object|a(ssoc|ll|rray)|row))?|ree_(statement|descriptor))|lob_(copy|is_equal)|r(ollback|e(sult|gister_taf_callback))|get_implicit_resultset|bind_(array_by_name|by_name))|p(logon|arse)|e(rror|xecute)|f(etch(statement|into)?|ree(statement|c(ollection|ursor)|desc))|write(temporarylob|lobtofile)|lo(adlob|go(n|ff))|r(o(wcount|llback)|esult)|bindbyname)\\b",
          name: "support.function.oci8.php"
        },
        {
          match: "(?i)\\bopcache_(compile_file|i(s_script_cached|nvalidate)|reset|get_(status|configuration))\\b",
          name: "support.function.opcache.php"
        },
        {
          match: "(?i)\\bopenssl_(s(ign|pki_(new|export(_challenge)?|verify)|eal)|c(sr_(sign|new|export(_to_file)?|get_(subject|public_key))|ipher_iv_length)|open|d(h_compute_key|igest|ecrypt)|p(ublic_(decrypt|encrypt)|k(cs(12_(export(_to_file)?|read)|7_(sign|decrypt|encrypt|verify))|ey_(new|export(_to_file)?|free|get_(details|p(ublic|rivate))))|rivate_(decrypt|encrypt)|bkdf2)|e(ncrypt|rror_string)|verify|free_key|random_pseudo_bytes|get_(c(ipher_methods|ert_locations)|p(ublickey|rivatekey)|md_methods)|x509_(check(_private_key|purpose)|parse|export(_to_file)?|f(ingerprint|ree)|read))\\b",
          name: "support.function.openssl.php"
        },
        {
          match: "(?i)\\b(o(utput_(add_rewrite_var|reset_rewrite_vars)|b_(start|clean|implicit_flush|end_(clean|flush)|flush|list_handlers|g(zhandler|et_(status|c(ontents|lean)|flush|le(ngth|vel)))))|flush)\\b",
          name: "support.function.output.php"
        },
        {
          match: "(?i)\\bpassword_(hash|needs_rehash|verify|get_info)\\b",
          name: "support.function.password.php"
        },
        {
          match: "(?i)\\bpcntl_(s(trerror|ig(nal(_(dispatch|get_handler))?|timedwait|procmask|waitinfo)|etpriority)|e(rrno|xec)|fork|w(stopsig|termsig|if(s(topped|ignaled)|exited)|exitstatus|ait(pid)?)|alarm|get(_last_error|priority))\\b",
          name: "support.function.pcntl.php"
        },
        {
          match: "(?i)\\bpg_(s(ocket|e(nd_(prepare|execute|query(_params)?)|t_(client_encoding|error_verbosity)|lect))|host|num_(fields|rows)|c(o(n(sume_input|nect(ion_(status|reset|busy)|_poll)?|vert)|py_(to|from))|l(ient_encoding|ose)|ancel_query)|t(ty|ra(nsaction_status|ce))|insert|options|d(elete|bname)|u(n(trace|escape_bytea)|pdate)|p(connect|ing|ort|ut_line|arameter_status|repare)|e(scape_(string|identifier|literal|bytea)|nd_copy|xecute)|version|query(_params)?|f(ield_(size|n(um|ame)|t(ype(_oid)?|able)|is_null|prtlen)|etch_(object|a(ssoc|ll(_columns)?|rray)|r(ow|esult))|lush|ree_result)|l(o_(seek|c(lose|reate)|t(ell|runcate)|import|open|unlink|export|write|read(_all)?)|ast_(notice|oid|error))|affected_rows|result_(s(tatus|eek)|error(_field)?)|get_(notify|pid|result)|meta_data)\\b",
          name: "support.function.pgsql.php"
        },
        {
          match: "(?i)\\b(virtual|apache_(setenv|note|child_terminate|lookup_uri|re(s(ponse_headers|et_timeout)|quest_headers)|get(_(version|modules)|env))|getallheaders)\\b",
          name: "support.function.php_apache.php"
        },
        {
          match: "(?i)\\bdom_import_simplexml\\b",
          name: "support.function.php_dom.php"
        },
        {
          match: "(?i)\\bftp_(s(sl_connect|ystype|i(te|ze)|et_option)|n(list|b_(continue|put|f(put|get)|get))|c(h(dir|mod)|onnect|dup|lose)|delete|p(ut|wd|asv)|exec|quit|f(put|get)|login|alloc|r(ename|aw(list)?|mdir)|get(_option)?|m(dtm|kdir))\\b",
          name: "support.function.php_ftp.php"
        },
        {
          match: "(?i)\\bimap_(s(can(mailbox)?|tatus|ort|ubscribe|e(t(_quota|flag_full|acl)|arch)|avebody)|header(s|info)?|num_(recent|msg)|c(heck|l(ose|earflag_full)|reate(mailbox)?)|t(hread|imeout)|open|delete(mailbox)?|8bit|u(n(subscribe|delete)|tf(7_(decode|encode)|8)|id)|ping|e(rrors|xpunge)|qprint|fetch(structure|header|text|_overview|mime|body)|l(sub|ist(s(can|ubscribed)|mailbox)?|ast_error)|a(ppend|lerts)|r(e(name(mailbox)?|open)|fc822_(parse_(headers|adrlist)|write_address))|g(c|et(subscribed|_quota(root)?|acl|mailboxes))|m(sgno|ime_header_decode|ail(_(co(py|mpose)|move)|boxmsginfo)?)|b(inary|ody(struct)?|ase64))\\b",
          name: "support.function.php_imap.php"
        },
        {
          match: "(?i)\\bmssql_(select_db|n(um_(fields|rows)|ext_result)|c(onnect|lose)|init|data_seek|pconnect|execute|query|f(ield_(seek|name|type|length)|etch_(object|field|a(ssoc|rray)|row|batch)|ree_(statement|result))|r(ows_affected|esult)|g(uid_string|et_last_message)|min_(error_severity|message_severity)|bind)\\b",
          name: "support.function.php_mssql.php"
        },
        {
          match: "(?i)\\bodbc_(s(tatistics|pecialcolumns|etoption)|n(um_(fields|rows)|ext_result)|c(o(nnect|lumn(s|privileges)|mmit)|ursor|lose(_all)?)|table(s|privileges)|d(o|ata_source)|p(connect|r(imarykeys|ocedure(s|columns)|epare))|e(rror(msg)?|xec(ute)?)|f(ield_(scale|n(um|ame)|type|precision|len)|oreignkeys|etch_(into|object|array|row)|ree_result)|longreadlen|autocommit|r(ollback|esult(_all)?)|gettypeinfo|binmode)\\b",
          name: "support.function.php_odbc.php"
        },
        {
          match: "(?i)\\bpreg_(split|quote|filter|last_error|replace(_callback(_array)?)?|grep|match(_all)?)\\b",
          name: "support.function.php_pcre.php"
        },
        {
          match: "(?i)\\b(spl_(classes|object_hash|autoload(_(call|unregister|extensions|functions|register))?)|class_(implements|uses|parents)|iterator_(count|to_array|apply))\\b",
          name: "support.function.php_spl.php"
        },
        {
          match: "(?i)\\bzip_(close|open|entry_(name|c(ompress(ionmethod|edsize)|lose)|open|filesize|read)|read)\\b",
          name: "support.function.php_zip.php"
        },
        {
          match: "(?i)\\bposix_(s(trerror|et(sid|uid|pgid|e(uid|gid)|rlimit|gid))|ctermid|t(tyname|imes)|i(satty|nitgroups)|uname|errno|kill|access|get(sid|cwd|uid|_last_error|p(id|pid|w(nam|uid)|g(id|rp))|e(uid|gid)|login|rlimit|g(id|r(nam|oups|gid)))|mk(nod|fifo))\\b",
          name: "support.function.posix.php"
        },
        {
          match: "(?i)\\bset(threadtitle|proctitle)\\b",
          name: "support.function.proctitle.php"
        },
        {
          match: "(?i)\\bpspell_(s(tore_replacement|uggest|ave_wordlist)|new(_(config|personal))?|c(heck|onfig_(save_repl|create|ignore|d(ict_dir|ata_dir)|personal|r(untogether|epl)|mode)|lear_session)|add_to_(session|personal))\\b",
          name: "support.function.pspell.php"
        },
        {
          match: "(?i)\\breadline(_(c(ompletion_function|lear_history|allback_(handler_(install|remove)|read_char))|info|on_new_line|write_history|list_history|add_history|re(display|ad_history)))?\\b",
          name: "support.function.readline.php"
        },
        {
          match: "(?i)\\brecode(_(string|file))?\\b",
          name: "support.function.recode.php"
        },
        {
          match: "(?i)\\brrd(c_disconnect|_(create|tune|info|update|error|version|f(irst|etch)|last(update)?|restore|graph|xport))\\b",
          name: "support.function.rrd.php"
        },
        {
          match: "(?i)\\b(s(hm_(has_var|detach|put_var|attach|remove(_var)?|get_var)|em_(acquire|re(lease|move)|get))|ftok|msg_(s(tat_queue|e(nd|t_queue))|queue_exists|re(ceive|move_queue)|get_queue))\\b",
          name: "support.function.sem.php"
        },
        {
          match: "(?i)\\bsession_(s(ta(tus|rt)|et_(save_handler|cookie_params)|ave_path)|name|c(ommit|ache_(expire|limiter)|reate_id)|i(s_registered|d)|de(stroy|code)|un(set|register)|encode|write_close|abort|re(set|g(ister(_shutdown)?|enerate_id))|g(c|et_cookie_params)|module_name)\\b",
          name: "support.function.session.php"
        },
        {
          match: "(?i)\\bshmop_(size|close|open|delete|write|read)\\b",
          name: "support.function.shmop.php"
        },
        {
          match: "(?i)\\bsimplexml_(import_dom|load_(string|file))\\b",
          name: "support.function.simplexml.php"
        },
        {
          match: "(?i)\\bsnmp(set|2_(set|walk|real_walk|get(next)?)|_(set_(oid_(numeric_print|output_format)|enum_print|valueretrieval|quick_print)|read_mib|get_(valueretrieval|quick_print))|3_(set|walk|real_walk|get(next)?)|walk(oid)?|realwalk|get(next)?)\\b",
          name: "support.function.snmp.php"
        },
        {
          match: "(?i)\\b(is_soap_fault|use_soap_error_handler)\\b",
          name: "support.function.soap.php"
        },
        {
          match: "(?i)\\bsocket_(s(hutdown|trerror|e(nd(to|msg)?|t(opt|_(nonblock|option|block))|lect))|c(onnect|l(ose|ear_error)|reate(_(pair|listen))?|msg_space)|import_stream|write|l(isten|ast_error)|accept|re(cv(from|msg)?|ad)|get(sockname|opt|_option|peername)|bind)\\b",
          name: "support.function.sockets.php"
        },
        {
          match: "(?i)\\bsqlite_(s(ingle_query|eek)|has_(prev|more)|n(um_(fields|rows)|ext)|c(hanges|olumn|urrent|lose|reate_(function|aggregate))|open|u(nbuffered_query|df_(decode_binary|encode_binary))|p(open|rev)|e(scape_string|rror_string|xec)|valid|key|query|f(ield_name|etch_(s(tring|ingle)|column_types|object|a(ll|rray))|actory)|l(ib(encoding|version)|ast_(insert_rowid|error))|array_query|rewind|busy_timeout)\\b",
          name: "support.function.sqlite.php"
        },
        {
          match: "(?i)\\bsqlsrv_(se(nd_stream_data|rver_info)|has_rows|n(um_(fields|rows)|ext_result)|c(o(n(nect|figure)|mmit)|l(ient_info|ose)|ancel)|prepare|e(rrors|xecute)|query|f(ield_metadata|etch(_(object|array))?|ree_stmt)|ro(ws_affected|llback)|get_(config|field)|begin_transaction)\\b",
          name: "support.function.sqlsrv.php"
        },
        {
          match: "(?i)\\bstats_(s(ta(ndard_deviation|t_(noncentral_t|correlation|in(nerproduct|dependent_t)|p(owersum|ercentile|aired_t)|gennch|binomial_coef))|kew)|harmonic_mean|c(ovariance|df_(n(oncentral_(chisquare|f)|egative_binomial)|c(hisquare|auchy)|t|uniform|poisson|exponential|f|weibull|l(ogistic|aplace)|gamma|b(inomial|eta)))|den(s_(n(ormal|egative_binomial)|c(hisquare|auchy)|t|pmf_(hypergeometric|poisson|binomial)|exponential|f|weibull|l(ogistic|aplace)|gamma|beta)|_uniform)|variance|kurtosis|absolute_deviation|rand_(setall|phrase_to_seeds|ranf|ge(n_(no(ncen(tral_(t|f)|ral_chisquare)|rmal)|chisquare|t|i(nt|uniform|poisson|binomial(_negative)?)|exponential|f(uniform)?|gamma|beta)|t_seeds)))\\b",
          name: "support.function.stats.php"
        },
        {
          match: "(?i)\\bs(tream_(s(ocket_(s(hutdown|e(ndto|rver))|client|pair|enable_crypto|accept|recvfrom|get_name)|upports_lock|e(t_(chunk_size|timeout|write_buffer|read_buffer|blocking)|lect))|notification_callback|co(ntext_(set_(option|default|params)|create|get_(options|default|params))|py_to_stream)|is_local|encoding|filter_(prepend|append|re(gister|move))|wrapper_(unregister|re(store|gister))|re(solve_include_path|gister_wrapper)|get_(contents|transports|filters|wrappers|line|meta_data)|bucket_(new|prepend|append|make_writeable))|et_socket_blocking)\\b",
          name: "support.function.streamsfuncs.php"
        },
        {
          match: "(?i)\\b(s(scanf|ha1(_file)?|tr(s(tr|pn)|n(c(asecmp|mp)|atc(asecmp|mp))|c(spn|hr|oll|asecmp|mp)|t(o(upper|k|lower)|r)|i(str|p(slashes|cslashes|os|_tags))|_(s(huffle|plit)|ireplace|pad|word_count|r(ot13|ep(eat|lace))|getcsv)|p(os|brk)|len|r(chr|ipos|pos|ev))|imilar_text|oundex|ubstr(_(co(unt|mpare)|replace))?|printf|etlocale)|h(tml(specialchars(_decode)?|_entity_decode|entities)|e(x2bin|brev(c)?))|n(umber_format|l(2br|_langinfo))|c(h(op|unk_split|r)|o(nvert_(cyr_string|uu(decode|encode))|unt_chars)|r(ypt|c32))|trim|implode|ord|uc(first|words)|join|p(arse_str|rint(f)?)|e(cho|xplode)|v(sprintf|printf|fprintf)|quote(d_printable_(decode|encode)|meta)|fprintf|wordwrap|l(cfirst|trim|ocaleconv|evenshtein)|add(slashes|cslashes)|rtrim|get_html_translation_table|m(oney_format|d5(_file)?|etaphone)|bin2hex)\\b",
          name: "support.function.string.php"
        },
        {
          match: "(?i)\\bsybase_(se(t_message_handler|lect_db)|num_(fields|rows)|c(onnect|lose)|d(eadlock_retry_count|ata_seek)|unbuffered_query|pconnect|query|f(ield_seek|etch_(object|field|a(ssoc|rray)|row)|ree_result)|affected_rows|result|get_last_message|min_(server_severity|client_severity|error_severity|message_severity))\\b",
          name: "support.function.sybase.php"
        },
        {
          match: "(?i)\\b(taint|is_tainted|untaint)\\b",
          name: "support.function.taint.php"
        },
        {
          match: "(?i)\\b(tidy_(s(et(opt|_encoding)|ave_config)|c(onfig_count|lean_repair)|is_x(html|ml)|diagnose|parse_(string|file)|error_count|warning_count|load_config|access_count|re(set_config|pair_(string|file))|get(opt|_(status|h(tml(_ver)?|ead)|config|o(utput|pt_doc)|r(oot|elease)|body)))|ob_tidyhandler)\\b",
          name: "support.function.tidy.php"
        },
        {
          match: "(?i)\\btoken_(name|get_all)\\b",
          name: "support.function.tokenizer.php"
        },
        {
          match: "(?i)\\btrader_(s(t(och(f|rsi)?|ddev)|in(h)?|u(m|b)|et_(compat|unstable_period)|qrt|ar(ext)?|ma)|ht_(sine|trend(line|mode)|dcp(hase|eriod)|phasor)|natr|c(ci|o(s(h)?|rrel)|dl(s(ho(otingstar|rtline)|t(icksandwich|alledpattern)|pinningtop|eparatinglines)|h(i(kkake(mod)?|ghwave)|omingpigeon|a(ngingman|rami(cross)?|mmer))|c(o(ncealbabyswall|unterattack)|losingmarubozu)|t(hrusting|a(sukigap|kuri)|ristar)|i(n(neck|vertedhammer)|dentical3crows)|2crows|onneck|d(oji(star)?|arkcloudcover|ragonflydoji)|u(nique3river|psidegap2crows)|3(starsinsouth|inside|outside|whitesoldiers|linestrike|blackcrows)|piercing|e(ngulfing|vening(star|dojistar))|kicking(bylength)?|l(ongl(ine|eggeddoji)|adderbottom)|a(dvanceblock|bandonedbaby)|ri(sefall3methods|ckshawman)|g(apsidesidewhite|ravestonedoji)|xsidegap3methods|m(orning(star|dojistar)|a(t(hold|chinglow)|rubozu))|b(elthold|reakaway))|eil|mo)|t(sf|ypprice|3|ema|an(h)?|r(i(x|ma)|ange))|obv|d(iv|ema|x)|ultosc|p(po|lus_d(i|m))|e(rrno|xp|ma)|var|kama|floor|w(clprice|illr|ma)|l(n|inearreg(_(slope|intercept|angle))?|og10)|a(sin|cos|t(an|r)|d(osc|d|x(r)?)?|po|vgprice|roon(osc)?)|r(si|oc(p|r(100)?)?)|get_(compat|unstable_period)|m(i(n(index|us_d(i|m)|max(index)?)?|dp(oint|rice))|om|ult|edprice|fi|a(cd(ext|fix)?|vp|x(index)?|ma)?)|b(op|eta|bands))\\b",
          name: "support.function.trader.php"
        },
        {
          match: "(?i)\\bUI\\\\(Draw\\\\Text\\\\Font\\\\fontFamilies|quit|run)\\b",
          name: "support.function.ui.php"
        },
        {
          match: "(?i)\\buopz_(co(py|mpose)|implement|overload|delete|undefine|extend|f(unction|lags)|re(store|name|define)|backup)\\b",
          name: "support.function.uopz.php"
        },
        {
          match: "(?i)\\b(http_build_query|url(decode|encode)|parse_url|rawurl(decode|encode)|get_(headers|meta_tags)|base64_(decode|encode))\\b",
          name: "support.function.url.php"
        },
        {
          match: "(?i)\\b(s(trval|e(ttype|rialize))|i(s(set|_(s(calar|tring)|nu(ll|meric)|callable|i(nt(eger)?|terable)|object|double|float|long|array|re(source|al)|bool))|ntval|mport_request_variables)|d(oubleval|ebug_zval_dump)|unse(t|rialize)|print_r|empty|var_(dump|export)|floatval|get(type|_(defined_vars|resource_type))|boolval)\\b",
          name: "support.function.var.php"
        },
        {
          match: "(?i)\\bwddx_(serialize_va(lue|rs)|deserialize|packet_(start|end)|add_vars)\\b",
          name: "support.function.wddx.php"
        },
        {
          match: "(?i)\\bxhprof_(sample_(disable|enable)|disable|enable)\\b",
          name: "support.function.xhprof.php"
        },
        {
          match: "(?i)\\b(utf8_(decode|encode)|xml_(set_(start_namespace_decl_handler|notation_decl_handler|character_data_handler|object|default_handler|unparsed_entity_decl_handler|processing_instruction_handler|e(nd_namespace_decl_handler|lement_handler|xternal_entity_ref_handler))|parse(_into_struct|r_(set_option|create(_ns)?|free|get_option))?|error_string|get_(current_(column_number|line_number|byte_index)|error_code)))\\b",
          name: "support.function.xml.php"
        },
        {
          match: "(?i)\\bxmlrpc_(se(t_type|rver_(c(all_method|reate)|destroy|add_introspection_data|register_(introspection_callback|method)))|is_fault|decode(_request)?|parse_method_descriptions|encode(_request)?|get_type)\\b",
          name: "support.function.xmlrpc.php"
        },
        {
          match: "(?i)\\bxmlwriter_(s(tart_(c(omment|data)|d(td(_(e(ntity|lement)|attlist))?|ocument)|pi|element(_ns)?|attribute(_ns)?)|et_indent(_string)?)|text|o(utput_memory|pen_(uri|memory))|end_(c(omment|data)|d(td(_(e(ntity|lement)|attlist))?|ocument)|pi|element|attribute)|f(ull_end_element|lush)|write_(c(omment|data)|dtd(_(e(ntity|lement)|attlist))?|pi|element(_ns)?|attribute(_ns)?|raw))\\b",
          name: "support.function.xmlwriter.php"
        },
        {
          match: "(?i)\\b(inflate_(init|add)|zlib_(decode|encode|get_coding_type)|deflate_(init|add)|readgzfile|gz(seek|c(ompress|lose)|tell|inflate|open|de(code|flate)|uncompress|p(uts|assthru)|e(ncode|of)|file|write|re(wind|ad)|get(s(s)?|c)))\\b",
          name: "support.function.zlib.php"
        },
        { match: "(?i)\\bis_int(eger)?\\b", name: "support.function.alias.php" }
      ]
    },
    "user-function-call": {
      begin: "(?i)(?=[a-z_0-9\\\\]*[a-z_][a-z0-9_]*\\s*\\()",
      end: "(?i)[a-z_][a-z_0-9]*(?=\\s*\\()",
      name: "meta.function-call.php",
      patterns: [{ include: "#namespace" }]
    },
    var_basic: {
      patterns: [
        {
          captures: { 1: { name: "punctuation.definition.variable.php" } },
          match: "(?x)\n        			            (\\$+)[a-zA-Z_\\x{7f}-\\x{ff}]\n        			            [a-zA-Z0-9_\\x{7f}-\\x{ff}]*?\\b",
          name: "variable.other.php"
        }
      ]
    },
    var_global: {
      captures: { 1: { name: "punctuation.definition.variable.php" } },
      match: "(\\$)((_(COOKIE|FILES|GET|POST|REQUEST))|arg(v|c))\\b",
      name: "variable.other.global.php"
    },
    var_global_safer: {
      captures: { 1: { name: "punctuation.definition.variable.php" } },
      match: "(\\$)((GLOBALS|_(ENV|SERVER|SESSION)))",
      name: "variable.other.global.safer.php"
    },
    "variable-name": {
      patterns: [
        { include: "#var_global" },
        { include: "#var_global_safer" },
        {
          captures: {
            1: { name: "variable.other.php" },
            10: { name: "string.unquoted.index.php" },
            11: { name: "punctuation.section.array.end.php" },
            2: { name: "punctuation.definition.variable.php" },
            4: { name: "keyword.operator.class.php" },
            5: { name: "variable.other.property.php" },
            6: { name: "punctuation.section.array.begin.php" },
            7: { name: "constant.numeric.index.php" },
            8: { name: "variable.other.index.php" },
            9: { name: "punctuation.definition.variable.php" }
          },
          match: "(?x)\n						((\\$)(?<name>[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*))\n						(?:\n							(->)(\\g<name>)\n							|\n							(\\[)\n								(?:(\\d+)|((\\$)\\g<name>)|(\\w+))\n							(\\])\n						)?\n						"
        },
        {
          captures: {
            1: { name: "variable.other.php" },
            2: { name: "punctuation.definition.variable.php" },
            4: { name: "punctuation.definition.variable.php" }
          },
          match: "(?x)\n						((\\$\\{)(?<name>[a-zA-Z_\\x{7f}-\\x{ff}][a-zA-Z0-9_\\x{7f}-\\x{ff}]*)(\\}))\n						"
        }
      ]
    },
    variables: {
      patterns: [
        { include: "#var_global" },
        { include: "#var_global_safer" },
        { include: "#var_basic" },
        {
          begin: "(\\$\\{)(?=.*?\\})",
          beginCaptures: { 1: { name: "punctuation.definition.variable.php" } },
          end: "(\\})",
          endCaptures: { 1: { name: "punctuation.definition.variable.php" } },
          patterns: [{ include: "#language" }]
        }
      ]
    }
  },
  scopeName: "text.html.php"
};
var text_html_php_default = grammar32;

// node_modules/@wooorm/starry-night/lang/text.md.js
var grammar33 = {
  extensions: [
    ".livemd",
    ".markdown",
    ".mdown",
    ".mdwn",
    ".mkd",
    ".mkdn",
    ".mkdown",
    ".qmd",
    ".rmd",
    ".ronn",
    ".scd",
    ".workbook"
  ],
  names: ["markdown", "md", "pandoc", "rmarkdown"],
  patterns: [
    { include: "#markdown-frontmatter" },
    { include: "#markdown-sections" }
  ],
  repository: {
    "commonmark-attention": {
      patterns: [
        {
          match: "(?<=\\S)\\*{3,}|\\*{3,}(?=\\S)",
          name: "string.other.strong.emphasis.asterisk.md"
        },
        {
          match: "(?<=[\\p{L}\\p{N}])_{3,}(?![\\p{L}\\p{N}])|(?<=\\p{P})_{3,}|(?<![\\p{L}\\p{N}]|\\p{P})_{3,}(?!\\s)",
          name: "string.other.strong.emphasis.underscore.md"
        },
        {
          match: "(?<=\\S)\\*{2}|\\*{2}(?=\\S)",
          name: "string.other.strong.asterisk.md"
        },
        {
          match: "(?<=[\\p{L}\\p{N}])_{2}(?![\\p{L}\\p{N}])|(?<=\\p{P})_{2}|(?<![\\p{L}\\p{N}]|\\p{P})_{2}(?!\\s)",
          name: "string.other.strong.underscore.md"
        },
        {
          match: "(?<=\\S)\\*|\\*(?=\\S)",
          name: "string.other.emphasis.asterisk.md"
        },
        {
          match: "(?<=[\\p{L}\\p{N}])_(?![\\p{L}\\p{N}])|(?<=\\p{P})_|(?<![\\p{L}\\p{N}]|\\p{P})_(?!\\s)",
          name: "string.other.emphasis.underscore.md"
        }
      ]
    },
    "commonmark-autolink": {
      patterns: [
        {
          captures: {
            1: { name: "string.other.begin.autolink.md" },
            2: { name: "string.other.link.autolink.email.md" },
            3: { name: "string.other.end.autolink.md" }
          },
          match: "(<)((?:[0-9A-Za-z!\"#$%&'*+\\-\\/=?^_`{|}~'])+@(?:[0-9A-Za-z](?:[0-9A-Za-z-]{0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:[0-9A-Za-z-]{0,61}[A-Za-z])?)*))(>)"
        },
        {
          captures: {
            1: { name: "string.other.begin.autolink.md" },
            2: { name: "string.other.link.autolink.protocol.md" },
            3: { name: "string.other.end.autolink.md" }
          },
          match: "(<)((?:[A-Za-z][+\\-.0-9A-Za-z]{0,31}):[^\\p{Cc}\\ ]*?)(>)"
        }
      ]
    },
    "commonmark-block-quote": {
      begin: "(?:^|\\G)[ ]{0,3}(>)[ ]?",
      beginCaptures: {
        0: { name: "markup.quote.md" },
        1: { name: "punctuation.definition.quote.begin.md" }
      },
      name: "markup.quote.md",
      patterns: [{ include: "#markdown-sections" }],
      while: "(>)[ ]?",
      whileCaptures: {
        0: { name: "markup.quote.md" },
        1: { name: "punctuation.definition.quote.begin.md" }
      }
    },
    "commonmark-character-escape": {
      match: "\\\\(?:[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])",
      name: "constant.language.character-escape.md"
    },
    "commonmark-character-reference": {
      patterns: [
        { include: "#whatwg-html-data-character-reference-named-terminated" },
        {
          captures: {
            1: { name: "punctuation.definition.character-reference.begin.html" },
            2: {
              name: "punctuation.definition.character-reference.numeric.html"
            },
            3: {
              name: "punctuation.definition.character-reference.numeric.hexadecimal.html"
            },
            4: { name: "constant.numeric.integer.hexadecimal.html" },
            5: { name: "punctuation.definition.character-reference.end.html" }
          },
          match: "(&)(#)([Xx])([0-9A-Fa-f]{1,6})(;)",
          name: "constant.language.character-reference.numeric.hexadecimal.html"
        },
        {
          captures: {
            1: { name: "punctuation.definition.character-reference.begin.html" },
            2: {
              name: "punctuation.definition.character-reference.numeric.html"
            },
            3: { name: "constant.numeric.integer.decimal.html" },
            4: { name: "punctuation.definition.character-reference.end.html" }
          },
          match: "(&)(#)([0-9]{1,7})(;)",
          name: "constant.language.character-reference.numeric.decimal.html"
        }
      ]
    },
    "commonmark-code-fenced": {
      patterns: [
        { include: "#commonmark-code-fenced-apib" },
        { include: "#commonmark-code-fenced-asciidoc" },
        { include: "#commonmark-code-fenced-c" },
        { include: "#commonmark-code-fenced-clojure" },
        { include: "#commonmark-code-fenced-coffee" },
        { include: "#commonmark-code-fenced-console" },
        { include: "#commonmark-code-fenced-cpp" },
        { include: "#commonmark-code-fenced-cs" },
        { include: "#commonmark-code-fenced-css" },
        { include: "#commonmark-code-fenced-diff" },
        { include: "#commonmark-code-fenced-dockerfile" },
        { include: "#commonmark-code-fenced-elixir" },
        { include: "#commonmark-code-fenced-elm" },
        { include: "#commonmark-code-fenced-erlang" },
        { include: "#commonmark-code-fenced-gitconfig" },
        { include: "#commonmark-code-fenced-go" },
        { include: "#commonmark-code-fenced-graphql" },
        { include: "#commonmark-code-fenced-haskell" },
        { include: "#commonmark-code-fenced-html" },
        { include: "#commonmark-code-fenced-ini" },
        { include: "#commonmark-code-fenced-java" },
        { include: "#commonmark-code-fenced-js" },
        { include: "#commonmark-code-fenced-json" },
        { include: "#commonmark-code-fenced-julia" },
        { include: "#commonmark-code-fenced-kotlin" },
        { include: "#commonmark-code-fenced-less" },
        { include: "#commonmark-code-fenced-less" },
        { include: "#commonmark-code-fenced-lua" },
        { include: "#commonmark-code-fenced-makefile" },
        { include: "#commonmark-code-fenced-md" },
        { include: "#commonmark-code-fenced-mdx" },
        { include: "#commonmark-code-fenced-objc" },
        { include: "#commonmark-code-fenced-perl" },
        { include: "#commonmark-code-fenced-php" },
        { include: "#commonmark-code-fenced-php" },
        { include: "#commonmark-code-fenced-python" },
        { include: "#commonmark-code-fenced-r" },
        { include: "#commonmark-code-fenced-raku" },
        { include: "#commonmark-code-fenced-ruby" },
        { include: "#commonmark-code-fenced-rust" },
        { include: "#commonmark-code-fenced-scala" },
        { include: "#commonmark-code-fenced-scss" },
        { include: "#commonmark-code-fenced-shell" },
        { include: "#commonmark-code-fenced-shell-session" },
        { include: "#commonmark-code-fenced-sql" },
        { include: "#commonmark-code-fenced-svg" },
        { include: "#commonmark-code-fenced-swift" },
        { include: "#commonmark-code-fenced-toml" },
        { include: "#commonmark-code-fenced-ts" },
        { include: "#commonmark-code-fenced-tsx" },
        { include: "#commonmark-code-fenced-vbnet" },
        { include: "#commonmark-code-fenced-xml" },
        { include: "#commonmark-code-fenced-yaml" },
        { include: "#commonmark-code-fenced-unknown" }
      ]
    },
    "commonmark-code-fenced-apib": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:api\\x2dblueprint|(?:.*\\.)?apib))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.apib",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.apib.md",
          patterns: [{ include: "text.html.markdown.source.gfm.apib" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:api\\x2dblueprint|(?:.*\\.)?apib))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.apib",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.apib.md",
          patterns: [{ include: "text.html.markdown.source.gfm.apib" }]
        }
      ]
    },
    "commonmark-code-fenced-asciidoc": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:adoc|asciidoc)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.asciidoc",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.asciidoc.md",
          patterns: [{ include: "text.html.asciidoc" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:adoc|asciidoc)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.asciidoc",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.asciidoc.md",
          patterns: [{ include: "text.html.asciidoc" }]
        }
      ]
    },
    "commonmark-code-fenced-c": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:dtrace|dtrace\\x2dscript|oncrpc|rpc|rpcgen|unified\\x2dparallel\\x2dc|x\\x2dbitmap|x\\x2dpixmap|xdr|(?:.*\\.)?(?:c|cats|h|idc|opencl|upc|xbm|xpm|xs)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.c",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.c.md",
          patterns: [{ include: "source.c" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:dtrace|dtrace\\x2dscript|oncrpc|rpc|rpcgen|unified\\x2dparallel\\x2dc|x\\x2dbitmap|x\\x2dpixmap|xdr|(?:.*\\.)?(?:c|cats|h|idc|opencl|upc|xbm|xpm|xs)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.c",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.c.md",
          patterns: [{ include: "source.c" }]
        }
      ]
    },
    "commonmark-code-fenced-clojure": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:clojure|rouge|(?:.*\\.)?(?:boot|cl2|clj|cljc|cljs|cljs\\.hl|cljscm|cljx|edn|hic|rg|wisp)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.clojure",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.clojure.md",
          patterns: [{ include: "source.clojure" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:clojure|rouge|(?:.*\\.)?(?:boot|cl2|clj|cljc|cljs|cljs\\.hl|cljscm|cljx|edn|hic|rg|wisp)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.clojure",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.clojure.md",
          patterns: [{ include: "source.clojure" }]
        }
      ]
    },
    "commonmark-code-fenced-coffee": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:coffee\\x2dscript|coffeescript|(?:.*\\.)?(?:_coffee|cjsx|coffee|cson|em|emberscript|iced)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.coffee",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.coffee.md",
          patterns: [{ include: "source.coffee" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:coffee\\x2dscript|coffeescript|(?:.*\\.)?(?:_coffee|cjsx|coffee|cson|em|emberscript|iced)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.coffee",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.coffee.md",
          patterns: [{ include: "source.coffee" }]
        }
      ]
    },
    "commonmark-code-fenced-console": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:pycon|python\\x2dconsole))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.console",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.console.md",
          patterns: [{ include: "text.python.console" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:pycon|python\\x2dconsole))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.console",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.console.md",
          patterns: [{ include: "text.python.console" }]
        }
      ]
    },
    "commonmark-code-fenced-cpp": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:ags|ags\\x2dscript|asymptote|c\\+\\+|edje\\x2ddata\\x2dcollection|game\\x2dmaker\\x2dlanguage|swig|(?:.*\\.)?(?:asc|ash|asy|c\\+\\+|cc|cp|cpp|cppm|cxx|edc|gml|h\\+\\+|hh|hpp|hxx|inl|ino|ipp|ixx|metal|re|tcc|tpp|txx)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.cpp",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.cpp.md",
          patterns: [{ include: "source.c++" }, { include: "source.c++" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:ags|ags\\x2dscript|asymptote|c\\+\\+|edje\\x2ddata\\x2dcollection|game\\x2dmaker\\x2dlanguage|swig|(?:.*\\.)?(?:asc|ash|asy|c\\+\\+|cc|cp|cpp|cppm|cxx|edc|gml|h\\+\\+|hh|hpp|hxx|inl|ino|ipp|ixx|metal|re|tcc|tpp|txx)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.cpp",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.cpp.md",
          patterns: [{ include: "source.c++" }, { include: "source.c++" }]
        }
      ]
    },
    "commonmark-code-fenced-cs": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:beef|c#|cakescript|csharp|(?:.*\\.)?(?:bf|cake|cs|csx|eq|linq|uno)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.cs",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.cs.md",
          patterns: [{ include: "source.cs" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:beef|c#|cakescript|csharp|(?:.*\\.)?(?:bf|cake|cs|csx|eq|linq|uno)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.cs",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.cs.md",
          patterns: [{ include: "source.cs" }]
        }
      ]
    },
    "commonmark-code-fenced-css": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?css))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.css",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.css.md",
          patterns: [{ include: "source.css" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?css))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.css",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.css.md",
          patterns: [{ include: "source.css" }]
        }
      ]
    },
    "commonmark-code-fenced-diff": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:udiff|(?:.*\\.)?(?:diff|patch)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.diff",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.diff.md",
          patterns: [{ include: "source.diff" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:udiff|(?:.*\\.)?(?:diff|patch)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.diff",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.diff.md",
          patterns: [{ include: "source.diff" }]
        }
      ]
    },
    "commonmark-code-fenced-dockerfile": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:containerfile|(?:.*\\.)?dockerfile))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.dockerfile",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.dockerfile.md",
          patterns: [{ include: "source.dockerfile" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:containerfile|(?:.*\\.)?dockerfile))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.dockerfile",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.dockerfile.md",
          patterns: [{ include: "source.dockerfile" }]
        }
      ]
    },
    "commonmark-code-fenced-elixir": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:elixir|(?:.*\\.)?(?:ex|exs)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.elixir",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.elixir.md",
          patterns: [{ include: "source.elixir" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:elixir|(?:.*\\.)?(?:ex|exs)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.elixir",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.elixir.md",
          patterns: [{ include: "source.elixir" }]
        }
      ]
    },
    "commonmark-code-fenced-elm": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?elm))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.elm",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.elm.md",
          patterns: [{ include: "source.elm" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?elm))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.elm",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.elm.md",
          patterns: [{ include: "source.elm" }]
        }
      ]
    },
    "commonmark-code-fenced-erlang": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:erlang|(?:.*\\.)?(?:app|app\\.src|erl|es|escript|hrl|xrl|yrl)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.erlang",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.erlang.md",
          patterns: [{ include: "source.erlang" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:erlang|(?:.*\\.)?(?:app|app\\.src|erl|es|escript|hrl|xrl|yrl)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.erlang",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.erlang.md",
          patterns: [{ include: "source.erlang" }]
        }
      ]
    },
    "commonmark-code-fenced-gitconfig": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:git\\x2dconfig|gitmodules|(?:.*\\.)?gitconfig))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.gitconfig",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.gitconfig.md",
          patterns: [{ include: "source.gitconfig" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:git\\x2dconfig|gitmodules|(?:.*\\.)?gitconfig))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.gitconfig",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.gitconfig.md",
          patterns: [{ include: "source.gitconfig" }]
        }
      ]
    },
    "commonmark-code-fenced-go": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:golang|(?:.*\\.)?go))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.go",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.go.md",
          patterns: [{ include: "source.go" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:golang|(?:.*\\.)?go))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.go",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.go.md",
          patterns: [{ include: "source.go" }]
        }
      ]
    },
    "commonmark-code-fenced-graphql": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:gql|graphql|graphqls)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.graphql",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.graphql.md",
          patterns: [{ include: "source.graphql" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:gql|graphql|graphqls)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.graphql",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.graphql.md",
          patterns: [{ include: "source.graphql" }]
        }
      ]
    },
    "commonmark-code-fenced-haskell": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:bh|bluespec\\x2dbh|bluespec\\x2dclassic|c2hs|c2hs\\x2dhaskell|frege|haskell|(?:.*\\.)?(?:chs|dhall|hs|hs\\x2dboot|hsc)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.haskell",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.haskell.md",
          patterns: [{ include: "source.haskell" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:bh|bluespec\\x2dbh|bluespec\\x2dclassic|c2hs|c2hs\\x2dhaskell|frege|haskell|(?:.*\\.)?(?:chs|dhall|hs|hs\\x2dboot|hsc)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.haskell",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.haskell.md",
          patterns: [{ include: "source.haskell" }]
        }
      ]
    },
    "commonmark-code-fenced-html": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:html|(?:.*\\.)?(?:hta|htm|html\\.hl|kit|mtml|xht|xhtml)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.html",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.html.md",
          patterns: [{ include: "text.html.basic" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:html|(?:.*\\.)?(?:hta|htm|html\\.hl|kit|mtml|xht|xhtml)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.html",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.html.md",
          patterns: [{ include: "text.html.basic" }]
        }
      ]
    },
    "commonmark-code-fenced-ini": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:altium|altium\\x2ddesigner|dosini|(?:.*\\.)?(?:cnf|dof|ini|lektorproject|outjob|pcbdoc|prefs|prjpcb|properties|schdoc|url)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.ini",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.ini.md",
          patterns: [{ include: "source.ini" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:altium|altium\\x2ddesigner|dosini|(?:.*\\.)?(?:cnf|dof|ini|lektorproject|outjob|pcbdoc|prefs|prjpcb|properties|schdoc|url)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.ini",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.ini.md",
          patterns: [{ include: "source.ini" }]
        }
      ]
    },
    "commonmark-code-fenced-java": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:chuck|unrealscript|(?:.*\\.)?(?:ck|jav|java|jsh|uc)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.java",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.java.md",
          patterns: [{ include: "source.java" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:chuck|unrealscript|(?:.*\\.)?(?:ck|jav|java|jsh|uc)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.java",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.java.md",
          patterns: [{ include: "source.java" }]
        }
      ]
    },
    "commonmark-code-fenced-js": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:cycript|javascript\\+erb|json\\x2dwith\\x2dcomments|node|qt\\x2dscript|(?:.*\\.)?(?:_js|bones|cjs|code\\x2dsnippets|code\\x2dworkspace|cy|es6|jake|javascript|js|js\\.erb|jsb|jscad|jsfl|jslib|jsm|json5|jsonc|jsonld|jspre|jss|jsx|mjs|njs|pac|sjs|ssjs|sublime\\x2dbuild|sublime\\x2dcommands|sublime\\x2dcompletions|sublime\\x2dkeymap|sublime\\x2dmacro|sublime\\x2dmenu|sublime\\x2dmousemap|sublime\\x2dproject|sublime\\x2dsettings|sublime\\x2dtheme|sublime\\x2dworkspace|sublime_metrics|sublime_session|xsjs|xsjslib)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.js",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.js.md",
          patterns: [{ include: "source.js" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:cycript|javascript\\+erb|json\\x2dwith\\x2dcomments|node|qt\\x2dscript|(?:.*\\.)?(?:_js|bones|cjs|code\\x2dsnippets|code\\x2dworkspace|cy|es6|jake|javascript|js|js\\.erb|jsb|jscad|jsfl|jslib|jsm|json5|jsonc|jsonld|jspre|jss|jsx|mjs|njs|pac|sjs|ssjs|sublime\\x2dbuild|sublime\\x2dcommands|sublime\\x2dcompletions|sublime\\x2dkeymap|sublime\\x2dmacro|sublime\\x2dmenu|sublime\\x2dmousemap|sublime\\x2dproject|sublime\\x2dsettings|sublime\\x2dtheme|sublime\\x2dworkspace|sublime_metrics|sublime_session|xsjs|xsjslib)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.js",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.js.md",
          patterns: [{ include: "source.js" }]
        }
      ]
    },
    "commonmark-code-fenced-json": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:ecere\\x2dprojects|ipython\\x2dnotebook|jupyter\\x2dnotebook|max|max/msp|maxmsp|oasv2\\x2djson|oasv3\\x2djson|(?:.*\\.)?(?:4dform|4dproject|avsc|epj|geojson|gltf|har|ice|ipynb|json|json|json|json\\x2dtmlanguage|jsonl|maxhelp|maxpat|maxproj|mcmeta|mxt|pat|tfstate|tfstate\\.backup|topojson|webapp|webmanifest|yy|yyp)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.json",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.json.md",
          patterns: [{ include: "source.json" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:ecere\\x2dprojects|ipython\\x2dnotebook|jupyter\\x2dnotebook|max|max/msp|maxmsp|oasv2\\x2djson|oasv3\\x2djson|(?:.*\\.)?(?:4dform|4dproject|avsc|epj|geojson|gltf|har|ice|ipynb|json|json|json|json\\x2dtmlanguage|jsonl|maxhelp|maxpat|maxproj|mcmeta|mxt|pat|tfstate|tfstate\\.backup|topojson|webapp|webmanifest|yy|yyp)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.json",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.json.md",
          patterns: [{ include: "source.json" }]
        }
      ]
    },
    "commonmark-code-fenced-julia": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:julia|(?:.*\\.)?jl))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.julia",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.julia.md",
          patterns: [{ include: "source.julia" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:julia|(?:.*\\.)?jl))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.julia",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.julia.md",
          patterns: [{ include: "source.julia" }]
        }
      ]
    },
    "commonmark-code-fenced-kotlin": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:gradle\\x2dkotlin\\x2ddsl|kotlin|(?:.*\\.)?(?:gradle\\.kts|kt|ktm|kts)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.kotlin",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.kotlin.md",
          patterns: [{ include: "source.kotlin" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:gradle\\x2dkotlin\\x2ddsl|kotlin|(?:.*\\.)?(?:gradle\\.kts|kt|ktm|kts)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.kotlin",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.kotlin.md",
          patterns: [{ include: "source.kotlin" }]
        }
      ]
    },
    "commonmark-code-fenced-less": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:less\\x2dcss|(?:.*\\.)?less))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.less",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.less.md",
          patterns: [{ include: "source.css.less" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:less\\x2dcss|(?:.*\\.)?less))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.less",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.less.md",
          patterns: [{ include: "source.css.less" }]
        }
      ]
    },
    "commonmark-code-fenced-lua": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:fcgi|lua|nse|p8|pd_lua|rbxs|rockspec|wlua)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.lua",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.lua.md",
          patterns: [{ include: "source.lua" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:fcgi|lua|nse|p8|pd_lua|rbxs|rockspec|wlua)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.lua",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.lua.md",
          patterns: [{ include: "source.lua" }]
        }
      ]
    },
    "commonmark-code-fenced-makefile": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:bsdmake|mf|(?:.*\\.)?(?:mak|make|makefile|mk|mkfile)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.makefile",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.makefile.md",
          patterns: [{ include: "source.makefile" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:bsdmake|mf|(?:.*\\.)?(?:mak|make|makefile|mk|mkfile)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.makefile",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.makefile.md",
          patterns: [{ include: "source.makefile" }]
        }
      ]
    },
    "commonmark-code-fenced-md": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:md|pandoc|rmarkdown|(?:.*\\.)?(?:livemd|markdown|mdown|mdwn|mkd|mkdn|mkdown|qmd|rmd|ronn|scd|workbook)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.md",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.md.md",
          patterns: [{ include: "source.gfm" }, { include: "source.gfm" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:md|pandoc|rmarkdown|(?:.*\\.)?(?:livemd|markdown|mdown|mdwn|mkd|mkdn|mkdown|qmd|rmd|ronn|scd|workbook)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.md",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.md.md",
          patterns: [{ include: "source.gfm" }, { include: "source.gfm" }]
        }
      ]
    },
    "commonmark-code-fenced-mdx": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?mdx))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.mdx",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.mdx.md",
          patterns: [{ include: "source.mdx" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?mdx))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.mdx",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.mdx.md",
          patterns: [{ include: "source.mdx" }]
        }
      ]
    },
    "commonmark-code-fenced-objc": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:obj\\x2dc|objc|objective\\x2dc|objectivec))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.objc",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.objc.md",
          patterns: [{ include: "source.objc" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:obj\\x2dc|objc|objective\\x2dc|objectivec))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.objc",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.objc.md",
          patterns: [{ include: "source.objc" }]
        }
      ]
    },
    "commonmark-code-fenced-perl": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:cperl|(?:.*\\.)?(?:cgi|perl|ph|pl|plx|pm|psgi|t)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.perl",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.perl.md",
          patterns: [{ include: "source.perl" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:cperl|(?:.*\\.)?(?:cgi|perl|ph|pl|plx|pm|psgi|t)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.perl",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.perl.md",
          patterns: [{ include: "source.perl" }]
        }
      ]
    },
    "commonmark-code-fenced-php": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:html\\+php|inc|php|(?:.*\\.)?(?:aw|ctp|php3|php4|php5|phps|phpt|phtml)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.php",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.php.md",
          patterns: [{ include: "text.html.php" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:html\\+php|inc|php|(?:.*\\.)?(?:aw|ctp|php3|php4|php5|phps|phpt|phtml)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.php",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.php.md",
          patterns: [{ include: "text.html.php" }]
        }
      ]
    },
    "commonmark-code-fenced-python": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:bazel|easybuild|python|python3|rusthon|snakemake|starlark|xonsh|(?:.*\\.)?(?:bzl|eb|gyp|gypi|lmi|py|py3|pyde|pyi|pyp|pyt|pyw|rpy|sage|sagews|smk|snakefile|spec|tac|wsgi|xpy|xsh)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.python",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.python.md",
          patterns: [{ include: "source.python" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:bazel|easybuild|python|python3|rusthon|snakemake|starlark|xonsh|(?:.*\\.)?(?:bzl|eb|gyp|gypi|lmi|py|py3|pyde|pyi|pyp|pyt|pyw|rpy|sage|sagews|smk|snakefile|spec|tac|wsgi|xpy|xsh)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.python",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.python.md",
          patterns: [{ include: "source.python" }]
        }
      ]
    },
    "commonmark-code-fenced-r": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:rscript|splus|(?:.*\\.)?(?:r|rd|rsx)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.r",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.r.md",
          patterns: [{ include: "source.r" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:rscript|splus|(?:.*\\.)?(?:r|rd|rsx)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.r",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.r.md",
          patterns: [{ include: "source.r" }]
        }
      ]
    },
    "commonmark-code-fenced-raku": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:perl\\x2d6|perl6|pod\\x2d6|(?:.*\\.)?(?:6pl|6pm|nqp|p6|p6l|p6m|pl6|pm6|pod|pod6|raku|rakumod)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.raku",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.raku.md",
          patterns: [{ include: "source.raku" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:perl\\x2d6|perl6|pod\\x2d6|(?:.*\\.)?(?:6pl|6pm|nqp|p6|p6l|p6m|pl6|pm6|pod|pod6|raku|rakumod)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.raku",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.raku.md",
          patterns: [{ include: "source.raku" }]
        }
      ]
    },
    "commonmark-code-fenced-ruby": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:jruby|macruby|(?:.*\\.)?(?:builder|druby|duby|eye|gemspec|god|jbuilder|mirah|mspec|pluginspec|podspec|prawn|rabl|rake|rb|rbi|rbuild|rbw|rbx|ru|ruby|thor|watchr)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.ruby",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.ruby.md",
          patterns: [{ include: "source.ruby" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:jruby|macruby|(?:.*\\.)?(?:builder|druby|duby|eye|gemspec|god|jbuilder|mirah|mspec|pluginspec|podspec|prawn|rabl|rake|rb|rbi|rbuild|rbw|rbx|ru|ruby|thor|watchr)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.ruby",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.ruby.md",
          patterns: [{ include: "source.ruby" }]
        }
      ]
    },
    "commonmark-code-fenced-rust": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:rust|(?:.*\\.)?(?:rs|rs\\.in)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.rust",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.rust.md",
          patterns: [{ include: "source.rust" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:rust|(?:.*\\.)?(?:rs|rs\\.in)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.rust",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.rust.md",
          patterns: [{ include: "source.rust" }]
        }
      ]
    },
    "commonmark-code-fenced-scala": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:kojo|sbt|sc|scala)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.scala",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.scala.md",
          patterns: [{ include: "source.scala" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?(?:kojo|sbt|sc|scala)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.scala",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.scala.md",
          patterns: [{ include: "source.scala" }]
        }
      ]
    },
    "commonmark-code-fenced-scss": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?scss))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.scss",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.scss.md",
          patterns: [{ include: "source.css.scss" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?scss))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.scss",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.scss.md",
          patterns: [{ include: "source.css.scss" }]
        }
      ]
    },
    "commonmark-code-fenced-shell": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:abuild|alpine\\x2dabuild|apkbuild|gentoo\\x2debuild|gentoo\\x2declass|openrc|openrc\\x2drunscript|shell|shell\\x2dscript|(?:.*\\.)?(?:bash|bats|command|csh|ebuild|eclass|ksh|sh|sh\\.in|tcsh|tmux|tool|zsh|zsh\\x2dtheme)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.shell",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.shell.md",
          patterns: [{ include: "source.shell" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:abuild|alpine\\x2dabuild|apkbuild|gentoo\\x2debuild|gentoo\\x2declass|openrc|openrc\\x2drunscript|shell|shell\\x2dscript|(?:.*\\.)?(?:bash|bats|command|csh|ebuild|eclass|ksh|sh|sh\\.in|tcsh|tmux|tool|zsh|zsh\\x2dtheme)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.shell",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.shell.md",
          patterns: [{ include: "source.shell" }]
        }
      ]
    },
    "commonmark-code-fenced-shell-session": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:bash\\x2dsession|console|shellsession|(?:.*\\.)?sh\\x2dsession))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.shell-session",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.shell-session.md",
          patterns: [{ include: "text.shell-session" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:bash\\x2dsession|console|shellsession|(?:.*\\.)?sh\\x2dsession))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.shell-session",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.shell-session.md",
          patterns: [{ include: "text.shell-session" }]
        }
      ]
    },
    "commonmark-code-fenced-sql": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:plpgsql|sqlpl|(?:.*\\.)?(?:cql|db2|ddl|mysql|pgsql|prc|sql|sql|sql|tab|udf|viw)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.sql",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.sql.md",
          patterns: [{ include: "source.sql" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:plpgsql|sqlpl|(?:.*\\.)?(?:cql|db2|ddl|mysql|pgsql|prc|sql|sql|sql|tab|udf|viw)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.sql",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.sql.md",
          patterns: [{ include: "source.sql" }]
        }
      ]
    },
    "commonmark-code-fenced-svg": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?svg))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.svg",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.svg.md",
          patterns: [{ include: "text.xml.svg" }, { include: "text.xml" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?svg))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.svg",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.svg.md",
          patterns: [{ include: "text.xml.svg" }, { include: "text.xml" }]
        }
      ]
    },
    "commonmark-code-fenced-swift": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?swift))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.swift",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.swift.md",
          patterns: [{ include: "source.swift" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?swift))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.swift",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.swift.md",
          patterns: [{ include: "source.swift" }]
        }
      ]
    },
    "commonmark-code-fenced-toml": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?toml))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.toml",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.toml.md",
          patterns: [{ include: "source.toml" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?toml))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.toml",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.toml.md",
          patterns: [{ include: "source.toml" }]
        }
      ]
    },
    "commonmark-code-fenced-ts": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:typescript|(?:.*\\.)?(?:cts|mts|ts)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.ts",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.ts.md",
          patterns: [{ include: "source.ts" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:typescript|(?:.*\\.)?(?:cts|mts|ts)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.ts",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.ts.md",
          patterns: [{ include: "source.ts" }]
        }
      ]
    },
    "commonmark-code-fenced-tsx": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:(?:.*\\.)?tsx))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.tsx",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.tsx.md",
          patterns: [{ include: "source.tsx" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:(?:.*\\.)?tsx))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.tsx",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.tsx.md",
          patterns: [{ include: "source.tsx" }]
        }
      ]
    },
    "commonmark-code-fenced-unknown": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?:[^\\t\\n\\r` ])+)(?:[\\t ]+((?:[^\\n\\r`])+))?)?(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "markup.raw.code.fenced.md",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.other.md"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?:[^\\t\\n\\r ])+)(?:[\\t ]+((?:[^\\n\\r])+))?)?(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "markup.raw.code.fenced.md",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.other.md"
        }
      ]
    },
    "commonmark-code-fenced-vbnet": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:classic\\x2dvisual\\x2dbasic|fb|freebasic|realbasic|vb\\x2d\\.net|vb\\x2d6|vb\\.net|vb6|vbnet|vbscript|visual\\x2dbasic|visual\\x2dbasic\\x2d\\.net|visual\\x2dbasic\\x2d6|visual\\x2dbasic\\x2d6\\.0|visual\\x2dbasic\\x2dclassic|(?:.*\\.)?(?:bi|ctl|dsr|rbbas|rbfrm|rbmnu|rbres|rbtbar|rbuistate|vb|vbhtml|vbs)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.vbnet",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.vbnet.md",
          patterns: [{ include: "source.vbnet" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:classic\\x2dvisual\\x2dbasic|fb|freebasic|realbasic|vb\\x2d\\.net|vb\\x2d6|vb\\.net|vb6|vbnet|vbscript|visual\\x2dbasic|visual\\x2dbasic\\x2d\\.net|visual\\x2dbasic\\x2d6|visual\\x2dbasic\\x2d6\\.0|visual\\x2dbasic\\x2dclassic|(?:.*\\.)?(?:bi|ctl|dsr|rbbas|rbfrm|rbmnu|rbres|rbtbar|rbuistate|vb|vbhtml|vbs)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.vbnet",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.vbnet.md",
          patterns: [{ include: "source.vbnet" }]
        }
      ]
    },
    "commonmark-code-fenced-xml": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:collada|eagle|labview|web\\x2dontology\\x2dlanguage|xpages|(?:.*\\.)?(?:adml|admx|ant|axaml|axml|brd|builds|ccproj|ccxml|clixml|cproject|cscfg|csdef|csproj|ct|dae|depproj|dita|ditamap|ditaval|dll\\.config|dotsettings|filters|fsproj|fxml|glade|gmx|grxml|hzp|iml|ivy|jelly|jsproj|kml|launch|lvclass|lvlib|lvproj|mdpolicy|mjml|mxml|natvis|ndproj|nproj|nuspec|odd|osm|owl|pkgproj|proj|props|ps1xml|psc1|pt|qhelp|rdf|resx|rss|sch|sch|scxml|sfproj|shproj|srdf|storyboard|sublime\\x2dsnippet|targets|tml|ui|urdf|ux|vbproj|vcxproj|vsixmanifest|vssettings|vstemplate|vxml|wixproj|wsdl|wsf|wxi|wxl|wxs|x3d|xacro|xaml|xib|xlf|xliff|xmi|xml|xml\\.dist|xmp|xpl|xproc|xproj|xsd|xsp\\x2dconfig|xsp\\.metadata|xspec|xul|zcml)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.xml",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.xml.md",
          patterns: [{ include: "text.xml" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:collada|eagle|labview|web\\x2dontology\\x2dlanguage|xpages|(?:.*\\.)?(?:adml|admx|ant|axaml|axml|brd|builds|ccproj|ccxml|clixml|cproject|cscfg|csdef|csproj|ct|dae|depproj|dita|ditamap|ditaval|dll\\.config|dotsettings|filters|fsproj|fxml|glade|gmx|grxml|hzp|iml|ivy|jelly|jsproj|kml|launch|lvclass|lvlib|lvproj|mdpolicy|mjml|mxml|natvis|ndproj|nproj|nuspec|odd|osm|owl|pkgproj|proj|props|ps1xml|psc1|pt|qhelp|rdf|resx|rss|sch|sch|scxml|sfproj|shproj|srdf|storyboard|sublime\\x2dsnippet|targets|tml|ui|urdf|ux|vbproj|vcxproj|vsixmanifest|vssettings|vstemplate|vxml|wixproj|wsdl|wsf|wxi|wxl|wxs|x3d|xacro|xaml|xib|xlf|xliff|xmi|xml|xml\\.dist|xmp|xpl|xproc|xproj|xsd|xsp\\x2dconfig|xsp\\.metadata|xspec|xul|zcml)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.xml",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.xml.md",
          patterns: [{ include: "text.xml" }]
        }
      ]
    },
    "commonmark-code-fenced-yaml": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}(`{3,})(?:[\\t ]*((?i:jar\\x2dmanifest|kaitai\\x2dstruct|oasv2\\x2dyaml|oasv3\\x2dyaml|unity3d\\x2dasset|yaml|yml|(?:.*\\.)?(?:anim|asset|ksy|lkml|lookml|mat|meta|mir|prefab|raml|reek|rviz|sublime\\x2dsyntax|syntax|unity|yaml\\x2dtmlanguage|yaml\\.sed|yml\\.mysql)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.yaml",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.yaml.md",
          patterns: [{ include: "source.yaml" }]
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(~{3,})(?:[\\t ]*((?i:jar\\x2dmanifest|kaitai\\x2dstruct|oasv2\\x2dyaml|oasv3\\x2dyaml|unity3d\\x2dasset|yaml|yml|(?:.*\\.)?(?:anim|asset|ksy|lkml|lookml|mat|meta|mir|prefab|raml|reek|rviz|sublime\\x2dsyntax|syntax|unity|yaml\\x2dtmlanguage|yaml\\.sed|yml\\.mysql)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          beginCaptures: {
            1: { name: "string.other.begin.code.fenced.md" },
            2: {
              name: "entity.name.function.md",
              patterns: [{ include: "#markdown-string" }]
            },
            3: { patterns: [{ include: "#markdown-string" }] }
          },
          contentName: "meta.embedded.yaml",
          end: "(\\1)(?:[\\t ]*$)",
          endCaptures: { 1: { name: "string.other.end.code.fenced.md" } },
          name: "markup.code.yaml.md",
          patterns: [{ include: "source.yaml" }]
        }
      ]
    },
    "commonmark-code-indented": {
      captures: { 1: { name: "markup.raw.code.indented.md" } },
      match: "(?:^|\\G)(?:[ ]{4}|\\t)(.+?)$",
      name: "markup.code.other.md"
    },
    "commonmark-code-text": {
      captures: {
        1: { name: "string.other.begin.code.md" },
        2: { name: "markup.raw.code.md markup.inline.raw.code.md" },
        3: { name: "string.other.end.code.md" }
      },
      match: "(?<!`)(`+)(?!`)(.+?)(?<!`)(\\1)(?!`)",
      name: "markup.code.other.md"
    },
    "commonmark-definition": {
      captures: {
        1: { name: "string.other.begin.md" },
        10: {
          name: "string.quoted.double.md",
          patterns: [{ include: "#markdown-string" }]
        },
        11: { name: "string.other.end.md" },
        12: { name: "string.other.begin.md" },
        13: {
          name: "string.quoted.single.md",
          patterns: [{ include: "#markdown-string" }]
        },
        14: { name: "string.other.end.md" },
        15: { name: "string.other.begin.md" },
        16: {
          name: "string.quoted.paren.md",
          patterns: [{ include: "#markdown-string" }]
        },
        17: { name: "string.other.end.md" },
        2: {
          name: "entity.name.identifier.md",
          patterns: [{ include: "#markdown-string" }]
        },
        3: { name: "string.other.end.md" },
        4: { name: "punctuation.separator.key-value.md" },
        5: { name: "string.other.begin.destination.md" },
        6: {
          name: "string.other.link.destination.md",
          patterns: [{ include: "#markdown-string" }]
        },
        7: { name: "string.other.end.destination.md" },
        8: {
          name: "string.other.link.destination.md",
          patterns: [{ include: "#markdown-string" }]
        },
        9: { name: "string.other.begin.md" }
      },
      match: `(?:^|\\G)[ ]{0,3}(\\[)((?:[^\\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+?)(\\])(:)[ \\t]*(?:(<)((?:[^\\n<\\\\>]|\\\\[<\\\\>]?)*)(>)|(\\g<destination_raw>))(?:[\\t ]+(?:(")((?:[^"\\\\]|\\\\["\\\\]?)*)(")|(')((?:[^'\\\\]|\\\\['\\\\]?)*)(')|(\\()((?:[^\\)\\\\]|\\\\[\\)\\\\]?)*)(\\))))?$(?<destination_raw>(?!\\<)(?:(?:[^\\p{Cc}\\ \\\\\\(\\)]|\\\\[\\(\\)\\\\]?)|\\(\\g<destination_raw>*\\))+){0}`,
      name: "meta.link.reference.def.md"
    },
    "commonmark-hard-break-escape": {
      match: "\\\\$",
      name: "constant.language.character-escape.line-ending.md"
    },
    "commonmark-hard-break-trailing": {
      match: "( ){2,}$",
      name: "carriage-return constant.language.character-escape.line-ending.md"
    },
    "commonmark-heading-atx": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.heading.md" },
            2: {
              name: "entity.name.section.md",
              patterns: [{ include: "#markdown-text" }]
            },
            3: { name: "punctuation.definition.heading.md" }
          },
          match: "(?:^|\\G)[ ]{0,3}(#{1}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$",
          name: "markup.heading.atx.1.md"
        },
        {
          captures: {
            1: { name: "punctuation.definition.heading.md" },
            2: {
              name: "entity.name.section.md",
              patterns: [{ include: "#markdown-text" }]
            },
            3: { name: "punctuation.definition.heading.md" }
          },
          match: "(?:^|\\G)[ ]{0,3}(#{2}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$",
          name: "markup.heading.atx.2.md"
        },
        {
          captures: {
            1: { name: "punctuation.definition.heading.md" },
            2: {
              name: "entity.name.section.md",
              patterns: [{ include: "#markdown-text" }]
            },
            3: { name: "punctuation.definition.heading.md" }
          },
          match: "(?:^|\\G)[ ]{0,3}(#{3}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$",
          name: "markup.heading.atx.2.md"
        },
        {
          captures: {
            1: { name: "punctuation.definition.heading.md" },
            2: {
              name: "entity.name.section.md",
              patterns: [{ include: "#markdown-text" }]
            },
            3: { name: "punctuation.definition.heading.md" }
          },
          match: "(?:^|\\G)[ ]{0,3}(#{4}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$",
          name: "markup.heading.atx.2.md"
        },
        {
          captures: {
            1: { name: "punctuation.definition.heading.md" },
            2: {
              name: "entity.name.section.md",
              patterns: [{ include: "#markdown-text" }]
            },
            3: { name: "punctuation.definition.heading.md" }
          },
          match: "(?:^|\\G)[ ]{0,3}(#{5}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$",
          name: "markup.heading.atx.2.md"
        },
        {
          captures: {
            1: { name: "punctuation.definition.heading.md" },
            2: {
              name: "entity.name.section.md",
              patterns: [{ include: "#markdown-text" }]
            },
            3: { name: "punctuation.definition.heading.md" }
          },
          match: "(?:^|\\G)[ ]{0,3}(#{6}(?!#))(?:[ \\t]+([^\\r\\n]+?)(?:[ \\t]+(#+?))?)?[ \\t]*$",
          name: "markup.heading.atx.2.md"
        }
      ]
    },
    "commonmark-heading-setext": {
      patterns: [
        {
          match: "(?:^|\\G)[ ]{0,3}(={1,})[ \\t]*$",
          name: "markup.heading.setext.1.md"
        },
        {
          match: "(?:^|\\G)[ ]{0,3}(-{1,})[ \\t]*$",
          name: "markup.heading.setext.2.md"
        }
      ]
    },
    "commonmark-html-flow": {
      patterns: [
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "(?:^|\\G)[ ]{0,3}<!---?>[^\\n\\r]*$",
          name: "text.html.basic"
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}<!--)",
          end: "(?<=-->)([^\\n\\r]*)$",
          endCaptures: { 1: { patterns: [{ include: "#whatwg-html" }] } },
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "(?:^|\\G)[ ]{0,3}<\\?>[^\\n\\r]*$",
          name: "text.html.basic"
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}<\\?)",
          end: "(?<=\\?>)([^\\n\\r]*)$",
          endCaptures: { 1: { patterns: [{ include: "#whatwg-html" }] } },
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}<![A-Za-z])",
          end: "(?<=\\>)([^\\n\\r]*)$",
          endCaptures: { 1: { patterns: [{ include: "#whatwg-html" }] } },
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}<!\\[CDATA\\[)",
          end: "(?<=\\]\\]>)([^\\n\\r]*)$",
          endCaptures: { 1: { patterns: [{ include: "#whatwg-html" }] } },
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}<(?i:textarea|script|style|pre)[\\t\\n\\r >])",
          end: "</(?i:textarea|script|style|pre)[^\\n\\r]*$",
          endCaptures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}</?(?i:figcaption|(?:blockquot|ifram|figur)e|(?:menuite|para)m|optgroup|c(?:olgroup|aption|enter)|(?:f(?:rame|ield)se|tfoo)t|b(?:asefont|ody)|(?:noframe|detail)s|section|summary|a(?:(?:rticl|sid)e|ddress)|search|l(?:egend|ink)|d(?:i(?:alog|[rv])|[dlt])|header|footer|option|frame|track|thead|tbody|t(?:it|ab)le|menu|head|base|h(?:tml|[1-6r])|form|main|col|nav|t[hr]|li|td|ol|ul|p)(?:[\\t >]|\\/>|$))",
          end: "^(?=[\\t ]*$)|$",
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          begin: "(?=(?:^|\\G)[ ]{0,3}</[A-Za-z][-0-9A-Za-z]*[\\t\\n\\r ]*>(?:[\\t ]*$))",
          end: "^(?=[\\t ]*$)|$",
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        },
        {
          begin: `(?=(?:^|\\G)[ ]{0,3}<[A-Za-z][-0-9A-Za-z]*(?:[\\t\\n\\r ]+[:A-Z_a-z][\\-\\.0-9:A-Z_a-z]*(?:[\\t\\n\\r ]*=[\\t\\n\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\r "'\\/<=>\`]+))?)*(?:[\\t\\n\\r ]*\\/)?[\\t\\n\\r ]*>(?:[\\t ]*$))`,
          end: "^(?=[\\t ]*$)|$",
          name: "text.html.basic",
          patterns: [{ include: "#whatwg-html" }]
        }
      ]
    },
    "commonmark-html-text": {
      patterns: [
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "<!--.*?-->",
          name: "text.html.basic"
        },
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "<\\?.*?\\?>",
          name: "text.html.basic"
        },
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "<![A-Za-z].*?>",
          name: "text.html.basic"
        },
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "<!\\[CDATA\\[.*?\\]\\]>",
          name: "text.html.basic"
        },
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: "</[A-Za-z][-0-9A-Za-z]*[\\t\\n\\r ]*>",
          name: "text.html.basic"
        },
        {
          captures: { 0: { patterns: [{ include: "#whatwg-html" }] } },
          match: `<[A-Za-z][-0-9A-Za-z]*(?:[\\t\\n\\r ]+[:A-Z_a-z][\\-\\.0-9:A-Z_a-z]*(?:[\\t\\n\\r ]*=[\\t\\n\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\r "'\\/<=>\`]+))?)*(?:[\\t\\n\\r ]*\\/)?[\\t\\n\\r ]*>`,
          name: "text.html.basic"
        }
      ]
    },
    "commonmark-label-end": {
      patterns: [
        {
          captures: {
            1: { name: "string.other.end.md" },
            10: { name: "string.other.begin.md" },
            11: {
              name: "string.quoted.single.md",
              patterns: [{ include: "#markdown-string" }]
            },
            12: { name: "string.other.end.md" },
            13: { name: "string.other.begin.md" },
            14: {
              name: "string.quoted.paren.md",
              patterns: [{ include: "#markdown-string" }]
            },
            15: { name: "string.other.end.md" },
            16: { name: "string.other.end.md" },
            2: { name: "string.other.begin.md" },
            3: { name: "string.other.begin.destination.md" },
            4: {
              name: "string.other.link.destination.md",
              patterns: [{ include: "#markdown-string" }]
            },
            5: { name: "string.other.end.destination.md" },
            6: {
              name: "string.other.link.destination.md",
              patterns: [{ include: "#markdown-string" }]
            },
            7: { name: "string.other.begin.md" },
            8: {
              name: "string.quoted.double.md",
              patterns: [{ include: "#markdown-string" }]
            },
            9: { name: "string.other.end.md" }
          },
          match: `(\\])(\\()[\\t ]*(?:(?:(<)((?:[^\\n<\\\\>]|\\\\[<\\\\>]?)*)(>)|(\\g<destination_raw>))(?:[\\t ]+(?:(")((?:[^"\\\\]|\\\\["\\\\]?)*)(")|(')((?:[^'\\\\]|\\\\['\\\\]?)*)(')|(\\()((?:[^\\)\\\\]|\\\\[\\)\\\\]?)*)(\\))))?)?[\\t ]*(\\))(?<destination_raw>(?!\\<)(?:(?:[^\\p{Cc}\\ \\\\\\(\\)]|\\\\[\\(\\)\\\\]?)|\\(\\g<destination_raw>*\\))+){0}`
        },
        {
          captures: {
            1: { name: "string.other.end.md" },
            2: { name: "string.other.begin.md" },
            3: {
              name: "entity.name.identifier.md",
              patterns: [{ include: "#markdown-string" }]
            },
            4: { name: "string.other.end.md" }
          },
          match: "(\\])(\\[)((?:[^\\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+?)(\\])"
        },
        { captures: { 1: { name: "string.other.end.md" } }, match: "(\\])" }
      ]
    },
    "commonmark-label-start": {
      patterns: [
        { match: "\\!\\[(?!\\^)", name: "string.other.begin.image.md" },
        { match: "\\[", name: "string.other.begin.link.md" }
      ]
    },
    "commonmark-list-item": {
      patterns: [
        {
          begin: "(?:^|\\G)[ ]{0,3}((?:[*+-]))(?:[ ]{4}(?![ ])|\\t)(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "variable.unordered.list.md" },
            2: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{1}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}((?:[*+-]))(?:[ ]{3}(?![ ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "variable.unordered.list.md" },
            2: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}((?:[*+-]))(?:[ ]{2}(?![ ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "variable.unordered.list.md" },
            2: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)[ ]{3}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}((?:[*+-]))(?:[ ]{1}|(?=\\n))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "variable.unordered.list.md" },
            2: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)[ ]{2}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}([0-9]{9})((?:\\.|\\)))(?:[ ]{4}(?![ ])|\\t(?![\\t ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}[ ]{2}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{8})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}[ ]{1}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{8})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{7})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{8})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{7})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{6})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "string.other.number.md" },
            8: { name: "variable.ordered.list.md" },
            9: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{3}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{8})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{7})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{6})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{5})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "string.other.number.md" },
            8: { name: "variable.ordered.list.md" },
            9: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{2}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{7})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{6})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{5})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{4})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "string.other.number.md" },
            8: { name: "variable.ordered.list.md" },
            9: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{1}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{6})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{5})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{4})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{3})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "string.other.number.md" },
            8: { name: "variable.ordered.list.md" },
            9: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{5})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{4})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{3})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{2})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "string.other.number.md" },
            8: { name: "variable.ordered.list.md" },
            9: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{3}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{4})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{3})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{2})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{1})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "string.other.number.md" },
            8: { name: "variable.ordered.list.md" },
            9: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{2}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{3})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{2})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{1})((?:\\.|\\)))(?:[ ]{3}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "string.other.number.md" },
            6: { name: "variable.ordered.list.md" },
            7: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{1}"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}(?:([0-9]{2})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9])((?:\\.|\\)))(?:[ ]{2}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "string.other.number.md" },
            4: { name: "variable.ordered.list.md" },
            5: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)"
        },
        {
          begin: "(?:^|\\G)[ ]{0,3}([0-9])((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          beginCaptures: {
            1: { name: "string.other.number.md" },
            2: { name: "variable.ordered.list.md" },
            3: { name: "keyword.other.tasklist.md" }
          },
          patterns: [{ include: "#markdown-sections" }],
          while: "^(?=[\\t ]*$)|(?:^|\\G)[ ]{3}"
        }
      ]
    },
    "commonmark-paragraph": {
      begin: "(?![\\t ]*$)",
      name: "meta.paragraph.md",
      patterns: [{ include: "#markdown-text" }],
      while: "(?:^|\\G)(?:[ ]{4}|\\t)"
    },
    "commonmark-thematic-break": {
      match: "(?:^|\\G)[ ]{0,3}([-*_])[ \\t]*(?:\\1[ \\t]*){2,}$",
      name: "meta.separator.md"
    },
    "extension-directive-attribute": {
      captures: {
        1: { name: "entity.other.attribute-name.md" },
        10: { name: "entity.other.attribute-name.class.md" },
        11: {
          name: "string.unquoted.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        },
        12: { name: "entity.other.attribute-name.id.md" },
        13: {
          name: "string.unquoted.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        },
        2: { name: "punctuation.separator.key-value.md" },
        3: { name: "string.other.begin.md" },
        4: {
          name: "string.quoted.double.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        },
        5: { name: "string.other.end.md" },
        6: { name: "string.other.begin.md" },
        7: {
          name: "string.quoted.single.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        },
        8: { name: "string.other.end.md" },
        9: {
          name: "string.unquoted.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        }
      },
      match: `((?:[A-Za-z:_][0-9A-Za-z\\-\\.:_]*))(?:[\\t ]*(=)[\\t ]*(?:(")([^"]*)(")|(')([^']*)(')|([^\\t\\n\\r "'<=>\`\\}]+)))?|(\\.)((?:[^\\t\\n\\r "#'\\.<=>\`\\}][^\\t\\n\\r "#'\\.<=>\`\\}]*))|(#)((?:[^\\t\\n\\r "#'\\.<=>\`\\}][^\\t\\n\\r "#'\\.<=>\`\\}]*))`
    },
    "extension-directive-container": {
      begin: `(?:^|\\G)[ ]{0,3}(:{3,})((?:[A-Za-z][0-9A-Za-z\\-_]*))(?:(\\[)(\\g<directive_label>*)(\\]))?(?:(\\{)((?:(?:[A-Za-z:_][0-9A-Za-z\\-\\.:_]*)(?:[\\t ]*=[\\t ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\r "'<=>\`\\}]+))?|[\\.#](?:[^\\t\\n\\r "#'\\.<=>\`\\}][^\\t\\n\\r "#'\\.<=>\`\\}]*)|[\\t ])*)(\\}))?(?:[\\t ]*$)(?<directive_label>(?:[^\\\\\\[\\]]|\\\\[\\\\\\[\\]]?)|\\[\\g<directive_label>*\\]){0}`,
      beginCaptures: {
        1: { name: "string.other.begin.directive.md" },
        2: { name: "entity.name.function.md" },
        3: { name: "string.other.begin.directive.label.md" },
        4: { patterns: [{ include: "#markdown-text" }] },
        5: { name: "string.other.end.directive.label.md" },
        6: { name: "string.other.begin.directive.attributes.md" },
        7: { patterns: [{ include: "#extension-directive-attribute" }] },
        8: { name: "string.other.end.directive.attributes.md" }
      },
      end: "(\\1)(?:[\\t ]*$)",
      endCaptures: { 1: { name: "string.other.end.directive.md" } },
      patterns: [{ include: "#markdown-sections" }]
    },
    "extension-directive-leaf": {
      captures: {
        1: { name: "string.other.begin.directive.md" },
        2: { name: "entity.name.function.md" },
        3: { name: "string.other.begin.directive.label.md" },
        4: { patterns: [{ include: "#markdown-text" }] },
        5: { name: "string.other.end.directive.label.md" },
        6: { name: "string.other.begin.directive.attributes.md" },
        7: { patterns: [{ include: "#extension-directive-attribute" }] },
        8: { name: "string.other.end.directive.attributes.md" }
      },
      match: `(?:^|\\G)[ ]{0,3}(:{2})((?:[A-Za-z][0-9A-Za-z\\-_]*))(?:(\\[)(\\g<directive_label>*)(\\]))?(?:(\\{)((?:(?:[A-Za-z:_][0-9A-Za-z\\-\\.:_]*)(?:[\\t ]*=[\\t ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\r "'<=>\`\\}]+))?|[\\.#](?:[^\\t\\n\\r "#'\\.<=>\`\\}][^\\t\\n\\r "#'\\.<=>\`\\}]*)|[\\t ])*)(\\}))?(?:[\\t ]*$)(?<directive_label>(?:[^\\\\\\[\\]]|\\\\[\\\\\\[\\]]?)|\\[\\g<directive_label>*\\]){0}`,
      name: "meta.tag.${2:/downcase}.md"
    },
    "extension-directive-text": {
      captures: {
        1: { name: "string.other.begin.directive.md" },
        2: { name: "entity.name.function.md" },
        3: { name: "string.other.begin.directive.label.md" },
        4: { patterns: [{ include: "#markdown-text" }] },
        5: { name: "string.other.end.directive.label.md" },
        6: { name: "string.other.begin.directive.attributes.md" },
        7: { patterns: [{ include: "#extension-directive-attribute" }] },
        8: { name: "string.other.end.directive.attributes.md" }
      },
      match: `(?<!:)(:)((?:[A-Za-z][0-9A-Za-z\\-_]*))(?![0-9A-Za-z\\-_:])(?:(\\[)(\\g<directive_label>*)(\\]))?(?:(\\{)((?:(?:[A-Za-z:_][0-9A-Za-z\\-\\.:_]*)(?:[\\t ]*=[\\t ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\r "'<=>\`\\}]+))?|[\\.#](?:[^\\t\\n\\r "#'\\.<=>\`\\}][^\\t\\n\\r "#'\\.<=>\`\\}]*)|[\\t ])*)(\\}))?(?<directive_label>(?:[^\\\\\\[\\]]|\\\\[\\\\\\[\\]]?)|\\[\\g<directive_label>*\\]){0}`,
      name: "meta.tag.${2:/downcase}.md"
    },
    "extension-gfm-autolink-literal": {
      patterns: [
        {
          match: `(?<=^|[\\t\\n\\r \\(\\*\\_\\[\\]~])(?=(?i:www)\\.[^\\n\\r])(?:(?:[\\p{L}\\p{N}]|-|[\\._](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+\\g<path>?)?(?<path>(?:(?:[^\\t\\n\\r !"&'\\(\\)\\*,\\.:;<\\?\\]_~]|&(?![A-Za-z]*;(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[])))|[!"'\\)\\*,\\.:;\\?_~](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))|\\(\\g<path>*\\))+){0}`,
          name: "string.other.link.autolink.literal.www.md"
        },
        {
          match: `(?<=^|[^A-Za-z])(?i:https?://)(?=[\\p{L}\\p{N}])(?:(?:[\\p{L}\\p{N}]|-|[\\._](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+\\g<path>?)?(?<path>(?:(?:[^\\t\\n\\r !"&'\\(\\)\\*,\\.:;<\\?\\]_~]|&(?![A-Za-z]*;(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[])))|[!"'\\)\\*,\\.:;\\?_~](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))|\\(\\g<path>*\\))+){0}`,
          name: "string.other.link.autolink.literal.http.md"
        },
        {
          match: `(?<=^|[^A-Za-z/])(?i:mailto:|xmpp:)?(?:[0-9A-Za-z+\\-\\._])+@(?:(?:[0-9A-Za-z]|[-_](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+(?:\\.(?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[])))))+(?:[A-Za-z]|[-_](?!(?:[!"'\\)\\*,\\.:;<\\?_~]*(?:[\\s<]|\\][\\t\\n \\(\\[]))))+`,
          name: "string.other.link.autolink.literal.email.md"
        }
      ]
    },
    "extension-gfm-footnote-call": {
      captures: {
        1: { name: "string.other.begin.link.md" },
        2: { name: "string.other.begin.footnote.md" },
        3: {
          name: "entity.name.identifier.md",
          patterns: [{ include: "#markdown-string" }]
        },
        4: { name: "string.other.end.footnote.md" }
      },
      match: "(\\[)(\\^)((?:[^\\t\\n\\r \\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+)(\\])"
    },
    "extension-gfm-footnote-definition": {
      begin: "(?:^|\\G)[ ]{0,3}(\\[)(\\^)((?:[^\\t\\n\\r \\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+)(\\])(:)[\\t ]*",
      beginCaptures: {
        1: { name: "string.other.begin.link.md" },
        2: { name: "string.other.begin.footnote.md" },
        3: {
          name: "entity.name.identifier.md",
          patterns: [{ include: "#markdown-string" }]
        },
        4: { name: "string.other.end.footnote.md" }
      },
      patterns: [{ include: "#markdown-sections" }],
      while: "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)"
    },
    "extension-gfm-strikethrough": {
      match: "(?<=\\S)(?<!~)~{1,2}(?!~)|(?<!~)~{1,2}(?=\\S)(?!~)",
      name: "string.other.strikethrough.md"
    },
    "extension-gfm-table": {
      begin: "(?:^|\\G)[ ]{0,3}(?=\\|[^\\n\\r]+\\|[ \\t]*$)",
      end: "^(?=[\\t ]*$)|$",
      patterns: [
        {
          captures: { 1: { patterns: [{ include: "#markdown-text" }] } },
          match: "(?<=\\||(?:^|\\G))[\\t ]*((?:[^\\n\\r\\\\\\|]|\\\\[\\\\\\|]?)+?)[\\t ]*(?=\\||$)"
        },
        { match: "(?:\\|)", name: "markup.list.table-delimiter.md" }
      ]
    },
    "extension-github-gemoji": {
      captures: {
        1: { name: "punctuation.definition.gemoji.begin.md" },
        2: { name: "keyword.control.gemoji.md" },
        3: { name: "punctuation.definition.gemoji.end.md" }
      },
      match: "(:)((?:(?:(?:hand_with_index_finger_and_thumb_cros|mailbox_clo|fist_rai|confu)s|r(?:aised_hand_with_fingers_splay|e(?:gister|l(?:iev|ax)))|disappointed_reliev|confound|(?:a(?:ston|ngu)i|flu)sh|unamus|hush)e|(?:chart_with_(?:down|up)wards_tre|large_orange_diamo|small_(?:orang|blu)e_diamo|large_blue_diamo|parasol_on_grou|loud_sou|rewi)n|(?:rightwards_pushing_h|hourglass_flowing_s|leftwards_(?:pushing_)?h|(?:raised_back_of|palm_(?:down|up)|call_me)_h|(?:(?:(?:clippert|ascensi)on|norfolk)_is|christmas_is|desert_is|bouvet_is|new_zea|thai|eng|fin|ire)l|rightwards_h|pinching_h|writing_h|s(?:w(?:itzer|azi)|cot)l|magic_w|ok_h|icel)an|s(?:un_behind_(?:large|small|rain)_clou|hallow_pan_of_foo|tar_of_davi|leeping_be|kateboar|a(?:tisfie|uropo)|hiel|oun|qui)|(?:ear_with_hearing_a|pouring_liqu)i|(?:identification_c|(?:arrow_(?:back|for)|fast_for)w|credit_c|woman_be|biohaz|man_be|l(?:eop|iz))ar|m(?:usical_key|ortar_)boar|(?:drop_of_bl|canned_f)oo|c(?:apital_abc|upi)|person_bal|(?:black_bi|(?:cust|plac)a)r|(?:clip|key)boar|mermai|pea_po|worrie|po(?:la|u)n|threa|dv)d|(?:(?:(?:face_with_open_eyes_and_hand_over|face_with_diagonal|open|no)_mou|h(?:and_over_mou|yacin)|mammo)t|running_shirt_with_sas|(?:(?:fishing_pole_and_|blow)fi|(?:tropical_f|petri_d)i|(?:paint|tooth)bru|banglade|jellyfi)s|(?:camera_fl|wavy_d)as|triump|menora|pouc|blus|watc|das|has)h|(?:s(?:o(?:(?:uth_georgia_south_sandwich|lomon)_island|ck)|miling_face_with_three_heart|t_kitts_nevi|weat_drop|agittariu|c(?:orpiu|issor)|ymbol|hort)|twisted_rightwards_arrow|(?:northern_mariana|heard_mcdonald|(?:british_virgi|us_virgi|pitcair|cayma)n|turks_caicos|us_outlying|(?:falk|a)land|marshall|c(?:anary|ocos)|faroe)_island|(?:face_holding_back_tea|(?:c(?:ard_index_divid|rossed_fing)|pinched_fing)e|night_with_sta)r|(?:two_(?:wo)?men_holding|people_holding|heart|open)_hand|(?:sunrise_over_mountai|(?:congratul|united_n)atio|jea)n|(?:caribbean_)?netherland|(?:f(?:lower_playing_car|ace_in_clou)|crossed_swor|prayer_bea)d|(?:money_with_win|nest_with_eg|crossed_fla|hotsprin)g|revolving_heart|(?:high_brightne|(?:expression|wire)le|(?:tumbler|wine)_gla|milk_gla|compa|dre)s|performing_art|earth_america|orthodox_cros|l(?:ow_brightnes|a(?:tin_cros|o)|ung)|no_pedestrian|c(?:ontrol_kno|lu)b|b(?:ookmark_tab|rick|ean)|nesting_doll|cook_island|(?:fleur_de_l|tenn)i|(?:o(?:ncoming_b|phiuch|ctop)|hi(?:ppopotam|bisc)|trolleyb|m(?:(?:rs|x)_cla|auriti|inib)|belar|cact|abac|(?:cyp|tau)r)u|medal_sport|(?:chopstic|firewor)k|rhinocero|(?:p(?:aw_prin|eanu)|footprin)t|two_heart|princes|(?:hondur|baham)a|barbado|aquariu|c(?:ustom|hain)|maraca|comoro|flag|wale|hug|vh)s|(?:(?:diamond_shape_with_a_dot_ins|playground_sl)id|(?:(?:first_quarter|last_quarter|full|new)_moon_with|(?:zipper|money)_mouth|dotted_line|upside_down|c(?:rying_c|owboy_h)at|(?:disguis|nauseat)ed|neutral|monocle|panda|tired|woozy|clown|nerd|zany|fox)_fac|s(?:t(?:uck_out_tongue_winking_ey|eam_locomotiv)|(?:lightly_(?:frown|smil)|neez|h(?:ush|ak))ing_fac|(?:tudio_micropho|(?:hinto_shr|lot_mach)i|ierra_leo|axopho)n|mall_airplan|un_with_fac|a(?:luting_fac|tellit|k)|haved_ic|y(?:nagogu|ring)|n(?:owfl)?ak|urinam|pong)|(?:black_(?:medium_)?small|white_(?:(?:medium_)?small|large)|(?:black|white)_medium|black_large|orange|purple|yellow|b(?:rown|lue)|red)_squar|(?:(?:perso|woma)n_with_|man_with_)?probing_can|(?:p(?:ut_litter_in_its_pl|outing_f)|frowning_f|cold_f|wind_f|hot_f)ac|(?:arrows_c(?:ounterc)?lockwi|computer_mou|derelict_hou|carousel_hor|c(?:ity_sunri|hee)|heartpul|briefca|racehor|pig_no|lacros)s|(?:(?:face_with_head_band|ideograph_advant|adhesive_band|under|pack)a|currency_exchan|l(?:eft_l)?ugga|woman_jud|name_bad|man_jud|jud)g|face_with_peeking_ey|(?:(?:e(?:uropean_post_off|ar_of_r)|post_off)i|information_sour|ambulan)c|artificial_satellit|(?:busts?_in_silhouet|(?:vulcan_sal|parach)u|m(?:usical_no|ayot)|ro(?:ller_ska|set)|timor_les|ice_ska)t|(?:(?:incoming|red)_envelo|s(?:ao_tome_princi|tethosco)|(?:micro|tele)sco|citysca)p|(?:(?:(?:convenience|department)_st|musical_sc)o|f(?:light_depar|ramed_pic)tu|love_you_gestu|heart_on_fi|japanese_og|cote_divoi|perseve|singapo)r|b(?:ullettrain_sid|eliz|on)|(?:(?:female_|male_)?dete|radioa)ctiv|(?:christmas|deciduous|evergreen|tanabata|palm)_tre|(?:vibration_mo|cape_ver)d|(?:fortune_cook|neckt|self)i|(?:fork_and_)?knif|athletic_sho|(?:p(?:lead|arty)|drool|curs|melt|yawn|ly)ing_fac|vomiting_fac|(?:(?:c(?:urling_st|ycl)|meat_on_b|repeat_|headst)o|(?:fire_eng|tanger|ukra)i|rice_sce|(?:micro|i)pho|champag|pho)n|(?:cricket|video)_gam|(?:boxing_glo|oli)v|(?:d(?:ragon|izzy)|monkey)_fac|(?:m(?:artin|ozamb)iq|fond)u|wind_chim|test_tub|flat_sho|m(?:a(?:ns_sho|t)|icrob|oos|ut)|(?:handsh|fish_c|moon_c|cupc)ak|nail_car|zimbabw|ho(?:neybe|l)|ice_cub|airplan|pensiv|c(?:a(?:n(?:dl|o)|k)|o(?:ffe|oki))|tongu|purs|f(?:lut|iv)|d(?:at|ov)|n(?:iu|os)|kit|rag|ax)e|(?:(?:british_indian_ocean_territo|(?:plate_with_cutl|batt)e|medal_milita|low_batte|hunga|wea)r|family_(?:woman_(?:woman_(?:girl|boy)|girl|boy)|man_(?:woman_(?:girl|boy)|man_(?:girl|boy)|girl|boy))_bo|person_feeding_bab|woman_feeding_bab|s(?:u(?:spension_railwa|nn)|t(?:atue_of_libert|_barthelem|rawberr))|(?:m(?:ountain_cable|ilky_)|aerial_tram)wa|articulated_lorr|man_feeding_bab|mountain_railwa|partly_sunn|(?:vatican_c|infin)it|(?:outbox_tr|inbox_tr|birthd|motorw|paragu|urugu|norw|x_r)a|butterfl|ring_buo|t(?:urke|roph)|angr|fogg)y|(?:(?:perso|woma)n_in_motorized_wheelchai|(?:(?:notebook_with_decorative_c|four_leaf_cl)ov|(?:index_pointing_at_the_vie|white_flo)w|(?:face_with_thermome|non\\-potable_wa|woman_firefigh|desktop_compu|m(?:an_firefigh|otor_scoo)|(?:ro(?:ller_coa|o)|oy)s|potable_wa|kick_scoo|thermome|firefigh|helicop|ot)t|(?:woman_factory_wor|(?:woman_office|woman_health|health)_wor|man_(?:factory|office|health)_wor|(?:factory|office)_wor|rice_crac|black_jo|firecrac)k|telephone_receiv|(?:palms_up_toget|f(?:ire_extinguis|eat)|teac)h|(?:(?:open_)?file_fol|level_sli)d|police_offic|f(?:lying_sauc|arm)|woman_teach|roll_of_pap|(?:m(?:iddle_f|an_s)in|woman_sin|hambur|plun|dag)g|do_not_litt|wilted_flow|woman_farm|man_(?:teach|farm)|(?:bell_pe|hot_pe|fli)pp|l(?:o(?:udspeak|ve_lett|bst)|edg|add)|tokyo_tow|c(?:ucumb|lapp|anc)|b(?:e(?:ginn|av)|adg)|print|hamst)e|(?:perso|woma)n_in_manual_wheelchai|m(?:an(?:_in_motorized|(?:_in_man)?ual)|otorized)_wheelchai|(?:person_(?:white|curly|red)_|wheelc)hai|triangular_rule|(?:film_project|e(?:l_salv|cu)ad|elevat|tract|anch)o|s(?:traight_rul|pace_invad|crewdriv|nowboard|unflow|peak|wimm|ing|occ|how|urf|ki)e|r(?:ed_ca|unne|azo)|d(?:o(?:lla|o)|ee)|barbe)r|(?:(?:cloud_with_(?:lightning_and_)?ra|japanese_gobl|round_pushp|liechtenste|mandar|pengu|dolph|bahra|pushp|viol)i|(?:couple(?:_with_heart_wo|kiss_)man|construction_worker|(?:mountain_bik|bow|row)ing|lotus_position|(?:w(?:eight_lift|alk)|climb)ing|white_haired|curly_haired|raising_hand|super(?:villain|hero)|red_haired|basketball|s(?:(?:wimm|urf)ing|assy)|haircut|no_good|(?:vampir|massag)e|b(?:iking|ald)|zombie|fairy|mage|elf|ng)_(?:wo)?ma|(?:(?:couple_with_heart_man|isle_of)_m|(?:couplekiss_woman_|(?:b(?:ouncing_ball|lond_haired)|tipping_hand|pregnant|kneeling|deaf)_|frowning_|s(?:tanding|auna)_|po(?:uting_|lice)|running_|blonde_|o(?:lder|k)_)wom|(?:perso|woma)n_with_turb|(?:b(?:ouncing_ball|lond_haired)|tipping_hand|pregnant|kneeling|deaf)_m|f(?:olding_hand_f|rowning_m)|man_with_turb|(?:turkmen|afghan|pak)ist|s(?:tanding_m|(?:outh_s)?ud|auna_m)|po(?:uting_|lice)m|running_m|azerbaij|k(?:yrgyz|azakh)st|tajikist|uzbekist|o(?:lder_m|k_m|ce)|(?:orang|bh)ut|taiw|jord)a|s(?:mall_red_triangle_dow|(?:valbard_jan_may|int_maart|ev)e|afety_pi|top_sig|t_marti|(?:corpi|po|o)o|wede)|(?:heavy_(?:d(?:ivision|ollar)|equals|minus|plus)|no_entry|female|male)_sig|(?:arrow_(?:heading|double)_d|p(?:erson_with_cr|oint_d)|arrow_up_d|thumbsd)ow|(?:house_with_gard|l(?:ock_with_ink_p|eafy_gre)|dancing_(?:wo)?m|fountain_p|keycap_t|chick|ali|yem|od)e|(?:izakaya|jack_o)_lanter|(?:funeral_u|(?:po(?:stal_h|pc)|capric)o|unico)r|chess_paw|b(?:a(?:llo|c)o|eni|rai)|l(?:anter|io)|c(?:o(?:ff)?i|row)|melo|rame|oma|yar)n|(?:s(?:t(?:uck_out_tongue_closed_ey|_vincent_grenadin)|kull_and_crossbon|unglass|pad)|(?:french_souther|palestinia)n_territori|(?:face_with_spiral|kissing_smiling)_ey|united_arab_emirat|kissing_closed_ey|(?:clinking_|dark_sun|eye)glass|(?:no_mobile_|head)phon|womans_cloth|b(?:allet_sho|lueberri)|philippin|(?:no_bicyc|seychel)l|roll_ey|(?:cher|a)ri|p(?:ancak|isc)|maldiv|leav)es|(?:f(?:amily_(?:woman_(?:woman_)?|man_(?:woman_|man_)?)girl_gir|earfu)|(?:woman_playing_hand|m(?:an_playing_hand|irror_)|c(?:onfetti|rystal)_|volley|track|base|8)bal|(?:(?:m(?:ailbox_with_(?:no_)?m|onor)|cockt|e\\-m)a|(?:person|bride|woman)_with_ve|man_with_ve|light_ra|braz|ema)i|(?:transgender|baby)_symbo|passport_contro|(?:arrow_(?:down|up)_sm|rice_b|footb)al|(?:dromedary_cam|ferris_whe|love_hot|high_he|pretz|falaf|isra)e|page_with_cur|me(?:dical_symbo|ta)|(?:n(?:ewspaper_ro|o_be)|bellhop_be)l|rugby_footbal|s(?:chool_satche|(?:peak|ee)_no_evi|oftbal|crol|anda|nai|hel)|(?:peace|atom)_symbo|hear_no_evi|cora|hote|bage|labe|rof|ow)l|(?:(?:negative_squared_cross|heavy_exclamation|part_alternation)_mar|(?:eight_spoked_)?asteris|(?:ballot_box_with_che|(?:(?:mantelpiece|alarm|timer)_c|un)lo|(?:ha(?:(?:mmer_and|ir)_p|tch(?:ing|ed)_ch)|baby_ch|joyst)i|railway_tra|lipsti|peaco)c|heavy_check_mar|white_check_mar|tr(?:opical_drin|uc)|national_par|pickup_truc|diving_mas|floppy_dis|s(?:tar_struc|hamroc|kun|har)|chipmun|denmar|duc|hoo|lin)k|(?:leftwards_arrow_with_h|arrow_right_h|(?:o(?:range|pen)|closed|blue)_b)ook|(?:woman_playing_water_pol|m(?:an(?:_(?:playing_water_pol|with_gua_pi_ma|in_tuxed)|g)|ontenegr|o(?:roc|na)c|e(?:xic|tr|m))|(?:perso|woma)n_in_tuxed|(?:trinidad_toba|vir)g|water_buffal|b(?:urkina_fas|a(?:mbo|nj)|ent)|puerto_ric|water_pol|flaming|kangaro|(?:mosqu|burr)it|(?:avoc|torn)ad|curaca|lesoth|potat|ko(?:sov|k)|tomat|d(?:ang|od)|yo_y|hoch|t(?:ac|og)|zer)o|(?:c(?:entral_african|zech)|dominican)_republic|(?:eight_pointed_black_s|six_pointed_s|qa)tar|(?:business_suit_levitat|(?:classical_buil|breast_fee)d|(?:woman_cartwhee|m(?:an_(?:cartwhee|jugg)|en_wrest)|women_wrest|woman_jugg|face_exha|cartwhee|wrest|dump)l|c(?:hildren_cross|amp)|woman_facepalm|woman_shrugg|man_(?:facepalm|shrugg)|people_hugg|(?:person_fe|woman_da|man_da)nc|fist_oncom|horse_rac|(?:no_smo|thin)k|laugh|s(?:eedl|mok)|park|w(?:arn|edd))ing|f(?:a(?:mily(?:_(?:woman_(?:woman_(?:girl|boy)|girl|boy)|man_(?:woman_(?:girl|boy)|man_(?:girl|boy)|girl|boy)))?|ctory)|o(?:u(?:ntain|r)|ot|g)|r(?:owning)?|i(?:re|s[ht])|ly|u)|(?:(?:(?:information_desk|handball|bearded)_|(?:frowning|ok)_|juggling_|mer)pers|(?:previous_track|p(?:lay_or_p)?ause|black_square|white_square|next_track|r(?:ecord|adio)|eject)_butt|(?:wa[nx]ing_(?:crescent|gibbous)_m|bowl_with_sp|crescent_m|racc)o|(?:b(?:ouncing_ball|lond_haired)|tipping_hand|pregnant|kneeling|deaf)_pers|s(?:t(?:_pierre_miquel|op_butt|ati)|tanding_pers|peech_ballo|auna_pers)|r(?:eminder_r)?ibb|thought_ballo|watermel|badmint|c(?:amero|ray)|le(?:ban|m)|oni|bis)on|(?:heavy_heart_exclama|building_construc|heart_decora|exclama)tion|(?:(?:triangular_flag_on_po|(?:(?:woman_)?technolog|m(?:ountain_bicycl|an_technolog)|bicycl)i|(?:wo)?man_scienti|(?:wo)?man_arti|s(?:afety_ve|cienti)|empty_ne)s|(?:vertical_)?traffic_ligh|(?:rescue_worker_helm|military_helm|nazar_amul|city_suns|wastebask|dropl|t(?:rump|oil)|bouqu|buck|magn|secr)e|one_piece_swimsui|(?:(?:arrow_(?:low|upp)er|point)_r|bridge_at_n|copyr|mag_r)igh|(?:bullettrain_fro|(?:potted_pl|croiss|e(?:ggpl|leph))a)n|s(?:t(?:ar_and_cresc|ud)en|cream_ca|mi(?:ley?|rk)_ca|(?:peed|ail)boa|hir)|(?:arrow_(?:low|upp)er|point)_lef|woman_astronau|r(?:o(?:tating_ligh|cke)|eceip)|heart_eyes_ca|man_astronau|(?:woman_stud|circus_t|man_stud|trid)en|(?:ringed_pla|file_cabi)ne|nut_and_bol|(?:older_)?adul|k(?:i(?:ssing_ca|wi_frui)|uwai|no)|(?:pouting_c|c(?:ut_of_m|old_sw)e|womans_h|montserr|(?:(?:motor_|row)b|lab_c)o|heartbe|toph)a|(?:woman_pil|honey_p|man_pil|[cp]arr|teap|rob)o|hiking_boo|arrow_lef|fist_righ|flashligh|f(?:ist_lef|ee)|black_ca|astronau|(?:c(?:hest|oco)|dough)nu|innocen|joy_ca|artis|(?:acce|egy)p|co(?:me|a)|pilo)t|(?:heavy_multiplication_|t\\-re)x|(?:s(?:miling_face_with_te|piral_calend)|oncoming_police_c|chocolate_b|ra(?:ilway|cing)_c|police_c|polar_be|teddy_be|madagasc|blue_c|calend|myanm)ar|c(?:l(?:o(?:ud(?:_with_lightning)?|ck(?:1[0-2]?|[2-9]))|ap)?|o(?:uple(?:_with_heart|kiss)?|nstruction|mputer|ok|p|w)|a(?:r(?:d_index)?|mera)|r(?:icket|y)|h(?:art|ild))|(?:m(?:artial_arts_unifo|echanical_a)r|(?:cherry_)?blosso|b(?:aggage_clai|roo)|ice_?crea|facepal|mushroo|restroo|vietna|dru|yu)m|(?:woman_with_headscar|m(?:obile_phone_of|aple_lea)|fallen_lea|wol)f|(?:(?:closed_lock_with|old)_|field_hoc|ice_hoc|han|don)key|g(?:lobe_with_meridians|r(?:e(?:y_(?:exclama|ques)tion|e(?:n(?:_(?:square|circle|salad|apple|heart|book)|land)|ce)|y_heart|nada)|i(?:mac|nn)ing|apes)|u(?:inea_bissau|ernsey|am|n)|(?:(?:olfing|enie)_(?:wo)?|uards(?:wo)?)man|(?:inger_roo|oal_ne|hos)t|(?:uadeloup|ame_di|iraff|oos)e|ift_heart|i(?:braltar|rl)|(?:uatemal|(?:eorg|amb)i|orill|uyan|han)a|uide_dog|(?:oggl|lov)es|arlic|emini|uitar|abon|oat|ear|b)|construction_worker|(?:(?:envelope_with|bow_and)_ar|left_right_ar|raised_eyeb)row|(?:(?:oncoming_automob|crocod)i|right_anger_bubb|l(?:eft_speech_bubb|otion_bott|ady_beet)|congo_brazzavil|eye_speech_bubb|(?:large_blue|orange|purple|yellow|brown)_circ|(?:(?:european|japanese)_cas|baby_bot)t|b(?:alance_sca|eet)|s(?:ewing_need|weat_smi)|(?:black|white|red)_circ|(?:motor|re)cyc|pood|turt|tama|waff|musc|eag)le|first_quarter_moon|s(?:m(?:all_red_triangle|i(?:ley?|rk))|t(?:uck_out_tongue|ar)|hopping|leeping|p(?:arkle|ider)|unrise|nowman|chool|cream|k(?:ull|i)|weat|ix|a)|(?:(?:b(?:osnia_herzegovi|ana)|wallis_futu|(?:french_gui|botsw)a|argenti|st_hele)n|(?:(?:equatorial|papua_new)_guin|north_kor|eritr)e|t(?:ristan_da_cunh|ad)|(?:(?:(?:french_poly|indo)ne|tuni)s|(?:new_caledo|ma(?:urita|cedo)|lithua|(?:tanz|alb|rom)a|arme|esto)n|diego_garc|s(?:audi_arab|t_luc|lov(?:ak|en)|omal|erb)|e(?:arth_as|thiop)|m(?:icrone|alay)s|(?:austra|mongo)l|c(?:ambod|roat)|(?:bulga|alge)r|(?:colom|nami|zam)b|boliv|l(?:iber|atv))i|(?:wheel_of_dhar|cine|pana)m|(?:(?:(?:closed|beach|open)_)?umbrel|ceuta_melil|venezue|ang(?:uil|o)|koa)l|c(?:ongo_kinshas|anad|ub)|(?:western_saha|a(?:mpho|ndor)|zeb)r|american_samo|video_camer|m(?:o(?:vie_camer|ldov)|alt|eg)|(?:earth_af|costa_)ric|s(?:outh_afric|ri_lank|a(?:mo|nt))|bubble_te|(?:antarct|jama)ic|ni(?:caragu|geri|nj)|austri|pi(?:nat|zz)|arub|k(?:eny|aab)|indi|u7a7|l(?:lam|ib[ry])|dn)a|l(?:ast_quarter_moon|o(?:tus|ck)|ips|eo)|(?:hammer_and_wren|c(?:ockroa|hur)|facepun|wren|crut|pun)ch|s(?:nowman_with_snow|ignal_strength|weet_potato|miling_imp|p(?:ider_web|arkle[rs])|w(?:im_brief|an)|a(?:n(?:_marino|dwich)|lt)|topwatch|t(?:a(?:dium|r[2s])|ew)|l(?:e(?:epy|d)|oth)|hrimp|yria|carf|(?:hee|oa)p|ea[lt]|h(?:oe|i[pt])|o[bs])|(?:s(?:tuffed_flatbre|p(?:iral_notep|eaking_he))|(?:exploding_h|baguette_br|flatbr)e)ad|(?:arrow_(?:heading|double)_u|(?:p(?:lace_of_wor|assenger_)sh|film_str|tul)i|page_facing_u|biting_li|(?:billed_c|world_m)a|mouse_tra|(?:curly_lo|busst)o|thumbsu|lo(?:llip)?o|clam|im)p|(?:anatomical|light_blue|sparkling|kissing|mending|orange|purple|yellow|broken|b(?:rown|l(?:ack|ue))|pink)_heart|(?:(?:transgender|black)_fla|mechanical_le|(?:checkered|pirate)_fla|electric_plu|rainbow_fla|poultry_le|service_do|white_fla|luxembour|fried_eg|moneyba|h(?:edgeh|otd)o|shru)g|(?:cloud_with|mountain)_snow|(?:(?:antigua_barb|berm)u|(?:kh|ug)an|rwan)da|(?:3r|2n)d_place_medal|1(?:st_place_medal|234|00)|lotus_position|(?:w(?:eight_lift|alk)|climb)ing|(?:(?:cup_with_str|auto_ricksh)a|carpentry_sa|windo|jigsa)w|(?:(?:couch_and|diya)_la|f(?:ried_shri|uelpu))mp|(?:woman_mechan|man_mechan|alemb)ic|(?:european_un|accord|collis|reun)ion|(?:flight_arriv|hospit|portug|seneg|nep)al|card_file_box|(?:(?:oncoming_)?tax|m(?:o(?:unt_fuj|ya)|alaw)|s(?:paghett|ush|ar)|b(?:r(?:occol|une)|urund)|(?:djibou|kiriba)t|hait|fij)i|(?:shopping_c|white_he|bar_ch)art|d(?:isappointed|ominica|e(?:sert)?)|raising_hand|super(?:villain|hero)|b(?:e(?:verage_box|ers|d)|u(?:bbles|lb|g)|i(?:k(?:ini|e)|rd)|o(?:o(?:ks|t)|a[rt]|y)|read|a[cn]k)|ra(?:ised_hands|bbit2|t)|(?:hindu_tem|ap)ple|thong_sandal|a(?:r(?:row_(?:right|down|up)|t)|bc?|nt)?|r(?:a(?:i(?:sed_hand|nbow)|bbit|dio|m)|u(?:nning)?|epeat|i(?:ng|ce)|o(?:ck|se))|takeout_box|(?:flying_|mini)disc|(?:(?:interrob|yin_y)a|b(?:o(?:omera|wli)|angba)|(?:ping_p|hong_k)o|calli|mahjo)ng|b(?:a(?:llot_box|sket|th?|by)|o(?:o(?:k(?:mark)?|m)|w)|u(?:tter|s)|e(?:ll|er?|ar))?|heart_eyes|basketball|(?:paperclip|dancer|ticket)s|point_up_2|(?:wo)?man_cook|n(?:ew(?:spaper)?|o(?:tebook|_entry)|iger)|t(?:e(?:lephone|a)|o(?:oth|p)|r(?:oll)?|wo)|h(?:o(?:u(?:rglass|se)|rse)|a(?:mmer|nd)|eart)|paperclip|full_moon|(?:b(?:lack_ni|athtu|om)|her)b|(?:long|oil)_drum|pineapple|(?:clock(?:1[0-2]?|[2-9])3|u6e8)0|p(?:o(?:int_up|ut)|r(?:ince|ay)|i(?:ck|g)|en)|e(?:nvelope|ight|u(?:ro)?|gg|ar|ye|s)|m(?:o(?:u(?:ntain|se)|nkey|on)|echanic|a(?:ilbox|g|n)|irror)?|new_moon|d(?:iamonds|olls|art)|question|k(?:iss(?:ing)?|ey)|haircut|no_good|(?:vampir|massag)e|g(?:olf(?:ing)?|u(?:inea|ard)|e(?:nie|m)|ift|rin)|h(?:a(?:ndbag|msa)|ouses|earts|ut)|postbox|toolbox|(?:pencil|t(?:rain|iger)|whale|cat|dog)2|belgium|(?:volca|kimo)no|(?:vanuat|tuval|pala|naur|maca)u|tokelau|o(?:range|ne?|m|k)?|office|dancer|ticket|dragon|pencil|zombie|w(?:o(?:mens|rm|od)|ave|in[gk]|c)|m(?:o(?:sque|use2)|e(?:rman|ns)|a(?:li|sk))|jersey|tshirt|w(?:heel|oman)|dizzy|j(?:apan|oy)|t(?:rain|iger)|whale|fairy|a(?:nge[lr]|bcd|tm)|c(?:h(?:a(?:ir|d)|ile)|a(?:ndy|mel)|urry|rab|o(?:rn|ol|w2)|[dn])|p(?:ager|e(?:a(?:ch|r)|ru)|i(?:g2|ll|e)|oop)|n(?:otes|ine)|t(?:onga|hree|ent|ram|[mv])|f(?:erry|r(?:ies|ee|og)|ax)|u(?:7(?:533|981|121)|5(?:5b6|408|272)|6(?:307|70[89]))|mage|e(?:yes|nd)|i(?:ra[nq]|t)|cat|dog|elf|z(?:zz|ap)|yen|j(?:ar|p)|leg|id|u[kps]|ng|o[2x]|vs|kr|[\\+\\x2D]1|x|v)(:)",
      name: "string.emoji.md"
    },
    "extension-github-mention": {
      captures: {
        1: { name: "punctuation.definition.mention.begin.md" },
        2: { name: "string.other.link.mention.md" }
      },
      match: "(?<![0-9A-Za-z_`])(@)((?:[0-9A-Za-z][0-9A-Za-z-]{0,38})(?:\\/(?:[0-9A-Za-z][0-9A-Za-z-]{0,38}))?)(?![0-9A-Za-z_`])",
      name: "string.mention.md"
    },
    "extension-github-reference": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.reference.begin.md" },
            2: { name: "string.other.link.reference.security-advisory.md" },
            3: { name: "punctuation.definition.reference.begin.md" },
            4: { name: "string.other.link.reference.issue-or-pr.md" }
          },
          match: "(?<![0-9A-Za-z_])(?:((?i:ghsa-|cve-))([A-Za-z0-9]+)|((?i:gh-|#))([0-9]+))(?![0-9A-Za-z_])",
          name: "string.reference.md"
        },
        {
          captures: {
            1: { name: "string.other.link.reference.user.md" },
            2: { name: "punctuation.definition.reference.begin.md" },
            3: { name: "string.other.link.reference.issue-or-pr.md" }
          },
          match: "(?<![^\\t\\n\\r \\(@\\[\\{])((?:[0-9A-Za-z][0-9A-Za-z-]{0,38})(?:\\/(?:(?:\\.git[0-9A-Za-z_-]|\\.(?!git)|[0-9A-Za-z_-])+))?)(#)([0-9]+)(?![0-9A-Za-z_])",
          name: "string.reference.md"
        }
      ]
    },
    "extension-math-flow": {
      begin: "(?:^|\\G)[ ]{0,3}(\\${2,})([^\\n\\r\\$]*)$",
      beginCaptures: {
        1: { name: "string.other.begin.math.flow.md" },
        2: { patterns: [{ include: "#markdown-string" }] }
      },
      contentName: "markup.raw.math.flow.md",
      end: "(\\1)(?:[\\t ]*$)",
      endCaptures: { 1: { name: "string.other.end.math.flow.md" } },
      name: "markup.code.other.md"
    },
    "extension-math-text": {
      captures: {
        1: { name: "string.other.begin.math.md" },
        2: { name: "markup.raw.math.md markup.inline.raw.math.md" },
        3: { name: "string.other.end.math.md" }
      },
      match: "(?<!\\$)(\\${2,})(?!\\$)(.+?)(?<!\\$)(\\1)(?!\\$)"
    },
    "extension-toml": {
      begin: "\\A\\+{3}$",
      beginCaptures: { 0: { name: "string.other.begin.toml" } },
      contentName: "meta.embedded.toml",
      end: "^\\+{3}$",
      endCaptures: { 0: { name: "string.other.end.toml" } },
      patterns: [{ include: "source.toml" }]
    },
    "extension-yaml": {
      begin: "\\A-{3}$",
      beginCaptures: { 0: { name: "string.other.begin.yaml" } },
      contentName: "meta.embedded.yaml",
      end: "^-{3}$",
      endCaptures: { 0: { name: "string.other.end.yaml" } },
      patterns: [{ include: "source.yaml" }]
    },
    "markdown-frontmatter": {
      patterns: [{ include: "#extension-toml" }, { include: "#extension-yaml" }]
    },
    "markdown-sections": {
      patterns: [
        { include: "#commonmark-block-quote" },
        { include: "#commonmark-code-fenced" },
        { include: "#commonmark-code-indented" },
        { include: "#extension-gfm-footnote-definition" },
        { include: "#commonmark-definition" },
        { include: "#commonmark-heading-atx" },
        { include: "#commonmark-thematic-break" },
        { include: "#commonmark-heading-setext" },
        { include: "#commonmark-html-flow" },
        { include: "#commonmark-list-item" },
        { include: "#extension-directive-leaf" },
        { include: "#extension-directive-container" },
        { include: "#extension-gfm-table" },
        { include: "#extension-math-flow" },
        { include: "#commonmark-paragraph" }
      ]
    },
    "markdown-string": {
      patterns: [
        { include: "#commonmark-character-escape" },
        { include: "#commonmark-character-reference" }
      ]
    },
    "markdown-text": {
      patterns: [
        { include: "#commonmark-attention" },
        { include: "#commonmark-autolink" },
        { include: "#commonmark-character-escape" },
        { include: "#commonmark-character-reference" },
        { include: "#commonmark-code-text" },
        { include: "#commonmark-hard-break-trailing" },
        { include: "#commonmark-hard-break-escape" },
        { include: "#commonmark-html-text" },
        { include: "#commonmark-label-end" },
        { include: "#extension-gfm-footnote-call" },
        { include: "#commonmark-label-start" },
        { include: "#extension-directive-text" },
        { include: "#extension-gfm-autolink-literal" },
        { include: "#extension-gfm-strikethrough" },
        { include: "#extension-github-gemoji" },
        { include: "#extension-github-mention" },
        { include: "#extension-github-reference" },
        { include: "#extension-math-text" }
      ]
    },
    "whatwg-html": {
      patterns: [
        { include: "#whatwg-html-data-character-reference" },
        { include: "#whatwg-html-data-comment" },
        { include: "#whatwg-html-data-comment-bogus" },
        { include: "#whatwg-html-rawtext-tag" },
        { include: "#whatwg-html-rawtext-tag-style" },
        { include: "#whatwg-html-rcdata-tag" },
        { include: "#whatwg-html-script-data-tag" },
        { include: "#whatwg-html-data-tag" }
      ]
    },
    "whatwg-html-attribute": {
      patterns: [
        { include: "#whatwg-html-attribute-event-handler" },
        { include: "#whatwg-html-attribute-style" },
        { include: "#whatwg-html-attribute-unknown" }
      ]
    },
    "whatwg-html-attribute-event-handler": {
      captures: {
        1: { name: "entity.other.attribute-name.html.md" },
        2: { name: "punctuation.separator.key-value.html.md" },
        3: { name: "string.other.begin.html.md" },
        4: {
          name: "string.quoted.double.html.md",
          patterns: [
            { include: "#whatwg-html-data-character-reference" },
            { include: "source.js" }
          ]
        },
        5: { name: "string.other.end.html.md" },
        6: { name: "string.other.begin.html.md" },
        7: {
          name: "string.quoted.single.html.md",
          patterns: [
            { include: "#whatwg-html-data-character-reference" },
            { include: "source.js" }
          ]
        },
        8: { name: "string.other.end.html.md" },
        9: {
          name: "string.unquoted.html.md",
          patterns: [
            { include: "#whatwg-html-data-character-reference" },
            { include: "source.js" }
          ]
        }
      },
      match: `((?i:on[a-z]+))(?:[\\t\\n\\f\\r ]*(=)[\\t\\n\\f\\r ]*(?:(")([^"]*)(")|(')([^']*)(')|([^\\t\\n\\f\\r >]+)))`
    },
    "whatwg-html-attribute-style": {
      captures: {
        1: { name: "entity.other.attribute-name.html.md" },
        2: { name: "punctuation.separator.key-value.html.md" },
        3: { name: "string.other.begin.html.md" },
        4: {
          name: "string.quoted.double.html.md",
          patterns: [
            { include: "#whatwg-html-data-character-reference" },
            { include: "source.css#rule-list-innards" }
          ]
        },
        5: { name: "string.other.end.html.md" },
        6: { name: "string.other.begin.html.md" },
        7: {
          name: "string.quoted.single.html.md",
          patterns: [
            { include: "#whatwg-html-data-character-reference" },
            { include: "source.css#rule-list-innards" }
          ]
        },
        8: { name: "string.other.end.html.md" },
        9: {
          name: "string.unquoted.html.md",
          patterns: [
            { include: "#whatwg-html-data-character-reference" },
            { include: "source.css#rule-list-innards" }
          ]
        }
      },
      match: `((?i:style))(?:[\\t\\n\\f\\r ]*(=)[\\t\\n\\f\\r ]*(?:(")([^"]*)(")|(')([^']*)(')|([^\\t\\n\\f\\r >]+)))`
    },
    "whatwg-html-attribute-unknown": {
      captures: {
        1: { name: "entity.other.attribute-name.html.md" },
        2: { name: "punctuation.separator.key-value.html.md" },
        3: { name: "string.other.begin.html.md" },
        4: {
          name: "string.quoted.double.html.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        },
        5: { name: "string.other.end.html.md" },
        6: { name: "string.other.begin.html.md" },
        7: {
          name: "string.quoted.single.html.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        },
        8: { name: "string.other.end.html.md" },
        9: {
          name: "string.unquoted.html.md",
          patterns: [{ include: "#whatwg-html-data-character-reference" }]
        }
      },
      match: `((?:=(?:[^\\t\\n\\f\\r />=])*|(?:[^\\t\\n\\f\\r />=])+))(?:[\\t\\n\\f\\r ]*(=)[\\t\\n\\f\\r ]*(?:(")([^"]*)(")|(')([^']*)(')|([^\\t\\n\\f\\r >]+)))?`
    },
    "whatwg-html-data-character-reference": {
      patterns: [
        { include: "#whatwg-html-data-character-reference-named-terminated" },
        { include: "#whatwg-html-data-character-reference-named-unterminated" },
        { include: "#whatwg-html-data-character-reference-numeric-hexadecimal" },
        { include: "#whatwg-html-data-character-reference-numeric-decimal" }
      ]
    },
    "whatwg-html-data-character-reference-named-terminated": {
      captures: {
        1: { name: "punctuation.definition.character-reference.begin.html" },
        2: { name: "keyword.control.character-reference.html" },
        3: { name: "punctuation.definition.character-reference.end.html" }
      },
      match: "(&)((?:C(?:(?:o(?:unterClockwiseCo)?|lockwiseCo)ntourIntegra|cedi)|(?:(?:Not(?:S(?:quareSu(?:per|b)set|u(?:cceeds|(?:per|b)set))|Precedes|Greater|Tilde|Less)|Not(?:Righ|Lef)tTriangle|(?:Not(?:(?:Succeed|Precede|Les)s|Greater)|(?:Precede|Succeed)s|Less)Slant|SquareSu(?:per|b)set|(?:Not(?:Greater|Tilde)|Tilde|Less)Full|RightTriangle|LeftTriangle|Greater(?:Slant|Full)|Precedes|Succeeds|Superset|NotHump|Subset|Tilde|Hump)Equ|int(?:er)?c|DotEqu)a|DoubleContourIntegra|(?:n(?:short)?parall|shortparall|p(?:arall|rur))e|(?:rightarrowta|l(?:eftarrowta|ced|ata|Ata)|sced|rata|perm|rced|rAta|ced)i|Proportiona|smepars|e(?:qvpars|pars|xc|um)|Integra|suphso|rarr[pt]|n(?:pars|tg)|l(?:arr[pt]|cei)|Rarrt|(?:hybu|fora)l|ForAl|[GKLNR-Tcknt]cedi|rcei|iexc|gime|fras|[uy]um|oso|dso|ium|Ium)l|D(?:o(?:uble(?:(?:L(?:ong(?:Left)?R|eftR)ight|L(?:ongL)?eft|UpDown|Right|Up)Arrow|Do(?:wnArrow|t))|wn(?:ArrowUpA|TeeA|a)rrow)|iacriticalDot|strok|ashv|cy)|(?:(?:(?:N(?:(?:otN)?estedGreater|ot(?:Greater|Less))|Less(?:Equal)?)Great|GreaterGreat|l[lr]corn|mark|east)e|Not(?:Double)?VerticalBa|(?:Not(?:Righ|Lef)tTriangleB|(?:(?:Righ|Lef)tDown|Right(?:Up)?|Left(?:Up)?)VectorB|RightTriangleB|Left(?:Triangle|Arrow)B|RightArrowB|V(?:er(?:ticalB|b)|b)|UpArrowB|l(?:ur(?:ds|u)h|dr(?:us|d)h|trP|owb|H)|profal|r(?:ulu|dld)h|b(?:igst|rvb)|(?:wed|ve[er])b|s(?:wn|es)w|n(?:wne|ese|sp|hp)|gtlP|d(?:oll|uh|H)|(?:hor|ov)b|u(?:dh|H)|r(?:lh|H)|ohb|hb|St)a|D(?:o(?:wn(?:(?:Left(?:Right|Tee)|RightTee)Vecto|(?:(?:Righ|Lef)tVector|Arrow)Ba)|ubleVerticalBa)|a(?:gge|r)|sc|f)|(?:(?:(?:Righ|Lef)tDown|(?:Righ|Lef)tUp)Tee|(?:Righ|Lef)tUpDown)Vecto|VerticalSeparato|(?:Left(?:Right|Tee)|RightTee)Vecto|less(?:eqq?)?gt|e(?:qslantgt|sc)|(?:RightF|LeftF|[lr]f)loo|u(?:[lr]corne|ar)|timesba|(?:plusa|cirs|apa)ci|U(?:arroci|f)|(?:dzigr|s(?:u(?:pl|br)|imr|[lr])|zigr|angz|nvH|l(?:tl|B)|r[Br])ar|UnderBa|(?:plus|harr|top|mid|of)ci|O(?:verBa|sc|f)|dd?agge|s(?:olba|sc)|g(?:t(?:rar|ci)|sc|f)|c(?:opys|u(?:po|ep)|sc|f)|(?:n(?:(?:v[lr]|w|r)A|l[Aa]|h[Aa]|eA)|x[hlr][Aa]|u(?:ua|da|A)|s[ew]A|rla|o[lr]a|rba|rAa|l[Ablr]a|h(?:oa|A)|era|d(?:ua|A)|cra|vA)r|o(?:lci|sc|ro|pa)|ropa|roar|l(?:o(?:pa|ar)|sc|Ar)|i(?:ma|s)c|ltci|dd?ar|a(?:ma|s)c|R(?:Bar|sc|f)|I(?:mac|f)|(?:u(?:ma|s)|oma|ema|Oma|Ema|[wyz]s|qs|ks|fs|Zs|Ys|Xs|Ws|Vs|Us|Ss|Qs|Ns|Ms|Ks|Is|Gs|Fs|Cs|Bs)c|Umac|x(?:sc|f)|v(?:sc|f)|rsc|n(?:ld|f)|m(?:sc|ld|ac|f)|rAr|h(?:sc|f)|b(?:sc|f)|psc|P(?:sc|f)|L(?:sc|ar|f)|jsc|J(?:sc|f)|E(?:sc|f)|[HT]sc|[yz]f|wf|tf|qf|pf|kf|jf|Zf|Yf|Xf|Wf|Vf|Tf|Sf|Qf|Nf|Mf|Kf|Hf|Gf|Ff|Cf|Bf)r|(?:Diacritical(?:Double)?A|[EINOSYZaisz]a)cute|(?:(?:N(?:egative(?:VeryThin|Thi(?:ck|n))|onBreaking)|NegativeMedium|ZeroWidth|VeryThin|Medium|Thi(?:ck|n))Spac|Filled(?:Very)?SmallSquar|Empty(?:Very)?SmallSquar|(?:N(?:ot(?:Succeeds|Greater|Tilde|Less)T|t)|DiacriticalT|VerticalT|PrecedesT|SucceedsT|NotEqualT|GreaterT|TildeT|EqualT|LessT|at|Ut|It)ild|(?:(?:DiacriticalG|[EIOUaiu]g)ra|(?:u|U)?bre|(?:o|e)?gra)v|(?:doublebar|curly|big|x)wedg|H(?:orizontalLin|ilbertSpac)|Double(?:Righ|Lef)tTe|(?:(?:measured|uw)ang|exponentia|dwang|ssmi|fema)l|(?:Poincarepla|reali|pho|oli)n|(?:black)?lozeng|(?:VerticalL|(?:prof|imag)l)in|SmallCircl|(?:black|dot)squar|rmoustach|l(?:moustach|angl)|(?:b(?:ack)?pr|(?:tri|xo)t|[qt]pr)im|[Tt]herefor|(?:DownB|[Gag]b)rev|(?:infint|nv[lr]tr)i|b(?:arwedg|owti)|an(?:dslop|gl)|(?:cu(?:rly)?v|rthr|lthr|b(?:ig|ar)v|xv)e|n(?:s(?:qsu[bp]|ccu)|prcu)|orslop|NewLin|maltes|Becaus|rangl|incar|(?:otil|Otil|t(?:ra|il))d|[inu]tild|s(?:mil|imn)|(?:sc|pr)cu|Wedg|Prim|Brev)e|(?:CloseCurly(?:Double)?Quo|OpenCurly(?:Double)?Quo|[ry]?acu)te|(?:Reverse(?:Up)?|Up)Equilibrium|C(?:apitalDifferentialD|(?:oproduc|(?:ircleD|enterD|d)o)t|on(?:grue|i)nt|conint|upCap|o(?:lone|pf)|OPY|hi)|(?:(?:(?:left)?rightsquig|(?:longleftr|twoheadr|nleftr|nLeftr|longr|hookr|nR|Rr)ight|(?:twohead|hook)left|longleft|updown|Updown|nright|Right|nleft|nLeft|down|up|Up)a|L(?:(?:ong(?:left)?righ|(?:ong)?lef)ta|eft(?:(?:right)?a|RightA|TeeA))|RightTeeA|LongLeftA|UpTeeA)rrow|(?:(?:RightArrow|Short|Upper|Lower)Left|(?:L(?:eftArrow|o(?:wer|ng))|LongLeft|Short|Upper)Right|ShortUp)Arrow|(?:b(?:lacktriangle(?:righ|lef)|ulle|no)|RightDoubleBracke|RightAngleBracke|Left(?:Doub|Ang)leBracke|(?:vartriangle|downharpoon|c(?:ircl|urv)earrow|upharpoon|looparrow)righ|(?:vartriangle|downharpoon|c(?:ircl|urv)earrow|upharpoon|looparrow|mapsto)lef|(?:UnderBrack|OverBrack|emptys|targ|Sups)e|diamondsui|c(?:ircledas|lubsui|are)|(?:spade|heart)sui|(?:(?:c(?:enter|t)|lmi|ino)d|(?:Triple|mD)D|n(?:otin|e)d|(?:ncong|doteq|su[bp]e|e[gl]s)d|l(?:ess|t)d|isind|c(?:ong|up|ap)?d|b(?:igod|N)|t(?:(?:ri)?d|opb)|s(?:ub|im)d|midd|g(?:tr?)?d|Lmid|DotD|(?:xo|ut|z)d|e(?:s?d|rD|fD|DD)|dtd|Zd|Id|Gd|Ed)o|realpar|i(?:magpar|iin)|S(?:uchTha|qr)|su[bp]mul|(?:(?:lt|i)que|gtque|(?:mid|low)a|e(?:que|xi))s|Produc|s(?:updo|e[cx])|r(?:parg|ec)|lparl|vangr|hamil|(?:homt|[lr]fis|ufis|dfis)h|phmma|t(?:wix|in)|quo|o(?:do|as)|fla|eDo)t|(?:(?:Square)?Intersecti|(?:straight|back|var)epsil|SquareUni|expectati|upsil|epsil|Upsil|eq?col|Epsil|(?:omic|Omic|rca|lca|eca|Sca|[NRTt]ca|Lca|Eca|[Zdz]ca|Dca)r|scar|ncar|herc|ccar|Ccar|iog|Iog)on|Not(?:S(?:quareSu(?:per|b)set|u(?:cceeds|(?:per|b)set))|Precedes|Greater|Tilde|Less)?|(?:(?:(?:Not(?:Reverse)?|Reverse)E|comp|E)leme|NotCongrue|(?:n[gl]|l)eqsla|geqsla|q(?:uat)?i|perc|iiii|coni|cwi|awi|oi)nt|(?:(?:rightleftharpo|leftrightharpo|quaterni)on|(?:(?:N(?:ot(?:NestedLess|Greater|Less)|estedLess)L|(?:eqslant|gtr(?:eqq?)?)l|LessL)e|Greater(?:Equal)?Le|cro)s|(?:rightright|leftleft|upup)arrow|rightleftarrow|(?:(?:(?:righ|lef)tthree|divideon|b(?:igo|ox)|[lr]o)t|InvisibleT)ime|downdownarrow|(?:(?:smallset|tri|dot|box)m|PlusM)inu|(?:RoundImpli|complex|Impli|Otim)e|C(?:ircle(?:Time|Minu|Plu)|ayley|ros)|(?:rationa|mode)l|NotExist|(?:(?:UnionP|MinusP|(?:b(?:ig[ou]|ox)|tri|s(?:u[bp]|im)|dot|xu|mn)p)l|(?:xo|u)pl|o(?:min|pl)|ropl|lopl|epl)u|otimesa|integer|e(?:linter|qual)|setminu|rarrbf|larrb?f|olcros|rarrf|mstpo|lesge|gesle|Exist|[lr]time|strn|napo|fltn|ccap|apo)s|(?:b(?:(?:lack|ig)triangledow|etwee)|(?:righ|lef)tharpoondow|(?:triangle|mapsto)dow|(?:nv|i)infi|ssetm|plusm|lagra|d(?:[lr]cor|isi)|c(?:ompf|aro)|s?frow|(?:hyph|curr)e|kgree|thor|ogo|ye)n|Not(?:Righ|Lef)tTriangle|(?:Up(?:Arrow)?|Short)DownArrow|(?:(?:n(?:triangle(?:righ|lef)t|succ|prec)|(?:trianglerigh|trianglelef|sqsu[bp]se|ques)t|backsim)e|lvertneq|gvertneq|(?:suc|pre)cneq|a(?:pprox|symp)e|(?:succ|prec|vee)e|circe)q|(?:UnderParenthes|OverParenthes|xn)is|(?:(?:Righ|Lef)tDown|Right(?:Up)?|Left(?:Up)?)Vector|D(?:o(?:wn(?:RightVector|LeftVector|Arrow|Tee)|t)|el|D)|l(?:eftrightarrows|br(?:k(?:sl[du]|e)|ac[ek])|tri[ef]|s(?:im[eg]|qb|h)|hard|a(?:tes|ngd|p)|o[pz]f|rm|gE|fr|eg|cy)|(?:NotHumpDownHum|(?:righ|lef)tharpoonu|big(?:(?:triangle|sqc)u|c[au])|HumpDownHum|m(?:apstou|lc)|(?:capbr|xsq)cu|smash|rarr[al]|(?:weie|sha)r|larrl|velli|(?:thin|punc)s|h(?:elli|airs)|(?:u[lr]c|vp)ro|d[lr]cro|c(?:upc[au]|apc[au])|thka|scna|prn?a|oper|n(?:ums|va|cu|bs)|ens|xc[au]|Ma)p|l(?:eftrightarrow|e(?:ftarrow|s(?:dot)?)?|moust|a(?:rrb?|te?|ng)|t(?:ri)?|sim|par|oz|l|g)|n(?:triangle(?:righ|lef)t|succ|prec)|SquareSu(?:per|b)set|(?:I(?:nvisibleComm|ot)|(?:varthe|iio)t|varkapp|(?:vars|S)igm|(?:diga|mco)mm|Cedill|lambd|Lambd|delt|Thet|omeg|Omeg|Kapp|Delt|nabl|zet|to[es]|rdc|ldc|iot|Zet|Bet|Et)a|b(?:lacktriangle|arwed|u(?:mpe?|ll)|sol|o(?:x[HVhv]|t)|brk|ne)|(?:trianglerigh|trianglelef|sqsu[bp]se|ques)t|RightT(?:riangl|e)e|(?:(?:varsu[bp]setn|su(?:psetn?|bsetn?))eq|nsu[bp]seteq|colone|(?:wedg|sim)e|nsime|lneq|gneq)q|DifferentialD|(?:(?:fall|ris)ingdots|(?:suc|pre)ccurly|ddots)eq|A(?:pplyFunction|ssign|(?:tild|grav|brev)e|acute|o(?:gon|pf)|lpha|(?:mac|sc|f)r|c(?:irc|y)|ring|Elig|uml|nd|MP)|(?:varsu[bp]setn|su(?:psetn?|bsetn?))eq|L(?:eft(?:T(?:riangl|e)e|Arrow)|l)|G(?:reaterEqual|amma)|E(?:xponentialE|quilibrium|sim|cy|TH|NG)|(?:(?:RightCeil|LeftCeil|varnoth|ar|Ur)in|(?:b(?:ack)?co|uri)n|vzigza|roan|loan|ffli|amal|sun|rin|n(?:tl|an)|Ran|Lan)g|(?:thick|succn?|precn?|less|g(?:tr|n)|ln|n)approx|(?:s(?:traightph|em)|(?:rtril|xu|u[lr]|xd|v[lr])tr|varph|l[lr]tr|b(?:sem|eps)|Ph)i|(?:circledd|osl|n(?:v[Dd]|V[Dd]|d)|hsl|V(?:vd|D)|Osl|v[Dd]|md)ash|(?:(?:RuleDelay|imp|cuw)e|(?:n(?:s(?:hort)?)?|short|rn)mi|D(?:Dotrah|iamon)|(?:i(?:nt)?pr|peri)o|odsol|llhar|c(?:opro|irmi)|(?:capa|anda|pou)n|Barwe|napi|api)d|(?:cu(?:rlyeq(?:suc|pre)|es)|telre|[ou]dbla|Udbla|Odbla|radi|lesc|gesc|dbla)c|(?:circled|big|eq|[is]|c|x|a|S|[hw]|W|H|G|E|C)circ|rightarrow|R(?:ightArrow|arr|e)|Pr(?:oportion)?|(?:longmapst|varpropt|p(?:lustw|ropt)|varrh|numer|(?:rsa|lsa|sb)qu|m(?:icr|h)|[lr]aqu|bdqu|eur)o|UnderBrace|ImaginaryI|B(?:ernoullis|a(?:ckslash|rv)|umpeq|cy)|(?:(?:Laplace|Mellin|zee)tr|Fo(?:uriertr|p)|(?:profsu|ssta)r|ordero|origo|[ps]op|nop|mop|i(?:op|mo)|h(?:op|al)|f(?:op|no)|dop|bop|Rop|Pop|Nop|Lop|Iop|Hop|Dop|[GJKMOQSTV-Zgjkoqvwyz]op|Bop)f|nsu[bp]seteq|t(?:ri(?:angleq|e)|imesd|he(?:tav|re4)|au)|O(?:verBrace|r)|(?:(?:pitchfo|checkma|t(?:opfo|b)|rob|rbb|l[bo]b)r|intlarh|b(?:brktbr|l(?:oc|an))|perten|NoBrea|rarrh|s[ew]arh|n[ew]arh|l(?:arrh|hbl)|uhbl|Hace)k|(?:NotCupC|(?:mu(?:lti)?|x)m|cupbrc)ap|t(?:riangle|imes|heta|opf?)|Precedes|Succeeds|Superset|NotEqual|(?:n(?:atural|exist|les)|s(?:qc[au]p|mte)|prime)s|c(?:ir(?:cled[RS]|[Ee])|u(?:rarrm|larrp|darr[lr]|ps)|o(?:mmat|pf)|aps|hi)|b(?:sol(?:hsu)?b|ump(?:eq|E)|ox(?:box|[Vv][HLRhlr]|[Hh][DUdu]|[DUdu][LRlr])|e(?:rnou|t[ah])|lk(?:34|1[24])|cy)|(?:l(?:esdot|squ|dqu)o|rsquo|rdquo|ngt)r|a(?:n(?:g(?:msda[a-h]|st|e)|d[dv])|st|p[Ee]|mp|fr|c[Edy])|(?:g(?:esdoto|E)|[lr]haru)l|(?:angrtvb|lrhar|nis)d|(?:(?:th(?:ic)?k|succn?|p(?:r(?:ecn?|n)?|lus)|rarr|l(?:ess|arr)|su[bp]|par|scn|g(?:tr|n)|ne|sc|n[glv]|ln|eq?)si|thetasy|ccupss|alefsy|botto)m|trpezium|(?:hks[ew]|dr?bk|bk)arow|(?:(?:[lr]a|d|c)empty|b(?:nequi|empty)|plank|nequi|odi)v|(?:(?:sc|rp|n)pol|point|fpart)int|(?:c(?:irf|wco)|awco)nint|PartialD|n(?:s(?:u[bp](?:set)?|c)|rarr|ot(?:ni|in)?|warr|e(?:arr)?|a(?:tur|p)|vlt|p(?:re?|ar)|um?|l[et]|ge|i)|n(?:atural|exist|les)|d(?:i(?:am(?:ond)?|v(?:ide)?)|tri|ash|ot|d)|backsim|l(?:esdot|squ|dqu)o|g(?:esdoto|E)|U(?:p(?:Arrow|si)|nion|arr)|angrtvb|p(?:l(?:anckh|us(?:d[ou]|[be]))|ar(?:sl|t)|r(?:od|nE|E)|erp|iv|m)|n(?:ot(?:niv[a-c]|in(?:v[a-c]|E))|rarr[cw]|s(?:u[bp][Ee]|c[er])|part|v(?:le|g[et])|g(?:es|E)|c(?:ap|y)|apE|lE|iv|Ll|Gg)|m(?:inus(?:du|b)|ale|cy|p)|rbr(?:k(?:sl[du]|e)|ac[ek])|(?:suphsu|tris|rcu|lcu)b|supdsub|(?:s[ew]a|n[ew]a)rrow|(?:b(?:ecaus|sim)|n(?:[lr]tri|bump)|csu[bp])e|equivDD|u(?:rcorn|lcorn|psi)|timesb|s(?:u(?:p(?:set)?|b(?:set)?)|q(?:su[bp]|u)|i(?:gma|m)|olb?|dot|mt|fr|ce?)|p(?:l(?:anck|us)|r(?:op|ec?)?|ara?|i)|o(?:times|r(?:d(?:er)?)?)|m(?:i(?:nusd?|d)|a(?:p(?:sto)?|lt)|u)|rmoust|g(?:e(?:s(?:dot|l)?|q)?|sim|n(?:ap|e)|t|l|g)|(?:spade|heart)s|c(?:u(?:rarr|larr|p)|o(?:m(?:ma|p)|lon|py|ng)|lubs|heck|cups|irc?|ent|ap)|colone|a(?:p(?:prox)?|n(?:g(?:msd|rt)?|d)|symp|f|c)|S(?:quare|u[bp]|c)|Subset|b(?:ecaus|sim)|vsu[bp]n[Ee]|s(?:u(?:psu[bp]|b(?:su[bp]|n[Ee]|E)|pn[Ee]|p[1-3E]|m)|q(?:u(?:ar[ef]|f)|su[bp]e)|igma[fv]|etmn|dot[be]|par|mid|hc?y|c[Ey])|f(?:rac(?:78|5[68]|45|3[458]|2[35]|1[2-68])|fr)|e(?:m(?:sp1[34]|ptyv)|psiv|c(?:irc|y)|t[ah]|ng|ll|fr|e)|(?:kappa|isins|vBar|fork|rho|phi|n[GL]t)v|divonx|V(?:dashl|ee)|gammad|G(?:ammad|cy|[Tgt])|[Ldhlt]strok|[HT]strok|(?:c(?:ylct|hc)|(?:s(?:oft|hch)|hard|S(?:OFT|HCH)|jser|J(?:ser|uk)|HARD|tsh|TSH|juk|iuk|I(?:uk|[EO])|zh|yi|nj|lj|k[hj]|gj|dj|ZH|Y[AIU]|NJ|LJ|K[HJ]|GJ|D[JSZ])c|ubrc|Ubrc|(?:yu|i[eo]|dz|v|p|f)c|TSc|SHc|CHc|Vc|Pc|Mc|Fc)y|(?:(?:wre|jm)at|dalet|a(?:ngs|le)p|imat|[lr]ds)h|[CLRUceglnou]acute|ff?llig|(?:f(?:fi|[ij])|sz|oe|ij|ae|OE|IJ)lig|r(?:a(?:tio|rr|ng)|tri|par|eal)|s[ew]arr|s(?:qc[au]p|mte)|prime|rarrb|i(?:n(?:fin|t)?|sin|t|i|c)|e(?:quiv|m(?:pty|sp)|p(?:si|ar)|cir|l|g)|kappa|isins|ncong|doteq|(?:wedg|sim)e|nsime|rsquo|rdquo|[lr]haru|V(?:dash|ert)|Tilde|lrhar|gamma|Equal|UpTee|n(?:[lr]tri|bump)|C(?:olon|up|ap)|v(?:arpi|ert)|u(?:psih|ml)|vnsu[bp]|r(?:tri[ef]|e(?:als|g)|a(?:rr[cw]|ng[de]|ce)|sh|lm|x)|rhard|sim[gl]E|i(?:sin[Ev]|mage|f[fr]|cy)|harrw|(?:n[gl]|l)eqq|g(?:sim[el]|tcc|e(?:qq|l)|nE|l[Eaj]|gg|ap)|ocirc|starf|utrif|d(?:trif|i(?:ams|e)|ashv|sc[ry]|fr|eg)|[du]har[lr]|T(?:HORN|a[bu])|(?:TRAD|[gl]vn)E|odash|[EUaeu]o(?:gon|pf)|alpha|[IJOUYgjuy]c(?:irc|y)|v(?:arr|ee)|succ|sim[gl]|harr|ln(?:ap|e)|lesg|(?:n[gl]|l)eq|ocir|star|utri|vBar|fork|su[bp]e|nsim|lneq|gneq|csu[bp]|zwn?j|yacy|x(?:opf|i)|scnE|o(?:r(?:d[fm]|v)|mid|lt|hm|gt|fr|cy|S)|scap|rsqb|ropf|ltcc|tsc[ry]|QUOT|[EOUYao]uml|rho|phi|n[GL]t|e[gl]s|ngt|I(?:nt|m)|nis|rfr|rcy|lnE|lEg|ufr|S(?:um|cy)|R(?:sh|ho)|psi|Ps?i|[NRTt]cy|L(?:sh|cy|[Tt])|kcy|Kcy|Hat|REG|[Zdz]cy|wr|lE|wp|Xi|Nu|Mu)(;)",
      name: "constant.language.character-reference.named.html"
    },
    "whatwg-html-data-character-reference-named-unterminated": {
      captures: {
        1: { name: "punctuation.definition.character-reference.begin.html" },
        2: { name: "keyword.control.character-reference.html" }
      },
      match: "(&)(frac(?:34|1[24])|(?:plusm|thor|ye)n|(?:middo|iques|sec|quo|no|g)t|c(?:urren|opy|ent)|brvbar|oslash|Oslash|(?:ccedi|Ccedi|iexc|cedi|um)l|(?:(?:divi|[NOano]til)d|[EIOUaeiou]grav)e|[EIOUYaeiouy]acute|A(?:(?:tild|grav)e|acute|circ|ring|Elig|uml|MP)|times|p(?:ound|ara)|micro|raquo|l(?:aquo|t)|THORN|acirc|[EIOUeiou]circ|acute|(?:arin|[dr]e)g|(?:sz|ae)lig|sup[1-3]|ord[fm]|macr|nbsp|(?:QUO|[GL])T|COPY|[EIOUaeiouy]uml|shy|amp|REG|eth|ETH)",
      name: "constant.language.character-reference.named.html"
    },
    "whatwg-html-data-character-reference-numeric-decimal": {
      captures: {
        1: { name: "punctuation.definition.character-reference.begin.html" },
        2: { name: "punctuation.definition.character-reference.numeric.html" },
        3: { name: "constant.numeric.integer.decimal.html" },
        4: { name: "punctuation.definition.character-reference.end.html" }
      },
      match: "(&)(#)([0-9]*)(;)?",
      name: "constant.language.character-reference.numeric.decimal.html"
    },
    "whatwg-html-data-character-reference-numeric-hexadecimal": {
      captures: {
        1: { name: "punctuation.definition.character-reference.begin.html" },
        2: { name: "punctuation.definition.character-reference.numeric.html" },
        3: {
          name: "punctuation.definition.character-reference.numeric.hexadecimal.html"
        },
        4: { name: "constant.numeric.integer.hexadecimal.html" },
        5: { name: "punctuation.definition.character-reference.end.html" }
      },
      match: "(&)(#)([Xx])([A-Fa-f0-9]*)(;)?",
      name: "constant.language.character-reference.numeric.hexadecimal.html"
    },
    "whatwg-html-data-comment": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.comment.start.html" },
            2: { name: "punctuation.definition.comment.end.html" }
          },
          match: "(<!--)(>|->)",
          name: "comment.block.html"
        },
        {
          begin: "(<!--)",
          beginCaptures: {
            1: { name: "punctuation.definition.comment.start.html" }
          },
          end: "(--!?>)",
          endCaptures: { 1: { name: "punctuation.definition.comment.end.html" } },
          name: "comment.block.html"
        }
      ]
    },
    "whatwg-html-data-comment-bogus": {
      patterns: [
        {
          begin: "(<!)",
          beginCaptures: {
            1: { name: "punctuation.definition.comment.start.html" }
          },
          end: "(>)",
          endCaptures: { 1: { name: "punctuation.definition.comment.end.html" } },
          name: "comment.block.html"
        },
        {
          begin: "(<\\?)",
          beginCaptures: {
            1: { name: "punctuation.definition.comment.start.html" }
          },
          end: "(>)",
          endCaptures: { 1: { name: "punctuation.definition.comment.end.html" } },
          name: "comment.block.html"
        }
      ]
    },
    "whatwg-html-data-tag": {
      patterns: [
        {
          captures: {
            1: { name: "punctuation.definition.tag.begin.html" },
            2: { name: "punctuation.definition.tag.closing.html" },
            3: { name: "entity.name.tag.html" },
            4: {
              patterns: [
                { include: "#whatwg-html-attribute" },
                { include: "#whatwg-html-self-closing-start-tag" }
              ]
            },
            5: { name: "punctuation.definition.tag.end.html" }
          },
          match: `(<)(/)?((?:[A-Za-z][^\\t\\n\\f\\r />]*))((?:(?:[\\t\\n\\f\\r ]+|(?:=(?:[^\\t\\n\\f\\r />=])*|(?:[^\\t\\n\\f\\r />=])+)(?:[\\t\\n\\f\\r ]*=[\\t\\n\\f\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\f\\r >]+))?|\\/)*))(>)`,
          name: "meta.tag.${3:/downcase}.html"
        },
        { match: "</>", name: "comment.block.html" },
        {
          begin: "(?:</)",
          beginCaptures: {
            0: { name: "punctuation.definition.comment.start.html" }
          },
          end: "(?:>)",
          endCaptures: { 0: { name: "punctuation.definition.comment.end.html" } },
          name: "comment.block.html"
        }
      ]
    },
    "whatwg-html-rawtext-tag": {
      begin: `<((?i:iframe|noembed|noframes|xmp))(?![A-Za-z])(?:(?:[\\t\\n\\f\\r ]+|(?:=(?:[^\\t\\n\\f\\r />=])*|(?:[^\\t\\n\\f\\r />=])+)(?:[\\t\\n\\f\\r ]*=[\\t\\n\\f\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\f\\r >]+))?|\\/)*)>`,
      beginCaptures: { 0: { patterns: [{ include: "#whatwg-html-data-tag" }] } },
      contentName: "markup.raw.text.html",
      end: "(?=</(?i:\\1)(?:[\\t\\n\\f\\r \\/>]|$))"
    },
    "whatwg-html-rawtext-tag-style": {
      begin: `<((?i:style))(?![A-Za-z])(?:(?:[\\t\\n\\f\\r ]+|(?:=(?:[^\\t\\n\\f\\r />=])*|(?:[^\\t\\n\\f\\r />=])+)(?:[\\t\\n\\f\\r ]*=[\\t\\n\\f\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\f\\r >]+))?|\\/)*)>`,
      beginCaptures: { 0: { patterns: [{ include: "#whatwg-html-data-tag" }] } },
      end: "(?=</(?i:\\1)(?:[\\t\\n\\f\\r \\/>]|$))",
      patterns: [{ include: "source.css" }]
    },
    "whatwg-html-rcdata-tag": {
      begin: `<((?i:textarea|title))(?![A-Za-z])(?:(?:[\\t\\n\\f\\r ]+|(?:=(?:[^\\t\\n\\f\\r />=])*|(?:[^\\t\\n\\f\\r />=])+)(?:[\\t\\n\\f\\r ]*=[\\t\\n\\f\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\f\\r >]+))?|\\/)*)>`,
      beginCaptures: { 0: { patterns: [{ include: "#whatwg-html-data-tag" }] } },
      contentName: "markup.raw.text.html",
      end: "(?=</(?i:\\1)(?:[\\t\\n\\f\\r \\/>]|$))",
      patterns: [{ include: "#whatwg-html-data-character-reference" }]
    },
    "whatwg-html-script-data-tag": {
      begin: `<((?i:script))(?![A-Za-z])(?:(?:[\\t\\n\\f\\r ]+|(?:=(?:[^\\t\\n\\f\\r />=])*|(?:[^\\t\\n\\f\\r />=])+)(?:[\\t\\n\\f\\r ]*=[\\t\\n\\f\\r ]*(?:"[^"]*"|'[^']*'|[^\\t\\n\\f\\r >]+))?|\\/)*)>`,
      beginCaptures: { 0: { patterns: [{ include: "#whatwg-html-data-tag" }] } },
      end: "(?=</(?i:\\1)(?:[\\t\\n\\f\\r \\/>]|$))",
      patterns: [{ include: "source.js" }]
    },
    "whatwg-html-self-closing-start-tag": {
      match: "\\/",
      name: "punctuation.definition.tag.self-closing.html"
    }
  },
  scopeName: "text.md"
};
var text_md_default = grammar33;

// node_modules/@wooorm/starry-night/lang/text.xml.js
var grammar34 = {
  extensions: [
    ".adml",
    ".admx",
    ".ant",
    ".axaml",
    ".axml",
    ".brd",
    ".builds",
    ".ccproj",
    ".ccxml",
    ".clixml",
    ".cproject",
    ".cscfg",
    ".csdef",
    ".csproj",
    ".ct",
    ".dae",
    ".depproj",
    ".dita",
    ".ditamap",
    ".ditaval",
    ".dll.config",
    ".dotsettings",
    ".filters",
    ".fsproj",
    ".fxml",
    ".glade",
    ".gmx",
    ".grxml",
    ".hzp",
    ".iml",
    ".ivy",
    ".jelly",
    ".jsproj",
    ".kml",
    ".launch",
    ".lvclass",
    ".lvlib",
    ".lvproj",
    ".mdpolicy",
    ".mjml",
    ".mxml",
    ".natvis",
    ".ndproj",
    ".nproj",
    ".nuspec",
    ".odd",
    ".osm",
    ".owl",
    ".pkgproj",
    ".proj",
    ".props",
    ".ps1xml",
    ".psc1",
    ".pt",
    ".qhelp",
    ".rdf",
    ".resx",
    ".rss",
    ".sch",
    ".sch",
    ".scxml",
    ".sfproj",
    ".shproj",
    ".srdf",
    ".storyboard",
    ".sublime-snippet",
    ".targets",
    ".tml",
    ".ui",
    ".urdf",
    ".ux",
    ".vbproj",
    ".vcxproj",
    ".vsixmanifest",
    ".vssettings",
    ".vstemplate",
    ".vxml",
    ".wixproj",
    ".wsdl",
    ".wsf",
    ".wxi",
    ".wxl",
    ".wxs",
    ".x3d",
    ".xacro",
    ".xaml",
    ".xib",
    ".xlf",
    ".xliff",
    ".xmi",
    ".xml",
    ".xml.dist",
    ".xmp",
    ".xpl",
    ".xproc",
    ".xproj",
    ".xsd",
    ".xsp-config",
    ".xsp.metadata",
    ".xspec",
    ".xul",
    ".zcml"
  ],
  names: [
    "collada",
    "eagle",
    "labview",
    "rss",
    "web-ontology-language",
    "wsdl",
    "xml",
    "xpages",
    "xproc",
    "xsd"
  ],
  patterns: [
    {
      begin: "(<\\?)\\s*([-_a-zA-Z0-9]+)",
      captures: {
        1: { name: "punctuation.definition.tag.xml" },
        2: { name: "entity.name.tag.xml" }
      },
      end: "(\\?>)",
      name: "meta.tag.metadata.processing.xml",
      patterns: [
        { match: " ([a-zA-Z-]+)", name: "entity.other.attribute-name.xml" },
        { include: "#doublequotedString" },
        { include: "#singlequotedString" }
      ]
    },
    {
      begin: "(<!)(DOCTYPE)\\s+([:a-zA-Z_][:a-zA-Z0-9_.-]*)",
      captures: {
        1: { name: "punctuation.definition.tag.xml" },
        2: { name: "entity.name.tag.xml" },
        3: { name: "entity.other.attribute-name.documentroot.xml" }
      },
      end: "\\s*(>)",
      name: "meta.tag.metadata.doctype.xml",
      patterns: [{ include: "#internalSubset" }]
    },
    {
      begin: "<[!%]--",
      captures: { 0: { name: "punctuation.definition.comment.xml" } },
      end: "--%?>",
      name: "comment.block.xml"
    },
    {
      begin: "(<)((?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+))(?=(\\s[^>]*)?></\\2>)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.xml" },
        3: { name: "entity.name.tag.namespace.xml" },
        4: { name: "entity.name.tag.xml" },
        5: { name: "punctuation.separator.namespace.xml" },
        6: { name: "entity.name.tag.localname.xml" }
      },
      end: "(>(<))/(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)(>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.xml" },
        2: { name: "meta.scope.between-tag-pair.xml" },
        3: { name: "entity.name.tag.namespace.xml" },
        4: { name: "entity.name.tag.xml" },
        5: { name: "punctuation.separator.namespace.xml" },
        6: { name: "entity.name.tag.localname.xml" },
        7: { name: "punctuation.definition.tag.xml" }
      },
      name: "meta.tag.no-content.xml",
      patterns: [{ include: "#tagStuff" }]
    },
    {
      begin: "(</?)(?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9:]+)",
      captures: {
        1: { name: "punctuation.definition.tag.xml" },
        2: { name: "entity.name.tag.namespace.xml" },
        3: { name: "entity.name.tag.xml" },
        4: { name: "punctuation.separator.namespace.xml" },
        5: { name: "entity.name.tag.localname.xml" }
      },
      end: "(/?>)",
      name: "meta.tag.xml",
      patterns: [{ include: "#tagStuff" }]
    },
    { include: "#entity" },
    { include: "#bare-ampersand" },
    {
      begin: "<%@",
      beginCaptures: { 0: { name: "punctuation.section.embedded.begin.xml" } },
      end: "%>",
      endCaptures: { 0: { name: "punctuation.section.embedded.end.xml" } },
      name: "source.java-props.embedded.xml",
      patterns: [
        { match: "page|include|taglib", name: "keyword.other.page-props.xml" }
      ]
    },
    {
      begin: "<%[!=]?(?!--)",
      beginCaptures: { 0: { name: "punctuation.section.embedded.begin.xml" } },
      end: "(?!--)%>",
      endCaptures: { 0: { name: "punctuation.section.embedded.end.xml" } },
      name: "source.java.embedded.xml",
      patterns: [{ include: "source.java" }]
    },
    {
      begin: "<!\\[CDATA\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } },
      end: "]]>",
      endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } },
      name: "string.unquoted.cdata.xml"
    }
  ],
  repository: {
    EntityDecl: {
      begin: "(<!)(ENTITY)\\s+(%\\s+)?([:a-zA-Z_][:a-zA-Z0-9_.-]*)(\\s+(?:SYSTEM|PUBLIC)\\s+)?",
      captures: {
        1: { name: "punctuation.definition.tag.xml" },
        2: { name: "keyword.other.entity.xml" },
        3: { name: "punctuation.definition.entity.xml" },
        4: { name: "variable.language.entity.xml" },
        5: { name: "keyword.other.entitytype.xml" }
      },
      end: "(>)",
      patterns: [
        { include: "#doublequotedString" },
        { include: "#singlequotedString" }
      ]
    },
    "bare-ampersand": { match: "&", name: "invalid.illegal.bad-ampersand.xml" },
    doublequotedString: {
      begin: '"',
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } },
      end: '"',
      endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } },
      name: "string.quoted.double.xml",
      patterns: [{ include: "#entity" }, { include: "#bare-ampersand" }]
    },
    entity: {
      captures: {
        1: { name: "punctuation.definition.constant.xml" },
        3: { name: "punctuation.definition.constant.xml" }
      },
      match: "(&)([:a-zA-Z_][:a-zA-Z0-9_.-]*|#[0-9]+|#x[0-9a-fA-F]+)(;)",
      name: "constant.character.entity.xml"
    },
    internalSubset: {
      begin: "(\\[)",
      captures: { 1: { name: "punctuation.definition.constant.xml" } },
      end: "(\\])",
      name: "meta.internalsubset.xml",
      patterns: [{ include: "#EntityDecl" }, { include: "#parameterEntity" }]
    },
    parameterEntity: {
      captures: {
        1: { name: "punctuation.definition.constant.xml" },
        3: { name: "punctuation.definition.constant.xml" }
      },
      match: "(%)([:a-zA-Z_][:a-zA-Z0-9_.-]*)(;)",
      name: "constant.character.parameter-entity.xml"
    },
    singlequotedString: {
      begin: "'",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml" } },
      end: "'",
      endCaptures: { 0: { name: "punctuation.definition.string.end.xml" } },
      name: "string.quoted.single.xml",
      patterns: [{ include: "#entity" }, { include: "#bare-ampersand" }]
    },
    tagStuff: {
      patterns: [
        {
          captures: {
            1: { name: "entity.other.attribute-name.namespace.xml" },
            2: { name: "entity.other.attribute-name.xml" },
            3: { name: "punctuation.separator.namespace.xml" },
            4: { name: "entity.other.attribute-name.localname.xml" }
          },
          match: " (?:([-_a-zA-Z0-9]+)((:)))?([-_a-zA-Z0-9]+)="
        },
        { include: "#doublequotedString" },
        { include: "#singlequotedString" }
      ]
    }
  },
  scopeName: "text.xml"
};
var text_xml_default = grammar34;

// node_modules/@wooorm/starry-night/lang/text.xml.svg.js
var grammar35 = {
  dependencies: ["text.xml"],
  extensions: [".svg"],
  injections: {
    "R:meta.attribute.d.xml.svg string": { patterns: [{ include: "#commands" }] }
  },
  names: ["svg"],
  patterns: [{ include: "#main" }],
  repository: {
    attr: {
      begin: "[A-Za-z_:][-\\w.:]*",
      beginCaptures: { 0: { patterns: [{ include: "#attrName" }] } },
      end: `(?=\\s*(?:/?>|[^\\s=]))|(?<=["'])`,
      name: "meta.attribute.${0:/downcase}.xml.svg",
      patterns: [{ include: "#attrValueCSS" }, { include: "#attrValuePlain" }]
    },
    attrName: {
      patterns: [
        {
          captures: {
            1: { name: "entity.other.attribute-name.namespace.xml.svg" },
            2: { name: "punctuation.separator.namespace.xml.svg" }
          },
          match: "(?:^|\\G)([-\\w.]+)(:)(?=[-\\w.:])"
        },
        {
          match: "[A-Za-z_:][-\\w.:]*",
          name: "entity.other.attribute-name.localname.xml.svg"
        }
      ]
    },
    attrValueCSS: {
      begin: "(?i)(?<=style)\\G\\s*(=)",
      beginCaptures: { 1: { name: "punctuation.separator.key-value.xml.svg" } },
      end: `(?=\\s*(?:[%?/]?>))|(?<=["'])([^\\s>]*)|(?:\\G|^)\\s*([^\\s"'>]+)`,
      endCaptures: {
        1: { name: "invalid.illegal.syntax.xml.svg" },
        2: {
          name: "string.unquoted.xml.svg",
          patterns: [{ include: "source.css#rule-list-innards" }]
        }
      },
      patterns: [
        { match: "(?:\\G|^)\\s+(?!/?>)" },
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.xml.svg" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.xml.svg" } },
          name: "string.quoted.double.xml.svg",
          patterns: [
            {
              captures: {
                0: {
                  patterns: [
                    { include: "#entity" },
                    { include: "source.css#rule-list-innards" }
                  ]
                }
              },
              match: '[^"]+',
              name: "source.css.style.xml.svg"
            }
          ]
        },
        {
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.xml.svg" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.xml.svg" } },
          name: "string.quoted.single.xml.svg",
          patterns: [
            {
              captures: {
                0: {
                  patterns: [
                    { include: "#entity" },
                    { include: "source.css#rule-list-innards" }
                  ]
                }
              },
              match: "[^']+",
              name: "source.css.style.xml.svg"
            }
          ]
        }
      ]
    },
    attrValuePlain: {
      begin: "\\s*(=)",
      beginCaptures: { 1: { name: "punctuation.separator.key-value.xml.svg" } },
      end: `(?=\\s*(?:[%?/]?>))|(?<=["'])([^\\s>]*)|(?:\\G|^)\\s*([^\\s"'>]+)`,
      endCaptures: {
        1: { name: "invalid.illegal.syntax.xml.svg" },
        2: { name: "string.unquoted.xml.svg" }
      },
      patterns: [
        { match: "(?:\\G|^)\\s+(?!/?>)" },
        {
          begin: '"',
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.xml.svg" }
          },
          end: '"',
          endCaptures: { 0: { name: "punctuation.definition.string.end.xml.svg" } },
          name: "string.quoted.double.xml.svg",
          patterns: [{ include: "#entity" }]
        },
        {
          begin: "'",
          beginCaptures: {
            0: { name: "punctuation.definition.string.begin.xml.svg" }
          },
          end: "'",
          endCaptures: { 0: { name: "punctuation.definition.string.end.xml.svg" } },
          name: "string.quoted.single.xml.svg",
          patterns: [{ include: "#entity" }]
        }
      ]
    },
    cdata: {
      begin: "<!\\[CDATA\\[",
      beginCaptures: { 0: { name: "punctuation.definition.string.begin.xml.svg" } },
      end: "\\]\\]>",
      endCaptures: { 0: { name: "punctuation.definition.string.end.xml.svg" } },
      name: "string.unquoted.cdata.xml.svg"
    },
    commands: {
      patterns: [
        {
          match: "(?i)[MLHVCSQTAZ]",
          name: "keyword.operator.drawing-command.xml.svg"
        },
        {
          match: "-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)",
          name: "constant.numeric.number.xml.svg"
        },
        { match: ",", name: "punctuation.separator.coordinates.comma.xml.svg" }
      ]
    },
    comment: {
      begin: "<!--",
      beginCaptures: {
        0: { name: "punctuation.definition.comment.begin.xml.svg" }
      },
      end: "-->",
      endCaptures: { 0: { name: "punctuation.definition.comment.end.xml.svg" } },
      name: "comment.block.xml.svg",
      patterns: [
        { match: "--(?!>)", name: "invalid.illegal.bad-comment.xml.svg" }
      ]
    },
    doctype: {
      begin: "(<!)(DOCTYPE)\\s+([:a-zA-Z_][-:\\w.]*)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.begin.xml.svg" },
        2: { name: "keyword.other.doctype.xml.svg" },
        3: { name: "variable.language.documentroot.xml.svg" }
      },
      end: "\\s*(>)",
      endCaptures: { 1: { name: "punctuation.definition.tag.end.xml.svg" } },
      name: "meta.tag.sgml.doctype.xml.svg",
      patterns: [{ include: "text.xml#internalSubset" }]
    },
    entity: {
      patterns: [
        { include: "text.xml#entity" },
        { include: "text.xml#bare-ampersand" }
      ]
    },
    main: {
      patterns: [
        { include: "#comment" },
        { include: "#cdata" },
        { include: "#doctype" },
        { include: "text.xml#EntityDecl" },
        { include: "text.xml#parameterEntity" },
        { include: "#entity" },
        { include: "#preprocessor" },
        { include: "#scriptTag" },
        { include: "#styleTag" },
        { include: "#tag" },
        { include: "#unescapedBracket" },
        { include: "#unmatchedTag" }
      ]
    },
    preprocessor: {
      begin: "(<\\?)\\s*",
      beginCaptures: { 1: { name: "punctuation.definition.tag.begin.xml.svg" } },
      end: "\\?>",
      endCaptures: { 0: { name: "punctuation.definition.tag.end.xml.svg" } },
      name: "meta.tag.preprocessor.xml.svg",
      patterns: [
        {
          begin: "\\G",
          end: "([-\\w]+)|(?=\\s*\\?>)",
          endCaptures: { 1: { name: "entity.name.tag.xml.svg" } }
        },
        { include: "#attr" }
      ]
    },
    scriptTag: {
      patterns: [{ include: "#scriptTagPlain" }, { include: "#scriptTagJS" }]
    },
    scriptTagJS: {
      begin: "(?i)(<)(script)(?=$|\\s|/?>)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.opening.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] }
      },
      end: "(?i)(</)(script)\\s*(>)|(/>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.closing.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] },
        3: { name: "punctuation.definition.tag.closing.end.xml.svg" },
        4: { name: "punctuation.definition.tag.self-closing.end.xml.svg" }
      },
      name: "meta.tag.script.xml.svg",
      patterns: [
        { include: "#tagAttr" },
        {
          begin: "(?<=>)",
          contentName: "source.js.embedded.xml.svg",
          end: "(?i)(?=\\s*<\/script\\s*>)",
          patterns: [{ include: "source.js" }, { include: "#entity" }]
        }
      ]
    },
    scriptTagPlain: {
      begin: `(?x)
(<)((?i)script)
(
	\\s+[^>]*?
	(?<=\\s)(?i:type)\\s*=\\s*
	(["'])?
	(?! module
	|   application/(?:x-)?(?:ecma|java)script
	|   text/
		(?: javascript(?:1.[0-5])?
		|   (?:j|ecma|live)script
		|   x-(?:ecma|java)script
		)
	)
	(?: (?<=")(?:[^">]+)"
	|   (?<=')(?:[^'>]+)'
	|   [^\\s"'>]+
	)
	(?=\\s|/?>)
)`,
      beginCaptures: {
        1: { name: "punctuation.definition.tag.opening.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] },
        3: { patterns: [{ include: "#attr" }] }
      },
      end: "(?i)(</)(script)\\s*(>)|(/>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.closing.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] },
        3: { name: "punctuation.definition.tag.closing.end.xml.svg" },
        4: { name: "punctuation.definition.tag.self-closing.end.xml.svg" }
      },
      name: "meta.tag.script.xml.svg",
      patterns: [{ include: "#tagAttr" }, { include: "#main" }]
    },
    styleTag: {
      begin: "(?i)(<)(style)(?=$|\\s|/?>)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.opening.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] }
      },
      end: "(?i)(</)(style)\\s*(>)|(/>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.closing.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] },
        3: { name: "punctuation.definition.tag.closing.end.xml.svg" },
        4: { name: "punctuation.definition.tag.self-closing.end.xml.svg" }
      },
      name: "meta.tag.style.xml.svg",
      patterns: [
        { include: "#tagAttr" },
        {
          begin: "(?<=>)",
          contentName: "source.css.embedded.xml.svg",
          end: "(?i)(?=\\s*</style\\s*>)",
          patterns: [{ include: "source.css" }, { include: "#entity" }]
        }
      ]
    },
    tag: {
      begin: "(?i)(<)([A-Za-z_:][-\\w.:]*)(?=$|\\s|/?>)",
      beginCaptures: {
        1: { name: "punctuation.definition.tag.opening.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] }
      },
      end: "(?i)(</)(\\2)(?:\\s*(>)|(?=\\s*$))|(/>)",
      endCaptures: {
        1: { name: "punctuation.definition.tag.closing.begin.xml.svg" },
        2: { patterns: [{ include: "#tagName" }] },
        3: { name: "punctuation.definition.tag.closing.end.xml.svg" },
        4: { name: "punctuation.definition.tag.self-closing.end.xml.svg" }
      },
      name: "meta.tag.${2:/downcase}.xml.svg",
      patterns: [{ include: "#tagAttr" }, { include: "#main" }]
    },
    tagAttr: {
      begin: "\\G(?!\\s*/>)",
      end: ">|(?=\\s*/>)",
      endCaptures: {
        0: { name: "punctuation.definition.tag.opening.end.xml.svg" }
      },
      patterns: [{ include: "#attr" }]
    },
    tagName: {
      patterns: [
        {
          captures: {
            1: { name: "entity.name.tag.namespace.xml.svg" },
            2: { name: "punctuation.separator.namespace.xml.svg" }
          },
          match: "(?:^|\\G)([A-Za-z_][-\\w.]*)(:)(?=[-\\w.:])"
        },
        {
          match: "[A-Za-z_:][-\\w.:]*",
          name: "entity.name.tag.localname.xml.svg"
        }
      ]
    },
    unescapedBracket: {
      match: "^\\s*(>)",
      name: "punctuation.definition.tag.closing.end.xml.svg"
    },
    unmatchedTag: {
      match: "(</)([A-Za-z_:][-\\w.:]*)\\s*(>)",
      name: "invalid.illegal.unmatched-tag.xml.svg"
    }
  },
  scopeName: "text.xml.svg"
};
var text_xml_svg_default = grammar35;

// node_modules/@wooorm/starry-night/lib/common.js
var grammars = [
  source_c_default,
  source_c_default2,
  source_c_platform_default,
  source_cs_default,
  source_css_default,
  source_css_less_default,
  source_css_scss_default,
  source_diff_default,
  source_go_default,
  source_graphql_default,
  source_ini_default,
  source_java_default,
  source_js_default,
  // @ts-expect-error: TS is wrong, `.json` does not mean JSON.
  source_json_default,
  source_kotlin_default,
  source_lua_default,
  source_makefile_default,
  source_objc_default,
  source_objc_platform_default,
  source_perl_default,
  source_python_default,
  source_r_default,
  source_ruby_default,
  source_rust_default,
  source_shell_default,
  source_sql_default,
  source_swift_default,
  source_ts_default,
  source_vbnet_default,
  source_yaml_default,
  text_html_basic_default,
  text_html_php_default,
  text_md_default,
  text_xml_default,
  text_xml_svg_default
];

// node_modules/@wooorm/starry-night/lib/index.js
var import_vscode_oniguruma = __toESM(require_main(), 1);
var import_vscode_textmate = __toESM(require_main2(), 1);

// node_modules/@wooorm/starry-night/lib/theme.js
var scopeToClassGithub = {
  "brackethighlighter.angle": "pl-ba",
  "brackethighlighter.curly": "pl-ba",
  "brackethighlighter.quote": "pl-ba",
  "brackethighlighter.round": "pl-ba",
  "brackethighlighter.square": "pl-ba",
  "brackethighlighter.tag": "pl-ba",
  "brackethighlighter.unmatched": "pl-bu",
  "carriage-return": "pl-c2",
  comment: "pl-c",
  constant: "pl-c1",
  "constant.character.escape": "pl-cce",
  "constant.other.reference.link": "pl-corl",
  entity: "pl-e",
  "entity.name": "pl-en",
  "entity.name.constant": "pl-c1",
  "entity.name.tag": "pl-ent",
  "invalid.broken": "pl-bu",
  "invalid.deprecated": "pl-bu",
  "invalid.illegal": "pl-ii",
  "invalid.unimplemented": "pl-bu",
  keyword: "pl-k",
  // Note: this is included as `symbole` by GH, which is not included in any
  // grammar.
  // Should likely be `symbol`.
  "keyword.operator.symbol": "pl-kos",
  "keyword.other.mark": "pl-kos",
  "markup.bold": "pl-mb",
  "markup.changed": "pl-mc",
  "markup.deleted": "pl-md",
  "markup.heading": "pl-mh",
  "markup.ignored": "pl-mi2",
  "markup.inserted": "pl-mi1",
  "markup.italic": "pl-mi",
  "markup.list": "pl-ml",
  "markup.quote": "pl-ent",
  "markup.raw": "pl-c1",
  "markup.untracked": "pl-mi2",
  "message.error": "pl-bu",
  "meta.diff.header": "pl-c1",
  "meta.diff.header.from-file": "pl-md",
  "meta.diff.header.to-file": "pl-mi1",
  "meta.diff.range": "pl-mdr",
  "meta.module-reference": "pl-c1",
  "meta.output": "pl-c1",
  "meta.property-name": "pl-c1",
  "meta.separator": "pl-ms",
  "punctuation.definition.changed": "pl-mc",
  "punctuation.definition.comment": "pl-c",
  "punctuation.definition.deleted": "pl-md",
  "punctuation.definition.inserted": "pl-mi1",
  "punctuation.definition.string": "pl-pds",
  "punctuation.section.embedded": "pl-pse",
  // Note: orignally this is listed as `source` on GH.
  // However, every `source*` scope matches that in `vscode-textmate`, making it
  // useless because everything inside strings again matches it, meaning strings
  // aren’t colored.
  // For now, I instead looked for `\.source'` in `lang/`, and listed them below:
  "source.coffee.embedded.source": "pl-s1",
  "source.groovy.embedded.source": "pl-s1",
  "source.jq.embedded.source": "pl-s1",
  "source.js.embedded.source": "pl-s1",
  "source.livescript.embedded.source": "pl-s1",
  "support.mnemonic.operand.source": "pl-s1",
  "source.nu.embedded.source": "pl-s1",
  "source.prisma.embedded.source": "pl-s1",
  "source.scala.embedded.source": "pl-s1",
  "stylus.embedded.source": "pl-s1",
  "source.regexp": "pl-pds",
  "source.ruby.embedded": "pl-sre",
  storage: "pl-k",
  "storage.modifier.import": "pl-smi",
  "storage.modifier.package": "pl-smi",
  "storage.type": "pl-k",
  "storage.type.java": "pl-smi",
  string: "pl-s",
  "string.comment": "pl-c",
  "string.other.link": "pl-corl",
  "string.regexp": "pl-sr",
  "string.regexp.arbitrary-repitition": "pl-sra",
  "string.regexp.character-class": "pl-pds",
  "string.unquoted.import.ada": "pl-kos",
  "sublimelinter.gutter-mark": "pl-sg",
  "sublimelinter.mark.error": "pl-bu",
  "sublimelinter.mark.warning": "pl-smw",
  support: "pl-c1",
  "support.constant": "pl-c1",
  "support.variable": "pl-c1",
  variable: "pl-v",
  "variable.language": "pl-c1",
  "variable.other": "pl-smi",
  "variable.other.constant": "pl-c1",
  "variable.parameter.function": "pl-smi"
};
var classes = [...new Set(Object.values(scopeToClassGithub))].sort();
var grandparents = ["pl-s"];
var parents = /* @__PURE__ */ new Set([
  // 'pl-s', // Ignore, it’s also a grandparent.
  "pl-pse",
  "pl-sr",
  "pl-mh"
]);
var transparent = "#FFFFFF";
var theme = {
  name: "custom",
  settings: [
    // Make sure there’s always a fore/background.
    { settings: { background: transparent, foreground: transparent } },
    // Add scopes.
    ...Object.keys(scopeToClassGithub).map(function(scope) {
      const className = scopeToClassGithub[scope];
      let field;
      let value;
      if (grandparents.includes(className)) {
        field = "fontStyle";
        value = "italic";
      } else {
        field = parents.has(className) ? "background" : "foreground";
        value = "#" + String(classes.indexOf(className)).padStart(6, "0");
      }
      return { scope: [scope], settings: { [field]: value } };
    })
  ]
};

// node_modules/@wooorm/starry-night/lib/parse.js
var FONT_STYLE_MASK = 30720;
var FOREGROUND_MASK = 16744448;
var BACKGROUND_MASK = 4278190080;
var FONT_STYLE_OFFSET = 11;
var FOREGROUND_OFFSET = 15;
var BACKGROUND_OFFSET = 24;
function parse4(value, grammar36, colors) {
  const tree = { type: "root", children: [] };
  const search2 = /\r?\n|\r/g;
  let stack = null;
  let start2 = 0;
  while (start2 < value.length) {
    const match = search2.exec(value);
    const end = match ? match.index : value.length;
    const { ruleStack, tokens } = grammar36.tokenizeLine2(
      value.slice(start2, end),
      stack
    );
    let index2 = 0;
    while (index2 < tokens.length) {
      const tokenStart = start2 + tokens[index2++];
      const metadata = tokens[index2++];
      const tokenEnd = index2 < tokens.length ? start2 + tokens[index2] : end;
      const fg = (metadata & FOREGROUND_MASK) >>> FOREGROUND_OFFSET;
      const bg = (metadata & BACKGROUND_MASK) >>> BACKGROUND_OFFSET;
      const fs = (metadata & FONT_STYLE_MASK) >>> FONT_STYLE_OFFSET;
      let scope = tree;
      scope = delveIfClassName(scope, fontStyleToClass(fs));
      scope = delveIfClassName(scope, colorToClass(colors[bg]));
      scope = delveIfClassName(scope, colorToClass(colors[fg]));
      appendText(scope, value.slice(tokenStart, tokenEnd));
    }
    stack = ruleStack;
    start2 = end;
    if (match) {
      appendText(tree, match[0]);
      start2 += match[0].length;
    }
  }
  return tree;
}
function delveIfClassName(scope, className) {
  if (!className) return scope;
  let tail = scope.children[scope.children.length - 1];
  if (!tail || tail.type !== "element" || !tail.properties || !Array.isArray(tail.properties.className) || !tail.properties.className.includes(className)) {
    tail = {
      type: "element",
      tagName: "span",
      properties: { className: [className] },
      children: []
    };
    scope.children.push(tail);
  }
  return tail;
}
function appendText(scope, value) {
  let tail = scope.children[scope.children.length - 1];
  if (!tail || tail.type !== "text") {
    tail = { type: "text", value: "" };
    scope.children.push(tail);
  }
  tail.value += value;
}
function fontStyleToClass(fontStyle) {
  return fontStyle ? grandparents[0] : void 0;
}
function colorToClass(color3) {
  if (color3 === transparent) return void 0;
  return classes[Number.parseInt(color3.slice(1), 10)];
}

// node_modules/@wooorm/starry-night/lib/get-oniguruma.default.js
async function getOniguruma(options) {
  const url = options && options.getOnigurumaUrlFetch ? await options.getOnigurumaUrlFetch() : new URL("https://esm.sh/vscode-oniguruma@2/release/onig.wasm");
  return fetch(url);
}

// node_modules/@wooorm/starry-night/lib/index.js
async function createStarryNight(grammars2, options) {
  const registered = /* @__PURE__ */ new Map();
  const names = /* @__PURE__ */ new Map();
  const extensions = /* @__PURE__ */ new Map();
  const extensionsWithDot = /* @__PURE__ */ new Map();
  let currentRegistry = await createRegistry(grammars2, options);
  return { flagToScope, highlight, missingScopes, register, scopes };
  function flagToScope(flag) {
    if (typeof flag !== "string") {
      throw new TypeError("Expected `string` for `flag`, got `" + flag + "`");
    }
    const normal = flag.toLowerCase().replace(/^[ \t]+/, "").replace(/\/*[ \t]*$/g, "");
    const scopeByName = names.get(normal);
    if (scopeByName) {
      return scopeByName;
    }
    const dot = normal.lastIndexOf(".");
    if (dot === -1) {
      return extensions.get("." + normal);
    }
    const extension2 = normal.slice(dot);
    return extensions.get(extension2) || extensionsWithDot.get(extension2);
  }
  function highlight(value, scope) {
    if (typeof value !== "string") {
      throw new TypeError("Expected `string` for `value`, got `" + value + "`");
    }
    if (typeof scope !== "string") {
      throw new TypeError("Expected `string` for `scope`, got `" + scope + "`");
    }
    const map4 = currentRegistry._syncRegistry._grammars;
    const grammar36 = map4.get(scope);
    if (!grammar36) {
      throw new Error("Expected grammar `" + scope + "` to be registered");
    }
    return parse4(value, grammar36, currentRegistry.getColorMap());
  }
  function missingScopes() {
    const available = /* @__PURE__ */ new Set();
    const needed = /* @__PURE__ */ new Set();
    for (const [scopeName, grammar36] of registered) {
      available.add(scopeName);
      if (grammar36.dependencies) {
        for (const dep of grammar36.dependencies) {
          needed.add(dep);
        }
      }
    }
    return [...needed].filter(function(d) {
      return !available.has(d);
    }).sort();
  }
  async function register(grammars3) {
    currentRegistry = await createRegistry(grammars3);
  }
  function scopes() {
    return [...registered.keys()].sort();
  }
  async function createRegistry(grammars3, options2) {
    for (const grammar36 of grammars3) {
      const scope = grammar36.scopeName;
      for (const d of grammar36.extensions) extensions.set(d, scope);
      if (grammar36.extensionsWithDot)
        for (const d of grammar36.extensionsWithDot)
          extensionsWithDot.set(d, scope);
      for (const d of grammar36.names) names.set(d, scope);
      registered.set(scope, grammar36);
    }
    const registry = new import_vscode_textmate.default.Registry({
      async loadGrammar(scopeName) {
        const grammar36 = (
          /** @type {IRawGrammar | undefined} */
          registered.get(scopeName)
        );
        return grammar36;
      },
      onigLib: createOniguruma(options2)
    });
    registry.setTheme(theme);
    await Promise.all(
      [...registered.keys()].map(function(d) {
        return registry.loadGrammar(d);
      })
    );
    return registry;
  }
}
async function createOniguruma(options) {
  const wasmBinary = await getOniguruma(options || void 0);
  await import_vscode_oniguruma.default.loadWASM(wasmBinary);
  return import_vscode_oniguruma.default;
}

// node_modules/hast-util-to-string/lib/index.js
function toString4(node2) {
  if ("children" in node2) {
    return all3(node2);
  }
  return "value" in node2 ? node2.value : "";
}
function one2(node2) {
  if (node2.type === "text") {
    return node2.value;
  }
  return "children" in node2 ? all3(node2) : "";
}
function all3(node2) {
  let index2 = -1;
  const result = [];
  while (++index2 < node2.children.length) {
    result[index2] = one2(node2.children[index2]);
  }
  return result.join("");
}

// node_modules/levenshtein-edit-distance/index.js
var codes = [];
var cache = [];
function levenshteinEditDistance(value, other, insensitive) {
  if (value === other) {
    return 0;
  }
  if (value.length === 0) {
    return other.length;
  }
  if (other.length === 0) {
    return value.length;
  }
  if (insensitive) {
    value = value.toLowerCase();
    other = other.toLowerCase();
  }
  let index2 = 0;
  while (index2 < value.length) {
    codes[index2] = value.charCodeAt(index2);
    cache[index2] = ++index2;
  }
  let indexOther = 0;
  let result;
  while (indexOther < other.length) {
    const code4 = other.charCodeAt(indexOther);
    let index3 = -1;
    let distance = indexOther++;
    result = distance;
    while (++index3 < value.length) {
      const distanceOther = code4 === codes[index3] ? distance : distance + 1;
      distance = cache[index3];
      result = distance > result ? distanceOther > result ? result + 1 : distanceOther : distanceOther > distance ? distance + 1 : distanceOther;
      cache[index3] = result;
    }
  }
  return result;
}

// node_modules/rehype-starry-night/lib/index.js
var listFormat = new Intl.ListFormat("en", { type: "disjunction" });
var emptyOptions7 = {};
var emptyPlainText = [];
var prefix = "language-";
var relativeThreshold = 0.33;
var max = 4;
function rehypeStarryNight(options) {
  const settings = options || emptyOptions7;
  const grammars2 = settings.grammars || grammars;
  const plainText = settings.plainText || emptyPlainText;
  const starryNightPromise = createStarryNight(grammars2, settings);
  const names = grammars2.flatMap(function(d) {
    return d.names;
  });
  return async function(tree, file) {
    const starryNight = await starryNightPromise;
    visitParents(tree, "element", function(node2, parents2) {
      if (node2.tagName !== "code") return;
      const classes2 = node2.properties.className;
      if (Array.isArray(classes2)) {
        const languageClass = (
          /** @type {string | undefined} */
          classes2.find(function(d) {
            return typeof d === "string" && d.startsWith(prefix);
          })
        );
        if (languageClass) {
          const language = languageClass.slice(prefix.length);
          const scope = starryNight.flagToScope(language);
          if (plainText.includes(language)) {
          } else if (scope) {
            const fragment = starryNight.highlight(toString4(node2), scope);
            node2.children = /** @type {Array<ElementContent>} */
            fragment.children;
          } else {
            let reason = "Unexpected unknown language `" + language + "` defined with `language-` class, expected a known name";
            const similar = propose(language, names);
            if (similar.length > 0) {
              reason += "; did you mean " + listFormat.format(
                similar.map(function(d) {
                  return "`" + d + "`";
                })
              );
            }
            file.message(reason, {
              ancestors: [...parents2, node2],
              place: node2.position,
              ruleId: "missing-language",
              source: "rehype-starry-night"
            });
          }
        }
      }
      return SKIP2;
    });
    return tree;
  };
}
function propose(value, ideas) {
  return ideas.map(function(d) {
    return score(value, d);
  }).sort(sort).filter(function(d) {
    return filter(d);
  }).map(function(d) {
    return pick(d);
  }).slice(0, max);
}
function score(value, d) {
  return [d, levenshteinEditDistance(value, d) / value.length];
}
function sort(a, b) {
  return a[1] - b[1];
}
function filter(d) {
  return d[1] < relativeThreshold;
}
function pick(d) {
  return d[0];
}

// src/components/Markdown.tsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
function Markdown(props) {
  const [Content, setContent] = (0, import_react5.useState)(null);
  const innerProps = props.innerProps ? props.innerProps : {};
  (0, import_react5.useEffect)(() => {
    const loadMdx = async () => {
      try {
        const code4 = await compile(props.content, {
          outputFormat: "function-body",
          providerImportSource: "@mdx-js/react",
          remarkPlugins: [remarkGfm],
          rehypePlugins: [rehypeStarryNight]
        });
        const element3 = await run(code4, { ...runtime, useMDXComponents: () => markdownComponents });
        setContent(() => element3.default);
      } catch (err) {
        setContent(() => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { children: err }));
      }
    };
    loadMdx();
  }, [props.content]);
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "h-full w-full py-2", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "prose dark:prose-invert", children: Content ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Content, { ...innerProps }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { children: "Loading..." }) }) });
}
function MarkdownEditor(props) {
  const [previewMode, setPreviewMode] = (0, import_react5.useState)(false);
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "mr-12", children: [
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "flex flex-row", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("button", { className: "bg-blue-500 text-white border-blue-600 rounded p-2 font-semibold", onClick: () => setPreviewMode(!previewMode), children: previewMode ? "Switch to Edit Mode" : "Switch to Preview Mode" }) }),
    previewMode ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ErrorBoundary, { message: "Error rendering MDX:", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      Markdown,
      {
        content: props.value,
        innerProps: props.innerProps
      }
    ) }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      "textarea",
      {
        className: "w-full bg-white text-black placeholder-gray-500 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400",
        value: props.value,
        placeholder: props.placeholder,
        onChange: (event) => props.onChange(event.target.value),
        rows: props.rows || 5,
        style: { minHeight: "3rem", overflowY: "auto" }
      }
    )
  ] });
}

// src/components/WikiGame.tsx
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
function WikiGame(props) {
  const { content: content3, game } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "w-full h-full", children: [
    /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "border-b-2 border-gray-300 dark:border-gray-600", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "text-lg italic text-gray-500", children: game.id }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "text-2xl my-5 font-bold", children: game.title })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex flex-row", children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex-grow", children: content3 }),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "mt-2 p-2 border-2 bg-red-100 dark:bg-zinc-800 border-gray-300 dark:border-gray-600 max-w-56", children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("img", { src: `https://infinity.unstable.life/images/Logos/${game.id.substring(0, 2)}/${game.id.substring(2, 4)}/${game.id}.png` }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "font-bold", children: "Developer" }),
        game.developer.split(";").map(
          (s) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "ml-1", children: s.trim() })
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "font-bold", children: "Publisher" }),
        game.publisher.split(";").map(
          (s) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "ml-1", children: s.trim() })
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "font-bold", children: "Series" }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "ml-1", children: game.series })
      ] }) })
    ] })
  ] });
}

// src/pages/EditGamePage.tsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
async function getGame2(gameId) {
  const profileRes = await fetch("/api/profile");
  if (profileRes.status !== 200) {
    throw new Response("Unauthorized", { status: 400 });
  }
  const res = await fetch(`/api/game/${gameId}`);
  if (res.status === 404) {
    throw new Response("Not Found", { status: 404 });
  }
  return convertKeysToCamelCase(await res.json());
}
async function loader2({ params }) {
  const game = await getGame2(params.gameId);
  return game;
}
function EditGamePage() {
  const [game, setGame] = (0, import_react6.useState)(useLoaderData());
  const [activeTab, setActiveTab] = (0, import_react6.useState)(0 /* DATA */);
  const [wikiData, setWikiData] = (0, import_react6.useState)("");
  const onSaveGame = () => {
    fetch(`/api/game/${game.id}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(convertKeysToSnakeCase(game))
    }).then(() => {
      alert("saved");
    }).catch((err) => {
      alert(`error: ${err}`);
    });
  };
  const editorInputFactory = (key) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(RowEditorInput, { value: game[key], onChange: (value) => setGame({ ...game, [key]: value }) });
  const editorTextAreaFactory = (key) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(RowEditorTextArea, { value: game[key], onChange: (value) => setGame({ ...game, [key]: value }) });
  const [playModes, setPlayModes] = (0, import_react6.useState)(game.playMode.split(";").map((s) => s.trim()));
  const onChangePlayModes = (newPlayModes) => {
    setPlayModes(newPlayModes);
  };
  const tableItems = {
    "Library": game.library,
    "Title": editorInputFactory("title"),
    "Alternate Titles": editorInputFactory("alternateTitles"),
    "Developer": editorInputFactory("developer"),
    "Publisher": editorInputFactory("publisher"),
    "Series": editorInputFactory("series"),
    "Platform": /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Link, { to: `/platform/${game.primaryPlatform}`, children: game.primaryPlatform }),
    "Date Added": game.dateAdded,
    "Play Mode": /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      MultiSelectDropdown,
      {
        options: ["Single Player", "Multiplayer", "Cooperative"],
        selected: playModes,
        onChange: onChangePlayModes,
        placeholder: "Select Play Modes..."
      }
    ),
    "Status": editorInputFactory("status"),
    "Source": editorInputFactory("source"),
    "Release Date": game.releaseDate,
    "Version": editorInputFactory("version"),
    "Original Description": editorTextAreaFactory("originalDescription"),
    "Language": editorInputFactory("language"),
    "Notes": editorTextAreaFactory("notes")
  };
  const addAppItems = game.addApps ? game.addApps.map((addApp, index2) => {
    const editorInputFactory2 = (key) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(RowEditorInput, { value: addApp[key], onChange: (value) => {
      const newGame = {
        ...game,
        addApps: [
          ...game.addApps
        ]
      };
      Object.assign(newGame.addApps[index2], { [key]: value });
      setGame(newGame);
    } });
    return {
      "Name": editorInputFactory2("name"),
      "Application Path": editorInputFactory2("applicationPath"),
      "Launch Command": editorInputFactory2("launchCommand"),
      "Auto Run Before": addApp.autoRunBefore,
      "Wait For Exit": addApp.waitForExit
    };
  }) : [];
  const gameDataItems = game.gameData ? game.gameData.map((gd, index2) => {
    const editorInputFactory2 = (key) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(RowEditorInput, { value: gd[key], onChange: (value) => {
      const newGame = {
        ...game,
        gameData: [
          ...game.gameData
        ]
      };
      Object.assign(newGame.gameData[index2], { [key]: value });
      setGame(newGame);
    } });
    return {
      "Date Added": gd.dateAdded,
      "SHA256": /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "font-mono", children: gd.sha256.toUpperCase() }),
      "Size": gd.size,
      "Parameters": editorInputFactory2("parameters"),
      "Application Path": editorInputFactory2("applicationPath"),
      "Launch Command": editorInputFactory2("launchCommand")
    };
  }) : [];
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "w-full p-5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex border-b border-gray-500 mb-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        "button",
        {
          className: `px-4 py-2 text-sm font-medium ${activeTab === 0 /* DATA */ ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-400"}`,
          onClick: () => setActiveTab(0 /* DATA */),
          children: "Data"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        "button",
        {
          className: `ml-2 px-4 py-2 text-sm font-medium ${activeTab === 1 /* WIKI */ ? "border-b-2 border-blue-500 text-blue-500" : "text-gray-400"}`,
          onClick: () => setActiveTab(1 /* WIKI */),
          children: "Wiki"
        }
      )
    ] }),
    activeTab === 1 /* WIKI */ && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_jsx_runtime11.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      WikiGame,
      {
        game,
        content: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          MarkdownEditor,
          {
            value: wikiData,
            onChange: setWikiData,
            rows: 20,
            innerProps: {
              "game": game
            }
          }
        )
      }
    ) }),
    activeTab === 0 /* DATA */ && /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "text-lg italic text-gray-500", children: game.id }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "text-2xl my-5 font-bold", children: game.title }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "text-lg font-bold", children: "Metadata" }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        StripedHTable,
        {
          items: tableItems
        }
      ) }),
      addAppItems.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "text-lg font-bold", children: "Additional Apps" }),
        addAppItems.map((items, index2) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          StripedHTable,
          {
            items
          }
        ) }, index2))
      ] }) : void 0,
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
        "button",
        {
          className: "bg-blue-500 text-white border-blue-600 rounded p-2 font-semibold mb-2",
          onClick: onSaveGame,
          children: "Save Changes"
        }
      ),
      gameDataItems.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "text-lg font-bold", children: "Game Data" }),
        gameDataItems.map((items, index2) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
          StripedHTable,
          {
            items
          }
        ) }, index2))
      ] }) : void 0
    ] })
  ] });
}

// src/pages/TagPage.tsx
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
async function getTag(gameId) {
  const res = await fetch(`/api/tag/${gameId}`);
  if (res.status === 404) {
    throw new Response("Not Found", { status: 404 });
  }
  return convertKeysToCamelCase(await res.json());
}
async function loader3({ params }) {
  const tag = await getTag(params.tagId);
  return tag;
}
function TagPage() {
  const tag = useLoaderData();
  const tableItems = {
    "Name": tag.name,
    "Description": tag.description,
    "Aliases": tag.aliases.join("; "),
    "Category": tag.category
  };
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "w-full p-5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "text-lg italic text-gray-500", children: [
      "Tag: ",
      tag.id
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "text-2xl my-5 font-bold", children: tag.name }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "text-lg font-bold", children: "Metadata" }),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      StripedHTable,
      {
        items: tableItems
      }
    ) })
  ] });
}

// src/pages/PlatformPage.tsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
async function getPlatform(gameId) {
  const res = await fetch(`/api/platform/${gameId}`);
  if (res.status === 404) {
    throw new Response("Not Found", { status: 404 });
  }
  return convertKeysToCamelCase(await res.json());
}
async function loader4({ params }) {
  const tag = await getPlatform(params.tagId);
  return tag;
}
function PlatformPage() {
  const tag = useLoaderData();
  const tableItems = {
    "Name": tag.name,
    "Description": tag.description,
    "Aliases": tag.aliases.join("; ")
  };
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "w-full p-5", children: [
    /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "text-lg italic text-gray-500", children: [
      "Platform: ",
      tag.id
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "text-2xl my-5 font-bold", children: tag.name }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "text-lg font-bold", children: "Metadata" }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "p-5", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      StripedHTable,
      {
        items: tableItems
      }
    ) })
  ] });
}

// src/index.tsx
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var router = createBrowserRouter([
  {
    path: "/",
    element: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(App, {}),
    children: [
      {
        path: "game/:gameId",
        element: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(GamePage, {}),
        loader
      },
      {
        path: "game/:gameId/edit",
        element: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(EditGamePage, {}),
        loader: loader2
      },
      {
        path: "tag/:tagId",
        element: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(TagPage, {}),
        loader: loader3
      },
      {
        path: "platform/:tagId",
        element: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(PlatformPage, {}),
        loader: loader4
      }
    ]
  }
]);
var root4 = (0, import_client.createRoot)(document.getElementById("root"));
root4.render(
  /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(RouterProvider, { router })
);
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.19.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.26.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.26.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=bundle.js.map
